#include "isa_arm32.hh"
#include <cassert>
#line 78 "isa/arm32/arm32.isa"

#include "unisim/util/arithmetic/arithmetic.hh"
#include "unisim/component/cxx/processor/arm/exception.hh"
#include "unisim/kernel/logger/logger.hh"
#include <stdint.h>

using unisim::component::cxx::processor::arm::UndefinedInstructionException;
using unisim::kernel::logger::DebugInfo;
using unisim::kernel::logger::DebugWarning;
using unisim::kernel::logger::DebugError;
using unisim::kernel::logger::EndDebugInfo;
using unisim::kernel::logger::EndDebugWarning;
using unisim::kernel::logger::EndDebugError;
using unisim::util::arithmetic::Add32;
#line 19 "isa_arm32.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace arm { namespace isa { namespace arm32 {
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32 "isa_arm32.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
noperands(
#line 77 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
0
#line 38 "isa_arm32.tcc"
),
unit(
#line 79 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
NO_UNIT_T
#line 43 "isa_arm32.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62 "isa_arm32.tcc"
>::~Operation()
{
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73 "isa_arm32.tcc"
>
#line 53 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
void
#line 77 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81 "isa_arm32.tcc"
>::profile(
#line 53 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
map<uint64_t, uint32_t> &
#line 85 "isa_arm32.tcc"
#line 53 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
prof
#line 88 "isa_arm32.tcc"
)
{
#line 53 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
	{
		uint64_t val = GetEncoding();
		map<uint64_t, uint32_t>::iterator it = prof.find(val);
		if(it != prof.end()) {
			it->second = it->second + 1;
			} else {
			prof[val] = 1;
		}
	}
#line 101 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 106 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 109 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 116 "isa_arm32.tcc"
>::initialize_dependency_write_reglist()
{
#line 97 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 121 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 126 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 129 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 136 "isa_arm32.tcc"
>::initialize_dependency_write_rdlo()
{
#line 96 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 141 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 149 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 156 "isa_arm32.tcc"
>::initialize_dependency_write_rdhi()
{
#line 95 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 161 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 169 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 176 "isa_arm32.tcc"
>::initialize_dependency_write_rd()
{
#line 94 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 181 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 186 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 189 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 196 "isa_arm32.tcc"
>::initialize_dependency_write_rn()
{
#line 93 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 201 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 209 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 216 "isa_arm32.tcc"
>::initialize_dependency_read_crn()
{
#line 91 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 221 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 226 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 229 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 236 "isa_arm32.tcc"
>::initialize_dependency_read_crm()
{
#line 90 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 241 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 246 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 249 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 256 "isa_arm32.tcc"
>::initialize_dependency_read_reglist()
{
#line 89 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 261 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 266 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 269 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 276 "isa_arm32.tcc"
>::initialize_dependency_read_rs()
{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 281 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 289 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 296 "isa_arm32.tcc"
>::initialize_dependency_read_rn()
{
#line 87 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 301 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 309 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 316 "isa_arm32.tcc"
>::initialize_dependency_read_rm()
{
#line 86 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 321 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 326 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 329 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 333 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 337 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 341 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 344 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 348 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 351 "isa_arm32.tcc"
)
{
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	{
		buffer << "Unknown instruction";
	}
#line 358 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 366 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 370 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 374 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 378 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 381 "isa_arm32.tcc"
)
{
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	{
		throw UndefinedInstructionException<CONFIG>();
	}
#line 388 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 396 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 403 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 72 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdp1_init = 0;
	}
#line 410 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 418 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 425 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdlo_init = 0;
	}
#line 432 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 440 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 447 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 64 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdhi_init = 0;
	}
#line 454 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 462 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 469 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 60 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rs_init = 0;
	}
#line 476 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 481 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 484 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 491 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 56 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rd_init = 0;
	}
#line 498 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 506 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 513 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 52 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rm_init = 0;
	}
#line 520 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 528 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 535 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 48 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rn_init = 0;
	}
#line 542 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 547 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 550 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 557 "isa_arm32.tcc"
>::initialize_condition()
{
#line 45 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
	}
#line 563 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 571 "isa_arm32.tcc"
>
class OpB_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 576 "isa_arm32.tcc"
>
{
public:
	OpB_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 662 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 666 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 669 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 673 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 676 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 714 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 718 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 721 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 729 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 732 "isa_arm32.tcc"
>
class OpB_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 737 "isa_arm32.tcc"
>
{
public:
	OpB_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 823 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 827 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 830 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 834 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 837 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 875 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 879 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 882 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 890 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 893 "isa_arm32.tcc"
>
class OpB_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 898 "isa_arm32.tcc"
>
{
public:
	OpB_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 984 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 988 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 991 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 995 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 998 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1036 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1040 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1043 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1054 "isa_arm32.tcc"
>
class OpB_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1059 "isa_arm32.tcc"
>
{
public:
	OpB_1110(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1144 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1148 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1151 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1155 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1158 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1196 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1200 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1203 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1214 "isa_arm32.tcc"
>
class OpBl_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1219 "isa_arm32.tcc"
>
{
public:
	OpBl_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1305 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1309 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1312 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1316 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1319 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1357 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1361 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1364 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1372 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1375 "isa_arm32.tcc"
>
class OpBl_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1380 "isa_arm32.tcc"
>
{
public:
	OpBl_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1466 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1470 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1473 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1477 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1480 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1518 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1522 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1525 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1533 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1536 "isa_arm32.tcc"
>
class OpBl_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1541 "isa_arm32.tcc"
>
{
public:
	OpBl_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1627 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1631 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1634 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1638 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1641 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1679 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1683 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1686 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1694 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1697 "isa_arm32.tcc"
>
class OpBl_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1702 "isa_arm32.tcc"
>
{
public:
	OpBl_1110(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1787 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1791 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1794 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1798 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1801 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1839 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1843 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1846 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1854 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1857 "isa_arm32.tcc"
>
class OpBx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1862 "isa_arm32.tcc"
>
{
public:
	OpBx(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t sbo2;
	uint32_t sbo3;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1875 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1879 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1882 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1886 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1889 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1927 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1931 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1934 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1945 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1948 "isa_arm32.tcc"
>
class OpBlx_1 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1953 "isa_arm32.tcc"
>
{
public:
	OpBlx_1(CodeType code, typename CONFIG::address_t addr);
	uint32_t h;
	int32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1963 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1967 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1970 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1974 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1977 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2015 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2019 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2022 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2033 "isa_arm32.tcc"
>
class OpBlx_2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2038 "isa_arm32.tcc"
>
{
public:
	OpBlx_2(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t sbo2;
	uint32_t sbo3;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2051 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2055 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2058 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2062 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2065 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2103 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2107 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2110 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2121 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2124 "isa_arm32.tcc"
>
class OpAnd_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2129 "isa_arm32.tcc"
>
{
public:
	OpAnd_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2142 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2146 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2149 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2153 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2156 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2194 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2198 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2201 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2215 "isa_arm32.tcc"
>
class OpAnd_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2220 "isa_arm32.tcc"
>
{
public:
	OpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2234 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2238 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2241 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2245 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2248 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2286 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2290 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2293 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2307 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2310 "isa_arm32.tcc"
>
class OpAnd_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2315 "isa_arm32.tcc"
>
{
public:
	OpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2329 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2333 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2336 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2340 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2343 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2381 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2385 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2388 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2408 "isa_arm32.tcc"
>
class OpAnds_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2413 "isa_arm32.tcc"
>
{
public:
	OpAnds_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2426 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2430 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2433 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2437 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2440 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2478 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2482 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2485 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2499 "isa_arm32.tcc"
>
class OpAnds_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2504 "isa_arm32.tcc"
>
{
public:
	OpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2518 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2522 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2525 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2529 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2532 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2570 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2574 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2577 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2591 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2594 "isa_arm32.tcc"
>
class OpAnds_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2599 "isa_arm32.tcc"
>
{
public:
	OpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2613 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2617 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2620 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2624 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2627 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2665 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2669 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2672 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2692 "isa_arm32.tcc"
>
class OpEor_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2697 "isa_arm32.tcc"
>
{
public:
	OpEor_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2710 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2714 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2717 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2721 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2724 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2762 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2766 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2769 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2783 "isa_arm32.tcc"
>
class OpEor_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2788 "isa_arm32.tcc"
>
{
public:
	OpEor_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2802 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2806 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2809 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2813 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2816 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2854 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2858 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2861 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2875 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2878 "isa_arm32.tcc"
>
class OpEor_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2883 "isa_arm32.tcc"
>
{
public:
	OpEor_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2897 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2901 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2904 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2908 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2911 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2949 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2953 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2956 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2976 "isa_arm32.tcc"
>
class OpEors_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2981 "isa_arm32.tcc"
>
{
public:
	OpEors_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2994 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2998 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3001 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3005 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3008 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3046 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3050 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3053 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3064 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3067 "isa_arm32.tcc"
>
class OpEors_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3072 "isa_arm32.tcc"
>
{
public:
	OpEors_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3086 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3090 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3093 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3097 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3100 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3138 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3142 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3145 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3162 "isa_arm32.tcc"
>
class OpEors_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3167 "isa_arm32.tcc"
>
{
public:
	OpEors_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3181 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3185 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3188 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3192 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3195 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3233 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3237 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3240 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3257 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3260 "isa_arm32.tcc"
>
class OpSub_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3265 "isa_arm32.tcc"
>
{
public:
	OpSub_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3278 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3282 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3285 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3289 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3292 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3330 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3334 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3337 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3351 "isa_arm32.tcc"
>
class OpSub_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3356 "isa_arm32.tcc"
>
{
public:
	OpSub_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3370 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3374 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3377 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3381 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3384 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3422 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3426 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3429 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3443 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3446 "isa_arm32.tcc"
>
class OpSub_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3451 "isa_arm32.tcc"
>
{
public:
	OpSub_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3465 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3469 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3472 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3476 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3479 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3517 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3521 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3524 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3541 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3544 "isa_arm32.tcc"
>
class OpSubs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3549 "isa_arm32.tcc"
>
{
public:
	OpSubs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3562 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3566 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3569 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3573 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3576 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3614 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3618 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3621 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3632 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3635 "isa_arm32.tcc"
>
class OpSubs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3640 "isa_arm32.tcc"
>
{
public:
	OpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3654 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3658 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3661 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3665 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3668 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3706 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3710 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3713 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3727 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3730 "isa_arm32.tcc"
>
class OpSubs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3735 "isa_arm32.tcc"
>
{
public:
	OpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3749 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3753 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3756 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3760 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3763 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3801 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3805 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3808 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3828 "isa_arm32.tcc"
>
class OpRsb_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3833 "isa_arm32.tcc"
>
{
public:
	OpRsb_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3846 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3850 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3853 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3857 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3860 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3898 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3902 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3905 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3919 "isa_arm32.tcc"
>
class OpRsb_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3924 "isa_arm32.tcc"
>
{
public:
	OpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3938 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3942 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3945 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3949 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3952 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3990 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3994 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3997 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4011 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4014 "isa_arm32.tcc"
>
class OpRsb_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4019 "isa_arm32.tcc"
>
{
public:
	OpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4033 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4037 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4040 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4044 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4047 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4085 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4089 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4092 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4109 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4112 "isa_arm32.tcc"
>
class OpRsbs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4117 "isa_arm32.tcc"
>
{
public:
	OpRsbs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4130 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4134 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4137 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4141 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4144 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4182 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4186 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4189 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4200 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4203 "isa_arm32.tcc"
>
class OpRsbs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4208 "isa_arm32.tcc"
>
{
public:
	OpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4222 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4226 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4229 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4233 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4236 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4274 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4278 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4281 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4295 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4298 "isa_arm32.tcc"
>
class OpRsbs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4303 "isa_arm32.tcc"
>
{
public:
	OpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4317 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4321 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4324 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4328 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4331 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4369 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4373 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4376 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4396 "isa_arm32.tcc"
>
class OpAdd_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4401 "isa_arm32.tcc"
>
{
public:
	OpAdd_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4414 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4418 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4421 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4425 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4428 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4466 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4470 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4473 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4487 "isa_arm32.tcc"
>
class OpAdd_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4492 "isa_arm32.tcc"
>
{
public:
	OpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4506 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4510 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4513 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4517 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4520 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4558 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4562 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4565 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4582 "isa_arm32.tcc"
>
class OpAdd_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4587 "isa_arm32.tcc"
>
{
public:
	OpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4601 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4605 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4608 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4612 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4615 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4653 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4657 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4660 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4677 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4680 "isa_arm32.tcc"
>
class OpAdds_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4685 "isa_arm32.tcc"
>
{
public:
	OpAdds_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4698 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4702 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4705 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4709 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4712 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4750 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4754 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4757 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4768 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4771 "isa_arm32.tcc"
>
class OpAdds_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4776 "isa_arm32.tcc"
>
{
public:
	OpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4790 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4794 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4797 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4801 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4804 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4842 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4846 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4849 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4866 "isa_arm32.tcc"
>
class OpAdds_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4871 "isa_arm32.tcc"
>
{
public:
	OpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4885 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4889 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4892 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4896 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4899 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4937 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4941 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4944 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4961 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4964 "isa_arm32.tcc"
>
class OpAdc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4969 "isa_arm32.tcc"
>
{
public:
	OpAdc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4982 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4986 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4989 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4993 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4996 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5034 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5038 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5041 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5052 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5055 "isa_arm32.tcc"
>
class OpAdc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5060 "isa_arm32.tcc"
>
{
public:
	OpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5074 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5078 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5081 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5085 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5088 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5126 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5130 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5133 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5150 "isa_arm32.tcc"
>
class OpAdc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5155 "isa_arm32.tcc"
>
{
public:
	OpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5169 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5173 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5176 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5180 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5183 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5221 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5225 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5228 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5245 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5248 "isa_arm32.tcc"
>
class OpAdcs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5253 "isa_arm32.tcc"
>
{
public:
	OpAdcs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5266 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5270 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5273 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5277 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5280 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5318 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5322 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5325 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5336 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5339 "isa_arm32.tcc"
>
class OpAdcs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5344 "isa_arm32.tcc"
>
{
public:
	OpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5358 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5362 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5365 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5369 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5372 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5410 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5414 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5417 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5431 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5434 "isa_arm32.tcc"
>
class OpAdcs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5439 "isa_arm32.tcc"
>
{
public:
	OpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5453 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5457 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5460 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5464 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5467 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5505 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5509 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5512 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5532 "isa_arm32.tcc"
>
class OpSbc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5537 "isa_arm32.tcc"
>
{
public:
	OpSbc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5550 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5554 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5557 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5561 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5564 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5602 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5606 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5609 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5620 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5623 "isa_arm32.tcc"
>
class OpSbc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5628 "isa_arm32.tcc"
>
{
public:
	OpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5642 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5646 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5649 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5653 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5656 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5694 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5698 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5701 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5718 "isa_arm32.tcc"
>
class OpSbc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5723 "isa_arm32.tcc"
>
{
public:
	OpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5737 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5741 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5744 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5748 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5751 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5789 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5793 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5796 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5813 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5816 "isa_arm32.tcc"
>
class OpSbcs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5821 "isa_arm32.tcc"
>
{
public:
	OpSbcs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5834 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5838 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5841 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5845 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5848 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5886 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5890 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5893 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5907 "isa_arm32.tcc"
>
class OpSbcs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5912 "isa_arm32.tcc"
>
{
public:
	OpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5926 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5930 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5933 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5937 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5940 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5978 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5982 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5985 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6002 "isa_arm32.tcc"
>
class OpSbcs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6007 "isa_arm32.tcc"
>
{
public:
	OpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6021 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6025 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6028 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6032 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6035 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6073 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6077 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6080 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6100 "isa_arm32.tcc"
>
class OpRsc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6105 "isa_arm32.tcc"
>
{
public:
	OpRsc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6118 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6122 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6125 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6129 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6132 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6170 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6174 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6177 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6188 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6191 "isa_arm32.tcc"
>
class OpRsc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6196 "isa_arm32.tcc"
>
{
public:
	OpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6210 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6214 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6217 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6221 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6224 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6262 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6266 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6269 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6283 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6286 "isa_arm32.tcc"
>
class OpRsc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6291 "isa_arm32.tcc"
>
{
public:
	OpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6305 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6309 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6312 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6316 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6319 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6357 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6361 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6364 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6381 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6384 "isa_arm32.tcc"
>
class OpRscs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6389 "isa_arm32.tcc"
>
{
public:
	OpRscs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6402 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6406 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6409 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6413 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6416 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6454 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6458 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6461 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6475 "isa_arm32.tcc"
>
class OpRscs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6480 "isa_arm32.tcc"
>
{
public:
	OpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6494 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6498 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6501 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6505 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6508 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6546 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6550 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6553 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6570 "isa_arm32.tcc"
>
class OpRscs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6575 "isa_arm32.tcc"
>
{
public:
	OpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6589 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6593 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6596 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6600 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6603 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6641 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6645 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6648 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6668 "isa_arm32.tcc"
>
class OpTst_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6673 "isa_arm32.tcc"
>
{
public:
	OpTst_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6686 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6690 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6693 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6697 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6700 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6738 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6742 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6745 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6756 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6759 "isa_arm32.tcc"
>
class OpTst_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6764 "isa_arm32.tcc"
>
{
public:
	OpTst_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6778 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6782 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6785 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6789 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6792 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6830 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6834 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6837 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6854 "isa_arm32.tcc"
>
class OpTst_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6859 "isa_arm32.tcc"
>
{
public:
	OpTst_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6873 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6877 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6880 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6884 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6887 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6925 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6929 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6932 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6949 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6952 "isa_arm32.tcc"
>
class OpTeq_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6957 "isa_arm32.tcc"
>
{
public:
	OpTeq_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6970 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6974 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6977 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6981 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6984 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7022 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7026 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7029 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7040 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7043 "isa_arm32.tcc"
>
class OpTeq_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7048 "isa_arm32.tcc"
>
{
public:
	OpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7062 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7066 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7069 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7073 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7076 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7114 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7118 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7121 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7135 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7138 "isa_arm32.tcc"
>
class OpTeq_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7143 "isa_arm32.tcc"
>
{
public:
	OpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7157 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7161 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7164 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7168 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7171 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7209 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7213 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7216 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7233 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7236 "isa_arm32.tcc"
>
class OpCmp_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7241 "isa_arm32.tcc"
>
{
public:
	OpCmp_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7254 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7258 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7261 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7265 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7268 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7306 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7310 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7313 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7327 "isa_arm32.tcc"
>
class OpCmp_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7332 "isa_arm32.tcc"
>
{
public:
	OpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7346 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7350 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7353 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7357 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7360 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7398 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7402 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7405 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7422 "isa_arm32.tcc"
>
class OpCmp_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7427 "isa_arm32.tcc"
>
{
public:
	OpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7441 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7445 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7448 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7452 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7455 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7493 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7497 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7500 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7520 "isa_arm32.tcc"
>
class OpCmn_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7525 "isa_arm32.tcc"
>
{
public:
	OpCmn_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7538 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7542 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7545 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7549 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7552 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7590 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7594 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7597 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7608 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7611 "isa_arm32.tcc"
>
class OpCmn_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7616 "isa_arm32.tcc"
>
{
public:
	OpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7630 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7634 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7637 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7641 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7644 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7682 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7686 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7689 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7703 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7706 "isa_arm32.tcc"
>
class OpCmn_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7711 "isa_arm32.tcc"
>
{
public:
	OpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7725 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7729 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7732 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7736 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7739 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7777 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7781 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7784 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7804 "isa_arm32.tcc"
>
class OpOrr_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7809 "isa_arm32.tcc"
>
{
public:
	OpOrr_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7822 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7826 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7829 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7833 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7836 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7874 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7878 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7881 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7892 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7895 "isa_arm32.tcc"
>
class OpOrr_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7900 "isa_arm32.tcc"
>
{
public:
	OpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7914 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7918 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7921 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7925 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7928 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7966 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7970 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7973 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7990 "isa_arm32.tcc"
>
class OpOrr_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7995 "isa_arm32.tcc"
>
{
public:
	OpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8009 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8013 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8016 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8020 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8023 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8061 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8065 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8068 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8085 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8088 "isa_arm32.tcc"
>
class OpOrrs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8093 "isa_arm32.tcc"
>
{
public:
	OpOrrs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8106 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8110 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8113 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8117 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8120 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8158 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8162 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8165 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8176 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8179 "isa_arm32.tcc"
>
class OpOrrs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8184 "isa_arm32.tcc"
>
{
public:
	OpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8198 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8202 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8205 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8209 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8212 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8250 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8254 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8257 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8271 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8274 "isa_arm32.tcc"
>
class OpOrrs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8279 "isa_arm32.tcc"
>
{
public:
	OpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8293 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8297 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8300 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8304 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8307 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8345 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8349 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8352 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8369 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8372 "isa_arm32.tcc"
>
class OpMov_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8377 "isa_arm32.tcc"
>
{
public:
	OpMov_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8390 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8394 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8397 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8401 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8404 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8442 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8446 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8449 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8457 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8460 "isa_arm32.tcc"
>
class OpMov_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8465 "isa_arm32.tcc"
>
{
public:
	OpMov_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8479 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8483 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8486 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8490 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8493 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8531 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8535 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8538 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8549 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8552 "isa_arm32.tcc"
>
class OpMov_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8557 "isa_arm32.tcc"
>
{
public:
	OpMov_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8571 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8575 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8578 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8582 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8585 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8623 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8627 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8630 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8647 "isa_arm32.tcc"
>
class OpMovs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8652 "isa_arm32.tcc"
>
{
public:
	OpMovs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8665 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8669 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8672 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8676 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8679 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8717 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8721 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8724 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8732 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8735 "isa_arm32.tcc"
>
class OpMovs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8740 "isa_arm32.tcc"
>
{
public:
	OpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8754 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8758 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8761 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8765 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8768 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8806 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8810 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8813 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8824 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8827 "isa_arm32.tcc"
>
class OpMovs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8832 "isa_arm32.tcc"
>
{
public:
	OpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8846 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8850 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8853 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8857 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8860 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8898 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8902 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8905 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8919 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8922 "isa_arm32.tcc"
>
class OpBic_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8927 "isa_arm32.tcc"
>
{
public:
	OpBic_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8940 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8944 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8947 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8951 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8954 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8992 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8996 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8999 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9013 "isa_arm32.tcc"
>
class OpBic_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9018 "isa_arm32.tcc"
>
{
public:
	OpBic_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9032 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9036 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9039 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9043 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9046 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9084 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9088 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9091 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9105 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9108 "isa_arm32.tcc"
>
class OpBic_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9113 "isa_arm32.tcc"
>
{
public:
	OpBic_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9127 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9131 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9134 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9138 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9141 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9179 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9183 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9186 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9203 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9206 "isa_arm32.tcc"
>
class OpBics_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9211 "isa_arm32.tcc"
>
{
public:
	OpBics_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9224 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9228 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9231 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9235 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9238 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9276 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9280 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9283 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9294 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9297 "isa_arm32.tcc"
>
class OpBics_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9302 "isa_arm32.tcc"
>
{
public:
	OpBics_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9316 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9320 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9323 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9327 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9330 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9368 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9372 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9375 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9392 "isa_arm32.tcc"
>
class OpBics_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9397 "isa_arm32.tcc"
>
{
public:
	OpBics_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9411 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9415 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9418 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9422 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9425 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9463 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9467 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9470 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9490 "isa_arm32.tcc"
>
class OpMvn_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9495 "isa_arm32.tcc"
>
{
public:
	OpMvn_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9508 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9512 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9515 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9519 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9522 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9560 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9564 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9567 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9575 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9578 "isa_arm32.tcc"
>
class OpMvn_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9583 "isa_arm32.tcc"
>
{
public:
	OpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9597 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9601 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9604 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9608 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9611 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9649 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9653 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9656 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9670 "isa_arm32.tcc"
>
class OpMvn_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9675 "isa_arm32.tcc"
>
{
public:
	OpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9689 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9693 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9696 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9700 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9703 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9741 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9745 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9748 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9762 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9765 "isa_arm32.tcc"
>
class OpMvns_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9770 "isa_arm32.tcc"
>
{
public:
	OpMvns_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9783 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9787 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9790 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9794 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9797 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9835 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9839 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9842 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9853 "isa_arm32.tcc"
>
class OpMvns_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9858 "isa_arm32.tcc"
>
{
public:
	OpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9872 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9876 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9879 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9883 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9886 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9924 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9928 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9931 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9942 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9945 "isa_arm32.tcc"
>
class OpMvns_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9950 "isa_arm32.tcc"
>
{
public:
	OpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9964 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9968 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9971 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9975 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9978 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10016 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10020 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10023 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10037 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10040 "isa_arm32.tcc"
>
class OpQadd : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10045 "isa_arm32.tcc"
>
{
public:
	OpQadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10058 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10062 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10065 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10069 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10072 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10110 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10114 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10117 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10125 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10128 "isa_arm32.tcc"
>
class OpQsub : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10133 "isa_arm32.tcc"
>
{
public:
	OpQsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10146 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10150 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10153 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10157 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10160 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10198 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10202 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10205 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10216 "isa_arm32.tcc"
>
class OpQdadd : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10221 "isa_arm32.tcc"
>
{
public:
	OpQdadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10234 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10238 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10241 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10245 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10248 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10286 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10290 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10293 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10304 "isa_arm32.tcc"
>
class OpQdsub : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10309 "isa_arm32.tcc"
>
{
public:
	OpQdsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10322 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10326 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10329 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10333 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10336 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10374 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10378 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10381 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10392 "isa_arm32.tcc"
>
class OpMla : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10397 "isa_arm32.tcc"
>
{
public:
	OpMla(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10411 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10415 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10418 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10422 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10425 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10463 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10467 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10470 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10490 "isa_arm32.tcc"
>
class OpMul : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10495 "isa_arm32.tcc"
>
{
public:
	OpMul(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10509 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10513 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10516 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10520 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10523 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10561 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10565 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10568 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10585 "isa_arm32.tcc"
>
class OpSmlal : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10590 "isa_arm32.tcc"
>
{
public:
	OpSmlal(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10604 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10608 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10611 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10615 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10618 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10656 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10660 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10663 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
	virtual
	void
	initialize_rdhi_init();
	virtual
	void
	initialize_rdlo_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10686 "isa_arm32.tcc"
>
class OpSmull : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10691 "isa_arm32.tcc"
>
{
public:
	OpSmull(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10705 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10709 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10712 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10716 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10719 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10757 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10761 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10764 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10781 "isa_arm32.tcc"
>
class OpUmlal : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10786 "isa_arm32.tcc"
>
{
public:
	OpUmlal(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10800 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10804 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10807 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10811 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10814 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10852 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10856 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10859 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
	virtual
	void
	initialize_rdhi_init();
	virtual
	void
	initialize_rdlo_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10879 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10882 "isa_arm32.tcc"
>
class OpUmull : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10887 "isa_arm32.tcc"
>
{
public:
	OpUmull(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10901 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10905 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10908 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10912 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10915 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10953 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10957 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10960 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10977 "isa_arm32.tcc"
>
class OpSmlaxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10982 "isa_arm32.tcc"
>
{
public:
	OpSmlaxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10997 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11001 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11004 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11008 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11011 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11049 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11053 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11056 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11064 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11067 "isa_arm32.tcc"
>
class OpSmlalxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11072 "isa_arm32.tcc"
>
{
public:
	OpSmlalxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11087 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11091 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11094 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11098 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11101 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11139 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11143 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11146 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11157 "isa_arm32.tcc"
>
class OpSmlawy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11162 "isa_arm32.tcc"
>
{
public:
	OpSmlawy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t y;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11176 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11180 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11183 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11187 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11190 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11228 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11232 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11235 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11243 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11246 "isa_arm32.tcc"
>
class OpSmulxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11251 "isa_arm32.tcc"
>
{
public:
	OpSmulxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11266 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11270 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11273 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11277 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11280 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11318 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11322 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11325 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11333 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11336 "isa_arm32.tcc"
>
class OpSmulwy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11341 "isa_arm32.tcc"
>
{
public:
	OpSmulwy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t y;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11355 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11359 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11362 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11366 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11369 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11407 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11411 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11414 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11422 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11425 "isa_arm32.tcc"
>
class OpMrs : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11430 "isa_arm32.tcc"
>
{
public:
	OpMrs(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t rd;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11441 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11445 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11448 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11452 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11455 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11493 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11497 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11500 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11508 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11511 "isa_arm32.tcc"
>
class OpMsr_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11516 "isa_arm32.tcc"
>
{
public:
	OpMsr_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t mask;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11529 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11533 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11536 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11540 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11543 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11581 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11585 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11588 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11599 "isa_arm32.tcc"
>
class OpMsr_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11604 "isa_arm32.tcc"
>
{
public:
	OpMsr_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t mask;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11616 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11620 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11623 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11627 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11630 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11668 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11672 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11675 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11686 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11689 "isa_arm32.tcc"
>
class OpLdr_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11694 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11707 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11711 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11714 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11718 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11721 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11759 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11763 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11766 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11777 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11780 "isa_arm32.tcc"
>
class OpLdr_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11785 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11798 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11802 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11805 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11809 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11812 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11850 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11854 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11857 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11868 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11871 "isa_arm32.tcc"
>
class OpLdr_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11876 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11889 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11893 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11896 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11900 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11903 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11941 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11945 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11948 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11959 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11962 "isa_arm32.tcc"
>
class OpLdr_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11967 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11982 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11986 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11989 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11993 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11996 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12034 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12038 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12041 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12058 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12061 "isa_arm32.tcc"
>
class OpLdr_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12066 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12081 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12085 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12088 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12092 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12095 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12133 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12137 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12140 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12160 "isa_arm32.tcc"
>
class OpLdr_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12165 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12180 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12184 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12187 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12191 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12194 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12232 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12236 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12239 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12259 "isa_arm32.tcc"
>
class OpLdrb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12264 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12277 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12281 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12284 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12288 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12291 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12329 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12333 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12336 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12350 "isa_arm32.tcc"
>
class OpLdrb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12355 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12368 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12372 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12375 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12379 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12382 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12420 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12424 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12427 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12441 "isa_arm32.tcc"
>
class OpLdrb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12446 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12459 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12463 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12466 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12470 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12473 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12511 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12515 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12518 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12532 "isa_arm32.tcc"
>
class OpLdrb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12537 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12552 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12556 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12559 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12563 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12566 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12604 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12608 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12611 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12628 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12631 "isa_arm32.tcc"
>
class OpLdrb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12636 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12651 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12655 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12658 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12662 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12665 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12703 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12707 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12710 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12727 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12730 "isa_arm32.tcc"
>
class OpLdrb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12735 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12750 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12754 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12757 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12761 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12764 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12802 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12806 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12809 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12829 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12834 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12846 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12850 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12853 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12857 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12860 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12898 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12902 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12905 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12913 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12916 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12921 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12933 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12937 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12940 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12944 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12947 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12985 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12989 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12992 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13006 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13011 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13023 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13027 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13030 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13034 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13037 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13075 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13079 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13082 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13093 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13098 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13112 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13116 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13119 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13123 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13126 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13164 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13168 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13171 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13182 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13187 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13201 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13205 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13208 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13212 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13215 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13253 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13257 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13260 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13274 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13277 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13282 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13296 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13300 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13303 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13307 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13310 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13348 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13352 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13355 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13366 "isa_arm32.tcc"
>
class OpLdrt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13371 "isa_arm32.tcc"
>
{
public:
	OpLdrt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13384 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13388 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13391 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13395 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13398 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13436 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13440 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13443 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13454 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13457 "isa_arm32.tcc"
>
class OpLdrt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13462 "isa_arm32.tcc"
>
{
public:
	OpLdrt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13477 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13481 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13484 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13488 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13491 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13529 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13533 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13536 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13553 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13556 "isa_arm32.tcc"
>
class OpLdrbt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13561 "isa_arm32.tcc"
>
{
public:
	OpLdrbt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13574 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13578 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13581 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13585 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13588 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13626 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13630 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13633 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13647 "isa_arm32.tcc"
>
class OpLdrbt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13652 "isa_arm32.tcc"
>
{
public:
	OpLdrbt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13667 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13671 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13674 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13678 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13681 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13719 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13723 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13726 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13743 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13746 "isa_arm32.tcc"
>
class OpStr_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13751 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13764 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13768 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13771 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13775 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13778 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13816 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13820 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13823 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13837 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13840 "isa_arm32.tcc"
>
class OpStr_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13845 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13858 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13862 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13865 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13869 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13872 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13910 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13914 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13917 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13931 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13934 "isa_arm32.tcc"
>
class OpStr_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13939 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13952 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13956 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13959 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13963 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13966 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14004 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14008 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14011 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14025 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14028 "isa_arm32.tcc"
>
class OpStr_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14033 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14048 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14052 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14055 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14059 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14062 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14100 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14104 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14107 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14127 "isa_arm32.tcc"
>
class OpStr_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14132 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14147 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14151 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14154 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14158 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14161 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14199 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14203 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14206 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14223 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14226 "isa_arm32.tcc"
>
class OpStr_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14231 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14246 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14250 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14253 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14257 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14260 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14298 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14302 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14305 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14325 "isa_arm32.tcc"
>
class OpStrb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14330 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14343 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14347 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14350 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14354 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14357 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14395 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14399 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14402 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14416 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14419 "isa_arm32.tcc"
>
class OpStrb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14424 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14437 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14441 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14444 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14448 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14451 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14489 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14493 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14496 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14510 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14513 "isa_arm32.tcc"
>
class OpStrb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14518 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14531 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14535 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14538 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14542 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14545 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14583 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14587 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14590 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14607 "isa_arm32.tcc"
>
class OpStrb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14612 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14627 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14631 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14634 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14638 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14641 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14679 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14683 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14686 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14703 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14706 "isa_arm32.tcc"
>
class OpStrb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14711 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14726 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14730 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14733 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14737 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14740 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14778 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14782 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14785 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14802 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14805 "isa_arm32.tcc"
>
class OpStrb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14810 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14825 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14829 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14832 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14836 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14839 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14877 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14881 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14884 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14904 "isa_arm32.tcc"
>
class OpStrt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14909 "isa_arm32.tcc"
>
{
public:
	OpStrt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14922 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14926 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14929 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14933 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14936 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14974 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14978 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14981 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14995 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14998 "isa_arm32.tcc"
>
class OpStrt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15003 "isa_arm32.tcc"
>
{
public:
	OpStrt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15018 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15022 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15025 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15029 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15032 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15070 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15074 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15077 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15094 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15097 "isa_arm32.tcc"
>
class OpStrbt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15102 "isa_arm32.tcc"
>
{
public:
	OpStrbt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15115 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15119 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15122 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15126 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15129 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15167 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15171 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15174 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15188 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15191 "isa_arm32.tcc"
>
class OpStrbt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15196 "isa_arm32.tcc"
>
{
public:
	OpStrbt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15211 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15215 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15218 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15222 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15225 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15263 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15267 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15270 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15290 "isa_arm32.tcc"
>
class OpLdrh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15295 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15309 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15313 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15316 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15320 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15323 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15361 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15365 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15368 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15379 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15382 "isa_arm32.tcc"
>
class OpLdrh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15387 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15401 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15405 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15408 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15412 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15415 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15453 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15457 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15460 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15471 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15474 "isa_arm32.tcc"
>
class OpLdrh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15479 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15493 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15497 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15500 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15504 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15507 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15545 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15549 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15552 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15563 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15566 "isa_arm32.tcc"
>
class OpLdrh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15571 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15585 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15589 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15592 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15596 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15599 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15637 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15641 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15644 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15661 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15664 "isa_arm32.tcc"
>
class OpLdrh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15669 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15683 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15687 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15690 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15694 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15697 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15735 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15739 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15742 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15762 "isa_arm32.tcc"
>
class OpLdrh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15767 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15781 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15785 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15788 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15792 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15795 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15833 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15837 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15840 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15860 "isa_arm32.tcc"
>
class OpLdrsh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15865 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15879 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15883 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15886 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15890 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15893 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15931 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15935 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15938 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15949 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15952 "isa_arm32.tcc"
>
class OpLdrsh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15957 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15971 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15975 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15978 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15982 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15985 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16023 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16027 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16030 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16041 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16044 "isa_arm32.tcc"
>
class OpLdrsh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16049 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16063 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16067 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16070 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16074 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16077 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16115 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16119 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16122 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16136 "isa_arm32.tcc"
>
class OpLdrsh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16141 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16155 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16159 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16162 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16166 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16169 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16207 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16211 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16214 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16234 "isa_arm32.tcc"
>
class OpLdrsh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16239 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16253 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16257 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16260 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16264 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16267 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16305 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16309 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16312 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16332 "isa_arm32.tcc"
>
class OpLdrsh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16337 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16351 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16355 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16358 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16362 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16365 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16403 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16407 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16410 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16427 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16430 "isa_arm32.tcc"
>
class OpLdrsb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16435 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16449 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16453 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16456 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16460 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16463 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16501 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16505 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16508 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16519 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16522 "isa_arm32.tcc"
>
class OpLdrsb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16527 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16541 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16545 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16548 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16552 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16555 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16593 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16597 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16600 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16611 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16614 "isa_arm32.tcc"
>
class OpLdrsb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16619 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16633 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16637 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16640 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16644 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16647 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16685 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16689 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16692 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16703 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16706 "isa_arm32.tcc"
>
class OpLdrsb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16711 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16725 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16729 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16732 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16736 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16739 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16777 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16781 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16784 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16804 "isa_arm32.tcc"
>
class OpLdrsb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16809 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16823 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16827 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16830 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16834 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16837 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16875 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16879 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16882 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16899 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16902 "isa_arm32.tcc"
>
class OpLdrsb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16907 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16921 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16925 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16928 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16932 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16935 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16973 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16977 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16980 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16997 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17000 "isa_arm32.tcc"
>
class OpStrh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17005 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17019 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17023 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17026 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17030 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17033 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17071 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17075 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17078 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17086 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17089 "isa_arm32.tcc"
>
class OpStrh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17094 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17108 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17112 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17115 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17119 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17122 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17160 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17164 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17167 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17175 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17178 "isa_arm32.tcc"
>
class OpStrh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17183 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17197 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17201 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17204 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17208 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17211 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17249 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17253 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17256 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17264 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17267 "isa_arm32.tcc"
>
class OpStrh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17272 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17286 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17290 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17293 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17297 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17300 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17338 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17342 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17345 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17353 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17356 "isa_arm32.tcc"
>
class OpStrh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17361 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17375 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17379 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17382 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17386 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17389 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17427 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17431 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17434 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17442 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17445 "isa_arm32.tcc"
>
class OpStrh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17450 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17464 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17468 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17471 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17475 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17478 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17516 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17520 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17523 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17534 "isa_arm32.tcc"
>
class OpLdrd_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17539 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17553 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17557 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17560 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17564 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17567 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17605 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17609 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17612 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17626 "isa_arm32.tcc"
>
class OpLdrd_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17631 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17645 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17649 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17652 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17656 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17659 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17697 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17701 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17704 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17718 "isa_arm32.tcc"
>
class OpLdrd_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17723 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17737 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17741 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17744 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17748 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17751 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17789 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17793 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17796 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17807 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17810 "isa_arm32.tcc"
>
class OpLdrd_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17815 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17829 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17833 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17836 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17840 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17843 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17881 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17885 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17888 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17905 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17908 "isa_arm32.tcc"
>
class OpLdrd_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17913 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17927 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17931 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17934 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17938 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17941 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17979 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17983 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17986 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18006 "isa_arm32.tcc"
>
class OpLdrd_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18011 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18025 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18029 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18032 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18036 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18039 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18077 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18081 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18084 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18101 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18104 "isa_arm32.tcc"
>
class OpStrd_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18109 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18123 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18127 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18130 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18134 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18137 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18175 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18179 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18182 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18202 "isa_arm32.tcc"
>
class OpStrd_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18207 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18221 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18225 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18228 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18232 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18235 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18273 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18277 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18280 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18297 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18300 "isa_arm32.tcc"
>
class OpStrd_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18305 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18319 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18323 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18326 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18330 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18333 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18371 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18375 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18378 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18395 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18398 "isa_arm32.tcc"
>
class OpStrd_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18403 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18417 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18421 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18424 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18428 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18431 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18469 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18473 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18476 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18499 "isa_arm32.tcc"
>
class OpStrd_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18504 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18518 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18522 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18525 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18529 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18532 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18570 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18574 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18577 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18600 "isa_arm32.tcc"
>
class OpStrd_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18605 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18619 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18623 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18626 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18630 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18633 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18671 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18675 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18678 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18698 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18701 "isa_arm32.tcc"
>
class OpLdm_1_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18706 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18718 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18722 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18725 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18729 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18732 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18770 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18774 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18777 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18788 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18791 "isa_arm32.tcc"
>
class OpLdm_1_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18796 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18808 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18812 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18815 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18819 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18822 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18860 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18864 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18867 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18881 "isa_arm32.tcc"
>
class OpLdm_1_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18886 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18898 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18902 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18905 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18909 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18912 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18950 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18954 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18957 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18971 "isa_arm32.tcc"
>
class OpLdm_1_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18976 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18988 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18992 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18995 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18999 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19002 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19040 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19044 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19047 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19058 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19061 "isa_arm32.tcc"
>
class OpLdm_2_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19066 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19077 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19081 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19084 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19088 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19091 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19129 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19133 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19136 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19150 "isa_arm32.tcc"
>
class OpLdm_2_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19155 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19166 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19170 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19173 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19177 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19180 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19218 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19222 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19225 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19236 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19239 "isa_arm32.tcc"
>
class OpLdm_2_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19244 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19255 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19259 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19262 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19266 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19269 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19307 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19311 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19314 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19328 "isa_arm32.tcc"
>
class OpLdm_2_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19333 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19344 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19348 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19351 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19355 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19358 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19396 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19400 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19403 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19417 "isa_arm32.tcc"
>
class OpLdm_3_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19422 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19434 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19438 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19441 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19445 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19448 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19486 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19490 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19493 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19507 "isa_arm32.tcc"
>
class OpLdm_3_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19512 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19524 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19528 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19531 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19535 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19538 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19576 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19580 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19583 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19594 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19597 "isa_arm32.tcc"
>
class OpLdm_3_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19602 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19614 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19618 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19621 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19625 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19628 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19666 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19670 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19673 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19684 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19687 "isa_arm32.tcc"
>
class OpLdm_3_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19692 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19704 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19708 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19711 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19715 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19718 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19756 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19760 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19763 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19774 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19777 "isa_arm32.tcc"
>
class OpStm_1_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19782 "isa_arm32.tcc"
>
{
public:
	OpStm_1_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19794 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19798 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19801 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19805 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19808 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19846 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19850 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19853 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19864 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19867 "isa_arm32.tcc"
>
class OpStm_1_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19872 "isa_arm32.tcc"
>
{
public:
	OpStm_1_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19884 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19888 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19891 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19895 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19898 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19936 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19940 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19943 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19957 "isa_arm32.tcc"
>
class OpStm_1_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19962 "isa_arm32.tcc"
>
{
public:
	OpStm_1_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19974 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19978 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19981 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19985 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19988 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20026 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20030 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20033 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20047 "isa_arm32.tcc"
>
class OpStm_1_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20052 "isa_arm32.tcc"
>
{
public:
	OpStm_1_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20064 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20068 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20071 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20075 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20078 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20116 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20120 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20123 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20137 "isa_arm32.tcc"
>
class OpStm_2_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20142 "isa_arm32.tcc"
>
{
public:
	OpStm_2_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20153 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20157 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20160 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20164 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20167 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20205 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20209 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20212 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20223 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20226 "isa_arm32.tcc"
>
class OpStm_2_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20231 "isa_arm32.tcc"
>
{
public:
	OpStm_2_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20242 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20246 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20249 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20253 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20256 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20294 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20298 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20301 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20315 "isa_arm32.tcc"
>
class OpStm_2_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20320 "isa_arm32.tcc"
>
{
public:
	OpStm_2_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20331 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20335 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20338 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20342 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20345 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20383 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20387 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20390 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20401 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20404 "isa_arm32.tcc"
>
class OpStm_2_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20409 "isa_arm32.tcc"
>
{
public:
	OpStm_2_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20420 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20424 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20427 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20431 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20434 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20472 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20476 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20479 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20493 "isa_arm32.tcc"
>
class OpSwp : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20498 "isa_arm32.tcc"
>
{
public:
	OpSwp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20510 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20514 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20517 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20521 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20524 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20562 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20566 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20569 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20577 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20580 "isa_arm32.tcc"
>
class OpSwpb : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20585 "isa_arm32.tcc"
>
{
public:
	OpSwpb(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20597 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20601 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20604 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20608 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20611 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20649 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20653 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20656 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20667 "isa_arm32.tcc"
>
class OpSwi : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20672 "isa_arm32.tcc"
>
{
public:
	OpSwi(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t immed;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20682 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20686 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20689 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20693 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20696 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20734 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20738 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20741 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20749 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20752 "isa_arm32.tcc"
>
class OpBkpt : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20757 "isa_arm32.tcc"
>
{
public:
	OpBkpt(CodeType code, typename CONFIG::address_t addr);
	uint32_t himmed;
	uint32_t limmed;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20767 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20771 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20774 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20778 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20781 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20819 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20823 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20826 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20837 "isa_arm32.tcc"
>
class OpCdp_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20842 "isa_arm32.tcc"
>
{
public:
	OpCdp_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20933 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20937 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20940 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20944 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20947 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20985 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20989 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20992 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21003 "isa_arm32.tcc"
>
class OpCdp_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21008 "isa_arm32.tcc"
>
{
public:
	OpCdp_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21099 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21103 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21106 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21110 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21113 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21151 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21155 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21158 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21169 "isa_arm32.tcc"
>
class OpCdp_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21174 "isa_arm32.tcc"
>
{
public:
	OpCdp_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21265 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21269 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21272 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21276 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21279 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21317 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21321 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21324 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21335 "isa_arm32.tcc"
>
class OpCdp_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21340 "isa_arm32.tcc"
>
{
public:
	OpCdp_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21430 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21434 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21437 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21441 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21444 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21482 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21486 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21489 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21497 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21500 "isa_arm32.tcc"
>
class OpLdc_offset_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21505 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21596 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21600 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21603 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21607 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21610 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21648 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21652 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21655 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21669 "isa_arm32.tcc"
>
class OpLdc_offset_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21674 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21765 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21769 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21772 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21776 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21779 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21817 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21821 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21824 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21838 "isa_arm32.tcc"
>
class OpLdc_offset_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21843 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21934 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21938 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21941 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21945 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21948 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21986 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21990 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21993 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22007 "isa_arm32.tcc"
>
class OpLdc_offset_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22012 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22102 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22106 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22109 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22113 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22116 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22154 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22158 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22161 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22172 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22175 "isa_arm32.tcc"
>
class OpLdc_pre_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22180 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22271 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22275 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22278 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22282 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22285 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22323 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22327 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22330 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22341 "isa_arm32.tcc"
>
class OpLdc_pre_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22346 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22437 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22441 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22444 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22448 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22451 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22489 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22493 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22496 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22507 "isa_arm32.tcc"
>
class OpLdc_pre_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22512 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22603 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22607 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22610 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22614 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22617 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22655 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22659 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22662 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22673 "isa_arm32.tcc"
>
class OpLdc_pre_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22678 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22768 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22772 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22775 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22779 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22782 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22820 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22824 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22827 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22838 "isa_arm32.tcc"
>
class OpLdc_post_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22843 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22934 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22938 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22941 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22945 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22948 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22986 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22990 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22993 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23004 "isa_arm32.tcc"
>
class OpLdc_post_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23009 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23100 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23104 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23107 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23111 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23114 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23152 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23156 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23159 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23170 "isa_arm32.tcc"
>
class OpLdc_post_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23175 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23266 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23270 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23273 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23277 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23280 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23318 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23322 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23325 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23333 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23336 "isa_arm32.tcc"
>
class OpLdc_post_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23341 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23431 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23435 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23438 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23442 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23445 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23483 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23487 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23490 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23498 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23501 "isa_arm32.tcc"
>
class OpLdc_unindexed_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23506 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23596 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23600 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23603 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23607 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23610 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23648 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23652 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23655 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23669 "isa_arm32.tcc"
>
class OpLdc_unindexed_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23674 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23764 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23768 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23771 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23775 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23778 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23816 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23820 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23823 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23837 "isa_arm32.tcc"
>
class OpLdc_unindexed_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23842 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23932 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23936 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23939 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23943 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23946 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23984 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23988 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23991 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24005 "isa_arm32.tcc"
>
class OpLdc_unindexed_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24010 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24099 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24103 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24106 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24110 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24113 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24151 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24155 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24158 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24172 "isa_arm32.tcc"
>
class OpMcr_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24177 "isa_arm32.tcc"
>
{
public:
	OpMcr_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24268 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24272 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24275 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24279 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24282 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24320 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24324 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24327 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24338 "isa_arm32.tcc"
>
class OpMcr_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24343 "isa_arm32.tcc"
>
{
public:
	OpMcr_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24434 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24438 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24441 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24445 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24448 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24486 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24490 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24493 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24504 "isa_arm32.tcc"
>
class OpMcr_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24509 "isa_arm32.tcc"
>
{
public:
	OpMcr_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24600 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24604 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24607 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24611 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24614 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24652 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24656 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24659 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24670 "isa_arm32.tcc"
>
class OpMcr_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24675 "isa_arm32.tcc"
>
{
public:
	OpMcr_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24765 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24769 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24772 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24776 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24779 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24817 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24821 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24824 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24835 "isa_arm32.tcc"
>
class OpMrc_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24840 "isa_arm32.tcc"
>
{
public:
	OpMrc_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24931 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24935 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24938 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24942 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24945 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24983 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24987 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24990 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25001 "isa_arm32.tcc"
>
class OpMrc_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25006 "isa_arm32.tcc"
>
{
public:
	OpMrc_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25097 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25101 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25104 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25108 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25111 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25149 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25153 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25156 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25164 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25167 "isa_arm32.tcc"
>
class OpMrc_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25172 "isa_arm32.tcc"
>
{
public:
	OpMrc_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25263 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25267 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25270 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25274 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25277 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25315 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25319 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25322 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25333 "isa_arm32.tcc"
>
class OpMrc_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25338 "isa_arm32.tcc"
>
{
public:
	OpMrc_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25428 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25432 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25435 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25439 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25442 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25480 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25484 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25487 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25498 "isa_arm32.tcc"
>
class OpStc_offset_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25503 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25594 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25598 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25601 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25605 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25608 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25646 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25650 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25653 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25667 "isa_arm32.tcc"
>
class OpStc_offset_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25672 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25763 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25767 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25770 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25774 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25777 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25815 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25819 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25822 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25836 "isa_arm32.tcc"
>
class OpStc_offset_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25841 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25932 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25936 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25939 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25943 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25946 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25984 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25988 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25991 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26005 "isa_arm32.tcc"
>
class OpStc_offset_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26010 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26100 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26104 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26107 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26111 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26114 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26152 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26156 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26159 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26173 "isa_arm32.tcc"
>
class OpStc_pre_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26178 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26269 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26273 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26276 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26280 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26283 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26321 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26325 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26328 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26336 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26339 "isa_arm32.tcc"
>
class OpStc_pre_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26344 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26435 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26439 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26442 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26446 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26449 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26487 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26491 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26494 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26502 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26505 "isa_arm32.tcc"
>
class OpStc_pre_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26510 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26601 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26605 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26608 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26612 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26615 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26653 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26657 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26660 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26668 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26671 "isa_arm32.tcc"
>
class OpStc_pre_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26676 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26766 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26770 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26773 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26777 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26780 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26818 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26822 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26825 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26836 "isa_arm32.tcc"
>
class OpStc_post_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26841 "isa_arm32.tcc"
>
{
public:
	OpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26932 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26936 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26939 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26943 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26946 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26984 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26988 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26991 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27002 "isa_arm32.tcc"
>
class OpStc_post_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27007 "isa_arm32.tcc"
>
{
public:
	OpStc_post_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27098 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27102 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27105 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27109 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27112 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27150 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27154 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27157 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27168 "isa_arm32.tcc"
>
class OpStc_post_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27173 "isa_arm32.tcc"
>
{
public:
	OpStc_post_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27264 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27268 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27271 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27275 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27278 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27316 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27320 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27323 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27334 "isa_arm32.tcc"
>
class OpStc_post_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27339 "isa_arm32.tcc"
>
{
public:
	OpStc_post_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27429 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27433 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27436 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27440 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27443 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27481 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27485 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27488 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27499 "isa_arm32.tcc"
>
class OpStc_unindexed_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27504 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27594 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27598 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27601 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27605 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27608 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27646 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27650 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27653 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27667 "isa_arm32.tcc"
>
class OpStc_unindexed_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27672 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27762 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27766 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27769 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27773 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27776 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27814 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27818 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27821 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27835 "isa_arm32.tcc"
>
class OpStc_unindexed_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27840 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27930 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27934 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27937 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27941 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27944 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27982 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27986 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27989 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28003 "isa_arm32.tcc"
>
class OpStc_unindexed_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28008 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28097 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28101 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28104 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28108 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28111 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28149 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28153 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28156 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28170 "isa_arm32.tcc"
>
class OpCdp2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28175 "isa_arm32.tcc"
>
{
public:
	OpCdp2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28189 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28193 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28196 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28200 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28203 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28241 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28245 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28248 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28259 "isa_arm32.tcc"
>
class OpLdc2_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28264 "isa_arm32.tcc"
>
{
public:
	OpLdc2_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28278 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28282 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28285 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28289 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28292 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28330 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28334 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28337 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28351 "isa_arm32.tcc"
>
class OpLdc2_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28356 "isa_arm32.tcc"
>
{
public:
	OpLdc2_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28370 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28374 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28377 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28381 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28384 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28422 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28426 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28429 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28440 "isa_arm32.tcc"
>
class OpLdc2_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28445 "isa_arm32.tcc"
>
{
public:
	OpLdc2_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28459 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28463 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28466 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28470 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28473 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28511 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28515 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28518 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28526 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28529 "isa_arm32.tcc"
>
class OpLdc2_unindexed : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28534 "isa_arm32.tcc"
>
{
public:
	OpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28548 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28552 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28555 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28559 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28562 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28600 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28604 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28607 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28621 "isa_arm32.tcc"
>
class OpMcr2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28626 "isa_arm32.tcc"
>
{
public:
	OpMcr2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28640 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28644 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28647 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28651 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28654 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28692 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28696 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28699 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28707 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28710 "isa_arm32.tcc"
>
class OpMrc2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28715 "isa_arm32.tcc"
>
{
public:
	OpMrc2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28729 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28733 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28736 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28740 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28743 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28781 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28785 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28788 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28799 "isa_arm32.tcc"
>
class OpStc2_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28804 "isa_arm32.tcc"
>
{
public:
	OpStc2_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28818 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28822 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28825 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28829 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28832 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28870 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28874 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28877 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28888 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28891 "isa_arm32.tcc"
>
class OpStc2_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28896 "isa_arm32.tcc"
>
{
public:
	OpStc2_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28910 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28914 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28917 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28921 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28924 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28962 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28966 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28969 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28977 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28980 "isa_arm32.tcc"
>
class OpStc2_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28985 "isa_arm32.tcc"
>
{
public:
	OpStc2_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28999 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29003 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29006 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29010 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29013 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29051 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29055 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29058 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29066 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29069 "isa_arm32.tcc"
>
class OpStc2_unindexed : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29074 "isa_arm32.tcc"
>
{
public:
	OpStc2_unindexed(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29088 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29092 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29095 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29099 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29102 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29140 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29144 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29147 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29161 "isa_arm32.tcc"
>
class OpMcrr_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29166 "isa_arm32.tcc"
>
{
public:
	OpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29256 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29260 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29263 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29267 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29270 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29308 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29312 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29315 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29326 "isa_arm32.tcc"
>
class OpMcrr_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29331 "isa_arm32.tcc"
>
{
public:
	OpMcrr_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29421 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29425 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29428 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29432 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29435 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29473 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29477 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29480 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29491 "isa_arm32.tcc"
>
class OpMcrr_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29496 "isa_arm32.tcc"
>
{
public:
	OpMcrr_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29586 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29590 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29593 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29597 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29600 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29638 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29642 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29645 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29653 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29656 "isa_arm32.tcc"
>
class OpMcrr_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29661 "isa_arm32.tcc"
>
{
public:
	OpMcrr_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29750 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29754 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29757 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29761 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29764 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29802 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29806 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29809 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29817 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29820 "isa_arm32.tcc"
>
class OpMrrc_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29825 "isa_arm32.tcc"
>
{
public:
	OpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29915 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29919 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29922 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29926 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29929 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29967 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29971 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29974 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29985 "isa_arm32.tcc"
>
class OpMrrc_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29990 "isa_arm32.tcc"
>
{
public:
	OpMrrc_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30080 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30084 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30087 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30091 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30094 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30132 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30136 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30139 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30150 "isa_arm32.tcc"
>
class OpMrrc_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30155 "isa_arm32.tcc"
>
{
public:
	OpMrrc_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30245 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30249 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30252 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30256 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30259 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30297 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30301 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30304 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30315 "isa_arm32.tcc"
>
class OpMrrc_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30320 "isa_arm32.tcc"
>
{
public:
	OpMrrc_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30409 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30413 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30416 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30420 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30423 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30461 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30465 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30468 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30476 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30479 "isa_arm32.tcc"
>
class OpClz : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30484 "isa_arm32.tcc"
>
{
public:
	OpClz(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t rd;
	uint32_t sbo2;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30497 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30501 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30504 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30508 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30511 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30549 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30553 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30556 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

BRANCH INSTRUCTIONS

**********************************************/
/*******************************************************************
* b (branch) instruction
* op b(cond[4]:0b1010[4]:sext<32> imm[24])
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30609 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30612 "isa_arm32.tcc"
>

void
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30619 "isa_arm32.tcc"
>::initialize_condition()
{
#line 51 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 30628 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30633 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30636 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30640 "isa_arm32.tcc"
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30644 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30648 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30651 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30655 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30658 "isa_arm32.tcc"
)
{
#line 77 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30669 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30674 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30677 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30681 "isa_arm32.tcc"
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30685 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30689 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30692 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30709 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30718 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30723 "isa_arm32.tcc"
> *DecodeOpB_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30729 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30739 "isa_arm32.tcc"
>

void
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30746 "isa_arm32.tcc"
>::initialize_condition()
{
#line 57 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 30755 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30760 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30763 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30767 "isa_arm32.tcc"
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30771 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30775 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30778 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30782 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30785 "isa_arm32.tcc"
)
{
#line 77 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30796 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30804 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30808 "isa_arm32.tcc"
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30812 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30816 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30819 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30836 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30842 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30845 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30850 "isa_arm32.tcc"
> *DecodeOpB_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30856 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30866 "isa_arm32.tcc"
>

void
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30873 "isa_arm32.tcc"
>::initialize_condition()
{
#line 63 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 30882 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30890 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30894 "isa_arm32.tcc"
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30898 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30902 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30905 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30909 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30912 "isa_arm32.tcc"
)
{
#line 77 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30923 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30928 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30931 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30935 "isa_arm32.tcc"
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30939 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30943 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30946 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30963 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30969 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30972 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30977 "isa_arm32.tcc"
> *DecodeOpB_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30983 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30993 "isa_arm32.tcc"
>

void
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31000 "isa_arm32.tcc"
>::initialize_condition()
{
#line 69 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 31009 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31017 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31021 "isa_arm32.tcc"
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31025 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31029 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31032 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31036 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31039 "isa_arm32.tcc"
)
{
#line 77 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 31050 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31055 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31058 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31062 "isa_arm32.tcc"
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31066 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31070 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31073 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31090 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31099 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31104 "isa_arm32.tcc"
> *DecodeOpB_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31110 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of b (branch) instruction
*******************************************************************/
/*******************************************************************
* bl (branch & link) instruction
* op bl(cond[4]:0b1011[4]:sext<32> imm[24])
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31127 "isa_arm32.tcc"
>

void
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31134 "isa_arm32.tcc"
>::initialize_condition()
{
#line 113 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 31143 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31148 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31151 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31155 "isa_arm32.tcc"
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31159 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31163 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31166 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31170 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31173 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31184 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31189 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31192 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31196 "isa_arm32.tcc"
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31200 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31204 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31207 "isa_arm32.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31226 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31232 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31235 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31240 "isa_arm32.tcc"
> *DecodeOpBl_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31246 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31253 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31256 "isa_arm32.tcc"
>

void
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31263 "isa_arm32.tcc"
>::initialize_condition()
{
#line 119 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 31272 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31277 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31280 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31284 "isa_arm32.tcc"
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31288 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31292 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31295 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31299 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31302 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31313 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31318 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31321 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31325 "isa_arm32.tcc"
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31329 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31333 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31336 "isa_arm32.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31355 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31361 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31364 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31369 "isa_arm32.tcc"
> *DecodeOpBl_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31375 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31382 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31385 "isa_arm32.tcc"
>

void
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31392 "isa_arm32.tcc"
>::initialize_condition()
{
#line 125 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 31401 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31406 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31409 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31413 "isa_arm32.tcc"
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31417 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31421 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31424 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31428 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31431 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31442 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31447 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31450 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31454 "isa_arm32.tcc"
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31458 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31462 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31465 "isa_arm32.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31484 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31493 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31498 "isa_arm32.tcc"
> *DecodeOpBl_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31504 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31511 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31514 "isa_arm32.tcc"
>

void
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31521 "isa_arm32.tcc"
>::initialize_condition()
{
#line 131 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 31530 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31538 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31542 "isa_arm32.tcc"
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31546 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31550 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31553 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31557 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31560 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31571 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31576 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31579 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31583 "isa_arm32.tcc"
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31587 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31591 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31594 "isa_arm32.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31613 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31622 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31627 "isa_arm32.tcc"
> *DecodeOpBl_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31633 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bl (branch & link) instruction
*******************************************************************/
/*******************************************************************
* bx (branch and exchange) instruction
* this instruction is only availabe for the following architectures
* 	CONFIG::ARMV4T,
*  CONFIG::ARMV4TXM,
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31658 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31662 "isa_arm32.tcc"
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31666 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31670 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31673 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31677 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31680 "isa_arm32.tcc"
)
{
#line 183 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "bx";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rm;
	}
#line 31689 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31694 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31697 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31701 "isa_arm32.tcc"
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31705 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31709 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31712 "isa_arm32.tcc"
)
{
#line 189 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		if(!cpu.CheckCondition(cond)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetCPSR_T((rm_value & 0x01) == 1);
		new_PC = rm_value & 0xFFFFFFFE;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31731 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31739 "isa_arm32.tcc"
>

void
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31746 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 205 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 31756 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31762 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31765 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31770 "isa_arm32.tcc"
> *DecodeOpBx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31776 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bx (branch and exchange) instruction
*******************************************************************/
/*******************************************************************
* blx (1) (branch with link and exchange version 1) instruction
* this instruction is only availabe for the following architectures
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31799 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31803 "isa_arm32.tcc"
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31807 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31811 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31814 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31818 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31821 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "blx 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8 << dec;
	}
#line 31828 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31836 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31840 "isa_arm32.tcc"
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31844 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31848 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31851 "isa_arm32.tcc"
)
{
#line 234 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typename CONFIG::reg_t new_PC;

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
		cpu.SetCPSR_T(true);
		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31863 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31869 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31872 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31877 "isa_arm32.tcc"
> *DecodeOpBlx_1(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31883 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of blx (1) (branch with link and exchange version 1) instruction
*******************************************************************/
/*******************************************************************
* blx (2) (branch with link and exchange version 2) instruction
* this instruction is only availabe for the following architectures
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31903 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31906 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31910 "isa_arm32.tcc"
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31914 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31918 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31921 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31925 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31928 "isa_arm32.tcc"
)
{
#line 262 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "blx";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rm;
	}
#line 31937 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31942 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31945 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31949 "isa_arm32.tcc"
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31953 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31957 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31960 "isa_arm32.tcc"
)
{
#line 268 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		if(!cpu.CheckCondition(cond)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
		cpu.SetCPSR_T((rm_value & 0x01) == 1);
		new_PC = rm_value & 0xFFFFFFFE;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31980 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31985 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31988 "isa_arm32.tcc"
>

void
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31995 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 285 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32005 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32011 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32014 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32019 "isa_arm32.tcc"
> *DecodeOpBlx_2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32025 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of blx (2) (branch with link and exchange version 2) instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

DATA PROCESSING INSTRUCTIONS

**********************************************/
/*******************************************************************
* and instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32076 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32079 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32083 "isa_arm32.tcc"
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32087 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32091 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32094 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32098 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32101 "isa_arm32.tcc"
)
{
#line 52 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 32115 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32120 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32123 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32127 "isa_arm32.tcc"
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32131 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32135 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32138 "isa_arm32.tcc"
)
{
#line 118 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32158 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32169 "isa_arm32.tcc"
>

void
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32176 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32186 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32195 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32200 "isa_arm32.tcc"
> *DecodeOpAnd_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32206 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32216 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32220 "isa_arm32.tcc"
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32224 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32228 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32231 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32235 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32238 "isa_arm32.tcc"
)
{
#line 63 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 32252 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32257 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32260 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32264 "isa_arm32.tcc"
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32268 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32272 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32275 "isa_arm32.tcc"
)
{
#line 135 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32296 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32307 "isa_arm32.tcc"
>

void
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32314 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32324 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32332 "isa_arm32.tcc"
>

void
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32339 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32349 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32355 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32358 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32363 "isa_arm32.tcc"
> *DecodeOpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32369 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32376 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32379 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32383 "isa_arm32.tcc"
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32387 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32391 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32394 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32398 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32401 "isa_arm32.tcc"
)
{
#line 74 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 32415 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32423 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32427 "isa_arm32.tcc"
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32431 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32435 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32438 "isa_arm32.tcc"
)
{
#line 153 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32460 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32468 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32471 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32478 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32488 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32496 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32503 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32513 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32521 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32528 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 32538 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32547 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32552 "isa_arm32.tcc"
> *DecodeOpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32558 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32565 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32568 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32572 "isa_arm32.tcc"
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32576 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32580 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32583 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32587 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32590 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 32604 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32609 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32612 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32616 "isa_arm32.tcc"
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32620 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32624 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32627 "isa_arm32.tcc"
)
{
#line 172 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32657 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32668 "isa_arm32.tcc"
>

void
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32675 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32685 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32691 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32694 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32699 "isa_arm32.tcc"
> *DecodeOpAnds_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32705 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32712 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32715 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32719 "isa_arm32.tcc"
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32723 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32727 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32730 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32734 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32737 "isa_arm32.tcc"
)
{
#line 96 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 32751 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32756 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32759 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32763 "isa_arm32.tcc"
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32767 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32771 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32774 "isa_arm32.tcc"
)
{
#line 199 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32805 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32813 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32816 "isa_arm32.tcc"
>

void
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32823 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32833 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32841 "isa_arm32.tcc"
>

void
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32848 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32858 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32864 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32867 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32872 "isa_arm32.tcc"
> *DecodeOpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32878 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32885 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32888 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32892 "isa_arm32.tcc"
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32896 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32900 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32903 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32907 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32910 "isa_arm32.tcc"
)
{
#line 107 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 32924 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32929 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32932 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32936 "isa_arm32.tcc"
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32940 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32944 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32947 "isa_arm32.tcc"
)
{
#line 227 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32979 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32990 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32997 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33007 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33012 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33015 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33022 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33032 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33037 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33040 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33047 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 33057 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33066 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33071 "isa_arm32.tcc"
> *DecodeOpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33077 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of and instruction
*******************************************************************/
/*******************************************************************
* eor instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33093 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33097 "isa_arm32.tcc"
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33101 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33105 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33108 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33112 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33115 "isa_arm32.tcc"
)
{
#line 271 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 33129 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33137 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33141 "isa_arm32.tcc"
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33145 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33149 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33152 "isa_arm32.tcc"
)
{
#line 337 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33172 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33180 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33183 "isa_arm32.tcc"
>

void
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33190 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33200 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33209 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33214 "isa_arm32.tcc"
> *DecodeOpEor_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33220 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33227 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33230 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33234 "isa_arm32.tcc"
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33238 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33242 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33245 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33249 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33252 "isa_arm32.tcc"
)
{
#line 282 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 33266 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33271 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33274 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33278 "isa_arm32.tcc"
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33282 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33286 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33289 "isa_arm32.tcc"
)
{
#line 354 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33310 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33318 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33321 "isa_arm32.tcc"
>

void
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33328 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33338 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33343 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33346 "isa_arm32.tcc"
>

void
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33353 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33363 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33369 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33372 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33377 "isa_arm32.tcc"
> *DecodeOpEor_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33383 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33393 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33397 "isa_arm32.tcc"
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33401 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33405 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33408 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33412 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33415 "isa_arm32.tcc"
)
{
#line 293 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 33429 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33437 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33441 "isa_arm32.tcc"
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33445 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33449 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33452 "isa_arm32.tcc"
)
{
#line 372 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33474 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33482 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33485 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33492 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33502 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33510 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33517 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33527 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33532 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33535 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33542 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 33552 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33558 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33561 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33566 "isa_arm32.tcc"
> *DecodeOpEor_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33572 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33582 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33586 "isa_arm32.tcc"
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33590 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33594 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33597 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33601 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33604 "isa_arm32.tcc"
)
{
#line 304 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 33618 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33626 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33630 "isa_arm32.tcc"
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33634 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33638 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33641 "isa_arm32.tcc"
)
{
#line 391 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33671 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33679 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33682 "isa_arm32.tcc"
>

void
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33689 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33699 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33705 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33708 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33713 "isa_arm32.tcc"
> *DecodeOpEors_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33719 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33729 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33733 "isa_arm32.tcc"
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33737 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33741 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33744 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33748 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33751 "isa_arm32.tcc"
)
{
#line 315 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 33765 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33770 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33773 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33777 "isa_arm32.tcc"
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33781 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33785 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33788 "isa_arm32.tcc"
)
{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33819 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33827 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33830 "isa_arm32.tcc"
>

void
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33837 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33847 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33855 "isa_arm32.tcc"
>

void
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33862 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33872 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33881 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33886 "isa_arm32.tcc"
> *DecodeOpEors_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33892 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33899 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33902 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33906 "isa_arm32.tcc"
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33910 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33914 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33917 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33921 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33924 "isa_arm32.tcc"
)
{
#line 326 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 33938 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33943 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33946 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33950 "isa_arm32.tcc"
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33954 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33958 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33961 "isa_arm32.tcc"
)
{
#line 446 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33993 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34004 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34011 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34021 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34026 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34029 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34036 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34046 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34054 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34061 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 34071 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34080 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34085 "isa_arm32.tcc"
> *DecodeOpEors_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34091 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of eor instruction
*******************************************************************/
/*******************************************************************
* sub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34107 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34111 "isa_arm32.tcc"
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34115 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34119 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34122 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34126 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34129 "isa_arm32.tcc"
)
{
#line 490 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 34143 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34148 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34151 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34155 "isa_arm32.tcc"
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34159 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34163 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34166 "isa_arm32.tcc"
)
{
#line 556 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34186 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34194 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34197 "isa_arm32.tcc"
>

void
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34204 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34214 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34220 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34223 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34228 "isa_arm32.tcc"
> *DecodeOpSub_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34234 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34244 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34248 "isa_arm32.tcc"
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34252 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34256 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34259 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34263 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34266 "isa_arm32.tcc"
)
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 34280 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34285 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34288 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34292 "isa_arm32.tcc"
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34296 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34300 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34303 "isa_arm32.tcc"
)
{
#line 573 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34324 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34335 "isa_arm32.tcc"
>

void
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34342 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34352 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34357 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34360 "isa_arm32.tcc"
>

void
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34367 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34377 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34386 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34391 "isa_arm32.tcc"
> *DecodeOpSub_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34397 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34407 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34411 "isa_arm32.tcc"
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34415 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34419 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34422 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34426 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34429 "isa_arm32.tcc"
)
{
#line 512 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 34443 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34448 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34451 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34455 "isa_arm32.tcc"
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34459 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34463 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34466 "isa_arm32.tcc"
)
{
#line 591 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34488 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34499 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34506 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34516 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34521 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34524 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34531 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34541 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34546 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34549 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34556 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 34566 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34575 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34580 "isa_arm32.tcc"
> *DecodeOpSub_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34586 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34596 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34600 "isa_arm32.tcc"
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34604 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34608 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34611 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34615 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34618 "isa_arm32.tcc"
)
{
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 34632 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34637 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34640 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34644 "isa_arm32.tcc"
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34648 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34652 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34655 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 34684 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34695 "isa_arm32.tcc"
>

void
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34702 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34712 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34718 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34721 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34726 "isa_arm32.tcc"
> *DecodeOpSubs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34732 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34739 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34742 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34746 "isa_arm32.tcc"
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34750 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34754 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34757 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34761 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34764 "isa_arm32.tcc"
)
{
#line 534 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 34778 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34786 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34790 "isa_arm32.tcc"
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34794 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34798 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34801 "isa_arm32.tcc"
)
{
#line 636 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 34831 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34842 "isa_arm32.tcc"
>

void
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34849 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34859 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34864 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34867 "isa_arm32.tcc"
>

void
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34874 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34884 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34890 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34893 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34898 "isa_arm32.tcc"
> *DecodeOpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34904 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34911 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34914 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34918 "isa_arm32.tcc"
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34922 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34926 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34929 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34933 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34936 "isa_arm32.tcc"
)
{
#line 545 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 34950 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34955 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34958 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34962 "isa_arm32.tcc"
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34966 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34970 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34973 "isa_arm32.tcc"
)
{
#line 663 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 35004 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35012 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35015 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35022 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35032 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35037 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35040 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35047 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35057 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35062 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35065 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35072 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 35082 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35088 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35091 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35096 "isa_arm32.tcc"
> *DecodeOpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35102 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of sub instruction
*******************************************************************/
/*******************************************************************
* rsb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35115 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35118 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35122 "isa_arm32.tcc"
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35126 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35130 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35133 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35137 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35140 "isa_arm32.tcc"
)
{
#line 706 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 35154 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35162 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35166 "isa_arm32.tcc"
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35170 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35174 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35177 "isa_arm32.tcc"
)
{
#line 772 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35197 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35208 "isa_arm32.tcc"
>

void
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35215 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35225 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35234 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35239 "isa_arm32.tcc"
> *DecodeOpRsb_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35245 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35252 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35255 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35259 "isa_arm32.tcc"
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35263 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35267 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35270 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35274 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35277 "isa_arm32.tcc"
)
{
#line 717 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 35291 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35296 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35299 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35303 "isa_arm32.tcc"
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35307 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35311 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35314 "isa_arm32.tcc"
)
{
#line 789 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35335 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35343 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35346 "isa_arm32.tcc"
>

void
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35353 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35363 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35371 "isa_arm32.tcc"
>

void
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35378 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35388 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35397 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35402 "isa_arm32.tcc"
> *DecodeOpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35408 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35418 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35422 "isa_arm32.tcc"
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35426 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35430 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35433 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35437 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35440 "isa_arm32.tcc"
)
{
#line 728 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 35454 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35462 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35466 "isa_arm32.tcc"
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35470 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35474 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35477 "isa_arm32.tcc"
)
{
#line 807 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35499 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35510 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35517 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35527 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35532 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35535 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35542 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35552 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35557 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35560 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35567 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 35577 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35583 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35586 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35591 "isa_arm32.tcc"
> *DecodeOpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35597 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35607 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35611 "isa_arm32.tcc"
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35615 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35619 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35622 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35626 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35629 "isa_arm32.tcc"
)
{
#line 739 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 35643 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35651 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35655 "isa_arm32.tcc"
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35659 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35663 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35666 "isa_arm32.tcc"
)
{
#line 826 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 35695 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35703 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35706 "isa_arm32.tcc"
>

void
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35713 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35723 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35729 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35732 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35737 "isa_arm32.tcc"
> *DecodeOpRsbs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35743 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35750 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35753 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35757 "isa_arm32.tcc"
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35761 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35765 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35768 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35772 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35775 "isa_arm32.tcc"
)
{
#line 750 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 35789 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35794 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35797 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35801 "isa_arm32.tcc"
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35805 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35809 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35812 "isa_arm32.tcc"
)
{
#line 852 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 35842 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35853 "isa_arm32.tcc"
>

void
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35860 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35870 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35875 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35878 "isa_arm32.tcc"
>

void
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35885 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35895 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35904 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35909 "isa_arm32.tcc"
> *DecodeOpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35915 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35922 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35925 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35929 "isa_arm32.tcc"
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35933 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35937 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35940 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35944 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35947 "isa_arm32.tcc"
)
{
#line 761 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 35961 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35966 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35969 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35973 "isa_arm32.tcc"
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35977 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35981 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35984 "isa_arm32.tcc"
)
{
#line 879 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 36015 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36026 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36033 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36043 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36051 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36058 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36068 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36073 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36076 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36083 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 36093 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36099 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36102 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36107 "isa_arm32.tcc"
> *DecodeOpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36113 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of rsb instruction
*******************************************************************/
/*******************************************************************
* add instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36126 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36129 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36133 "isa_arm32.tcc"
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36137 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36141 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36144 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36148 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36151 "isa_arm32.tcc"
)
{
#line 922 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 36165 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36173 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36177 "isa_arm32.tcc"
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36181 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36185 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36188 "isa_arm32.tcc"
)
{
#line 988 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36208 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36216 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36219 "isa_arm32.tcc"
>

void
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36226 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36236 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36242 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36245 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36250 "isa_arm32.tcc"
> *DecodeOpAdd_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36256 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36263 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36266 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36270 "isa_arm32.tcc"
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36274 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36278 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36281 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36285 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36288 "isa_arm32.tcc"
)
{
#line 933 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 36302 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36307 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36310 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36314 "isa_arm32.tcc"
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36318 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36322 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36325 "isa_arm32.tcc"
)
{
#line 1005 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36346 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36354 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36357 "isa_arm32.tcc"
>

void
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36364 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36374 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36379 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36382 "isa_arm32.tcc"
>

void
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36389 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36399 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36408 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36413 "isa_arm32.tcc"
> *DecodeOpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36419 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36426 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36429 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36433 "isa_arm32.tcc"
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36437 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36441 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36444 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36448 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36451 "isa_arm32.tcc"
)
{
#line 944 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 36465 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36470 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36473 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36477 "isa_arm32.tcc"
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36481 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36485 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36488 "isa_arm32.tcc"
)
{
#line 1023 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36510 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36521 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36528 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36538 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36546 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36553 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36563 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36571 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36578 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 36588 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36594 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36597 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36602 "isa_arm32.tcc"
> *DecodeOpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36608 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36618 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36622 "isa_arm32.tcc"
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36626 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36630 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36633 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36637 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36640 "isa_arm32.tcc"
)
{
#line 955 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 36654 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36659 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36662 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36666 "isa_arm32.tcc"
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36670 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36674 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36677 "isa_arm32.tcc"
)
{
#line 1042 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 36710 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36718 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36721 "isa_arm32.tcc"
>

void
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36728 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36738 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36747 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36752 "isa_arm32.tcc"
> *DecodeOpAdds_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36758 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36765 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36768 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36772 "isa_arm32.tcc"
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36776 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36780 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36783 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36787 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36790 "isa_arm32.tcc"
)
{
#line 966 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 36804 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36809 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36812 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36816 "isa_arm32.tcc"
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36820 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36824 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36827 "isa_arm32.tcc"
)
{
#line 1072 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 36861 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36869 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36872 "isa_arm32.tcc"
>

void
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36879 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36889 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36894 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36897 "isa_arm32.tcc"
>

void
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36904 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36914 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36920 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36923 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36928 "isa_arm32.tcc"
> *DecodeOpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36934 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36944 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36948 "isa_arm32.tcc"
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36952 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36956 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36959 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36963 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36966 "isa_arm32.tcc"
)
{
#line 977 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 36980 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36985 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36988 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36992 "isa_arm32.tcc"
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36996 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37000 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37003 "isa_arm32.tcc"
)
{
#line 1103 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37038 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37046 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37049 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37056 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37066 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37071 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37074 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37081 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37091 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37099 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37106 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 37116 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37122 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37125 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37130 "isa_arm32.tcc"
> *DecodeOpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37136 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of add instruction
*******************************************************************/
/*******************************************************************
* adc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37149 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37152 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37156 "isa_arm32.tcc"
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37160 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37164 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37167 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37171 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37174 "isa_arm32.tcc"
)
{
#line 1150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 37188 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37196 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37200 "isa_arm32.tcc"
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37204 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37208 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37211 "isa_arm32.tcc"
)
{
#line 1216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37233 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37244 "isa_arm32.tcc"
>

void
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37251 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37261 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37267 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37270 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37275 "isa_arm32.tcc"
> *DecodeOpAdc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37281 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37288 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37291 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37295 "isa_arm32.tcc"
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37299 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37303 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37306 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37310 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37313 "isa_arm32.tcc"
)
{
#line 1161 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 37327 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37335 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37339 "isa_arm32.tcc"
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37343 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37347 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37350 "isa_arm32.tcc"
)
{
#line 1235 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37373 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37381 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37384 "isa_arm32.tcc"
>

void
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37391 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37401 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37406 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37409 "isa_arm32.tcc"
>

void
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37416 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37426 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37432 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37435 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37440 "isa_arm32.tcc"
> *DecodeOpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37446 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37453 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37456 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37460 "isa_arm32.tcc"
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37464 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37468 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37471 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37475 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37478 "isa_arm32.tcc"
)
{
#line 1172 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 37492 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37497 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37500 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37504 "isa_arm32.tcc"
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37508 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37512 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37515 "isa_arm32.tcc"
)
{
#line 1255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37539 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37547 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37550 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37557 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37567 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37575 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37582 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37592 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37600 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37607 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 37617 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37626 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37631 "isa_arm32.tcc"
> *DecodeOpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37637 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37647 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37651 "isa_arm32.tcc"
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37655 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37659 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37662 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37666 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37669 "isa_arm32.tcc"
)
{
#line 1183 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 37683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37691 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37695 "isa_arm32.tcc"
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37699 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37703 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37706 "isa_arm32.tcc"
)
{
#line 1276 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37741 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37749 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37752 "isa_arm32.tcc"
>

void
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37759 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37769 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37775 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37778 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37783 "isa_arm32.tcc"
> *DecodeOpAdcs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37789 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37799 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37803 "isa_arm32.tcc"
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37807 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37811 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37814 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37818 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37821 "isa_arm32.tcc"
)
{
#line 1194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 37835 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37840 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37843 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37847 "isa_arm32.tcc"
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37851 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37855 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37858 "isa_arm32.tcc"
)
{
#line 1308 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37894 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37905 "isa_arm32.tcc"
>

void
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37912 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37922 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37930 "isa_arm32.tcc"
>

void
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37937 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37947 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37956 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37961 "isa_arm32.tcc"
> *DecodeOpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37967 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37977 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37981 "isa_arm32.tcc"
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37985 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37989 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37992 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37996 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37999 "isa_arm32.tcc"
)
{
#line 1205 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 38013 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38018 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38021 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38025 "isa_arm32.tcc"
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38029 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38033 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38036 "isa_arm32.tcc"
)
{
#line 1341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 38073 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38084 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38091 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38101 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38106 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38109 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38116 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38126 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38134 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38141 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 38151 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38160 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38165 "isa_arm32.tcc"
> *DecodeOpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38171 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of adc instruction
*******************************************************************/
/*******************************************************************
* sbc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38187 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38191 "isa_arm32.tcc"
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38195 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38199 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38202 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38206 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38209 "isa_arm32.tcc"
)
{
#line 1390 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 38223 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38231 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38235 "isa_arm32.tcc"
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38239 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38243 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38246 "isa_arm32.tcc"
)
{
#line 1456 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38268 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38276 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38279 "isa_arm32.tcc"
>

void
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38286 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38296 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38302 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38305 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38310 "isa_arm32.tcc"
> *DecodeOpSbc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38316 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38326 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38330 "isa_arm32.tcc"
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38334 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38338 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38341 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38345 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38348 "isa_arm32.tcc"
)
{
#line 1401 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 38362 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38367 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38370 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38374 "isa_arm32.tcc"
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38378 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38382 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38385 "isa_arm32.tcc"
)
{
#line 1475 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38408 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38416 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38419 "isa_arm32.tcc"
>

void
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38426 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38436 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38444 "isa_arm32.tcc"
>

void
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38451 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38461 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38467 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38470 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38475 "isa_arm32.tcc"
> *DecodeOpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38481 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38491 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38495 "isa_arm32.tcc"
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38499 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38503 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38506 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38510 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38513 "isa_arm32.tcc"
)
{
#line 1412 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 38527 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38532 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38535 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38539 "isa_arm32.tcc"
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38543 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38547 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38550 "isa_arm32.tcc"
)
{
#line 1495 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38574 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38585 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38592 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38602 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38610 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38617 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38627 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38632 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38635 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38642 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 38652 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38658 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38661 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38666 "isa_arm32.tcc"
> *DecodeOpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38672 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38679 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38682 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38686 "isa_arm32.tcc"
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38690 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38694 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38697 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38701 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38704 "isa_arm32.tcc"
)
{
#line 1423 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 38718 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38723 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38726 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38730 "isa_arm32.tcc"
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38734 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38738 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38741 "isa_arm32.tcc"
)
{
#line 1516 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 38772 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38783 "isa_arm32.tcc"
>

void
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38790 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38800 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38809 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38814 "isa_arm32.tcc"
> *DecodeOpSbcs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38820 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38827 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38830 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38834 "isa_arm32.tcc"
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38838 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38842 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38845 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38849 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38852 "isa_arm32.tcc"
)
{
#line 1434 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 38866 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38871 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38874 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38878 "isa_arm32.tcc"
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38882 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38886 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38889 "isa_arm32.tcc"
)
{
#line 1544 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 38921 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38929 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38932 "isa_arm32.tcc"
>

void
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38939 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38949 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38957 "isa_arm32.tcc"
>

void
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38964 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38974 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38980 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38983 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38988 "isa_arm32.tcc"
> *DecodeOpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38994 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39004 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39008 "isa_arm32.tcc"
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39012 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39016 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39019 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39023 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39026 "isa_arm32.tcc"
)
{
#line 1445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 39040 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39048 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39052 "isa_arm32.tcc"
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39056 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39060 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39063 "isa_arm32.tcc"
)
{
#line 1573 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 39096 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39107 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39114 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39124 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39129 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39132 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39139 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39149 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39157 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39164 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 39174 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39180 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39183 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39188 "isa_arm32.tcc"
> *DecodeOpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39194 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of sbc instruction
*******************************************************************/
/*******************************************************************
* rsc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39207 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39210 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39214 "isa_arm32.tcc"
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39218 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39222 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39225 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39229 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39232 "isa_arm32.tcc"
)
{
#line 1618 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 39246 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39251 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39254 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39258 "isa_arm32.tcc"
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39262 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39266 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39269 "isa_arm32.tcc"
)
{
#line 1684 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39291 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39302 "isa_arm32.tcc"
>

void
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39309 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39319 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39328 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39333 "isa_arm32.tcc"
> *DecodeOpRsc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39339 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39346 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39349 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39353 "isa_arm32.tcc"
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39357 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39361 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39364 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39368 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39371 "isa_arm32.tcc"
)
{
#line 1629 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 39385 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39393 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39397 "isa_arm32.tcc"
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39401 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39405 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39408 "isa_arm32.tcc"
)
{
#line 1703 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39431 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39442 "isa_arm32.tcc"
>

void
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39449 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39459 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39467 "isa_arm32.tcc"
>

void
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39474 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39484 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39493 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39498 "isa_arm32.tcc"
> *DecodeOpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39504 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39511 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39514 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39518 "isa_arm32.tcc"
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39522 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39526 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39529 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39533 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39536 "isa_arm32.tcc"
)
{
#line 1640 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 39550 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39555 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39558 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39562 "isa_arm32.tcc"
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39566 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39570 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39573 "isa_arm32.tcc"
)
{
#line 1723 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39597 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39605 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39608 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39615 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39625 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39630 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39633 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39640 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39650 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39658 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39665 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 39675 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39681 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39684 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39689 "isa_arm32.tcc"
> *DecodeOpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39695 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39705 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39709 "isa_arm32.tcc"
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39713 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39717 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39720 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39724 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39727 "isa_arm32.tcc"
)
{
#line 1651 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 39741 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39746 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39749 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39753 "isa_arm32.tcc"
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39757 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39761 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39764 "isa_arm32.tcc"
)
{
#line 1744 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 39795 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39803 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39806 "isa_arm32.tcc"
>

void
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39813 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39823 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39829 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39832 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39837 "isa_arm32.tcc"
> *DecodeOpRscs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39843 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39853 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39857 "isa_arm32.tcc"
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39861 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39865 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39868 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39872 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39875 "isa_arm32.tcc"
)
{
#line 1662 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 39889 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39894 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39897 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39901 "isa_arm32.tcc"
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39905 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39909 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39912 "isa_arm32.tcc"
)
{
#line 1772 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 39944 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39952 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39955 "isa_arm32.tcc"
>

void
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39962 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39972 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39977 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39980 "isa_arm32.tcc"
>

void
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39987 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39997 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40006 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40011 "isa_arm32.tcc"
> *DecodeOpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40017 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40027 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40031 "isa_arm32.tcc"
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40035 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40039 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40042 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40046 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40049 "isa_arm32.tcc"
)
{
#line 1673 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 40063 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40068 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40071 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40075 "isa_arm32.tcc"
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40079 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40083 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40086 "isa_arm32.tcc"
)
{
#line 1801 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 40119 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40130 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40137 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40147 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40155 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40162 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40172 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40180 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40187 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 40197 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40203 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40206 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40211 "isa_arm32.tcc"
> *DecodeOpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40217 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of rsc instruction
*******************************************************************/
/*******************************************************************
* tst instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40233 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40237 "isa_arm32.tcc"
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40241 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40245 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40248 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40252 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40255 "isa_arm32.tcc"
)
{
#line 1843 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 40267 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40272 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40275 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40279 "isa_arm32.tcc"
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40283 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40287 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40290 "isa_arm32.tcc"
)
{
#line 1870 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40315 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40326 "isa_arm32.tcc"
>

void
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40333 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40343 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40349 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40352 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40357 "isa_arm32.tcc"
> *DecodeOpTst_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40363 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40370 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40373 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40377 "isa_arm32.tcc"
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40381 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40385 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40388 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40392 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40395 "isa_arm32.tcc"
)
{
#line 1852 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 40407 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40412 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40415 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40419 "isa_arm32.tcc"
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40423 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40427 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40430 "isa_arm32.tcc"
)
{
#line 1892 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40456 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40467 "isa_arm32.tcc"
>

void
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40474 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40484 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40492 "isa_arm32.tcc"
>

void
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40499 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40509 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40515 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40518 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40523 "isa_arm32.tcc"
> *DecodeOpTst_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40529 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40536 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40539 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40543 "isa_arm32.tcc"
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40547 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40551 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40554 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40558 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40561 "isa_arm32.tcc"
)
{
#line 1861 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 40573 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40581 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40585 "isa_arm32.tcc"
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40589 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40593 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40596 "isa_arm32.tcc"
)
{
#line 1915 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40623 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40634 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40641 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40651 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40656 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40659 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40666 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40676 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40681 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40684 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40691 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 40701 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40707 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40710 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40715 "isa_arm32.tcc"
> *DecodeOpTst_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40721 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of tst instruction
*******************************************************************/
/*******************************************************************
* teq instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40734 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40737 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40741 "isa_arm32.tcc"
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40745 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40749 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40752 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40756 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40759 "isa_arm32.tcc"
)
{
#line 1951 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 40771 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40779 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40783 "isa_arm32.tcc"
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40787 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40791 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40794 "isa_arm32.tcc"
)
{
#line 1978 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40819 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40827 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40830 "isa_arm32.tcc"
>

void
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40837 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40847 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40856 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40861 "isa_arm32.tcc"
> *DecodeOpTeq_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40867 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40877 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40881 "isa_arm32.tcc"
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40885 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40889 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40892 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40896 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40899 "isa_arm32.tcc"
)
{
#line 1960 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 40911 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40919 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40923 "isa_arm32.tcc"
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40927 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40931 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40934 "isa_arm32.tcc"
)
{
#line 2000 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40960 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40971 "isa_arm32.tcc"
>

void
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40978 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40988 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40996 "isa_arm32.tcc"
>

void
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41003 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41013 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41019 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41022 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41027 "isa_arm32.tcc"
> *DecodeOpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41033 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41040 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41043 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41047 "isa_arm32.tcc"
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41051 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41055 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41058 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41062 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41065 "isa_arm32.tcc"
)
{
#line 1969 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 41077 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41085 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41089 "isa_arm32.tcc"
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41093 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41097 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41100 "isa_arm32.tcc"
)
{
#line 2023 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 41127 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41135 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41138 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41145 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41155 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41160 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41163 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41170 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41180 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41188 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41195 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 41205 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41214 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41219 "isa_arm32.tcc"
> *DecodeOpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41225 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of teq instruction
*******************************************************************/
/*******************************************************************
* cmp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41238 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41241 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41245 "isa_arm32.tcc"
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41249 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41253 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41256 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41260 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41263 "isa_arm32.tcc"
)
{
#line 2059 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 41275 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41280 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41283 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41287 "isa_arm32.tcc"
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41291 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41295 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41298 "isa_arm32.tcc"
)
{
#line 2087 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41323 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41334 "isa_arm32.tcc"
>

void
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41341 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41351 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41357 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41360 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41365 "isa_arm32.tcc"
> *DecodeOpCmp_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41371 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41381 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41385 "isa_arm32.tcc"
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41389 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41393 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41396 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41400 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41403 "isa_arm32.tcc"
)
{
#line 2068 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 41415 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41423 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41427 "isa_arm32.tcc"
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41431 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41435 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41438 "isa_arm32.tcc"
)
{
#line 2109 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N((res & 0x80000000) != 0);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41464 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41475 "isa_arm32.tcc"
>

void
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41482 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41492 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41497 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41500 "isa_arm32.tcc"
>

void
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41507 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41517 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41523 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41526 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41531 "isa_arm32.tcc"
> *DecodeOpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41537 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41547 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41551 "isa_arm32.tcc"
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41555 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41559 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41562 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41566 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41569 "isa_arm32.tcc"
)
{
#line 2078 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 41581 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41586 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41589 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41593 "isa_arm32.tcc"
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41597 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41601 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41604 "isa_arm32.tcc"
)
{
#line 2132 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41631 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41639 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41642 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41649 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41659 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41667 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41674 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41684 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41692 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41699 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 41709 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41718 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41723 "isa_arm32.tcc"
> *DecodeOpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41729 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cmp instruction
*******************************************************************/
/*******************************************************************
* cmn instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41745 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41749 "isa_arm32.tcc"
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41753 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41757 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41760 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41764 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41767 "isa_arm32.tcc"
)
{
#line 2168 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 41779 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41784 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41787 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41791 "isa_arm32.tcc"
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41795 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41799 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41802 "isa_arm32.tcc"
)
{
#line 2195 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 41827 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41838 "isa_arm32.tcc"
>

void
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41845 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41855 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41861 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41864 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41869 "isa_arm32.tcc"
> *DecodeOpCmn_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41875 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41882 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41885 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41889 "isa_arm32.tcc"
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41893 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41897 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41900 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41904 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41907 "isa_arm32.tcc"
)
{
#line 2177 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 41919 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41924 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41927 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41931 "isa_arm32.tcc"
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41935 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41939 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41942 "isa_arm32.tcc"
)
{
#line 2217 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 41968 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41976 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41979 "isa_arm32.tcc"
>

void
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41986 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41996 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42004 "isa_arm32.tcc"
>

void
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42011 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42021 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42027 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42030 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42035 "isa_arm32.tcc"
> *DecodeOpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42041 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42051 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42055 "isa_arm32.tcc"
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42059 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42063 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42066 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42070 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42073 "isa_arm32.tcc"
)
{
#line 2186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 42085 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42093 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42097 "isa_arm32.tcc"
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42101 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42105 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42108 "isa_arm32.tcc"
)
{
#line 2240 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 42135 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42143 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42146 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42153 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42163 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42168 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42171 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42178 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42188 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42196 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42203 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 42213 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42219 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42222 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42227 "isa_arm32.tcc"
> *DecodeOpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42233 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cmn instruction
*******************************************************************/
/*******************************************************************
* orr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42246 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42249 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42253 "isa_arm32.tcc"
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42257 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42261 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42264 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42268 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42271 "isa_arm32.tcc"
)
{
#line 2279 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 42285 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42290 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42293 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42297 "isa_arm32.tcc"
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42301 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42305 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42308 "isa_arm32.tcc"
)
{
#line 2345 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42328 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42336 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42339 "isa_arm32.tcc"
>

void
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42346 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42356 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42365 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42370 "isa_arm32.tcc"
> *DecodeOpOrr_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42376 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42386 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42390 "isa_arm32.tcc"
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42394 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42398 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42401 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42405 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42408 "isa_arm32.tcc"
)
{
#line 2290 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 42422 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42427 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42430 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42434 "isa_arm32.tcc"
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42438 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42442 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42445 "isa_arm32.tcc"
)
{
#line 2362 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42466 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42474 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42477 "isa_arm32.tcc"
>

void
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42484 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42494 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42502 "isa_arm32.tcc"
>

void
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42509 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42519 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42528 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42533 "isa_arm32.tcc"
> *DecodeOpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42539 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42546 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42549 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42553 "isa_arm32.tcc"
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42557 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42561 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42564 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42568 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42571 "isa_arm32.tcc"
)
{
#line 2301 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 42585 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42590 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42593 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42597 "isa_arm32.tcc"
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42601 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42605 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42608 "isa_arm32.tcc"
)
{
#line 2380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42630 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42641 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42648 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42658 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42666 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42673 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42691 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42698 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 42708 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42717 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42722 "isa_arm32.tcc"
> *DecodeOpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42728 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42735 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42738 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42742 "isa_arm32.tcc"
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42746 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42750 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42753 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42757 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42760 "isa_arm32.tcc"
)
{
#line 2312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 42774 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42782 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42786 "isa_arm32.tcc"
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42790 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42794 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42797 "isa_arm32.tcc"
)
{
#line 2399 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 42827 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42838 "isa_arm32.tcc"
>

void
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42845 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42855 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42861 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42864 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42869 "isa_arm32.tcc"
> *DecodeOpOrrs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42875 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42882 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42885 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42889 "isa_arm32.tcc"
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42893 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42897 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42900 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42904 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42907 "isa_arm32.tcc"
)
{
#line 2323 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 42921 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42929 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42933 "isa_arm32.tcc"
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42937 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42941 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42944 "isa_arm32.tcc"
)
{
#line 2426 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 42975 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42983 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42986 "isa_arm32.tcc"
>

void
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42993 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 43003 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43008 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43011 "isa_arm32.tcc"
>

void
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43018 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43028 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43034 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43037 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43042 "isa_arm32.tcc"
> *DecodeOpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43048 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43055 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43058 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43062 "isa_arm32.tcc"
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43066 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43070 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43073 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43077 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43080 "isa_arm32.tcc"
)
{
#line 2334 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43094 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43099 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43102 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43106 "isa_arm32.tcc"
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43110 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43114 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43117 "isa_arm32.tcc"
)
{
#line 2454 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43149 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43160 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43167 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 43177 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43182 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43185 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43192 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43202 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43207 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43210 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43217 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 43227 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43233 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43236 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43241 "isa_arm32.tcc"
> *DecodeOpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43247 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of orr instruction
*******************************************************************/
/*******************************************************************
* mov instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43260 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43263 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43267 "isa_arm32.tcc"
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43271 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43275 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43278 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43282 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43285 "isa_arm32.tcc"
)
{
#line 2501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 43297 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43302 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43305 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43309 "isa_arm32.tcc"
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43313 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43317 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43320 "isa_arm32.tcc"
)
{
#line 2555 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43336 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43342 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43345 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43350 "isa_arm32.tcc"
> *DecodeOpMov_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43356 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43366 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43370 "isa_arm32.tcc"
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43374 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43378 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43381 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43385 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43388 "isa_arm32.tcc"
)
{
#line 2510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 43400 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43408 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43412 "isa_arm32.tcc"
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43416 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43420 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43423 "isa_arm32.tcc"
)
{
#line 2568 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43442 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43447 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43450 "isa_arm32.tcc"
>

void
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43457 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43467 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43473 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43476 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43481 "isa_arm32.tcc"
> *DecodeOpMov_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43487 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43494 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43497 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43501 "isa_arm32.tcc"
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43505 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43509 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43512 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43516 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43519 "isa_arm32.tcc"
)
{
#line 2519 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43531 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43536 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43539 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43543 "isa_arm32.tcc"
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43547 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43551 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43554 "isa_arm32.tcc"
)
{
#line 2584 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43574 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43582 "isa_arm32.tcc"
>

void
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43589 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43599 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43607 "isa_arm32.tcc"
>

void
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43614 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 43624 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43630 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43633 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43638 "isa_arm32.tcc"
> *DecodeOpMov_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43644 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43651 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43654 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43658 "isa_arm32.tcc"
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43662 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43666 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43669 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43673 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43676 "isa_arm32.tcc"
)
{
#line 2528 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 43688 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43696 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43700 "isa_arm32.tcc"
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43704 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43708 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43711 "isa_arm32.tcc"
)
{
#line 2601 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43737 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43743 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43746 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43751 "isa_arm32.tcc"
> *DecodeOpMovs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43757 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43764 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43767 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43771 "isa_arm32.tcc"
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43775 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43779 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43782 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43786 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43789 "isa_arm32.tcc"
)
{
#line 2537 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 43801 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43809 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43813 "isa_arm32.tcc"
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43817 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43821 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43824 "isa_arm32.tcc"
)
{
#line 2624 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43853 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43858 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43861 "isa_arm32.tcc"
>

void
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43868 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43878 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43884 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43887 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43892 "isa_arm32.tcc"
> *DecodeOpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43898 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43905 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43908 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43912 "isa_arm32.tcc"
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43916 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43920 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43923 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43927 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43930 "isa_arm32.tcc"
)
{
#line 2546 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43942 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43950 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43954 "isa_arm32.tcc"
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43958 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43962 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43965 "isa_arm32.tcc"
)
{
#line 2650 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43995 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44003 "isa_arm32.tcc"
>

void
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44010 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44020 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44025 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44028 "isa_arm32.tcc"
>

void
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44035 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 44045 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44054 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44059 "isa_arm32.tcc"
> *DecodeOpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44065 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mov instruction
*******************************************************************/
/*******************************************************************
* bic instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44078 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44081 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44085 "isa_arm32.tcc"
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44089 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44093 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44096 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44100 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44103 "isa_arm32.tcc"
)
{
#line 2692 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 44117 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44122 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44125 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44129 "isa_arm32.tcc"
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44133 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44137 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44140 "isa_arm32.tcc"
)
{
#line 2758 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44160 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44168 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44171 "isa_arm32.tcc"
>

void
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44178 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44188 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44194 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44197 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44202 "isa_arm32.tcc"
> *DecodeOpBic_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44208 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44215 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44218 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44222 "isa_arm32.tcc"
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44226 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44230 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44233 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44237 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44240 "isa_arm32.tcc"
)
{
#line 2703 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 44254 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44262 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44266 "isa_arm32.tcc"
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44270 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44274 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44277 "isa_arm32.tcc"
)
{
#line 2775 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44298 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44309 "isa_arm32.tcc"
>

void
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44316 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44326 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44334 "isa_arm32.tcc"
>

void
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44341 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44351 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44357 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44360 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44365 "isa_arm32.tcc"
> *DecodeOpBic_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44371 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44381 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44385 "isa_arm32.tcc"
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44389 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44393 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44396 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44400 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44403 "isa_arm32.tcc"
)
{
#line 2714 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 44417 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44422 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44425 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44429 "isa_arm32.tcc"
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44433 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44437 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44440 "isa_arm32.tcc"
)
{
#line 2793 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44462 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44470 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44473 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44480 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44490 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44498 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44505 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44515 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44523 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44530 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 44540 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44546 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44549 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44554 "isa_arm32.tcc"
> *DecodeOpBic_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44560 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44570 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44574 "isa_arm32.tcc"
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44578 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44582 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44585 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44589 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44592 "isa_arm32.tcc"
)
{
#line 2725 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 44606 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44611 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44614 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44618 "isa_arm32.tcc"
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44622 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44626 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44629 "isa_arm32.tcc"
)
{
#line 2812 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44659 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44670 "isa_arm32.tcc"
>

void
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44677 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44687 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44696 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44701 "isa_arm32.tcc"
> *DecodeOpBics_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44707 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44717 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44721 "isa_arm32.tcc"
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44725 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44729 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44732 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44736 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44739 "isa_arm32.tcc"
)
{
#line 2736 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 44753 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44758 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44761 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44765 "isa_arm32.tcc"
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44769 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44773 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44776 "isa_arm32.tcc"
)
{
#line 2839 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44807 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44815 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44818 "isa_arm32.tcc"
>

void
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44825 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44835 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44840 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44843 "isa_arm32.tcc"
>

void
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44850 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44860 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44866 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44869 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44874 "isa_arm32.tcc"
> *DecodeOpBics_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44880 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44890 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44894 "isa_arm32.tcc"
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44898 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44902 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44905 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44909 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44912 "isa_arm32.tcc"
)
{
#line 2747 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 44926 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44931 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44934 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44938 "isa_arm32.tcc"
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44942 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44946 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44949 "isa_arm32.tcc"
)
{
#line 2867 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44981 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44989 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44992 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44999 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 45009 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45017 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45024 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45034 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45042 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45049 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45059 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45065 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45068 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45073 "isa_arm32.tcc"
> *DecodeOpBics_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45079 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bic instruction
*******************************************************************/
/*******************************************************************
* mvn instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45092 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45095 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45099 "isa_arm32.tcc"
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45103 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45107 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45110 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45114 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45117 "isa_arm32.tcc"
)
{
#line 2911 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 45129 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45137 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45141 "isa_arm32.tcc"
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45145 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45149 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45152 "isa_arm32.tcc"
)
{
#line 2965 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45168 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45174 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45177 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45182 "isa_arm32.tcc"
> *DecodeOpMvn_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45188 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45195 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45198 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45202 "isa_arm32.tcc"
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45206 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45210 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45213 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45217 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45220 "isa_arm32.tcc"
)
{
#line 2920 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 45232 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45237 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45240 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45244 "isa_arm32.tcc"
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45248 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45252 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45255 "isa_arm32.tcc"
)
{
#line 2978 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45274 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45282 "isa_arm32.tcc"
>

void
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45289 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45299 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45308 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45313 "isa_arm32.tcc"
> *DecodeOpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45319 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45326 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45329 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45333 "isa_arm32.tcc"
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45337 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45341 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45344 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45348 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45351 "isa_arm32.tcc"
)
{
#line 2929 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 45363 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45371 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45375 "isa_arm32.tcc"
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45379 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45383 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45386 "isa_arm32.tcc"
)
{
#line 2994 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45406 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45414 "isa_arm32.tcc"
>

void
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45421 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45431 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45439 "isa_arm32.tcc"
>

void
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45446 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45456 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45465 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45470 "isa_arm32.tcc"
> *DecodeOpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45476 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45486 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45490 "isa_arm32.tcc"
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45494 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45498 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45501 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45505 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45508 "isa_arm32.tcc"
)
{
#line 2938 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 45520 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45528 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45532 "isa_arm32.tcc"
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45536 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45540 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45543 "isa_arm32.tcc"
)
{
#line 3011 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45569 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45575 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45578 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45583 "isa_arm32.tcc"
> *DecodeOpMvns_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45589 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45599 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45603 "isa_arm32.tcc"
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45607 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45611 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45614 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45618 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45621 "isa_arm32.tcc"
)
{
#line 2947 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 45633 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45641 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45645 "isa_arm32.tcc"
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45649 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45653 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45656 "isa_arm32.tcc"
)
{
#line 3034 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45685 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45693 "isa_arm32.tcc"
>

void
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45700 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45710 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45719 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45724 "isa_arm32.tcc"
> *DecodeOpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45730 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45737 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45740 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45744 "isa_arm32.tcc"
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45748 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45752 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45755 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45759 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45762 "isa_arm32.tcc"
)
{
#line 2956 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 45774 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45782 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45786 "isa_arm32.tcc"
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45790 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45794 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45797 "isa_arm32.tcc"
)
{
#line 3060 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45827 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45835 "isa_arm32.tcc"
>

void
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45842 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45852 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45860 "isa_arm32.tcc"
>

void
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45867 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45877 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45886 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45891 "isa_arm32.tcc"
> *DecodeOpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45897 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

ARMV5E DATA PROCESSING INSTRUCTIONS

**********************************************/
/*******************************************************************
* qadd instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45945 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45948 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45952 "isa_arm32.tcc"
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45956 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45960 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45963 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45967 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45970 "isa_arm32.tcc"
)
{
#line 56 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qadd";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 45981 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45986 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45989 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45993 "isa_arm32.tcc"
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45997 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46001 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46004 "isa_arm32.tcc"
)
{
#line 64 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat, cpu.GetGPR(rn) , cpu.GetGPR(rm));
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46025 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46031 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46034 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46039 "isa_arm32.tcc"
> *DecodeOpQadd(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46045 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qadd instruction
*******************************************************************/
/*******************************************************************
* qsub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46058 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46061 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46065 "isa_arm32.tcc"
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46069 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46073 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46076 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46080 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46083 "isa_arm32.tcc"
)
{
#line 93 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qsub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46094 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46099 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46102 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46106 "isa_arm32.tcc"
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46110 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46114 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46117 "isa_arm32.tcc"
)
{
#line 101 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , cpu.GetGPR(rn));
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46138 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46144 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46147 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46152 "isa_arm32.tcc"
> *DecodeOpQsub(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46158 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qsub instruction
*******************************************************************/
/*******************************************************************
* qdadd instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46171 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46174 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46178 "isa_arm32.tcc"
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46182 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46186 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46189 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46193 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46196 "isa_arm32.tcc"
)
{
#line 130 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qdadd";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46207 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46215 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46219 "isa_arm32.tcc"
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46223 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46227 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46230 "isa_arm32.tcc"
)
{
#line 138 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat, does_sat_tmp;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
		SignedSatAdd32(result, does_sat, cpu.GetGPR(rm) , result);
		cpu.SetCPSR_Q(does_sat == 1 || does_sat_tmp == 1? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46252 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46261 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46266 "isa_arm32.tcc"
> *DecodeOpQdadd(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQdadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46272 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qdadd instruction
*******************************************************************/
/*******************************************************************
* qdsub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46285 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46288 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46292 "isa_arm32.tcc"
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46296 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46300 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46303 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46307 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46310 "isa_arm32.tcc"
)
{
#line 168 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qdsub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46321 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46326 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46329 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46333 "isa_arm32.tcc"
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46337 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46341 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46344 "isa_arm32.tcc"
)
{
#line 176 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat, does_sat_tmp;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
		SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , result);
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46366 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46372 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46375 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46380 "isa_arm32.tcc"
> *DecodeOpQdsub(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQdsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46386 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qdsub instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

MULTIPLY INSTRUCTIONS

**********************************************/
/* TODO: implement missing instructions:for E variants of version 5 and above
*  - smulxy
*  - smulwy
*  - smlaxy
*  - smlawy
*  - smlalxy
*/
/*******************************************************************
* mla instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46444 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46447 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46451 "isa_arm32.tcc"
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46455 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46459 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46462 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46466 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46469 "isa_arm32.tcc"
)
{
#line 55 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "mla";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "r" << rs << ", "
		<< "r" << rn << "";
	}
#line 46482 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46490 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46494 "isa_arm32.tcc"
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46498 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46502 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46505 "isa_arm32.tcc"
)
{
#line 65 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rm_value * rs_value;
		res += rn_value;
		cpu.SetGPR(rd, res);

		if(s) {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
		}
	}
#line 46530 "isa_arm32.tcc"
}
/*
* end of umull instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46538 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46541 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46548 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 333 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 46558 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46563 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46566 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46573 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46583 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46588 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46591 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46598 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46608 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46617 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46622 "isa_arm32.tcc"
> *DecodeOpMla(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMla<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46628 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mla instruction
*******************************************************************/
/*******************************************************************
* mul instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46641 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46644 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46648 "isa_arm32.tcc"
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46652 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46656 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46659 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46663 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46666 "isa_arm32.tcc"
)
{
#line 97 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "mul";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 46678 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46686 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46690 "isa_arm32.tcc"
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46694 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46698 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46701 "isa_arm32.tcc"
)
{
#line 106 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rm_value * rs_value;
		cpu.SetGPR(rd, res);

		if(s) {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
		}
	}
#line 46724 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46729 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46732 "isa_arm32.tcc"
>

void
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46739 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46749 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46754 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46757 "isa_arm32.tcc"
>

void
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46764 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46774 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46783 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46788 "isa_arm32.tcc"
> *DecodeOpMul(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMul<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46794 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mul instruction
*******************************************************************/
/*******************************************************************
* smlal instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46811 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46814 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46818 "isa_arm32.tcc"
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46822 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46826 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46829 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46833 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46836 "isa_arm32.tcc"
)
{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "smlal";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 46849 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46854 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46857 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46861 "isa_arm32.tcc"
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46865 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46869 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46872 "isa_arm32.tcc"
)
{
#line 151 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rdhi_value = inherited::rdhi_init + cpu.GetGPR(rdhi);
		typename CONFIG::reg_t rdlo_value = inherited::rdlo_init + cpu.GetGPR(rdlo);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rdlo_value + (((uint64_t)rdhi_value) << 32);
		res = (int64_t)res + ((int64_t)(int32_t)rm_value) * ((int64_t)(int32_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 46902 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46907 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46910 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46917 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46927 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46935 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46942 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46952 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46957 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46960 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46967 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 357 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdhi == 15) inherited::rdhi_init = 8;
		else inherited::rdhi_init = 0;
	}
#line 46977 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46985 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46992 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 365 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdlo == 15) inherited::rdlo_init = 8;
		else inherited::rdlo_init = 0;
	}
#line 47002 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47008 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47011 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47016 "isa_arm32.tcc"
> *DecodeOpSmlal(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47022 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlal instruction
*******************************************************************/
/*******************************************************************
* smull instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47042 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47046 "isa_arm32.tcc"
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47050 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47054 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47057 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47061 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47064 "isa_arm32.tcc"
)
{
#line 193 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "smull";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47077 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47085 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47089 "isa_arm32.tcc"
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47093 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47097 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47100 "isa_arm32.tcc"
)
{
#line 203 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = ((int64_t)(int32_t)rm_value) * ((int64_t)(int32_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47127 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47132 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47135 "isa_arm32.tcc"
>

void
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47142 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47152 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47160 "isa_arm32.tcc"
>

void
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47167 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47177 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47186 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47191 "isa_arm32.tcc"
> *DecodeOpSmull(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47197 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smull instruction
*******************************************************************/
/*******************************************************************
* umlal instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47214 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47217 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47221 "isa_arm32.tcc"
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47225 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47229 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47232 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47236 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47239 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "umlal";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47252 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47257 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47260 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47264 "isa_arm32.tcc"
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47268 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47272 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47275 "isa_arm32.tcc"
)
{
#line 252 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rdhi_value = inherited::rdhi_init + cpu.GetGPR(rdhi);
		typename CONFIG::reg_t rdlo_value = inherited::rdlo_init + cpu.GetGPR(rdlo);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rdlo_value + (((uint64_t)rdhi_value) << 32);
		res += ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47305 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47310 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47313 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47320 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47330 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47338 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47345 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47355 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47360 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47363 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47370 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 357 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdhi == 15) inherited::rdhi_init = 8;
		else inherited::rdhi_init = 0;
	}
#line 47380 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47385 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47388 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47395 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 365 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdlo == 15) inherited::rdlo_init = 8;
		else inherited::rdlo_init = 0;
	}
#line 47405 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47414 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47419 "isa_arm32.tcc"
> *DecodeOpUmlal(CodeType code, typename CONFIG::address_t addr)
{
	return new OpUmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47425 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of umlal instruction
*******************************************************************/
/*******************************************************************
* umull instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47442 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47445 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47449 "isa_arm32.tcc"
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47453 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47457 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47460 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47464 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47467 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "umull";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47480 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47485 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47488 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47492 "isa_arm32.tcc"
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47496 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47500 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47503 "isa_arm32.tcc"
)
{
#line 304 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47530 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47538 "isa_arm32.tcc"
>

void
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47545 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47555 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47560 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47563 "isa_arm32.tcc"
>

void
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47570 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47580 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47586 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47589 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47594 "isa_arm32.tcc"
> *DecodeOpUmull(CodeType code, typename CONFIG::address_t addr)
{
	return new OpUmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47600 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

ARMV5E MULTIPLY INSTRUCTIONS

**********************************************/
/*****************************************************************************
* TODO:
* op smla()
* op smlal()
* op smlaw()
* op smul()
* op smulw()
*/
/*******************************************************************
* smlaxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47656 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47659 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47663 "isa_arm32.tcc"
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47667 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47671 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47674 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47678 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47681 "isa_arm32.tcc"
)
{
#line 57 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smla";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
		buffer << ", r" << rn;
	}
#line 47697 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47705 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47709 "isa_arm32.tcc"
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47713 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47717 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47720 "isa_arm32.tcc"
)
{
#line 70 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rn;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rn = cpu.GetGPR(rn);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rd = op1 + val_rn;
		if(op1 > 0 && (val_rd & (typename CONFIG::reg_t)0x80000000ULL) != 0) {
			cpu.SetCPSR_Q(true);
			} else {
			cpu.SetCPSR_Q(false);
		}
		cpu.SetGPR(rd, val_rd);
	}
#line 47774 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47783 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47788 "isa_arm32.tcc"
> *DecodeOpSmlaxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47794 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlaxy instruction
*******************************************************************/
/*******************************************************************
* smlalxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47807 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47810 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47814 "isa_arm32.tcc"
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47818 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47822 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47825 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47829 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47832 "isa_arm32.tcc"
)
{
#line 132 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smlal";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rdlo;
		buffer << ", r" << rdhi;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 47848 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47856 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47860 "isa_arm32.tcc"
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47864 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47868 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47871 "isa_arm32.tcc"
)
{
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rdhi;
		typename CONFIG::reg_t val_rdlo, val_rdlo_init;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rdhi == cpu.PC_reg || rdlo == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rdhi = cpu.GetGPR(rdhi);
		val_rdlo_init = cpu.GetGPR(rdlo);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rdlo = val_rdlo_init + op1;
		if(op1 < 0) rdhi = rdhi + (typename CONFIG::reg_t)0xffffffffULL;
		else {
			if(cpu.CarryFrom(val_rdlo, val_rdlo_init, (typename CONFIG::reg_t)op1))
			rdhi++;
		}
		cpu.SetGPR(rdlo, val_rdlo);
		cpu.SetGPR(rdhi, val_rdhi);
	}
#line 47927 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47936 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47941 "isa_arm32.tcc"
> *DecodeOpSmlalxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47947 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlalxy instruction
*******************************************************************/
/*******************************************************************
* smlawy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47963 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47967 "isa_arm32.tcc"
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47971 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47975 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47978 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47982 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47985 "isa_arm32.tcc"
)
{
#line 209 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smlaw";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
		buffer << ", r" << rn;
	}
#line 47999 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48007 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48011 "isa_arm32.tcc"
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48015 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48019 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48022 "isa_arm32.tcc"
)
{
#line 220 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rn;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rn = cpu.GetGPR(rn);

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op = (typename CONFIG::sreg_t)val_rs;
		}

		int64_t op64;
		op64 = (typename CONFIG::sreg_t)val_rm;
		op64 = op64 * op;
		op64 = op64 >> 16;
		op64 = op64 & (uint64_t)0xffffffffULL;
		typename CONFIG::sreg_t sval_rd;
		typename CONFIG::reg_t op_tmp = op64;
		sval_rd = (typename CONFIG::sreg_t)op_tmp;
		val_rd = (typename CONFIG::reg_t)(sval_rd + (typename CONFIG::sreg_t)val_rn);
		if(op_tmp & (typename CONFIG::reg_t)0x80000000ULL !=
		val_rn & (typename CONFIG::reg_t)0x80000000ULL) {
			cpu.SetCPSR_Q(false);
			} else {
			if(op_tmp & (typename CONFIG::reg_t)0x80000000ULL !=
			val_rd & (typename CONFIG::reg_t)0x80000000ULL) {
				cpu.SetCPSR_Q(true);
			} else
			cpu.SetCPSR_Q(false);
		}
		cpu.SetGPR(rd, val_rd);

	}
#line 48078 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48087 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48092 "isa_arm32.tcc"
> *DecodeOpSmlawy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48098 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlawy instruction
*******************************************************************/
/*******************************************************************
* smulxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48111 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48114 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48118 "isa_arm32.tcc"
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48122 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48126 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48129 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48133 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48136 "isa_arm32.tcc"
)
{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smul";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 48151 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48159 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48163 "isa_arm32.tcc"
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48167 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48171 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48174 "isa_arm32.tcc"
)
{
#line 296 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rd = (typename CONFIG::reg_t)op1;
		cpu.SetGPR(rd, val_rd);
	}
#line 48221 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48227 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48230 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48235 "isa_arm32.tcc"
> *DecodeOpSmulxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48241 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smulxy instruction
*******************************************************************/
/*******************************************************************
* smulwy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48254 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48257 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48261 "isa_arm32.tcc"
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48265 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48269 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48272 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48276 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48279 "isa_arm32.tcc"
)
{
#line 351 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smulw";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 48292 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48297 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48300 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48304 "isa_arm32.tcc"
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48308 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48312 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48315 "isa_arm32.tcc"
)
{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = (typename CONFIG::sreg_t)val_rm;
		int64_t op64 = (int64_t)op1 * (int64_t)op2;
		val_rd = (typename CONFIG::reg_t)((uint64_t)(op64 >> 16) & (uint64_t)0xffffffffULL);
		cpu.SetGPR(rd, val_rd);
	}
#line 48353 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48362 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48367 "isa_arm32.tcc"
> *DecodeOpSmulwy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48373 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smulwy instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

STATUS REGISTER ACCESS INSTRUCTIONS

**********************************************/
/*******************************************************************
* mrs instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48424 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48427 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48431 "isa_arm32.tcc"
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48435 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48439 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48442 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48446 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48449 "isa_arm32.tcc"
)
{
#line 46 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "mrs";
		cpu.DisasmCondition(cond, buffer);
		buffer << "r" << rd << ", ";
		if(r) buffer << "spsr";
		else buffer << "cpsr";
	}
#line 48460 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48465 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48468 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48472 "isa_arm32.tcc"
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48476 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48480 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48483 "isa_arm32.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		/* if rd is the pc register the behavior is unpredictable,
		*   we just return */
		if(rd == cpu.PC_reg) {
			return;
		}

		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning("
				<< __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str() << endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__ << EndDebugWarning;

#endif // SOCLIB

				return;
			}
			cpu.SetGPR(rd, cpu.GetSPSR());
			} else {
			cpu.SetGPR(rd, cpu.GetCPSR());
		}
	}
#line 48538 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48547 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48552 "isa_arm32.tcc"
> *DecodeOpMrs(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrs<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48558 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrs instruction
*******************************************************************/
/*******************************************************************
* msr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48574 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48578 "isa_arm32.tcc"
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48582 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48586 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48589 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48593 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48596 "isa_arm32.tcc"
)
{
#line 116 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "msr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " ";
		if(r) buffer << "spsr_";
		else buffer << "cpsr_";
		cpu.DisasmConditionFieldsMask(mask, buffer);
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 48610 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48618 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48622 "isa_arm32.tcc"
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48626 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48630 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48633 "isa_arm32.tcc"
)
{
#line 127 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		uint32_t operand;
		typename CONFIG::reg_t reg;
		typename CONFIG::reg_t reg_mask;
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		operand = cpu.ShiftOperand32imm(rotate_imm,
		imm);
		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__ << EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetSPSR();
			} else {
			/* check current running mode, if in user mode then the behaviour is
			*   unpredictable, so we will do a return */
			if(mask != 0x08 && run_mode == cpu.USER_MODE) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << Endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetCPSR();
		}

		/* creating the register mask */
		reg_mask = 0;
		if((mask & 0x01) == 0x01) reg_mask = reg_mask | 0xFF;
		if((mask & 0x02) == 0x02) reg_mask = reg_mask | 0xFF00;
		if((mask & 0x04) == 0x04) reg_mask = reg_mask | 0xFF0000;
		if((mask & 0x08) == 0x08) reg_mask = reg_mask | 0xFF000000;

		/* updating the register */
		reg = (reg & ~reg_mask) | (operand & reg_mask);

		if(r) cpu.SetSPSR(reg);
		else {
			cpu.SetCPSR(reg);
			/* check if there has been any change in the running mode,
			*   and switch registers if so */
			typename CONFIG::reg_t new_run_mode = reg & cpu.RUNNING_MODE_MASK;
			if(run_mode != new_run_mode) {
				cpu.SetGPRMapping(run_mode, new_run_mode);
			}
		}
	}
#line 48741 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48750 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48755 "isa_arm32.tcc"
> *DecodeOpMsr_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48761 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48768 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48771 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48775 "isa_arm32.tcc"
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48779 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48783 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48786 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48790 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48793 "isa_arm32.tcc"
)
{
#line 234 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "msr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " ";
		if(r) buffer << "spsr_";
		else buffer << "cpsr_";
		cpu.DisasmConditionFieldsMask(mask, buffer);
		buffer << ", r" << rm;
	}
#line 48806 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48811 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48814 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48818 "isa_arm32.tcc"
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48822 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48826 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48829 "isa_arm32.tcc"
)
{
#line 244 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint32_t operand;
		typename CONFIG::reg_t reg;
		typename CONFIG::reg_t reg_mask;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		operand = rm_value;
		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetSPSR();
			} else {
			/* check current running mode, if in user mode then the behaviour is
			* 	 unpredictable, so we will do a return */
			if(mask != 0x08 && run_mode == cpu.USER_MODE) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetCPSR();
		}

		/* creating the register mask */
		reg_mask = 0;
		if((mask & 0x01) == 0x01) reg_mask = reg_mask | 0xFF;
		if((mask & 0x02) == 0x02) reg_mask = reg_mask | 0xFF00;
		if((mask & 0x04) == 0x04) reg_mask = reg_mask | 0xFF0000;
		if((mask & 0x08) == 0x08) reg_mask = reg_mask | 0xFF000000;

		/* updating the register */
		reg = (reg & ~reg_mask) | (operand & reg_mask);

		if(r) cpu.SetSPSR(reg);
		else {
			cpu.SetCPSR(reg);
			/* check if there has been any change in the running mode,
			*   and switch registers if so */
			typename CONFIG::reg_t new_run_mode = reg & cpu.RUNNING_MODE_MASK;
			if(run_mode != new_run_mode) {
				cpu.SetGPRMapping(run_mode, new_run_mode);
			}
		}
	}
#line 48940 "isa_arm32.tcc"
}
/*
* end of msr instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48951 "isa_arm32.tcc"
>

void
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48958 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 357 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 48968 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48977 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48982 "isa_arm32.tcc"
> *DecodeOpMsr_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48988 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49074 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49077 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49081 "isa_arm32.tcc"
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49085 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49089 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49092 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49096 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49099 "isa_arm32.tcc"
)
{
#line 59 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 49110 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49115 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49118 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49122 "isa_arm32.tcc"
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49126 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49130 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49133 "isa_arm32.tcc"
)
{
#line 104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t new_rn_value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		new_rn_value = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.SetGPR(rn, new_rn_value); // update rn

		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49158 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49169 "isa_arm32.tcc"
>

void
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49176 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49186 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49195 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49200 "isa_arm32.tcc"
> *DecodeOpLdr_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49206 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49216 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49220 "isa_arm32.tcc"
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49224 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49228 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49231 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49235 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49238 "isa_arm32.tcc"
)
{
#line 67 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 49249 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49254 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49257 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49261 "isa_arm32.tcc"
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49265 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49269 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49272 "isa_arm32.tcc"
)
{
#line 126 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49293 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49304 "isa_arm32.tcc"
>

void
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49311 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49321 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49327 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49330 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49335 "isa_arm32.tcc"
> *DecodeOpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49341 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49351 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49355 "isa_arm32.tcc"
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49359 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49363 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49366 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49370 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49373 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 49384 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49392 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49396 "isa_arm32.tcc"
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49400 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49404 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49407 "isa_arm32.tcc"
)
{
#line 144 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49429 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49440 "isa_arm32.tcc"
>

void
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49447 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49457 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49466 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49471 "isa_arm32.tcc"
> *DecodeOpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49477 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49487 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49491 "isa_arm32.tcc"
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49495 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49499 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49502 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49506 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49509 "isa_arm32.tcc"
)
{
#line 83 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49519 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49527 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49531 "isa_arm32.tcc"
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49535 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49539 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49542 "isa_arm32.tcc"
)
{
#line 163 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49566 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49577 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49584 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49594 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49599 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49602 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49609 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49619 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49627 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49634 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 49644 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49650 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49653 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49658 "isa_arm32.tcc"
> *DecodeOpLdr_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49664 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49671 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49674 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49678 "isa_arm32.tcc"
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49682 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49686 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49689 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49693 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49696 "isa_arm32.tcc"
)
{
#line 90 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49706 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49711 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49714 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49718 "isa_arm32.tcc"
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49722 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49726 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49729 "isa_arm32.tcc"
)
{
#line 184 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49752 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49760 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49763 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49770 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49780 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49785 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49788 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49795 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49805 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49810 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49813 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49820 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 49830 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49836 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49839 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49844 "isa_arm32.tcc"
> *DecodeOpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49850 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49860 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49864 "isa_arm32.tcc"
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49868 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49872 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49875 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49879 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49882 "isa_arm32.tcc"
)
{
#line 97 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49892 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49897 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49900 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49904 "isa_arm32.tcc"
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49908 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49912 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49915 "isa_arm32.tcc"
)
{
#line 204 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49939 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49950 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49957 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49967 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49972 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49975 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49982 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49992 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49997 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50000 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50007 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50017 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50026 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50031 "isa_arm32.tcc"
> *DecodeOpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50037 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldr instruction
*******************************************************************/
/*******************************************************************
* ldrb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50053 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50057 "isa_arm32.tcc"
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50061 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50065 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50068 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50072 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50075 "isa_arm32.tcc"
)
{
#line 240 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 50086 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50094 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50098 "isa_arm32.tcc"
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50102 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50106 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50109 "isa_arm32.tcc"
)
{
#line 285 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		cpu.Read8toGPR(address, rd);
	}
#line 50127 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50135 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50138 "isa_arm32.tcc"
>

void
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50145 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50155 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50161 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50164 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50169 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50175 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50182 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50185 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50189 "isa_arm32.tcc"
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50193 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50197 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50200 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50204 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50207 "isa_arm32.tcc"
)
{
#line 248 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 50218 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50223 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50226 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50230 "isa_arm32.tcc"
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50234 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50238 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50241 "isa_arm32.tcc"
)
{
#line 300 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.Read8toGPR(address, rd);
	}
#line 50258 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50266 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50269 "isa_arm32.tcc"
>

void
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50276 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50286 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50292 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50295 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50300 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50306 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50313 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50316 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50320 "isa_arm32.tcc"
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50324 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50328 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50331 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50335 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50338 "isa_arm32.tcc"
)
{
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 50349 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50354 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50357 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50361 "isa_arm32.tcc"
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50365 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50369 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50372 "isa_arm32.tcc"
)
{
#line 314 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read8toGPR(address, rd);
	}
#line 50390 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50398 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50401 "isa_arm32.tcc"
>

void
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50408 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50418 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50424 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50427 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50432 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50438 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50448 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50452 "isa_arm32.tcc"
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50456 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50460 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50463 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50467 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50470 "isa_arm32.tcc"
)
{
#line 264 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50480 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50485 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50488 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50492 "isa_arm32.tcc"
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50496 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50500 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50503 "isa_arm32.tcc"
)
{
#line 329 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		cpu.Read8toGPR(address, rd);
	}
#line 50523 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50534 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50541 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50551 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50556 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50559 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50566 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50576 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50584 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50591 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50601 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50610 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50615 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50621 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50628 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50631 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50635 "isa_arm32.tcc"
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50639 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50643 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50646 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50650 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50653 "isa_arm32.tcc"
)
{
#line 271 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50663 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50668 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50671 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50675 "isa_arm32.tcc"
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50679 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50683 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50686 "isa_arm32.tcc"
)
{
#line 346 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.Read8toGPR(address, rd);
	}
#line 50705 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50713 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50716 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50723 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50733 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50738 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50741 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50748 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50758 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50763 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50766 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50773 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50783 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50789 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50792 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50797 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50803 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50810 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50813 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50817 "isa_arm32.tcc"
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50821 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50825 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50828 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50832 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50835 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50845 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50853 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50857 "isa_arm32.tcc"
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50861 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50865 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50868 "isa_arm32.tcc"
)
{
#line 362 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		cpu.Read8toGPR(address, rd);
	}
#line 50888 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50896 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50899 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50906 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50916 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50921 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50924 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50931 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50941 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50946 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50949 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50956 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50966 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50972 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50975 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50980 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50986 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrb instruction
*******************************************************************/
/*******************************************************************
* ldrb_rd15 instruction
* this is the specialization of the instruction ldrb when rd = 15
* for most of the arm architectures this is an undefined behavior instruction (do nothing is our action)
* however for the armv5e architectures some of the combinations correspond to a pld instruction if
* it is a imm_offset or reg_offset type and cond == 0b1111
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51006 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51010 "isa_arm32.tcc"
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51014 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51018 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51021 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51025 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51028 "isa_arm32.tcc"
)
{
#line 398 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51035 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51040 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51043 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51047 "isa_arm32.tcc"
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51051 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51055 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51058 "isa_arm32.tcc"
)
{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51067 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51073 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51076 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51081 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51087 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51094 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51097 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51101 "isa_arm32.tcc"
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51105 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51109 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51112 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51116 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51119 "isa_arm32.tcc"
)
{
#line 402 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E) {
			buffer << "pld";
			cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
		} else
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51130 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51135 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51138 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51142 "isa_arm32.tcc"
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51146 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51150 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51153 "isa_arm32.tcc"
)
{
#line 436 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E && cond == 15) {
			typedef Operation<CONFIG> inherited;

			typename CONFIG::address_t address;
			typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

			address = cpu.LSWUBImmOffset(u, rn_value, offset);
			cpu.ReadPrefetch(address);
			} else {
			/* unpredictable */
			cpu.Unpredictable();
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		}
	}
#line 51174 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51182 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51185 "isa_arm32.tcc"
>

void
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51192 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51202 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51211 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51216 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51222 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51229 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51232 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51236 "isa_arm32.tcc"
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51240 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51244 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51247 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51251 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51254 "isa_arm32.tcc"
)
{
#line 410 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51261 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51266 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51269 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51273 "isa_arm32.tcc"
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51277 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51281 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51284 "isa_arm32.tcc"
)
{
#line 454 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51293 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51302 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51307 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51313 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51320 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51323 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51327 "isa_arm32.tcc"
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51331 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51335 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51338 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51342 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51345 "isa_arm32.tcc"
)
{
#line 414 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51352 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51357 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51360 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51364 "isa_arm32.tcc"
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51368 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51372 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51375 "isa_arm32.tcc"
)
{
#line 460 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51384 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51393 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51398 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51404 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51414 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51418 "isa_arm32.tcc"
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51422 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51426 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51429 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51433 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51436 "isa_arm32.tcc"
)
{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E) {
			buffer << "pld ";
			cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
		} else
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51447 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51455 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51459 "isa_arm32.tcc"
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51463 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51467 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51470 "isa_arm32.tcc"
)
{
#line 466 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E && cond == 15) {
			typedef Operation<CONFIG> inherited;

			typename CONFIG::address_t address;
			typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
			typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

			address = cpu.LSWUBReg(u, rn_value, 15, shift_imm, shift, rm_value);
			cpu.ReadPrefetch(address);
			} else {
			/* unpredictable */
			cpu.Unpredictable();
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		}
	}
#line 51492 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51500 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51503 "isa_arm32.tcc"
>

void
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51510 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51520 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51528 "isa_arm32.tcc"
>

void
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51535 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 51545 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51551 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51554 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51559 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51565 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51575 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51579 "isa_arm32.tcc"
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51583 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51587 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51590 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51594 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51597 "isa_arm32.tcc"
)
{
#line 426 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51604 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51609 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51612 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51616 "isa_arm32.tcc"
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51620 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51624 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51627 "isa_arm32.tcc"
)
{
#line 485 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51636 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51642 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51645 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51650 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51656 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrb instruction
*******************************************************************/
/*******************************************************************
* ldrt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51673 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51677 "isa_arm32.tcc"
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51681 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51685 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51688 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51692 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51695 "isa_arm32.tcc"
)
{
#line 503 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 51705 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51710 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51713 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51717 "isa_arm32.tcc"
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51721 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51725 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51728 "isa_arm32.tcc"
)
{
#line 517 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset));
		cpu.Read32toGPR(address, rd);
	}
#line 51746 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51754 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51757 "isa_arm32.tcc"
>

void
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51764 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51774 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51783 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51788 "isa_arm32.tcc"
> *DecodeOpLdrt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51794 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51804 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51808 "isa_arm32.tcc"
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51812 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51816 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51819 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51823 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51826 "isa_arm32.tcc"
)
{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 51836 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51841 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51844 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51848 "isa_arm32.tcc"
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51852 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51856 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51859 "isa_arm32.tcc"
)
{
#line 532 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.Read32toGPR(address, rd);
	}
#line 51876 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51884 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51887 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51894 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51904 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51909 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51912 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51919 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 51929 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51934 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51937 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51944 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 51954 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51963 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51968 "isa_arm32.tcc"
> *DecodeOpLdrt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51974 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrt instruction
*******************************************************************/
/*******************************************************************
* ldrbt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51991 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51995 "isa_arm32.tcc"
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51999 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52003 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52006 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52010 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52013 "isa_arm32.tcc"
)
{
#line 558 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 52023 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52028 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52031 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52035 "isa_arm32.tcc"
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52039 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52043 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52046 "isa_arm32.tcc"
)
{
#line 572 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset));
		cpu.Read8toGPR(address, rd);
	}
#line 52064 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52072 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52075 "isa_arm32.tcc"
>

void
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52082 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52092 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52101 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52106 "isa_arm32.tcc"
> *DecodeOpLdrbt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52112 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52119 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52122 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52126 "isa_arm32.tcc"
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52130 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52134 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52137 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52141 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52144 "isa_arm32.tcc"
)
{
#line 565 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 52154 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52162 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52166 "isa_arm32.tcc"
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52170 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52174 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52177 "isa_arm32.tcc"
)
{
#line 587 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		cpu.Read8toGPR(address, rd);
	}
#line 52197 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52208 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52215 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52225 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52233 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52240 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 52250 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52258 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52265 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52275 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52284 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52289 "isa_arm32.tcc"
> *DecodeOpLdrbt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52295 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrbt instruction
*******************************************************************/
/*******************************************************************
* str instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52311 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52315 "isa_arm32.tcc"
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52319 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52323 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52326 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52330 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52333 "isa_arm32.tcc"
)
{
#line 619 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 52343 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52351 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52355 "isa_arm32.tcc"
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52359 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52363 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52366 "isa_arm32.tcc"
)
{
#line 661 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52388 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52396 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52399 "isa_arm32.tcc"
>

void
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52406 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52416 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52421 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52424 "isa_arm32.tcc"
>

void
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52431 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52441 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52447 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52450 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52455 "isa_arm32.tcc"
> *DecodeOpStr_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52461 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52468 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52471 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52475 "isa_arm32.tcc"
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52479 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52483 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52486 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52490 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52493 "isa_arm32.tcc"
)
{
#line 626 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 52503 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52508 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52511 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52515 "isa_arm32.tcc"
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52519 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52523 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52526 "isa_arm32.tcc"
)
{
#line 680 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.CheckAlignmentExcep(address); // TODO
		value = rd_value;

		cpu.Write32(address, value);
	}
#line 52548 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52556 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52559 "isa_arm32.tcc"
>

void
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52566 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52576 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52584 "isa_arm32.tcc"
>

void
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52591 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52601 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52610 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52615 "isa_arm32.tcc"
> *DecodeOpStr_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52621 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52628 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52631 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52635 "isa_arm32.tcc"
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52639 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52643 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52646 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52650 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52653 "isa_arm32.tcc"
)
{
#line 633 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 52663 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52668 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52671 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52675 "isa_arm32.tcc"
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52679 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52683 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52686 "isa_arm32.tcc"
)
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52708 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52719 "isa_arm32.tcc"
>

void
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52726 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52736 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52741 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52744 "isa_arm32.tcc"
>

void
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52751 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52761 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52770 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52775 "isa_arm32.tcc"
> *DecodeOpStr_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52781 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52788 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52791 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52795 "isa_arm32.tcc"
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52799 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52803 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52806 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52810 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52813 "isa_arm32.tcc"
)
{
#line 640 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 52823 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52831 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52835 "isa_arm32.tcc"
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52839 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52843 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52846 "isa_arm32.tcc"
)
{
#line 718 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52869 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52880 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52887 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52897 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52905 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52912 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 52922 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52930 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52937 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52947 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52956 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52961 "isa_arm32.tcc"
> *DecodeOpStr_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52967 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52977 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52981 "isa_arm32.tcc"
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52985 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52989 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52992 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52996 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52999 "isa_arm32.tcc"
)
{
#line 647 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53009 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53017 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53021 "isa_arm32.tcc"
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53025 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53029 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53032 "isa_arm32.tcc"
)
{
#line 738 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 53054 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53062 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53065 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53072 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53082 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53090 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53097 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53107 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53112 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53115 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53122 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53132 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53138 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53141 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53146 "isa_arm32.tcc"
> *DecodeOpStr_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53152 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53162 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53166 "isa_arm32.tcc"
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53170 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53174 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53177 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53181 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53184 "isa_arm32.tcc"
)
{
#line 654 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53194 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53202 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53206 "isa_arm32.tcc"
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53210 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53214 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53217 "isa_arm32.tcc"
)
{
#line 757 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, address);
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 53240 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53248 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53251 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53258 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53268 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53273 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53276 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53283 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53293 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53301 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53308 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53318 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53327 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53332 "isa_arm32.tcc"
> *DecodeOpStr_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53338 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of str instruction
*******************************************************************/
/*******************************************************************
* strb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53351 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53354 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53358 "isa_arm32.tcc"
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53362 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53366 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53369 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53373 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53376 "isa_arm32.tcc"
)
{
#line 792 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 53387 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53395 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53399 "isa_arm32.tcc"
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53403 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53407 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53410 "isa_arm32.tcc"
)
{
#line 837 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53431 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53442 "isa_arm32.tcc"
>

void
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53449 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53459 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53467 "isa_arm32.tcc"
>

void
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53474 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53484 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53493 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53498 "isa_arm32.tcc"
> *DecodeOpStrb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53504 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53511 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53514 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53518 "isa_arm32.tcc"
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53522 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53526 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53529 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53533 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53536 "isa_arm32.tcc"
)
{
#line 800 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 53547 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53552 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53555 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53559 "isa_arm32.tcc"
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53563 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53567 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53570 "isa_arm32.tcc"
)
{
#line 855 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53590 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53598 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53601 "isa_arm32.tcc"
>

void
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53608 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53618 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53626 "isa_arm32.tcc"
>

void
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53633 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53643 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53652 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53657 "isa_arm32.tcc"
> *DecodeOpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53663 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53673 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53677 "isa_arm32.tcc"
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53681 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53685 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53688 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53692 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53695 "isa_arm32.tcc"
)
{
#line 808 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 53706 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53711 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53714 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53718 "isa_arm32.tcc"
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53722 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53726 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53729 "isa_arm32.tcc"
)
{
#line 872 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53750 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53758 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53761 "isa_arm32.tcc"
>

void
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53768 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53778 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53786 "isa_arm32.tcc"
>

void
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53793 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53803 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53809 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53812 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53817 "isa_arm32.tcc"
> *DecodeOpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53823 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53830 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53833 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53837 "isa_arm32.tcc"
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53841 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53845 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53848 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53852 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53855 "isa_arm32.tcc"
)
{
#line 816 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53865 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53870 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53873 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53877 "isa_arm32.tcc"
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53881 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53885 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53888 "isa_arm32.tcc"
)
{
#line 890 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53910 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53918 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53921 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53928 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53938 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53943 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53946 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53953 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53963 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53971 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53978 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53988 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53997 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54002 "isa_arm32.tcc"
> *DecodeOpStrb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54008 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54015 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54018 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54022 "isa_arm32.tcc"
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54026 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54030 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54033 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54037 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54040 "isa_arm32.tcc"
)
{
#line 823 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54050 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54055 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54058 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54062 "isa_arm32.tcc"
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54066 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54070 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54073 "isa_arm32.tcc"
)
{
#line 909 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54094 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54102 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54105 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54112 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54122 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54130 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54137 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54147 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54155 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54162 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54172 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54178 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54181 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54186 "isa_arm32.tcc"
> *DecodeOpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54192 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54202 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54206 "isa_arm32.tcc"
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54210 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54214 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54217 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54221 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54224 "isa_arm32.tcc"
)
{
#line 830 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54234 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54239 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54242 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54246 "isa_arm32.tcc"
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54250 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54254 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54257 "isa_arm32.tcc"
)
{
#line 927 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54279 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54290 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54297 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54307 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54315 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54322 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54332 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54340 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54347 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54357 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54366 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54371 "isa_arm32.tcc"
> *DecodeOpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54377 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of strb instruction
*******************************************************************/
/*******************************************************************
* strt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54391 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54394 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54398 "isa_arm32.tcc"
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54402 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54406 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54409 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54413 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54416 "isa_arm32.tcc"
)
{
#line 958 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 54426 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54431 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54434 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54438 "isa_arm32.tcc"
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54442 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54446 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54449 "isa_arm32.tcc"
)
{
#line 972 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 54471 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54479 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54482 "isa_arm32.tcc"
>

void
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54489 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54499 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54507 "isa_arm32.tcc"
>

void
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54514 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54524 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54533 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54538 "isa_arm32.tcc"
> *DecodeOpStrt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54544 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54551 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54554 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54558 "isa_arm32.tcc"
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54562 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54566 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54569 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54573 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54576 "isa_arm32.tcc"
)
{
#line 965 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54586 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54591 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54594 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54598 "isa_arm32.tcc"
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54602 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54606 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54609 "isa_arm32.tcc"
)
{
#line 991 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 54632 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54640 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54643 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54650 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54660 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54668 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54675 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54685 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54693 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54700 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54710 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54719 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54724 "isa_arm32.tcc"
> *DecodeOpStrt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54730 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of strt instruction
*******************************************************************/
/*******************************************************************
* strbt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54747 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54751 "isa_arm32.tcc"
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54755 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54759 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54762 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54766 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54769 "isa_arm32.tcc"
)
{
#line 1023 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 54780 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54785 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54788 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54792 "isa_arm32.tcc"
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54796 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54800 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54803 "isa_arm32.tcc"
)
{
#line 1038 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typename CONFIG::address_t address;
		uint8_t value;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, cpu.GetGPR(rn), offset)); // update rn
		value = cpu.GetGPR(rd) & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54820 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54831 "isa_arm32.tcc"
>

void
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54838 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54848 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54856 "isa_arm32.tcc"
>

void
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54863 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54873 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54879 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54882 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54887 "isa_arm32.tcc"
> *DecodeOpStrbt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54893 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54903 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54907 "isa_arm32.tcc"
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54911 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54915 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54918 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54922 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54925 "isa_arm32.tcc"
)
{
#line 1031 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54935 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54940 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54943 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54947 "isa_arm32.tcc"
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54951 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54955 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54958 "isa_arm32.tcc"
)
{
#line 1052 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54980 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54991 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54998 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55008 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55016 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55023 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55033 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55041 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55048 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55058 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55064 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55067 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55072 "isa_arm32.tcc"
> *DecodeOpStrbt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55078 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldrh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55129 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55132 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55136 "isa_arm32.tcc"
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55140 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55144 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55147 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55151 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55154 "isa_arm32.tcc"
)
{
#line 63 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 55165 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55173 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55177 "isa_arm32.tcc"
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55181 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55185 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55188 "isa_arm32.tcc"
)
{
#line 108 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55207 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55215 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55218 "isa_arm32.tcc"
>

void
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55225 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55235 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55244 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55249 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55255 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55265 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55269 "isa_arm32.tcc"
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55273 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55277 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55280 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55284 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55287 "isa_arm32.tcc"
)
{
#line 71 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 55298 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55303 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55306 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55310 "isa_arm32.tcc"
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55314 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55318 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55321 "isa_arm32.tcc"
)
{
#line 124 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55339 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55350 "isa_arm32.tcc"
>

void
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55357 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55367 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55373 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55376 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55381 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55387 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55397 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55401 "isa_arm32.tcc"
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55405 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55409 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55412 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55416 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55419 "isa_arm32.tcc"
)
{
#line 79 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 55430 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55438 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55442 "isa_arm32.tcc"
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55446 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55450 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55453 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55472 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55480 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55483 "isa_arm32.tcc"
>

void
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55490 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55500 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55506 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55509 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55514 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55520 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55527 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55530 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55534 "isa_arm32.tcc"
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55538 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55542 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55545 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55549 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55552 "isa_arm32.tcc"
)
{
#line 87 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 55562 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55570 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55574 "isa_arm32.tcc"
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55578 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55582 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55585 "isa_arm32.tcc"
)
{
#line 155 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55606 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55617 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55624 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55634 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55639 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55642 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55649 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55659 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55667 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55674 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55684 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55693 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55698 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55704 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55711 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55714 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55718 "isa_arm32.tcc"
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55722 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55726 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55729 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55733 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55736 "isa_arm32.tcc"
)
{
#line 94 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 55746 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55751 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55754 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55758 "isa_arm32.tcc"
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55762 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55766 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55769 "isa_arm32.tcc"
)
{
#line 173 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55789 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55797 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55800 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55807 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55817 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55822 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55825 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55832 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55842 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55847 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55850 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55857 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55867 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55876 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55881 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55887 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55894 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55897 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55901 "isa_arm32.tcc"
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55905 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55909 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55912 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55916 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55919 "isa_arm32.tcc"
)
{
#line 101 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 55929 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55934 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55937 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55941 "isa_arm32.tcc"
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55945 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55949 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55952 "isa_arm32.tcc"
)
{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55973 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55984 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55991 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56001 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56006 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56009 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56016 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56026 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56031 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56034 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56041 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56051 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56060 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56065 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56071 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrh instruction
*******************************************************************/
/*******************************************************************
* ldrsh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56090 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56094 "isa_arm32.tcc"
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56098 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56102 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56105 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56109 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56112 "isa_arm32.tcc"
)
{
#line 229 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 56123 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56131 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56135 "isa_arm32.tcc"
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56139 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56143 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56146 "isa_arm32.tcc"
)
{
#line 274 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56165 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56173 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56176 "isa_arm32.tcc"
>

void
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56183 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56193 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56202 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56207 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56213 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56220 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56223 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56227 "isa_arm32.tcc"
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56231 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56235 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56238 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56242 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56245 "isa_arm32.tcc"
)
{
#line 237 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 56256 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56264 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56268 "isa_arm32.tcc"
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56272 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56276 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56279 "isa_arm32.tcc"
)
{
#line 290 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56297 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56308 "isa_arm32.tcc"
>

void
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56315 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56325 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56334 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56339 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56345 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56352 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56355 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56359 "isa_arm32.tcc"
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56363 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56367 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56370 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56374 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56377 "isa_arm32.tcc"
)
{
#line 245 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 56388 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56396 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56400 "isa_arm32.tcc"
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56404 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56408 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56411 "isa_arm32.tcc"
)
{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56430 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56441 "isa_arm32.tcc"
>

void
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56448 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56458 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56467 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56472 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56478 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56485 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56488 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56492 "isa_arm32.tcc"
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56496 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56500 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56503 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56507 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56510 "isa_arm32.tcc"
)
{
#line 253 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 56520 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56528 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56532 "isa_arm32.tcc"
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56536 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56540 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56543 "isa_arm32.tcc"
)
{
#line 321 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56564 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56575 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56582 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56592 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56600 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56607 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56617 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56622 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56625 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56632 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56642 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56651 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56656 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56662 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56672 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56676 "isa_arm32.tcc"
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56680 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56684 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56687 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56691 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56694 "isa_arm32.tcc"
)
{
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 56704 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56709 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56712 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56716 "isa_arm32.tcc"
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56720 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56724 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56727 "isa_arm32.tcc"
)
{
#line 339 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		//	address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56748 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56756 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56759 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56766 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56776 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56781 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56784 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56791 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56801 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56809 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56816 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56826 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56835 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56840 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56846 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56856 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56860 "isa_arm32.tcc"
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56864 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56868 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56871 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56875 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56878 "isa_arm32.tcc"
)
{
#line 267 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 56888 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56893 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56896 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56900 "isa_arm32.tcc"
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56904 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56908 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56911 "isa_arm32.tcc"
)
{
#line 357 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56932 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56940 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56943 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56950 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56960 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56965 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56968 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56975 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56985 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56993 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57000 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57010 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57016 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57019 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57024 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57030 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrsh instruction
*******************************************************************/
/*******************************************************************
* ldrsb instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57046 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57049 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57053 "isa_arm32.tcc"
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57057 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57061 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57064 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57068 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57071 "isa_arm32.tcc"
)
{
#line 396 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 57082 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57090 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57094 "isa_arm32.tcc"
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57098 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57102 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57105 "isa_arm32.tcc"
)
{
#line 441 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.ReadS8toGPR(address, rd);
	}
#line 57123 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57134 "isa_arm32.tcc"
>

void
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57141 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57151 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57160 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57165 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57171 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57178 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57181 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57185 "isa_arm32.tcc"
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57189 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57193 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57196 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57200 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57203 "isa_arm32.tcc"
)
{
#line 404 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 57214 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57219 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57222 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57226 "isa_arm32.tcc"
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57230 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57234 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57237 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57254 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57265 "isa_arm32.tcc"
>

void
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57272 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57282 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57288 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57291 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57296 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57302 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57309 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57312 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57316 "isa_arm32.tcc"
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57320 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57324 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57327 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57331 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57334 "isa_arm32.tcc"
)
{
#line 412 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 57345 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57350 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57353 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57357 "isa_arm32.tcc"
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57361 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57365 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57368 "isa_arm32.tcc"
)
{
#line 470 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.ReadS8toGPR(address, rd);
	}
#line 57386 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57397 "isa_arm32.tcc"
>

void
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57404 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57414 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57423 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57428 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57434 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57444 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57448 "isa_arm32.tcc"
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57452 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57456 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57459 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57463 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57466 "isa_arm32.tcc"
)
{
#line 420 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 57476 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57481 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57484 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57488 "isa_arm32.tcc"
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57492 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57496 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57499 "isa_arm32.tcc"
)
{
#line 485 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.ReadS8toGPR(address, rd);
	}
#line 57519 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57527 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57530 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57537 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57547 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57552 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57555 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57562 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57572 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57577 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57580 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57587 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57597 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57606 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57611 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57617 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57627 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57631 "isa_arm32.tcc"
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57635 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57639 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57642 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57646 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57649 "isa_arm32.tcc"
)
{
#line 427 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 57659 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57667 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57671 "isa_arm32.tcc"
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57675 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57679 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57682 "isa_arm32.tcc"
)
{
#line 502 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57701 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57709 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57712 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57719 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57729 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57734 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57737 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57744 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57754 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57762 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57769 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57779 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57785 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57788 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57793 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57799 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57809 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57813 "isa_arm32.tcc"
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57817 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57821 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57824 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57828 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57831 "isa_arm32.tcc"
)
{
#line 434 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 57841 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57849 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57853 "isa_arm32.tcc"
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57857 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57861 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57864 "isa_arm32.tcc"
)
{
#line 518 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.SetGPR(rn, address);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57884 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57892 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57895 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57902 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57912 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57917 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57920 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57927 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57937 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57942 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57945 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57952 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57962 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57971 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57976 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57982 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrsb instruction
*******************************************************************/
/*******************************************************************
* strh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58001 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58005 "isa_arm32.tcc"
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58009 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58013 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58016 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58020 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58023 "isa_arm32.tcc"
)
{
#line 556 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 58034 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58042 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58046 "isa_arm32.tcc"
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58050 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58054 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58057 "isa_arm32.tcc"
)
{
#line 601 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL)); // update rn
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58075 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58084 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58089 "isa_arm32.tcc"
> *DecodeOpStrh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58095 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58102 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58105 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58109 "isa_arm32.tcc"
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58113 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58117 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58120 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58124 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58127 "isa_arm32.tcc"
)
{
#line 564 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 58138 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58143 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58146 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58150 "isa_arm32.tcc"
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58154 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58158 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58161 "isa_arm32.tcc"
)
{
#line 616 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58178 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58187 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58192 "isa_arm32.tcc"
> *DecodeOpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58198 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58208 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58212 "isa_arm32.tcc"
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58216 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58220 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58223 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58227 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58230 "isa_arm32.tcc"
)
{
#line 572 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 58241 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58246 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58249 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58253 "isa_arm32.tcc"
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58257 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58261 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58264 "isa_arm32.tcc"
)
{
#line 630 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58282 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58288 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58291 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58296 "isa_arm32.tcc"
> *DecodeOpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58302 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58309 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58312 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58316 "isa_arm32.tcc"
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58320 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58324 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58327 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58331 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58334 "isa_arm32.tcc"
)
{
#line 580 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 58344 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58349 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58352 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58356 "isa_arm32.tcc"
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58360 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58364 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58367 "isa_arm32.tcc"
)
{
#line 645 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm)));
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58385 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58391 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58394 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58399 "isa_arm32.tcc"
> *DecodeOpStrh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58405 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58412 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58415 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58419 "isa_arm32.tcc"
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58423 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58427 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58430 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58434 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58437 "isa_arm32.tcc"
)
{
#line 587 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 58447 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58455 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58459 "isa_arm32.tcc"
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58463 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58467 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58470 "isa_arm32.tcc"
)
{
#line 660 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58487 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58496 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58501 "isa_arm32.tcc"
> *DecodeOpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58507 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58514 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58517 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58521 "isa_arm32.tcc"
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58525 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58529 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58532 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58536 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58539 "isa_arm32.tcc"
)
{
#line 594 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 58549 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58554 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58557 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58561 "isa_arm32.tcc"
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58565 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58569 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58572 "isa_arm32.tcc"
)
{
#line 674 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58590 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58599 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58604 "isa_arm32.tcc"
> *DecodeOpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58610 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS
(specific for arm version 5e)

**********************************************/
/*******************************************************************
* ldrd instruction
*/
/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58662 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58665 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58669 "isa_arm32.tcc"
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58673 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58677 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58680 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58684 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58687 "isa_arm32.tcc"
)
{
#line 59 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 58698 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58703 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58706 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58710 "isa_arm32.tcc"
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58714 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58718 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58721 "isa_arm32.tcc"
)
{
#line 107 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 58748 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58766 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58769 "isa_arm32.tcc"
>

void
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58776 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 58786 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58792 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58795 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58800 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58806 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58816 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58819 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58823 "isa_arm32.tcc"
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58827 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58831 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58834 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58838 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58841 "isa_arm32.tcc"
)
{
#line 67 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 58852 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58860 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58864 "isa_arm32.tcc"
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58868 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58872 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58875 "isa_arm32.tcc"
)
{
#line 131 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 58901 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58919 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58922 "isa_arm32.tcc"
>

void
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58929 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 58939 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58945 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58948 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58953 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58959 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58969 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58972 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58976 "isa_arm32.tcc"
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58980 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58984 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58987 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58991 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58994 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 59005 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59013 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59017 "isa_arm32.tcc"
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59021 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59025 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59028 "isa_arm32.tcc"
)
{
#line 154 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59055 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59073 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59076 "isa_arm32.tcc"
>

void
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59083 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59093 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59099 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59102 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59107 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59113 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59123 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59126 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59130 "isa_arm32.tcc"
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59134 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59138 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59141 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59145 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59148 "isa_arm32.tcc"
)
{
#line 83 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 59159 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59164 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59167 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59171 "isa_arm32.tcc"
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59175 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59179 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59182 "isa_arm32.tcc"
)
{
#line 178 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59211 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59229 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59232 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59239 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59249 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59254 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59257 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59264 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59274 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59282 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59289 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59299 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59308 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59313 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59319 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59332 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59336 "isa_arm32.tcc"
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59340 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59344 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59347 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59351 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59354 "isa_arm32.tcc"
)
{
#line 91 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 59365 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59370 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59373 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59377 "isa_arm32.tcc"
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59381 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59385 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59388 "isa_arm32.tcc"
)
{
#line 204 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59416 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59437 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59444 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59454 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59462 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59469 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59479 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59487 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59494 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59504 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59510 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59513 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59518 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59524 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59537 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59541 "isa_arm32.tcc"
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59545 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59549 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59552 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59556 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59559 "isa_arm32.tcc"
)
{
#line 99 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 59570 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59575 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59578 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59582 "isa_arm32.tcc"
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59586 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59590 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59593 "isa_arm32.tcc"
)
{
#line 229 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address);
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59622 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59640 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59643 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59650 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59660 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59668 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59675 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59685 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59693 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59700 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59710 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59719 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59724 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59730 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrd instruction
*******************************************************************/
/*******************************************************************
* strd instruction
*/
/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59746 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59749 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59753 "isa_arm32.tcc"
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59757 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59761 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59764 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59768 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59771 "isa_arm32.tcc"
)
{
#line 276 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 59782 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59787 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59790 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59794 "isa_arm32.tcc"
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59798 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59802 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59805 "isa_arm32.tcc"
)
{
#line 324 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 59834 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59855 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59862 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59872 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59880 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59887 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59897 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59905 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59912 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 59922 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59928 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59931 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59936 "isa_arm32.tcc"
> *DecodeOpStrd_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59942 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59952 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59955 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59959 "isa_arm32.tcc"
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59963 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59967 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59970 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59974 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59977 "isa_arm32.tcc"
)
{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 59988 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59996 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60000 "isa_arm32.tcc"
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60004 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60008 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60011 "isa_arm32.tcc"
)
{
#line 350 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60039 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60060 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60067 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60077 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60085 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60092 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60102 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60107 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60110 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60117 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60127 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60136 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60141 "isa_arm32.tcc"
> *DecodeOpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60147 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60160 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60164 "isa_arm32.tcc"
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60168 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60172 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60175 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60179 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60182 "isa_arm32.tcc"
)
{
#line 292 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 60193 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60201 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60205 "isa_arm32.tcc"
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60209 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60213 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60216 "isa_arm32.tcc"
)
{
#line 375 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60245 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60263 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60266 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60273 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60283 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60288 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60291 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60298 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60308 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60313 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60316 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60323 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60333 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60339 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60342 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60347 "isa_arm32.tcc"
> *DecodeOpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60353 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60366 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60370 "isa_arm32.tcc"
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60374 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60378 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60381 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60385 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60388 "isa_arm32.tcc"
)
{
#line 300 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 60399 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60407 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60411 "isa_arm32.tcc"
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60415 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60419 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60422 "isa_arm32.tcc"
)
{
#line 401 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60452 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60470 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60473 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60480 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60490 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60498 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60505 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60515 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60523 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60530 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60540 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60548 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60555 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60565 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60574 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60579 "isa_arm32.tcc"
> *DecodeOpStrd_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60585 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60598 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60602 "isa_arm32.tcc"
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60606 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60610 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60613 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60617 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60620 "isa_arm32.tcc"
)
{
#line 308 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 60631 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60636 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60639 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60643 "isa_arm32.tcc"
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60647 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60651 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60654 "isa_arm32.tcc"
)
{
#line 428 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60683 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60701 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60704 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60711 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60721 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60729 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60736 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60746 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60751 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60754 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60761 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60771 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60779 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60786 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60796 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60802 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60805 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60810 "isa_arm32.tcc"
> *DecodeOpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60816 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60829 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60833 "isa_arm32.tcc"
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60837 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60841 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60844 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60848 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60851 "isa_arm32.tcc"
)
{
#line 316 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 60862 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60867 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60870 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60874 "isa_arm32.tcc"
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60878 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60882 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60885 "isa_arm32.tcc"
)
{
#line 454 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address);
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60915 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60936 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60943 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60953 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60958 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60961 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60968 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60978 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60983 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60986 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60993 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 61003 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61008 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61011 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61018 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 61028 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61034 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61037 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61042 "isa_arm32.tcc"
> *DecodeOpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61048 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE MULTIPLE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldm_1 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61099 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61103 "isa_arm32.tcc"
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61107 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61111 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61114 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61118 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61121 "isa_arm32.tcc"
)
{
#line 52 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61147 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61155 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61159 "isa_arm32.tcc"
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61163 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61167 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61170 "isa_arm32.tcc"
)
{
#line 144 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61213 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61221 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61224 "isa_arm32.tcc"
>

void
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61231 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61241 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61247 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61250 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61255 "isa_arm32.tcc"
> *DecodeOpLdm_1_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61261 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61268 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61271 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61275 "isa_arm32.tcc"
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61279 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61283 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61286 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61290 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61293 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61319 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61327 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61331 "isa_arm32.tcc"
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61335 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61339 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61342 "isa_arm32.tcc"
)
{
#line 184 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61385 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61396 "isa_arm32.tcc"
>

void
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61403 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61413 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61422 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61427 "isa_arm32.tcc"
> *DecodeOpLdm_1_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61433 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61443 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61447 "isa_arm32.tcc"
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61451 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61455 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61458 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61462 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61465 "isa_arm32.tcc"
)
{
#line 98 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61491 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61499 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61503 "isa_arm32.tcc"
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61507 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61511 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61514 "isa_arm32.tcc"
)
{
#line 224 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61557 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61565 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61568 "isa_arm32.tcc"
>

void
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61575 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61585 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61591 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61594 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61599 "isa_arm32.tcc"
> *DecodeOpLdm_1_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61605 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61612 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61615 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61619 "isa_arm32.tcc"
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61623 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61627 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61630 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61634 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61637 "isa_arm32.tcc"
)
{
#line 121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61663 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61668 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61671 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61675 "isa_arm32.tcc"
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61679 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61683 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61686 "isa_arm32.tcc"
)
{
#line 264 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61729 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61737 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61740 "isa_arm32.tcc"
>

void
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61747 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61757 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61763 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61766 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61771 "isa_arm32.tcc"
> *DecodeOpLdm_1_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61777 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldm_1 instruction
*******************************************************************/
/*******************************************************************
* ldm_2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61790 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61793 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61797 "isa_arm32.tcc"
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61801 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61805 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61808 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61812 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61815 "isa_arm32.tcc"
)
{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 61841 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61849 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61853 "isa_arm32.tcc"
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61857 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61861 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61864 "isa_arm32.tcc"
)
{
#line 411 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPR(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 61899 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61907 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61910 "isa_arm32.tcc"
>

void
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61917 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61927 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61936 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61941 "isa_arm32.tcc"
> *DecodeOpLdm_2_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61947 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61957 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61961 "isa_arm32.tcc"
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61965 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61969 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61972 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61976 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61979 "isa_arm32.tcc"
)
{
#line 342 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62005 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62013 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62017 "isa_arm32.tcc"
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62021 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62025 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62028 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62063 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62071 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62074 "isa_arm32.tcc"
>

void
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62081 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62091 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62100 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62105 "isa_arm32.tcc"
> *DecodeOpLdm_2_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62111 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62118 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62121 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62125 "isa_arm32.tcc"
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62129 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62133 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62136 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62140 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62143 "isa_arm32.tcc"
)
{
#line 365 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62169 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62174 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62177 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62181 "isa_arm32.tcc"
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62185 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62189 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62192 "isa_arm32.tcc"
)
{
#line 475 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62227 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62238 "isa_arm32.tcc"
>

void
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62245 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62255 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62264 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62269 "isa_arm32.tcc"
> *DecodeOpLdm_2_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62275 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62285 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62289 "isa_arm32.tcc"
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62293 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62297 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62300 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62304 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62307 "isa_arm32.tcc"
)
{
#line 388 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62333 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62341 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62345 "isa_arm32.tcc"
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62349 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62353 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62356 "isa_arm32.tcc"
)
{
#line 507 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62391 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62399 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62402 "isa_arm32.tcc"
>

void
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62409 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62419 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62425 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62428 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62433 "isa_arm32.tcc"
> *DecodeOpLdm_2_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62439 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldm_2 instruction
*******************************************************************/
/*******************************************************************
* ldm_3 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62455 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62459 "isa_arm32.tcc"
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62463 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62467 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62470 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62474 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62477 "isa_arm32.tcc"
)
{
#line 554 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62503 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62508 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62511 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62515 "isa_arm32.tcc"
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62519 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62523 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62526 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val + 4); // we need to add 4 bytes for the pc saving

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62569 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62577 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62580 "isa_arm32.tcc"
>

void
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62587 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62597 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62606 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62611 "isa_arm32.tcc"
> *DecodeOpLdm_3_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62617 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62627 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62631 "isa_arm32.tcc"
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62635 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62639 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62642 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62646 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62649 "isa_arm32.tcc"
)
{
#line 577 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62675 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62680 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62683 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62687 "isa_arm32.tcc"
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62691 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62695 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62698 "isa_arm32.tcc"
)
{
#line 686 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val + 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62741 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62749 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62752 "isa_arm32.tcc"
>

void
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62759 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62769 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62775 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62778 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62783 "isa_arm32.tcc"
> *DecodeOpLdm_3_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62789 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62799 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62803 "isa_arm32.tcc"
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62807 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62811 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62814 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62818 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62821 "isa_arm32.tcc"
)
{
#line 600 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62847 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62855 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62859 "isa_arm32.tcc"
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62863 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62867 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62870 "isa_arm32.tcc"
)
{
#line 726 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val - 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62913 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62921 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62924 "isa_arm32.tcc"
>

void
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62931 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62941 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62950 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62955 "isa_arm32.tcc"
> *DecodeOpLdm_3_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62961 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62971 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62975 "isa_arm32.tcc"
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62979 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62983 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62986 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62990 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62993 "isa_arm32.tcc"
)
{
#line 623 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 63019 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63027 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63031 "isa_arm32.tcc"
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63035 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63039 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63042 "isa_arm32.tcc"
)
{
#line 766 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val - 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 63085 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63096 "isa_arm32.tcc"
>

void
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63103 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63113 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63119 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63122 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63127 "isa_arm32.tcc"
> *DecodeOpLdm_3_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63133 "isa_arm32.tcc"
	>(code, addr);
}

// ldm_3.nextpc = {
	//   if(cond_res) {
		//     /* nothing to do */
		//   } else {
		//     cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		//   }
	// }
/*
* end of ldm_3 instruction
*******************************************************************/
/*******************************************************************
* stm_1 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63156 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63160 "isa_arm32.tcc"
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63164 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63168 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63171 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63175 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63178 "isa_arm32.tcc"
)
{
#line 829 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63203 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63211 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63215 "isa_arm32.tcc"
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63219 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63223 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63226 "isa_arm32.tcc"
)
{
#line 917 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63271 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63282 "isa_arm32.tcc"
>

void
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63289 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63299 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63308 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63313 "isa_arm32.tcc"
> *DecodeOpStm_1_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63319 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63326 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63329 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63333 "isa_arm32.tcc"
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63337 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63341 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63344 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63348 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63351 "isa_arm32.tcc"
)
{
#line 851 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63376 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63381 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63384 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63388 "isa_arm32.tcc"
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63392 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63396 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63399 "isa_arm32.tcc"
)
{
#line 959 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63444 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63455 "isa_arm32.tcc"
>

void
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63462 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63472 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63478 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63481 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63486 "isa_arm32.tcc"
> *DecodeOpStm_1_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63492 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63502 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63506 "isa_arm32.tcc"
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63510 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63514 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63517 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63521 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63524 "isa_arm32.tcc"
)
{
#line 873 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63549 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63554 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63557 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63561 "isa_arm32.tcc"
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63565 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63569 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63572 "isa_arm32.tcc"
)
{
#line 1001 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63617 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63625 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63628 "isa_arm32.tcc"
>

void
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63635 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63645 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63651 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63654 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63659 "isa_arm32.tcc"
> *DecodeOpStm_1_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63665 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63672 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63675 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63679 "isa_arm32.tcc"
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63683 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63687 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63690 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63694 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63697 "isa_arm32.tcc"
)
{
#line 895 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63722 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63727 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63730 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63734 "isa_arm32.tcc"
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63738 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63742 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63745 "isa_arm32.tcc"
)
{
#line 1043 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63790 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63798 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63801 "isa_arm32.tcc"
>

void
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63808 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63818 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63824 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63827 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63832 "isa_arm32.tcc"
> *DecodeOpStm_1_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63838 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of stm_1 instruction
*******************************************************************/
/*******************************************************************
* stm_2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63854 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63858 "isa_arm32.tcc"
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63862 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63866 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63869 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63873 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63876 "isa_arm32.tcc"
)
{
#line 1100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 63901 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63906 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63909 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63913 "isa_arm32.tcc"
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63917 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63921 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63924 "isa_arm32.tcc"
)
{
#line 1188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 63965 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63976 "isa_arm32.tcc"
>

void
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63983 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63993 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64002 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64007 "isa_arm32.tcc"
> *DecodeOpStm_2_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64013 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64020 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64023 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64027 "isa_arm32.tcc"
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64031 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64035 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64038 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64042 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64045 "isa_arm32.tcc"
)
{
#line 1122 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64070 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64078 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64082 "isa_arm32.tcc"
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64086 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64090 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64093 "isa_arm32.tcc"
)
{
#line 1226 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64134 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64142 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64145 "isa_arm32.tcc"
>

void
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64152 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64162 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64168 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64171 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64176 "isa_arm32.tcc"
> *DecodeOpStm_2_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64182 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64189 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64192 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64196 "isa_arm32.tcc"
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64200 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64204 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64207 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64211 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64214 "isa_arm32.tcc"
)
{
#line 1144 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64239 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64244 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64247 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64251 "isa_arm32.tcc"
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64255 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64259 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64262 "isa_arm32.tcc"
)
{
#line 1264 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64303 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64314 "isa_arm32.tcc"
>

void
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64321 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64331 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64340 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64345 "isa_arm32.tcc"
> *DecodeOpStm_2_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64351 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64358 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64361 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64365 "isa_arm32.tcc"
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64369 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64373 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64376 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64380 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64383 "isa_arm32.tcc"
)
{
#line 1166 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64408 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64416 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64420 "isa_arm32.tcc"
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64424 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64428 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64431 "isa_arm32.tcc"
)
{
#line 1302 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64472 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64480 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64483 "isa_arm32.tcc"
>

void
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64490 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64500 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64506 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64509 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64514 "isa_arm32.tcc"
> *DecodeOpStm_2_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64520 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

SEMAPHORE INSTRUCTIONS

**********************************************/
/* TODO: missing implementation */
/* NOTE: r15 should never be used for rn, rd and/or rm, so no need to
*   initialize them.
*/
/*******************************************************************
* swp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64575 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64579 "isa_arm32.tcc"
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64583 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64587 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64590 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64594 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64597 "isa_arm32.tcc"
)
{
#line 53 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		buffer << "swp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "[r" << rn << "]";
	}
#line 64608 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64613 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64616 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64620 "isa_arm32.tcc"
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64624 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64628 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64631 "isa_arm32.tcc"
)
{
#line 61 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.Read32toGPR(address, rd);
		cpu.Write32(address, rm_value);
	}
#line 64650 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64656 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64659 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64664 "isa_arm32.tcc"
> *DecodeOpSwp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwp<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64670 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swp instruction
*******************************************************************/
/*******************************************************************
* swpb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64686 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64690 "isa_arm32.tcc"
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64694 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64698 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64701 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64705 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64708 "isa_arm32.tcc"
)
{
#line 87 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		buffer << "swp";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", "
		<< "r" << rm << ", "
		<< "[r" << rn << "]";
	}
#line 64719 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64724 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64727 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64731 "isa_arm32.tcc"
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64735 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64739 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64742 "isa_arm32.tcc"
)
{
#line 95 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		uint8_t value = rm_value & (uint32_t)0x0ff;
		address = rn_value;
		cpu.Read8toGPR(address, rd);
		cpu.Write8(address, value);
	}
#line 64762 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64768 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64771 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64776 "isa_arm32.tcc"
> *DecodeOpSwpb(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwpb<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64782 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swpb instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

EXCEPTION-GENERATING INSTRUCTIONS

**********************************************/
/*******************************************************************
* swi instruction
* NOTE: this instruction is used to make the system calls
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64837 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64841 "isa_arm32.tcc"
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64845 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64849 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64852 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64856 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64859 "isa_arm32.tcc"
)
{
#line 48 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		buffer << "swi";
		cpu.DisasmCondition(cond, buffer);
		buffer << " #" << dec << immed;
	}
#line 64868 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64876 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64880 "isa_arm32.tcc"
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64884 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64888 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64891 "isa_arm32.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		//	if(cpu.logger_import)
		//		(*cpu.logger_import) << DebugInfo
		//			<< Function << __FUNCTION__
		//			<< File << __FILE__
		//			<< Line << __LINE__
		//			<< "executing swi (#" << immed << ")"
		//			<< Endl << EndDebugInfo;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

#ifdef SOCLIB

		throw SoftwareInterruptException<CONFIG>();

#else // SOCLIB

		if(cpu.linux_os_import) {
			// we are executing on linux emulation mode
			// use linux_os_import
			try {
				cpu.linux_os_import->ExecuteSystemCall(immed);
				} catch(exception &e) {
				cerr << e.what() << endl;
			}
			} else {
			// we are executing on full system mode
			throw SoftwareInterruptException<CONFIG>();
		}

#endif // SOCLIB

	}
#line 64930 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64936 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64939 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64944 "isa_arm32.tcc"
> *DecodeOpSwi(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwi<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64950 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swi instruction
*******************************************************************/
/*******************************************************************
* bkpt instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64963 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64966 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64970 "isa_arm32.tcc"
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64974 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64978 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64981 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64985 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64988 "isa_arm32.tcc"
)
{
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		uint32_t immed;

		immed = limmed + ((uint32_t)himmed << 4);
		buffer << "bkpt";
		buffer << " #" << dec << immed;
	}
#line 64999 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65007 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65011 "isa_arm32.tcc"
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65015 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65019 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65022 "isa_arm32.tcc"
)
{
#line 108 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		//	if(cpu.logger_import)
		//		(*cpu.logger_import) << DebugInfo
		//			<< Function << __FUNCTION__
		//			<< File << __FILE__
		//			<< Line << __LINE__
		//			<< "executing swi (#" << immed << ")"
		//			<< Endl << EndDebugInfo;
		uint32_t immed;

		immed = limmed + ((uint32_t)himmed << 4);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

#ifdef SOCLIB

		throw PrefetchAbortException<CONFIG>();

#else // SOCLIB

		if(cpu.linux_os_import) {
			// we are executing on linux emulation mode
			// what should we do with this kind of call? ignore it
			} else {
			// we are executing on full system mode
			throw PrefetchAbortException<CONFIG>();
		}

#endif // SOCLIB

	}
#line 65057 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65066 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65071 "isa_arm32.tcc"
> *DecodeOpBkpt(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBkpt<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65077 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bkpt instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

COPROCESSOR INSTRUCTIONS

**********************************************/
/*******************************************************************
* cdp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65131 "isa_arm32.tcc"
>

void
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65138 "isa_arm32.tcc"
>::initialize_condition()
{
#line 51 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 65147 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65155 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65159 "isa_arm32.tcc"
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65163 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65167 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65170 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65174 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65177 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65193 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65201 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65205 "isa_arm32.tcc"
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65209 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65213 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65216 "isa_arm32.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65229 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65238 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65243 "isa_arm32.tcc"
> *DecodeOpCdp_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65249 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65259 "isa_arm32.tcc"
>

void
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65266 "isa_arm32.tcc"
>::initialize_condition()
{
#line 57 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 65275 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65280 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65283 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65287 "isa_arm32.tcc"
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65291 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65295 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65298 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65302 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65305 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65321 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65326 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65329 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65333 "isa_arm32.tcc"
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65337 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65341 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65344 "isa_arm32.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65357 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65366 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65371 "isa_arm32.tcc"
> *DecodeOpCdp_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65377 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65387 "isa_arm32.tcc"
>

void
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65394 "isa_arm32.tcc"
>::initialize_condition()
{
#line 63 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 65403 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65408 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65411 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65415 "isa_arm32.tcc"
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65419 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65423 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65426 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65430 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65433 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65449 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65454 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65457 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65461 "isa_arm32.tcc"
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65465 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65469 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65472 "isa_arm32.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65485 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65491 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65494 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65499 "isa_arm32.tcc"
> *DecodeOpCdp_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65505 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65512 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65515 "isa_arm32.tcc"
>

void
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65522 "isa_arm32.tcc"
>::initialize_condition()
{
#line 69 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 65531 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65536 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65539 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65543 "isa_arm32.tcc"
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65547 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65551 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65554 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65558 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65561 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65577 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65585 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65589 "isa_arm32.tcc"
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65593 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65597 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65600 "isa_arm32.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65613 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65622 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65627 "isa_arm32.tcc"
> *DecodeOpCdp_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65633 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cdp instruction
*******************************************************************/
/*******************************************************************
* ldc instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65650 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65653 "isa_arm32.tcc"
>

void
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65660 "isa_arm32.tcc"
>::initialize_condition()
{
#line 111 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 65669 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65674 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65677 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65681 "isa_arm32.tcc"
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65685 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65689 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65692 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65696 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65699 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 65714 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65719 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65722 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65726 "isa_arm32.tcc"
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65730 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65734 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65737 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 65756 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65764 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65767 "isa_arm32.tcc"
>

void
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65774 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 65784 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65790 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65793 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65798 "isa_arm32.tcc"
> *DecodeOpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65804 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65815 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65818 "isa_arm32.tcc"
>

void
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65825 "isa_arm32.tcc"
>::initialize_condition()
{
#line 117 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 65834 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65842 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65846 "isa_arm32.tcc"
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65850 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65854 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65857 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65861 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65864 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 65879 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65884 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65887 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65891 "isa_arm32.tcc"
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65895 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65899 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65902 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 65921 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65929 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65932 "isa_arm32.tcc"
>

void
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65939 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 65949 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65955 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65958 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65963 "isa_arm32.tcc"
> *DecodeOpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65969 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65980 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65983 "isa_arm32.tcc"
>

void
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65990 "isa_arm32.tcc"
>::initialize_condition()
{
#line 123 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 65999 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66007 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66011 "isa_arm32.tcc"
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66015 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66019 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66022 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66026 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66029 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 66044 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66049 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66052 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66056 "isa_arm32.tcc"
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66060 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66064 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66067 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66086 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66094 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66097 "isa_arm32.tcc"
>

void
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66104 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 66114 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66120 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66123 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66128 "isa_arm32.tcc"
> *DecodeOpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66134 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66145 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66148 "isa_arm32.tcc"
>

void
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66155 "isa_arm32.tcc"
>::initialize_condition()
{
#line 129 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 66164 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66172 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66176 "isa_arm32.tcc"
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66180 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66184 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66187 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66191 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66194 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 66209 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66214 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66217 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66221 "isa_arm32.tcc"
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66225 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66229 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66232 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66251 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66262 "isa_arm32.tcc"
>

void
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66269 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 66279 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66285 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66288 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66293 "isa_arm32.tcc"
> *DecodeOpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66299 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66310 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66313 "isa_arm32.tcc"
>

void
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66320 "isa_arm32.tcc"
>::initialize_condition()
{
#line 142 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 66329 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66337 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66341 "isa_arm32.tcc"
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66345 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66349 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66352 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66356 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66359 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66374 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66379 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66382 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66386 "isa_arm32.tcc"
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66390 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66394 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66397 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66417 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66423 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66426 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66431 "isa_arm32.tcc"
> *DecodeOpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66437 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66448 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66451 "isa_arm32.tcc"
>

void
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66458 "isa_arm32.tcc"
>::initialize_condition()
{
#line 148 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 66467 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66475 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66479 "isa_arm32.tcc"
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66483 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66487 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66490 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66494 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66497 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66512 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66520 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66524 "isa_arm32.tcc"
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66528 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66532 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66535 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66555 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66561 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66564 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66569 "isa_arm32.tcc"
> *DecodeOpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66575 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66586 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66589 "isa_arm32.tcc"
>

void
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66596 "isa_arm32.tcc"
>::initialize_condition()
{
#line 154 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 66605 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66610 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66613 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66617 "isa_arm32.tcc"
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66621 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66625 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66628 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66632 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66635 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66650 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66658 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66662 "isa_arm32.tcc"
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66666 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66670 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66673 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66693 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66699 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66702 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66707 "isa_arm32.tcc"
> *DecodeOpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66713 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66724 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66727 "isa_arm32.tcc"
>

void
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66734 "isa_arm32.tcc"
>::initialize_condition()
{
#line 160 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 66743 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66751 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66755 "isa_arm32.tcc"
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66759 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66763 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66766 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66770 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66773 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66788 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66793 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66796 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66800 "isa_arm32.tcc"
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66804 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66808 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66811 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66831 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66837 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66840 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66845 "isa_arm32.tcc"
> *DecodeOpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66851 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66862 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66865 "isa_arm32.tcc"
>

void
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66872 "isa_arm32.tcc"
>::initialize_condition()
{
#line 173 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 66881 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66889 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66893 "isa_arm32.tcc"
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66897 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66901 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66904 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66908 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66911 "isa_arm32.tcc"
)
{
#line 254 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 66926 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66931 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66934 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66938 "isa_arm32.tcc"
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66942 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66946 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66949 "isa_arm32.tcc"
)
{
#line 311 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66969 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66975 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66978 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66983 "isa_arm32.tcc"
> *DecodeOpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66989 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67003 "isa_arm32.tcc"
>

void
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67010 "isa_arm32.tcc"
>::initialize_condition()
{
#line 179 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 67019 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67027 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67031 "isa_arm32.tcc"
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67035 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67039 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67042 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67046 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67049 "isa_arm32.tcc"
)
{
#line 254 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67064 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67069 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67072 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67076 "isa_arm32.tcc"
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67080 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67084 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67087 "isa_arm32.tcc"
)
{
#line 311 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67107 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67113 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67116 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67121 "isa_arm32.tcc"
> *DecodeOpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67127 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67138 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67141 "isa_arm32.tcc"
>

void
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67148 "isa_arm32.tcc"
>::initialize_condition()
{
#line 185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 67157 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67162 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67165 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67169 "isa_arm32.tcc"
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67173 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67177 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67180 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67184 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67187 "isa_arm32.tcc"
)
{
#line 254 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67202 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67207 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67210 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67214 "isa_arm32.tcc"
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67218 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67222 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67225 "isa_arm32.tcc"
)
{
#line 311 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67245 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67251 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67254 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67259 "isa_arm32.tcc"
> *DecodeOpLdc_post_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67265 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67276 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67279 "isa_arm32.tcc"
>

void
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67286 "isa_arm32.tcc"
>::initialize_condition()
{
#line 191 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 67295 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67300 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67303 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67307 "isa_arm32.tcc"
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67311 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67315 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67318 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67322 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67325 "isa_arm32.tcc"
)
{
#line 254 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67340 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67345 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67348 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67352 "isa_arm32.tcc"
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67356 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67360 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67363 "isa_arm32.tcc"
)
{
#line 311 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67383 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67392 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67397 "isa_arm32.tcc"
> *DecodeOpLdc_post_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67403 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67417 "isa_arm32.tcc"
>

void
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67424 "isa_arm32.tcc"
>::initialize_condition()
{
#line 204 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 67433 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67441 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67445 "isa_arm32.tcc"
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67449 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67453 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67456 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67460 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67463 "isa_arm32.tcc"
)
{
#line 266 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67478 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67486 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67490 "isa_arm32.tcc"
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67494 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67498 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67501 "isa_arm32.tcc"
)
{
#line 328 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67520 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67531 "isa_arm32.tcc"
>

void
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67538 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67548 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67554 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67557 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67562 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67568 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67582 "isa_arm32.tcc"
>

void
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67589 "isa_arm32.tcc"
>::initialize_condition()
{
#line 210 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 67598 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67606 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67610 "isa_arm32.tcc"
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67614 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67618 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67621 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67625 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67628 "isa_arm32.tcc"
)
{
#line 266 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67643 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67651 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67655 "isa_arm32.tcc"
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67659 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67663 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67666 "isa_arm32.tcc"
)
{
#line 328 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67685 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67696 "isa_arm32.tcc"
>

void
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67703 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67713 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67719 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67722 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67727 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67733 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67747 "isa_arm32.tcc"
>

void
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67754 "isa_arm32.tcc"
>::initialize_condition()
{
#line 216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 67763 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67768 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67771 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67775 "isa_arm32.tcc"
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67779 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67783 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67786 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67790 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67793 "isa_arm32.tcc"
)
{
#line 266 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67808 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67813 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67816 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67820 "isa_arm32.tcc"
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67824 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67828 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67831 "isa_arm32.tcc"
)
{
#line 328 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67850 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67858 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67861 "isa_arm32.tcc"
>

void
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67868 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67878 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67884 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67887 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67892 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67898 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67909 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67912 "isa_arm32.tcc"
>

void
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67919 "isa_arm32.tcc"
>::initialize_condition()
{
#line 222 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 67928 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67936 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67940 "isa_arm32.tcc"
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67944 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67948 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67951 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67955 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67958 "isa_arm32.tcc"
)
{
#line 266 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67973 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67978 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67981 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67985 "isa_arm32.tcc"
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67989 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67993 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67996 "isa_arm32.tcc"
)
{
#line 328 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 68015 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68026 "isa_arm32.tcc"
>

void
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68033 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 68043 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68049 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68052 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68057 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68063 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldc instruction
*******************************************************************/
/*******************************************************************
* mcr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68076 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68079 "isa_arm32.tcc"
>

void
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68086 "isa_arm32.tcc"
>::initialize_condition()
{
#line 358 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 68095 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68100 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68103 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68107 "isa_arm32.tcc"
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68111 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68115 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68118 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68122 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68125 "isa_arm32.tcc"
)
{
#line 382 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68141 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68149 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68153 "isa_arm32.tcc"
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68157 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68161 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68164 "isa_arm32.tcc"
)
{
#line 395 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68177 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68186 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68191 "isa_arm32.tcc"
> *DecodeOpMcr_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68197 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68207 "isa_arm32.tcc"
>

void
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68214 "isa_arm32.tcc"
>::initialize_condition()
{
#line 364 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 68223 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68231 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68235 "isa_arm32.tcc"
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68239 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68243 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68246 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68250 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68253 "isa_arm32.tcc"
)
{
#line 382 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68269 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68274 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68277 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68281 "isa_arm32.tcc"
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68285 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68289 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68292 "isa_arm32.tcc"
)
{
#line 395 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68305 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68314 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68319 "isa_arm32.tcc"
> *DecodeOpMcr_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68325 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68335 "isa_arm32.tcc"
>

void
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68342 "isa_arm32.tcc"
>::initialize_condition()
{
#line 370 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 68351 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68359 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68363 "isa_arm32.tcc"
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68367 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68371 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68374 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68378 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68381 "isa_arm32.tcc"
)
{
#line 382 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68397 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68402 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68405 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68409 "isa_arm32.tcc"
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68413 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68417 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68420 "isa_arm32.tcc"
)
{
#line 395 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68433 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68442 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68447 "isa_arm32.tcc"
> *DecodeOpMcr_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68453 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68460 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68463 "isa_arm32.tcc"
>

void
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68470 "isa_arm32.tcc"
>::initialize_condition()
{
#line 376 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 68479 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68487 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68491 "isa_arm32.tcc"
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68495 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68499 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68502 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68506 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68509 "isa_arm32.tcc"
)
{
#line 382 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68525 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68533 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68537 "isa_arm32.tcc"
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68541 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68545 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68548 "isa_arm32.tcc"
)
{
#line 395 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68561 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68570 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68575 "isa_arm32.tcc"
> *DecodeOpMcr_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68581 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcr instruction
*******************************************************************/
/*******************************************************************
* mrc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68594 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68597 "isa_arm32.tcc"
>

void
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68604 "isa_arm32.tcc"
>::initialize_condition()
{
#line 419 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 68613 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68621 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68625 "isa_arm32.tcc"
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68629 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68633 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68636 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68640 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68643 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68659 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68667 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68671 "isa_arm32.tcc"
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68675 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68679 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68682 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68695 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68701 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68704 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68709 "isa_arm32.tcc"
> *DecodeOpMrc_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68715 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68725 "isa_arm32.tcc"
>

void
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68732 "isa_arm32.tcc"
>::initialize_condition()
{
#line 425 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 68741 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68746 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68749 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68753 "isa_arm32.tcc"
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68757 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68761 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68764 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68768 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68771 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68787 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68792 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68795 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68799 "isa_arm32.tcc"
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68803 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68807 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68810 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68823 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68829 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68832 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68837 "isa_arm32.tcc"
> *DecodeOpMrc_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68843 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68853 "isa_arm32.tcc"
>

void
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68860 "isa_arm32.tcc"
>::initialize_condition()
{
#line 431 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 68869 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68877 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68881 "isa_arm32.tcc"
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68885 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68889 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68892 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68896 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68899 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68915 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68920 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68923 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68927 "isa_arm32.tcc"
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68931 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68935 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68938 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68951 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68957 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68960 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68965 "isa_arm32.tcc"
> *DecodeOpMrc_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68971 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68978 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68981 "isa_arm32.tcc"
>

void
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68988 "isa_arm32.tcc"
>::initialize_condition()
{
#line 437 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 68997 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69005 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69009 "isa_arm32.tcc"
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69013 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69017 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69020 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69024 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69027 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 69043 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69051 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69055 "isa_arm32.tcc"
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69059 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69063 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69066 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 69079 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69085 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69088 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69093 "isa_arm32.tcc"
> *DecodeOpMrc_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69099 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrc instruction
*******************************************************************/
/*******************************************************************
* stc instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69116 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69119 "isa_arm32.tcc"
>

void
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69126 "isa_arm32.tcc"
>::initialize_condition()
{
#line 479 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 69135 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69140 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69143 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69147 "isa_arm32.tcc"
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69151 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69155 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69158 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69162 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69165 "isa_arm32.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69180 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69188 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69192 "isa_arm32.tcc"
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69196 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69200 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69203 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69222 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69233 "isa_arm32.tcc"
>

void
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69240 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69250 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69259 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69264 "isa_arm32.tcc"
> *DecodeOpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69270 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69284 "isa_arm32.tcc"
>

void
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69291 "isa_arm32.tcc"
>::initialize_condition()
{
#line 485 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 69300 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69308 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69312 "isa_arm32.tcc"
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69316 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69320 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69323 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69327 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69330 "isa_arm32.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69345 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69350 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69353 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69357 "isa_arm32.tcc"
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69361 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69365 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69368 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69387 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69395 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69398 "isa_arm32.tcc"
>

void
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69405 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69415 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69421 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69424 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69429 "isa_arm32.tcc"
> *DecodeOpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69435 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69446 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69449 "isa_arm32.tcc"
>

void
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69456 "isa_arm32.tcc"
>::initialize_condition()
{
#line 491 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 69465 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69470 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69473 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69477 "isa_arm32.tcc"
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69481 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69485 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69488 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69492 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69495 "isa_arm32.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69510 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69515 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69518 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69522 "isa_arm32.tcc"
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69526 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69530 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69533 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69552 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69560 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69563 "isa_arm32.tcc"
>

void
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69570 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69580 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69586 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69589 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69594 "isa_arm32.tcc"
> *DecodeOpStc_offset_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69600 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69611 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69614 "isa_arm32.tcc"
>

void
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69621 "isa_arm32.tcc"
>::initialize_condition()
{
#line 497 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 69630 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69635 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69638 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69642 "isa_arm32.tcc"
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69646 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69650 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69653 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69657 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69660 "isa_arm32.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69675 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69680 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69683 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69687 "isa_arm32.tcc"
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69691 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69695 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69698 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69717 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69725 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69728 "isa_arm32.tcc"
>

void
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69735 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69745 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69751 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69754 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69759 "isa_arm32.tcc"
> *DecodeOpStc_offset_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69765 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69779 "isa_arm32.tcc"
>

void
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69786 "isa_arm32.tcc"
>::initialize_condition()
{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 69795 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69803 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69807 "isa_arm32.tcc"
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69811 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69815 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69818 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69822 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69825 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 69840 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69845 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69848 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69852 "isa_arm32.tcc"
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69856 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69860 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69863 "isa_arm32.tcc"
)
{
#line 662 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69883 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69892 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69897 "isa_arm32.tcc"
> *DecodeOpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69903 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69914 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69917 "isa_arm32.tcc"
>

void
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69924 "isa_arm32.tcc"
>::initialize_condition()
{
#line 516 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 69933 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69938 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69941 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69945 "isa_arm32.tcc"
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69949 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69953 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69956 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69960 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69963 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 69978 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69983 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69986 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69990 "isa_arm32.tcc"
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69994 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69998 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70001 "isa_arm32.tcc"
)
{
#line 662 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70021 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70027 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70030 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70035 "isa_arm32.tcc"
> *DecodeOpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70041 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70052 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70055 "isa_arm32.tcc"
>

void
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70062 "isa_arm32.tcc"
>::initialize_condition()
{
#line 522 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 70071 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70076 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70079 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70083 "isa_arm32.tcc"
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70087 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70091 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70094 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70098 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70101 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 70116 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70121 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70124 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70128 "isa_arm32.tcc"
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70132 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70136 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70139 "isa_arm32.tcc"
)
{
#line 662 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70159 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70168 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70173 "isa_arm32.tcc"
> *DecodeOpStc_pre_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70179 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70190 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70193 "isa_arm32.tcc"
>

void
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70200 "isa_arm32.tcc"
>::initialize_condition()
{
#line 528 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 70209 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70214 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70217 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70221 "isa_arm32.tcc"
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70225 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70229 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70232 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70236 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70239 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 70254 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70262 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70266 "isa_arm32.tcc"
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70270 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70274 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70277 "isa_arm32.tcc"
)
{
#line 662 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70297 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70303 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70306 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70311 "isa_arm32.tcc"
> *DecodeOpStc_pre_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70317 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70331 "isa_arm32.tcc"
>

void
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70338 "isa_arm32.tcc"
>::initialize_condition()
{
#line 541 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 70347 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70352 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70355 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70359 "isa_arm32.tcc"
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70363 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70367 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70370 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70374 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70377 "isa_arm32.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70392 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70397 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70400 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70404 "isa_arm32.tcc"
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70408 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70412 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70415 "isa_arm32.tcc"
)
{
#line 679 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70435 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70444 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70449 "isa_arm32.tcc"
> *DecodeOpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70455 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70466 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70469 "isa_arm32.tcc"
>

void
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70476 "isa_arm32.tcc"
>::initialize_condition()
{
#line 547 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 70485 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70493 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70497 "isa_arm32.tcc"
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70501 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70505 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70508 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70512 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70515 "isa_arm32.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70530 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70538 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70542 "isa_arm32.tcc"
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70546 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70550 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70553 "isa_arm32.tcc"
)
{
#line 679 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70573 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70582 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70587 "isa_arm32.tcc"
> *DecodeOpStc_post_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70593 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70607 "isa_arm32.tcc"
>

void
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70614 "isa_arm32.tcc"
>::initialize_condition()
{
#line 553 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 70623 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70628 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70631 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70635 "isa_arm32.tcc"
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70639 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70643 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70646 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70650 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70653 "isa_arm32.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70668 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70673 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70676 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70680 "isa_arm32.tcc"
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70684 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70688 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70691 "isa_arm32.tcc"
)
{
#line 679 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70711 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70717 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70720 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70725 "isa_arm32.tcc"
> *DecodeOpStc_post_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70731 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70745 "isa_arm32.tcc"
>

void
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70752 "isa_arm32.tcc"
>::initialize_condition()
{
#line 559 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 70761 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70766 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70769 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70773 "isa_arm32.tcc"
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70777 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70781 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70784 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70788 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70791 "isa_arm32.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70806 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70811 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70814 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70818 "isa_arm32.tcc"
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70822 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70826 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70829 "isa_arm32.tcc"
)
{
#line 679 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70849 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70855 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70858 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70863 "isa_arm32.tcc"
> *DecodeOpStc_post_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70869 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70880 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70883 "isa_arm32.tcc"
>

void
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70890 "isa_arm32.tcc"
>::initialize_condition()
{
#line 572 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 70899 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70907 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70911 "isa_arm32.tcc"
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70915 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70919 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70922 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70926 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70929 "isa_arm32.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 70944 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70949 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70952 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70956 "isa_arm32.tcc"
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70960 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70964 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70967 "isa_arm32.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 70986 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70997 "isa_arm32.tcc"
>

void
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71004 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71014 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71020 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71023 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71028 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71034 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71048 "isa_arm32.tcc"
>

void
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71055 "isa_arm32.tcc"
>::initialize_condition()
{
#line 578 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 71064 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71069 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71072 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71076 "isa_arm32.tcc"
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71080 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71084 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71087 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71091 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71094 "isa_arm32.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71109 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71117 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71121 "isa_arm32.tcc"
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71125 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71129 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71132 "isa_arm32.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71151 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71162 "isa_arm32.tcc"
>

void
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71169 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71179 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71188 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71193 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71199 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71213 "isa_arm32.tcc"
>

void
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71220 "isa_arm32.tcc"
>::initialize_condition()
{
#line 584 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 71229 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71234 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71237 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71241 "isa_arm32.tcc"
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71245 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71249 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71252 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71256 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71259 "isa_arm32.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71274 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71282 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71286 "isa_arm32.tcc"
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71290 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71294 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71297 "isa_arm32.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71316 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71327 "isa_arm32.tcc"
>

void
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71334 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71344 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71350 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71353 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71358 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71364 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71375 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71378 "isa_arm32.tcc"
>

void
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71385 "isa_arm32.tcc"
>::initialize_condition()
{
#line 590 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 71394 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71399 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71402 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71406 "isa_arm32.tcc"
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71410 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71414 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71417 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71421 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71424 "isa_arm32.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71439 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71444 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71447 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71451 "isa_arm32.tcc"
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71455 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71459 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71462 "isa_arm32.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71481 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71492 "isa_arm32.tcc"
>

void
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71499 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71509 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71515 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71518 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71523 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71529 "isa_arm32.tcc"
	>(code, addr);
}

/*******************************************************************
* cdp2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71539 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71542 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71546 "isa_arm32.tcc"
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71550 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71554 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71557 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71561 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71564 "isa_arm32.tcc"
)
{
#line 734 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "cdp2";
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 71577 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71585 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71589 "isa_arm32.tcc"
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71593 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71597 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71600 "isa_arm32.tcc"
)
{
#line 744 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 71609 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71618 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71623 "isa_arm32.tcc"
> *DecodeOpCdp2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71629 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cdp2 instruction
*******************************************************************/
/*******************************************************************
* ldc2 instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71646 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71649 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71653 "isa_arm32.tcc"
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71657 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71661 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71664 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71668 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71671 "isa_arm32.tcc"
)
{
#line 767 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 71683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71691 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71695 "isa_arm32.tcc"
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71699 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71703 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71706 "isa_arm32.tcc"
)
{
#line 806 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71723 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71734 "isa_arm32.tcc"
>

void
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71741 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71751 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71757 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71760 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71765 "isa_arm32.tcc"
> *DecodeOpLdc2_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71771 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71782 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71785 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71789 "isa_arm32.tcc"
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71793 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71797 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71800 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71804 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71807 "isa_arm32.tcc"
)
{
#line 776 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 71819 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71824 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71827 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71831 "isa_arm32.tcc"
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71835 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71839 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71842 "isa_arm32.tcc"
)
{
#line 820 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71860 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71866 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71869 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71874 "isa_arm32.tcc"
> *DecodeOpLdc2_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71880 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71891 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71894 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71898 "isa_arm32.tcc"
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71902 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71906 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71909 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71913 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71916 "isa_arm32.tcc"
)
{
#line 785 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 71928 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71936 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71940 "isa_arm32.tcc"
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71944 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71948 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71951 "isa_arm32.tcc"
)
{
#line 835 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71969 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71975 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71978 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71983 "isa_arm32.tcc"
> *DecodeOpLdc2_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71989 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72003 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72007 "isa_arm32.tcc"
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72011 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72015 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72018 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72022 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72025 "isa_arm32.tcc"
)
{
#line 794 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 72040 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72048 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72052 "isa_arm32.tcc"
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72056 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72060 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72063 "isa_arm32.tcc"
)
{
#line 850 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 72080 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72088 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72091 "isa_arm32.tcc"
>

void
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72098 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72108 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72117 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72122 "isa_arm32.tcc"
> *DecodeOpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72128 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldc2 instruction
*******************************************************************/
/*******************************************************************
* mcr2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72141 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72144 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72148 "isa_arm32.tcc"
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72152 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72156 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72159 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72163 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72166 "isa_arm32.tcc"
)
{
#line 875 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "mcr2";
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 72179 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72187 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72191 "isa_arm32.tcc"
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72195 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72199 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72202 "isa_arm32.tcc"
)
{
#line 885 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 72211 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72217 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72220 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72225 "isa_arm32.tcc"
> *DecodeOpMcr2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72231 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcr2 instruction
*******************************************************************/
/*******************************************************************
* mrc2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72244 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72247 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72251 "isa_arm32.tcc"
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72255 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72259 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72262 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72266 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72269 "isa_arm32.tcc"
)
{
#line 902 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "mrc2";
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 72282 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72290 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72294 "isa_arm32.tcc"
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72298 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72302 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72305 "isa_arm32.tcc"
)
{
#line 912 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 72314 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72320 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72323 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72328 "isa_arm32.tcc"
> *DecodeOpMrc2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72334 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrc2 instruction
*******************************************************************/
/*******************************************************************
* stc2 instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72351 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72354 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72358 "isa_arm32.tcc"
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72362 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72366 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72369 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72373 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72376 "isa_arm32.tcc"
)
{
#line 935 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 72388 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72396 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72400 "isa_arm32.tcc"
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72404 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72408 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72411 "isa_arm32.tcc"
)
{
#line 971 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72428 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72439 "isa_arm32.tcc"
>

void
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72446 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72456 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72465 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72470 "isa_arm32.tcc"
> *DecodeOpStc2_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72476 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72490 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72494 "isa_arm32.tcc"
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72498 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72502 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72505 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72509 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72512 "isa_arm32.tcc"
)
{
#line 944 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 72524 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72532 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72536 "isa_arm32.tcc"
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72540 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72544 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72547 "isa_arm32.tcc"
)
{
#line 985 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72565 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72574 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72579 "isa_arm32.tcc"
> *DecodeOpStc2_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72585 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72599 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72603 "isa_arm32.tcc"
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72607 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72611 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72614 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72618 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72621 "isa_arm32.tcc"
)
{
#line 953 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 72633 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72641 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72645 "isa_arm32.tcc"
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72649 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72653 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72656 "isa_arm32.tcc"
)
{
#line 1000 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72674 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72680 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72683 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72688 "isa_arm32.tcc"
> *DecodeOpStc2_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72694 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72705 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72708 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72712 "isa_arm32.tcc"
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72716 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72720 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72723 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72727 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72730 "isa_arm32.tcc"
)
{
#line 962 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 72742 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72750 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72754 "isa_arm32.tcc"
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72758 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72762 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72765 "isa_arm32.tcc"
)
{
#line 1015 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 72782 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72790 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72793 "isa_arm32.tcc"
>

void
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72800 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72810 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72816 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72819 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72824 "isa_arm32.tcc"
> *DecodeOpStc2_unindexed(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72830 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

COPROCESSOR INSTRUCTIONS

**********************************************/
/*******************************************************************
* mcrr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72881 "isa_arm32.tcc"
>

void
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72888 "isa_arm32.tcc"
>::initialize_condition()
{
#line 54 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 72897 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72905 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72909 "isa_arm32.tcc"
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72913 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72917 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72920 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72924 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72927 "isa_arm32.tcc"
)
{
#line 80 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 72942 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72950 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72954 "isa_arm32.tcc"
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72958 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72962 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72965 "isa_arm32.tcc"
)
{
#line 92 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 72979 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72985 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72988 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72993 "isa_arm32.tcc"
> *DecodeOpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72999 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73006 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73009 "isa_arm32.tcc"
>

void
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73016 "isa_arm32.tcc"
>::initialize_condition()
{
#line 60 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 73025 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73033 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73037 "isa_arm32.tcc"
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73041 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73045 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73048 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73052 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73055 "isa_arm32.tcc"
)
{
#line 80 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73070 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73078 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73082 "isa_arm32.tcc"
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73086 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73090 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73093 "isa_arm32.tcc"
)
{
#line 92 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73107 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73113 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73116 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73121 "isa_arm32.tcc"
> *DecodeOpMcrr_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73127 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73137 "isa_arm32.tcc"
>

void
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73144 "isa_arm32.tcc"
>::initialize_condition()
{
#line 66 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 73153 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73161 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73165 "isa_arm32.tcc"
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73169 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73173 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73176 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73180 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73183 "isa_arm32.tcc"
)
{
#line 80 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73198 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73203 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73206 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73210 "isa_arm32.tcc"
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73214 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73218 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73221 "isa_arm32.tcc"
)
{
#line 92 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73235 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73244 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73249 "isa_arm32.tcc"
> *DecodeOpMcrr_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73255 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73265 "isa_arm32.tcc"
>

void
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73272 "isa_arm32.tcc"
>::initialize_condition()
{
#line 72 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 73281 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73289 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73293 "isa_arm32.tcc"
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73297 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73301 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73304 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73308 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73311 "isa_arm32.tcc"
)
{
#line 80 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73326 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73334 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73338 "isa_arm32.tcc"
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73342 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73346 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73349 "isa_arm32.tcc"
)
{
#line 92 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73363 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73369 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73372 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73377 "isa_arm32.tcc"
> *DecodeOpMcrr_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73383 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcrr instruction
*******************************************************************/
/*******************************************************************
* mrrc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73396 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73399 "isa_arm32.tcc"
>

void
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73406 "isa_arm32.tcc"
>::initialize_condition()
{
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 73415 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73423 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73427 "isa_arm32.tcc"
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73431 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73435 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73438 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73442 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73445 "isa_arm32.tcc"
)
{
#line 146 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73460 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73465 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73468 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73472 "isa_arm32.tcc"
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73476 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73480 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73483 "isa_arm32.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73497 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73506 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73511 "isa_arm32.tcc"
> *DecodeOpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73517 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73527 "isa_arm32.tcc"
>

void
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73534 "isa_arm32.tcc"
>::initialize_condition()
{
#line 126 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 73543 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73548 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73551 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73555 "isa_arm32.tcc"
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73559 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73563 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73566 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73570 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73573 "isa_arm32.tcc"
)
{
#line 146 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73588 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73596 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73600 "isa_arm32.tcc"
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73604 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73608 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73611 "isa_arm32.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73625 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73634 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73639 "isa_arm32.tcc"
> *DecodeOpMrrc_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73645 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73652 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73655 "isa_arm32.tcc"
>

void
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73662 "isa_arm32.tcc"
>::initialize_condition()
{
#line 132 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 73671 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73676 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73679 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73683 "isa_arm32.tcc"
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73687 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73691 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73694 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73698 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73701 "isa_arm32.tcc"
)
{
#line 146 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73716 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73721 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73724 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73728 "isa_arm32.tcc"
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73732 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73736 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73739 "isa_arm32.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73753 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73762 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73767 "isa_arm32.tcc"
> *DecodeOpMrrc_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73773 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73783 "isa_arm32.tcc"
>

void
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73790 "isa_arm32.tcc"
>::initialize_condition()
{
#line 138 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 73799 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73804 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73807 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73811 "isa_arm32.tcc"
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73815 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73819 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73822 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73826 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73829 "isa_arm32.tcc"
)
{
#line 146 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73844 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73852 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73856 "isa_arm32.tcc"
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73860 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73864 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73867 "isa_arm32.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73881 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73890 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73895 "isa_arm32.tcc"
> *DecodeOpMrrc_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73901 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrrc instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

MISCELLANEOUS ARITHMETIC INSTRUCTIONS

**********************************************/
/*******************************************************************
* clz instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73952 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73955 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73959 "isa_arm32.tcc"
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73963 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73967 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73970 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73974 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73977 "isa_arm32.tcc"
)
{
#line 48 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		buffer << "clz";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", r" << rm;
	}
#line 73986 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73991 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73994 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73998 "isa_arm32.tcc"
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74002 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 74006 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 74009 "isa_arm32.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t src;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		src = rm_value;
		if(src == 0) {
			res = 32;
			} else {
			res = 0;
			while((src & 0x80000000) == 0) {
				res++;
				src = src << 1;
			}
			//    res = 31 - res;
		}

		cpu.SetGPR(rd, res);
	}
#line 74036 "isa_arm32.tcc"
}
/*
* end of clz instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74047 "isa_arm32.tcc"
>

void
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74054 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 83 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == CPU<CONFIG>::PC_reg) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 74064 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74070 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74073 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74078 "isa_arm32.tcc"
> *DecodeOpClz(CodeType code, typename CONFIG::address_t addr)
{
	return new OpClz<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 74084 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74094 "isa_arm32.tcc"
>
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74099 "isa_arm32.tcc"
>::OpB_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74103 "isa_arm32.tcc"
>(code, addr, "b_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74113 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74116 "isa_arm32.tcc"
>
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74121 "isa_arm32.tcc"
>::OpB_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74125 "isa_arm32.tcc"
>(code, addr, "b_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74135 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74138 "isa_arm32.tcc"
>
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74143 "isa_arm32.tcc"
>::OpB_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74147 "isa_arm32.tcc"
>(code, addr, "b_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74160 "isa_arm32.tcc"
>
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74165 "isa_arm32.tcc"
>::OpB_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74169 "isa_arm32.tcc"
>(code, addr, "b_1110")
{
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74178 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74181 "isa_arm32.tcc"
>
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74186 "isa_arm32.tcc"
>::OpBl_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74190 "isa_arm32.tcc"
>(code, addr, "bl_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74200 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74203 "isa_arm32.tcc"
>
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74208 "isa_arm32.tcc"
>::OpBl_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74212 "isa_arm32.tcc"
>(code, addr, "bl_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74225 "isa_arm32.tcc"
>
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74230 "isa_arm32.tcc"
>::OpBl_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74234 "isa_arm32.tcc"
>(code, addr, "bl_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74244 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74247 "isa_arm32.tcc"
>
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74252 "isa_arm32.tcc"
>::OpBl_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74256 "isa_arm32.tcc"
>(code, addr, "bl_1110")
{
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74265 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74268 "isa_arm32.tcc"
>
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74273 "isa_arm32.tcc"
>::OpBx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74277 "isa_arm32.tcc"
>(code, addr, "bx")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	sbo2 = ((code >> 12) & 0xf);
	sbo3 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74290 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74293 "isa_arm32.tcc"
>
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74298 "isa_arm32.tcc"
>::OpBlx_1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74302 "isa_arm32.tcc"
>(code, addr, "blx_1")
{
	h = ((code >> 24) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74315 "isa_arm32.tcc"
>
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74320 "isa_arm32.tcc"
>::OpBlx_2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74324 "isa_arm32.tcc"
>(code, addr, "blx_2")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	sbo2 = ((code >> 12) & 0xf);
	sbo3 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74340 "isa_arm32.tcc"
>
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74345 "isa_arm32.tcc"
>::OpAnd_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74349 "isa_arm32.tcc"
>(code, addr, "and_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74365 "isa_arm32.tcc"
>
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74370 "isa_arm32.tcc"
>::OpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74374 "isa_arm32.tcc"
>(code, addr, "and_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74391 "isa_arm32.tcc"
>
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74396 "isa_arm32.tcc"
>::OpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74400 "isa_arm32.tcc"
>(code, addr, "and_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74417 "isa_arm32.tcc"
>
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74422 "isa_arm32.tcc"
>::OpAnds_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74426 "isa_arm32.tcc"
>(code, addr, "ands_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74442 "isa_arm32.tcc"
>
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74447 "isa_arm32.tcc"
>::OpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74451 "isa_arm32.tcc"
>(code, addr, "ands_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74465 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74468 "isa_arm32.tcc"
>
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74473 "isa_arm32.tcc"
>::OpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74477 "isa_arm32.tcc"
>(code, addr, "ands_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74491 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74494 "isa_arm32.tcc"
>
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74499 "isa_arm32.tcc"
>::OpEor_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74503 "isa_arm32.tcc"
>(code, addr, "eor_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74519 "isa_arm32.tcc"
>
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74524 "isa_arm32.tcc"
>::OpEor_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74528 "isa_arm32.tcc"
>(code, addr, "eor_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74542 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74545 "isa_arm32.tcc"
>
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74550 "isa_arm32.tcc"
>::OpEor_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74554 "isa_arm32.tcc"
>(code, addr, "eor_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74571 "isa_arm32.tcc"
>
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74576 "isa_arm32.tcc"
>::OpEors_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74580 "isa_arm32.tcc"
>(code, addr, "eors_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74596 "isa_arm32.tcc"
>
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74601 "isa_arm32.tcc"
>::OpEors_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74605 "isa_arm32.tcc"
>(code, addr, "eors_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74622 "isa_arm32.tcc"
>
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74627 "isa_arm32.tcc"
>::OpEors_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74631 "isa_arm32.tcc"
>(code, addr, "eors_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74645 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74648 "isa_arm32.tcc"
>
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74653 "isa_arm32.tcc"
>::OpSub_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74657 "isa_arm32.tcc"
>(code, addr, "sub_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74673 "isa_arm32.tcc"
>
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74678 "isa_arm32.tcc"
>::OpSub_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74682 "isa_arm32.tcc"
>(code, addr, "sub_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74696 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74699 "isa_arm32.tcc"
>
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74704 "isa_arm32.tcc"
>::OpSub_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74708 "isa_arm32.tcc"
>(code, addr, "sub_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74725 "isa_arm32.tcc"
>
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74730 "isa_arm32.tcc"
>::OpSubs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74734 "isa_arm32.tcc"
>(code, addr, "subs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74750 "isa_arm32.tcc"
>
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74755 "isa_arm32.tcc"
>::OpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74759 "isa_arm32.tcc"
>(code, addr, "subs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74776 "isa_arm32.tcc"
>
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74781 "isa_arm32.tcc"
>::OpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74785 "isa_arm32.tcc"
>(code, addr, "subs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74802 "isa_arm32.tcc"
>
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74807 "isa_arm32.tcc"
>::OpRsb_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74811 "isa_arm32.tcc"
>(code, addr, "rsb_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74824 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74827 "isa_arm32.tcc"
>
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74832 "isa_arm32.tcc"
>::OpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74836 "isa_arm32.tcc"
>(code, addr, "rsb_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74853 "isa_arm32.tcc"
>
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74858 "isa_arm32.tcc"
>::OpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74862 "isa_arm32.tcc"
>(code, addr, "rsb_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74876 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74879 "isa_arm32.tcc"
>
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74884 "isa_arm32.tcc"
>::OpRsbs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74888 "isa_arm32.tcc"
>(code, addr, "rsbs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74904 "isa_arm32.tcc"
>
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74909 "isa_arm32.tcc"
>::OpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74913 "isa_arm32.tcc"
>(code, addr, "rsbs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74930 "isa_arm32.tcc"
>
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74935 "isa_arm32.tcc"
>::OpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74939 "isa_arm32.tcc"
>(code, addr, "rsbs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74956 "isa_arm32.tcc"
>
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74961 "isa_arm32.tcc"
>::OpAdd_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74965 "isa_arm32.tcc"
>(code, addr, "add_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74978 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74981 "isa_arm32.tcc"
>
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74986 "isa_arm32.tcc"
>::OpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74990 "isa_arm32.tcc"
>(code, addr, "add_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75007 "isa_arm32.tcc"
>
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75012 "isa_arm32.tcc"
>::OpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75016 "isa_arm32.tcc"
>(code, addr, "add_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75033 "isa_arm32.tcc"
>
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75038 "isa_arm32.tcc"
>::OpAdds_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75042 "isa_arm32.tcc"
>(code, addr, "adds_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75055 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75058 "isa_arm32.tcc"
>
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75063 "isa_arm32.tcc"
>::OpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75067 "isa_arm32.tcc"
>(code, addr, "adds_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75084 "isa_arm32.tcc"
>
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75089 "isa_arm32.tcc"
>::OpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75093 "isa_arm32.tcc"
>(code, addr, "adds_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75107 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75110 "isa_arm32.tcc"
>
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75115 "isa_arm32.tcc"
>::OpAdc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75119 "isa_arm32.tcc"
>(code, addr, "adc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75132 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75135 "isa_arm32.tcc"
>
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75140 "isa_arm32.tcc"
>::OpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75144 "isa_arm32.tcc"
>(code, addr, "adc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75161 "isa_arm32.tcc"
>
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75166 "isa_arm32.tcc"
>::OpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75170 "isa_arm32.tcc"
>(code, addr, "adc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75187 "isa_arm32.tcc"
>
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75192 "isa_arm32.tcc"
>::OpAdcs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75196 "isa_arm32.tcc"
>(code, addr, "adcs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75209 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75212 "isa_arm32.tcc"
>
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75217 "isa_arm32.tcc"
>::OpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75221 "isa_arm32.tcc"
>(code, addr, "adcs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75238 "isa_arm32.tcc"
>
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75243 "isa_arm32.tcc"
>::OpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75247 "isa_arm32.tcc"
>(code, addr, "adcs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75264 "isa_arm32.tcc"
>
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75269 "isa_arm32.tcc"
>::OpSbc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75273 "isa_arm32.tcc"
>(code, addr, "sbc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75289 "isa_arm32.tcc"
>
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75294 "isa_arm32.tcc"
>::OpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75298 "isa_arm32.tcc"
>(code, addr, "sbc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75315 "isa_arm32.tcc"
>
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75320 "isa_arm32.tcc"
>::OpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75324 "isa_arm32.tcc"
>(code, addr, "sbc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75341 "isa_arm32.tcc"
>
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75346 "isa_arm32.tcc"
>::OpSbcs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75350 "isa_arm32.tcc"
>(code, addr, "sbcs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75366 "isa_arm32.tcc"
>
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75371 "isa_arm32.tcc"
>::OpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75375 "isa_arm32.tcc"
>(code, addr, "sbcs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75392 "isa_arm32.tcc"
>
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75397 "isa_arm32.tcc"
>::OpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75401 "isa_arm32.tcc"
>(code, addr, "sbcs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75418 "isa_arm32.tcc"
>
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75423 "isa_arm32.tcc"
>::OpRsc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75427 "isa_arm32.tcc"
>(code, addr, "rsc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75443 "isa_arm32.tcc"
>
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75448 "isa_arm32.tcc"
>::OpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75452 "isa_arm32.tcc"
>(code, addr, "rsc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75466 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75469 "isa_arm32.tcc"
>
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75474 "isa_arm32.tcc"
>::OpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75478 "isa_arm32.tcc"
>(code, addr, "rsc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75495 "isa_arm32.tcc"
>
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75500 "isa_arm32.tcc"
>::OpRscs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75504 "isa_arm32.tcc"
>(code, addr, "rscs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75520 "isa_arm32.tcc"
>
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75525 "isa_arm32.tcc"
>::OpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75529 "isa_arm32.tcc"
>(code, addr, "rscs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75546 "isa_arm32.tcc"
>
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75551 "isa_arm32.tcc"
>::OpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75555 "isa_arm32.tcc"
>(code, addr, "rscs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75569 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75572 "isa_arm32.tcc"
>
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75577 "isa_arm32.tcc"
>::OpTst_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75581 "isa_arm32.tcc"
>(code, addr, "tst_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75594 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75597 "isa_arm32.tcc"
>
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75602 "isa_arm32.tcc"
>::OpTst_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75606 "isa_arm32.tcc"
>(code, addr, "tst_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75620 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75623 "isa_arm32.tcc"
>
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75628 "isa_arm32.tcc"
>::OpTst_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75632 "isa_arm32.tcc"
>(code, addr, "tst_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75646 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75649 "isa_arm32.tcc"
>
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75654 "isa_arm32.tcc"
>::OpTeq_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75658 "isa_arm32.tcc"
>(code, addr, "teq_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75671 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75674 "isa_arm32.tcc"
>
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75679 "isa_arm32.tcc"
>::OpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75683 "isa_arm32.tcc"
>(code, addr, "teq_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75697 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75700 "isa_arm32.tcc"
>
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75705 "isa_arm32.tcc"
>::OpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75709 "isa_arm32.tcc"
>(code, addr, "teq_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75723 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75726 "isa_arm32.tcc"
>
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75731 "isa_arm32.tcc"
>::OpCmp_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75735 "isa_arm32.tcc"
>(code, addr, "cmp_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75751 "isa_arm32.tcc"
>
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75756 "isa_arm32.tcc"
>::OpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75760 "isa_arm32.tcc"
>(code, addr, "cmp_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75774 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75777 "isa_arm32.tcc"
>
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75782 "isa_arm32.tcc"
>::OpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75786 "isa_arm32.tcc"
>(code, addr, "cmp_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75803 "isa_arm32.tcc"
>
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75808 "isa_arm32.tcc"
>::OpCmn_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75812 "isa_arm32.tcc"
>(code, addr, "cmn_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75828 "isa_arm32.tcc"
>
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75833 "isa_arm32.tcc"
>::OpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75837 "isa_arm32.tcc"
>(code, addr, "cmn_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75854 "isa_arm32.tcc"
>
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75859 "isa_arm32.tcc"
>::OpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75863 "isa_arm32.tcc"
>(code, addr, "cmn_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75880 "isa_arm32.tcc"
>
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75885 "isa_arm32.tcc"
>::OpOrr_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75889 "isa_arm32.tcc"
>(code, addr, "orr_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75905 "isa_arm32.tcc"
>
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75910 "isa_arm32.tcc"
>::OpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75914 "isa_arm32.tcc"
>(code, addr, "orr_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75928 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75931 "isa_arm32.tcc"
>
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75936 "isa_arm32.tcc"
>::OpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75940 "isa_arm32.tcc"
>(code, addr, "orr_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75957 "isa_arm32.tcc"
>
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75962 "isa_arm32.tcc"
>::OpOrrs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75966 "isa_arm32.tcc"
>(code, addr, "orrs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75979 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75982 "isa_arm32.tcc"
>
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75987 "isa_arm32.tcc"
>::OpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75991 "isa_arm32.tcc"
>(code, addr, "orrs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76005 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76008 "isa_arm32.tcc"
>
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76013 "isa_arm32.tcc"
>::OpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76017 "isa_arm32.tcc"
>(code, addr, "orrs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76031 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76034 "isa_arm32.tcc"
>
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76039 "isa_arm32.tcc"
>::OpMov_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76043 "isa_arm32.tcc"
>(code, addr, "mov_32imm")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76056 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76059 "isa_arm32.tcc"
>
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76064 "isa_arm32.tcc"
>::OpMov_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76068 "isa_arm32.tcc"
>(code, addr, "mov_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76085 "isa_arm32.tcc"
>
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76090 "isa_arm32.tcc"
>::OpMov_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76094 "isa_arm32.tcc"
>(code, addr, "mov_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76108 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76111 "isa_arm32.tcc"
>
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76116 "isa_arm32.tcc"
>::OpMovs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76120 "isa_arm32.tcc"
>(code, addr, "movs_32imm")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76136 "isa_arm32.tcc"
>
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76141 "isa_arm32.tcc"
>::OpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76145 "isa_arm32.tcc"
>(code, addr, "movs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76162 "isa_arm32.tcc"
>
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76167 "isa_arm32.tcc"
>::OpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76171 "isa_arm32.tcc"
>(code, addr, "movs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76188 "isa_arm32.tcc"
>
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76193 "isa_arm32.tcc"
>::OpBic_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76197 "isa_arm32.tcc"
>(code, addr, "bic_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76213 "isa_arm32.tcc"
>
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76218 "isa_arm32.tcc"
>::OpBic_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76222 "isa_arm32.tcc"
>(code, addr, "bic_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76236 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76239 "isa_arm32.tcc"
>
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76244 "isa_arm32.tcc"
>::OpBic_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76248 "isa_arm32.tcc"
>(code, addr, "bic_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76265 "isa_arm32.tcc"
>
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76270 "isa_arm32.tcc"
>::OpBics_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76274 "isa_arm32.tcc"
>(code, addr, "bics_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76290 "isa_arm32.tcc"
>
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76295 "isa_arm32.tcc"
>::OpBics_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76299 "isa_arm32.tcc"
>(code, addr, "bics_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76313 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76316 "isa_arm32.tcc"
>
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76321 "isa_arm32.tcc"
>::OpBics_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76325 "isa_arm32.tcc"
>(code, addr, "bics_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76339 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76342 "isa_arm32.tcc"
>
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76347 "isa_arm32.tcc"
>::OpMvn_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76351 "isa_arm32.tcc"
>(code, addr, "mvn_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76364 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76367 "isa_arm32.tcc"
>
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76372 "isa_arm32.tcc"
>::OpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76376 "isa_arm32.tcc"
>(code, addr, "mvn_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76393 "isa_arm32.tcc"
>
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76398 "isa_arm32.tcc"
>::OpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76402 "isa_arm32.tcc"
>(code, addr, "mvn_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76416 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76419 "isa_arm32.tcc"
>
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76424 "isa_arm32.tcc"
>::OpMvns_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76428 "isa_arm32.tcc"
>(code, addr, "mvns_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76444 "isa_arm32.tcc"
>
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76449 "isa_arm32.tcc"
>::OpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76453 "isa_arm32.tcc"
>(code, addr, "mvns_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76467 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76470 "isa_arm32.tcc"
>
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76475 "isa_arm32.tcc"
>::OpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76479 "isa_arm32.tcc"
>(code, addr, "mvns_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76496 "isa_arm32.tcc"
>
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76501 "isa_arm32.tcc"
>::OpQadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76505 "isa_arm32.tcc"
>(code, addr, "qadd")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76521 "isa_arm32.tcc"
>
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76526 "isa_arm32.tcc"
>::OpQsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76530 "isa_arm32.tcc"
>(code, addr, "qsub")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76546 "isa_arm32.tcc"
>
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76551 "isa_arm32.tcc"
>::OpQdadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76555 "isa_arm32.tcc"
>(code, addr, "qdadd")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76571 "isa_arm32.tcc"
>
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76576 "isa_arm32.tcc"
>::OpQdsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76580 "isa_arm32.tcc"
>(code, addr, "qdsub")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76596 "isa_arm32.tcc"
>
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76601 "isa_arm32.tcc"
>::OpMla(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76605 "isa_arm32.tcc"
>(code, addr, "mla")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76622 "isa_arm32.tcc"
>
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76627 "isa_arm32.tcc"
>::OpMul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76631 "isa_arm32.tcc"
>(code, addr, "mul")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76645 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76648 "isa_arm32.tcc"
>
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76653 "isa_arm32.tcc"
>::OpSmlal(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76657 "isa_arm32.tcc"
>(code, addr, "smlal")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76671 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76674 "isa_arm32.tcc"
>
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76679 "isa_arm32.tcc"
>::OpSmull(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76683 "isa_arm32.tcc"
>(code, addr, "smull")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76697 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76700 "isa_arm32.tcc"
>
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76705 "isa_arm32.tcc"
>::OpUmlal(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76709 "isa_arm32.tcc"
>(code, addr, "umlal")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76723 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76726 "isa_arm32.tcc"
>
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76731 "isa_arm32.tcc"
>::OpUmull(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76735 "isa_arm32.tcc"
>(code, addr, "umull")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76749 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76752 "isa_arm32.tcc"
>
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76757 "isa_arm32.tcc"
>::OpSmlaxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76761 "isa_arm32.tcc"
>(code, addr, "smlaxy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76779 "isa_arm32.tcc"
>
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76784 "isa_arm32.tcc"
>::OpSmlalxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76788 "isa_arm32.tcc"
>(code, addr, "smlalxy")
{
	cond = ((code >> 28) & 0xf);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76803 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76806 "isa_arm32.tcc"
>
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76811 "isa_arm32.tcc"
>::OpSmlawy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76815 "isa_arm32.tcc"
>(code, addr, "smlawy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76829 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76832 "isa_arm32.tcc"
>
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76837 "isa_arm32.tcc"
>::OpSmulxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76841 "isa_arm32.tcc"
>(code, addr, "smulxy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76859 "isa_arm32.tcc"
>
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76864 "isa_arm32.tcc"
>::OpSmulwy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76868 "isa_arm32.tcc"
>(code, addr, "smulwy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76882 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76885 "isa_arm32.tcc"
>
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76890 "isa_arm32.tcc"
>::OpMrs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76894 "isa_arm32.tcc"
>(code, addr, "mrs")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	rd = ((code >> 12) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76905 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76908 "isa_arm32.tcc"
>
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76913 "isa_arm32.tcc"
>::OpMsr_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76917 "isa_arm32.tcc"
>(code, addr, "msr_imm")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	mask = ((code >> 16) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76930 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76933 "isa_arm32.tcc"
>
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76938 "isa_arm32.tcc"
>::OpMsr_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76942 "isa_arm32.tcc"
>(code, addr, "msr_reg")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	mask = ((code >> 16) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76957 "isa_arm32.tcc"
>
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76962 "isa_arm32.tcc"
>::OpLdr_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76966 "isa_arm32.tcc"
>(code, addr, "ldr_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76979 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76982 "isa_arm32.tcc"
>
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76987 "isa_arm32.tcc"
>::OpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76991 "isa_arm32.tcc"
>(code, addr, "ldr_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77007 "isa_arm32.tcc"
>
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77012 "isa_arm32.tcc"
>::OpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77016 "isa_arm32.tcc"
>(code, addr, "ldr_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77029 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77032 "isa_arm32.tcc"
>
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77037 "isa_arm32.tcc"
>::OpLdr_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77041 "isa_arm32.tcc"
>(code, addr, "ldr_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77056 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77059 "isa_arm32.tcc"
>
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77064 "isa_arm32.tcc"
>::OpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77068 "isa_arm32.tcc"
>(code, addr, "ldr_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77083 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77086 "isa_arm32.tcc"
>
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77091 "isa_arm32.tcc"
>::OpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77095 "isa_arm32.tcc"
>(code, addr, "ldr_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77110 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77113 "isa_arm32.tcc"
>
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77118 "isa_arm32.tcc"
>::OpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77122 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77135 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77138 "isa_arm32.tcc"
>
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77143 "isa_arm32.tcc"
>::OpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77147 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77160 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77163 "isa_arm32.tcc"
>
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77168 "isa_arm32.tcc"
>::OpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77172 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77188 "isa_arm32.tcc"
>
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77193 "isa_arm32.tcc"
>::OpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77197 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77215 "isa_arm32.tcc"
>
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77220 "isa_arm32.tcc"
>::OpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77224 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77239 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77242 "isa_arm32.tcc"
>
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77247 "isa_arm32.tcc"
>::OpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77251 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77266 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77269 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77274 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77278 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77290 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77293 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77298 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77302 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77314 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77317 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77322 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77326 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77341 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77346 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77350 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77364 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77367 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77372 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77376 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77393 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77398 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77402 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77416 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77419 "isa_arm32.tcc"
>
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77424 "isa_arm32.tcc"
>::OpLdrt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77428 "isa_arm32.tcc"
>(code, addr, "ldrt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77444 "isa_arm32.tcc"
>
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77449 "isa_arm32.tcc"
>::OpLdrt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77453 "isa_arm32.tcc"
>(code, addr, "ldrt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77468 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77471 "isa_arm32.tcc"
>
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77476 "isa_arm32.tcc"
>::OpLdrbt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77480 "isa_arm32.tcc"
>(code, addr, "ldrbt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77496 "isa_arm32.tcc"
>
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77501 "isa_arm32.tcc"
>::OpLdrbt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77505 "isa_arm32.tcc"
>(code, addr, "ldrbt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77523 "isa_arm32.tcc"
>
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77528 "isa_arm32.tcc"
>::OpStr_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77532 "isa_arm32.tcc"
>(code, addr, "str_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77548 "isa_arm32.tcc"
>
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77553 "isa_arm32.tcc"
>::OpStr_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77557 "isa_arm32.tcc"
>(code, addr, "str_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77570 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77573 "isa_arm32.tcc"
>
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77578 "isa_arm32.tcc"
>::OpStr_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77582 "isa_arm32.tcc"
>(code, addr, "str_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77598 "isa_arm32.tcc"
>
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77603 "isa_arm32.tcc"
>::OpStr_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77607 "isa_arm32.tcc"
>(code, addr, "str_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77622 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77625 "isa_arm32.tcc"
>
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77630 "isa_arm32.tcc"
>::OpStr_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77634 "isa_arm32.tcc"
>(code, addr, "str_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77652 "isa_arm32.tcc"
>
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77657 "isa_arm32.tcc"
>::OpStr_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77661 "isa_arm32.tcc"
>(code, addr, "str_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77676 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77679 "isa_arm32.tcc"
>
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77684 "isa_arm32.tcc"
>::OpStrb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77688 "isa_arm32.tcc"
>(code, addr, "strb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77701 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77704 "isa_arm32.tcc"
>
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77709 "isa_arm32.tcc"
>::OpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77713 "isa_arm32.tcc"
>(code, addr, "strb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77729 "isa_arm32.tcc"
>
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77734 "isa_arm32.tcc"
>::OpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77738 "isa_arm32.tcc"
>(code, addr, "strb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77751 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77754 "isa_arm32.tcc"
>
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77759 "isa_arm32.tcc"
>::OpStrb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77763 "isa_arm32.tcc"
>(code, addr, "strb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77781 "isa_arm32.tcc"
>
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77786 "isa_arm32.tcc"
>::OpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77790 "isa_arm32.tcc"
>(code, addr, "strb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77808 "isa_arm32.tcc"
>
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77813 "isa_arm32.tcc"
>::OpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77817 "isa_arm32.tcc"
>(code, addr, "strb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77835 "isa_arm32.tcc"
>
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77840 "isa_arm32.tcc"
>::OpStrt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77844 "isa_arm32.tcc"
>(code, addr, "strt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77860 "isa_arm32.tcc"
>
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77865 "isa_arm32.tcc"
>::OpStrt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77869 "isa_arm32.tcc"
>(code, addr, "strt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77884 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77887 "isa_arm32.tcc"
>
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77892 "isa_arm32.tcc"
>::OpStrbt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77896 "isa_arm32.tcc"
>(code, addr, "strbt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77909 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77912 "isa_arm32.tcc"
>
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77917 "isa_arm32.tcc"
>::OpStrbt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77921 "isa_arm32.tcc"
>(code, addr, "strbt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77936 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77939 "isa_arm32.tcc"
>
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77944 "isa_arm32.tcc"
>::OpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77948 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77962 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77965 "isa_arm32.tcc"
>
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77970 "isa_arm32.tcc"
>::OpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77974 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77991 "isa_arm32.tcc"
>
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77996 "isa_arm32.tcc"
>::OpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78000 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78017 "isa_arm32.tcc"
>
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78022 "isa_arm32.tcc"
>::OpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78026 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78040 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78043 "isa_arm32.tcc"
>
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78048 "isa_arm32.tcc"
>::OpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78052 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78066 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78069 "isa_arm32.tcc"
>
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78074 "isa_arm32.tcc"
>::OpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78078 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78092 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78095 "isa_arm32.tcc"
>
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78100 "isa_arm32.tcc"
>::OpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78104 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78118 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78121 "isa_arm32.tcc"
>
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78126 "isa_arm32.tcc"
>::OpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78130 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78144 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78147 "isa_arm32.tcc"
>
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78152 "isa_arm32.tcc"
>::OpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78156 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78173 "isa_arm32.tcc"
>
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78178 "isa_arm32.tcc"
>::OpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78182 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78196 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78199 "isa_arm32.tcc"
>
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78204 "isa_arm32.tcc"
>::OpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78208 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78225 "isa_arm32.tcc"
>
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78230 "isa_arm32.tcc"
>::OpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78234 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78248 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78251 "isa_arm32.tcc"
>
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78256 "isa_arm32.tcc"
>::OpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78260 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78274 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78277 "isa_arm32.tcc"
>
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78282 "isa_arm32.tcc"
>::OpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78286 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78300 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78303 "isa_arm32.tcc"
>
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78308 "isa_arm32.tcc"
>::OpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78312 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78326 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78329 "isa_arm32.tcc"
>
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78334 "isa_arm32.tcc"
>::OpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78338 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78352 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78355 "isa_arm32.tcc"
>
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78360 "isa_arm32.tcc"
>::OpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78364 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78381 "isa_arm32.tcc"
>
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78386 "isa_arm32.tcc"
>::OpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78390 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78407 "isa_arm32.tcc"
>
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78412 "isa_arm32.tcc"
>::OpStrh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78416 "isa_arm32.tcc"
>(code, addr, "strh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78430 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78433 "isa_arm32.tcc"
>
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78438 "isa_arm32.tcc"
>::OpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78442 "isa_arm32.tcc"
>(code, addr, "strh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78456 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78459 "isa_arm32.tcc"
>
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78464 "isa_arm32.tcc"
>::OpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78468 "isa_arm32.tcc"
>(code, addr, "strh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78482 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78485 "isa_arm32.tcc"
>
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78490 "isa_arm32.tcc"
>::OpStrh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78494 "isa_arm32.tcc"
>(code, addr, "strh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78508 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78511 "isa_arm32.tcc"
>
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78516 "isa_arm32.tcc"
>::OpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78520 "isa_arm32.tcc"
>(code, addr, "strh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78537 "isa_arm32.tcc"
>
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78542 "isa_arm32.tcc"
>::OpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78546 "isa_arm32.tcc"
>(code, addr, "strh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78560 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78563 "isa_arm32.tcc"
>
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78568 "isa_arm32.tcc"
>::OpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78572 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78586 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78589 "isa_arm32.tcc"
>
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78594 "isa_arm32.tcc"
>::OpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78598 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78612 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78615 "isa_arm32.tcc"
>
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78620 "isa_arm32.tcc"
>::OpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78624 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78641 "isa_arm32.tcc"
>
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78646 "isa_arm32.tcc"
>::OpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78650 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78667 "isa_arm32.tcc"
>
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78672 "isa_arm32.tcc"
>::OpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78676 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78693 "isa_arm32.tcc"
>
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78698 "isa_arm32.tcc"
>::OpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78702 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78719 "isa_arm32.tcc"
>
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78724 "isa_arm32.tcc"
>::OpStrd_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78728 "isa_arm32.tcc"
>(code, addr, "strd_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78745 "isa_arm32.tcc"
>
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78750 "isa_arm32.tcc"
>::OpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78754 "isa_arm32.tcc"
>(code, addr, "strd_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78768 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78771 "isa_arm32.tcc"
>
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78776 "isa_arm32.tcc"
>::OpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78780 "isa_arm32.tcc"
>(code, addr, "strd_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78794 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78797 "isa_arm32.tcc"
>
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78802 "isa_arm32.tcc"
>::OpStrd_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78806 "isa_arm32.tcc"
>(code, addr, "strd_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78820 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78823 "isa_arm32.tcc"
>
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78828 "isa_arm32.tcc"
>::OpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78832 "isa_arm32.tcc"
>(code, addr, "strd_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78849 "isa_arm32.tcc"
>
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78854 "isa_arm32.tcc"
>::OpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78858 "isa_arm32.tcc"
>(code, addr, "strd_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78872 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78875 "isa_arm32.tcc"
>
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78880 "isa_arm32.tcc"
>::OpLdm_1_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78884 "isa_arm32.tcc"
>(code, addr, "ldm_1_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78896 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78899 "isa_arm32.tcc"
>
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78904 "isa_arm32.tcc"
>::OpLdm_1_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78908 "isa_arm32.tcc"
>(code, addr, "ldm_1_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78920 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78923 "isa_arm32.tcc"
>
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78928 "isa_arm32.tcc"
>::OpLdm_1_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78932 "isa_arm32.tcc"
>(code, addr, "ldm_1_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78947 "isa_arm32.tcc"
>
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78952 "isa_arm32.tcc"
>::OpLdm_1_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78956 "isa_arm32.tcc"
>(code, addr, "ldm_1_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78971 "isa_arm32.tcc"
>
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78976 "isa_arm32.tcc"
>::OpLdm_2_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78980 "isa_arm32.tcc"
>(code, addr, "ldm_2_ia")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78991 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78994 "isa_arm32.tcc"
>
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78999 "isa_arm32.tcc"
>::OpLdm_2_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79003 "isa_arm32.tcc"
>(code, addr, "ldm_2_ib")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79017 "isa_arm32.tcc"
>
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79022 "isa_arm32.tcc"
>::OpLdm_2_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79026 "isa_arm32.tcc"
>(code, addr, "ldm_2_da")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79037 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79040 "isa_arm32.tcc"
>
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79045 "isa_arm32.tcc"
>::OpLdm_2_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79049 "isa_arm32.tcc"
>(code, addr, "ldm_2_db")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79060 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79063 "isa_arm32.tcc"
>
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79068 "isa_arm32.tcc"
>::OpLdm_3_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79072 "isa_arm32.tcc"
>(code, addr, "ldm_3_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79087 "isa_arm32.tcc"
>
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79092 "isa_arm32.tcc"
>::OpLdm_3_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79096 "isa_arm32.tcc"
>(code, addr, "ldm_3_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79108 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79111 "isa_arm32.tcc"
>
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79116 "isa_arm32.tcc"
>::OpLdm_3_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79120 "isa_arm32.tcc"
>(code, addr, "ldm_3_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79132 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79135 "isa_arm32.tcc"
>
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79140 "isa_arm32.tcc"
>::OpLdm_3_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79144 "isa_arm32.tcc"
>(code, addr, "ldm_3_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79159 "isa_arm32.tcc"
>
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79164 "isa_arm32.tcc"
>::OpStm_1_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79168 "isa_arm32.tcc"
>(code, addr, "stm_1_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79180 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79183 "isa_arm32.tcc"
>
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79188 "isa_arm32.tcc"
>::OpStm_1_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79192 "isa_arm32.tcc"
>(code, addr, "stm_1_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79207 "isa_arm32.tcc"
>
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79212 "isa_arm32.tcc"
>::OpStm_1_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79216 "isa_arm32.tcc"
>(code, addr, "stm_1_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79231 "isa_arm32.tcc"
>
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79236 "isa_arm32.tcc"
>::OpStm_1_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79240 "isa_arm32.tcc"
>(code, addr, "stm_1_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79252 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79255 "isa_arm32.tcc"
>
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79260 "isa_arm32.tcc"
>::OpStm_2_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79264 "isa_arm32.tcc"
>(code, addr, "stm_2_ia")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79275 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79278 "isa_arm32.tcc"
>
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79283 "isa_arm32.tcc"
>::OpStm_2_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79287 "isa_arm32.tcc"
>(code, addr, "stm_2_ib")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79301 "isa_arm32.tcc"
>
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79306 "isa_arm32.tcc"
>::OpStm_2_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79310 "isa_arm32.tcc"
>(code, addr, "stm_2_da")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79321 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79324 "isa_arm32.tcc"
>
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79329 "isa_arm32.tcc"
>::OpStm_2_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79333 "isa_arm32.tcc"
>(code, addr, "stm_2_db")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79344 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79347 "isa_arm32.tcc"
>
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79352 "isa_arm32.tcc"
>::OpSwp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79356 "isa_arm32.tcc"
>(code, addr, "swp")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79371 "isa_arm32.tcc"
>
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79376 "isa_arm32.tcc"
>::OpSwpb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79380 "isa_arm32.tcc"
>(code, addr, "swpb")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79395 "isa_arm32.tcc"
>
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79400 "isa_arm32.tcc"
>::OpSwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79404 "isa_arm32.tcc"
>(code, addr, "swi")
{
	cond = ((code >> 28) & 0xf);
	immed = ((code >> 0) & 0xffffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79417 "isa_arm32.tcc"
>
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79422 "isa_arm32.tcc"
>::OpBkpt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79426 "isa_arm32.tcc"
>(code, addr, "bkpt")
{
	himmed = ((code >> 8) & 0xfff);
	limmed = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79439 "isa_arm32.tcc"
>
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79444 "isa_arm32.tcc"
>::OpCdp_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79448 "isa_arm32.tcc"
>(code, addr, "cdp_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79466 "isa_arm32.tcc"
>
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79471 "isa_arm32.tcc"
>::OpCdp_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79475 "isa_arm32.tcc"
>(code, addr, "cdp_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79493 "isa_arm32.tcc"
>
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79498 "isa_arm32.tcc"
>::OpCdp_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79502 "isa_arm32.tcc"
>(code, addr, "cdp_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79520 "isa_arm32.tcc"
>
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79525 "isa_arm32.tcc"
>::OpCdp_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79529 "isa_arm32.tcc"
>(code, addr, "cdp_1110")
{
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79546 "isa_arm32.tcc"
>
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79551 "isa_arm32.tcc"
>::OpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79555 "isa_arm32.tcc"
>(code, addr, "ldc_offset_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79570 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79573 "isa_arm32.tcc"
>
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79578 "isa_arm32.tcc"
>::OpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79582 "isa_arm32.tcc"
>(code, addr, "ldc_offset_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79600 "isa_arm32.tcc"
>
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79605 "isa_arm32.tcc"
>::OpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79609 "isa_arm32.tcc"
>(code, addr, "ldc_offset_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79627 "isa_arm32.tcc"
>
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79632 "isa_arm32.tcc"
>::OpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79636 "isa_arm32.tcc"
>(code, addr, "ldc_offset_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79650 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79653 "isa_arm32.tcc"
>
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79658 "isa_arm32.tcc"
>::OpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79662 "isa_arm32.tcc"
>(code, addr, "ldc_pre_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79677 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79680 "isa_arm32.tcc"
>
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79685 "isa_arm32.tcc"
>::OpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79689 "isa_arm32.tcc"
>(code, addr, "ldc_pre_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79704 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79707 "isa_arm32.tcc"
>
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79712 "isa_arm32.tcc"
>::OpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79716 "isa_arm32.tcc"
>(code, addr, "ldc_pre_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79734 "isa_arm32.tcc"
>
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79739 "isa_arm32.tcc"
>::OpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79743 "isa_arm32.tcc"
>(code, addr, "ldc_pre_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79757 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79760 "isa_arm32.tcc"
>
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79765 "isa_arm32.tcc"
>::OpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79769 "isa_arm32.tcc"
>(code, addr, "ldc_post_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79784 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79787 "isa_arm32.tcc"
>
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79792 "isa_arm32.tcc"
>::OpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79796 "isa_arm32.tcc"
>(code, addr, "ldc_post_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79811 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79814 "isa_arm32.tcc"
>
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79819 "isa_arm32.tcc"
>::OpLdc_post_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79823 "isa_arm32.tcc"
>(code, addr, "ldc_post_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79841 "isa_arm32.tcc"
>
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79846 "isa_arm32.tcc"
>::OpLdc_post_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79850 "isa_arm32.tcc"
>(code, addr, "ldc_post_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79864 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79867 "isa_arm32.tcc"
>
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79872 "isa_arm32.tcc"
>::OpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79876 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79890 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79893 "isa_arm32.tcc"
>
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79898 "isa_arm32.tcc"
>::OpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79902 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79919 "isa_arm32.tcc"
>
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79924 "isa_arm32.tcc"
>::OpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79928 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79942 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79945 "isa_arm32.tcc"
>
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79950 "isa_arm32.tcc"
>::OpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79954 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_1110")
{
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79970 "isa_arm32.tcc"
>
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79975 "isa_arm32.tcc"
>::OpMcr_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79979 "isa_arm32.tcc"
>(code, addr, "mcr_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79997 "isa_arm32.tcc"
>
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80002 "isa_arm32.tcc"
>::OpMcr_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80006 "isa_arm32.tcc"
>(code, addr, "mcr_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80021 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80024 "isa_arm32.tcc"
>
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80029 "isa_arm32.tcc"
>::OpMcr_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80033 "isa_arm32.tcc"
>(code, addr, "mcr_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80051 "isa_arm32.tcc"
>
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80056 "isa_arm32.tcc"
>::OpMcr_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80060 "isa_arm32.tcc"
>(code, addr, "mcr_1110")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80074 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80077 "isa_arm32.tcc"
>
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80082 "isa_arm32.tcc"
>::OpMrc_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80086 "isa_arm32.tcc"
>(code, addr, "mrc_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80101 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80104 "isa_arm32.tcc"
>
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80109 "isa_arm32.tcc"
>::OpMrc_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80113 "isa_arm32.tcc"
>(code, addr, "mrc_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80131 "isa_arm32.tcc"
>
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80136 "isa_arm32.tcc"
>::OpMrc_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80140 "isa_arm32.tcc"
>(code, addr, "mrc_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80155 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80158 "isa_arm32.tcc"
>
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80163 "isa_arm32.tcc"
>::OpMrc_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80167 "isa_arm32.tcc"
>(code, addr, "mrc_1110")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80184 "isa_arm32.tcc"
>
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80189 "isa_arm32.tcc"
>::OpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80193 "isa_arm32.tcc"
>(code, addr, "stc_offset_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80211 "isa_arm32.tcc"
>
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80216 "isa_arm32.tcc"
>::OpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80220 "isa_arm32.tcc"
>(code, addr, "stc_offset_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80238 "isa_arm32.tcc"
>
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80243 "isa_arm32.tcc"
>::OpStc_offset_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80247 "isa_arm32.tcc"
>(code, addr, "stc_offset_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80265 "isa_arm32.tcc"
>
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80270 "isa_arm32.tcc"
>::OpStc_offset_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80274 "isa_arm32.tcc"
>(code, addr, "stc_offset_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80288 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80291 "isa_arm32.tcc"
>
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80296 "isa_arm32.tcc"
>::OpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80300 "isa_arm32.tcc"
>(code, addr, "stc_pre_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80315 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80318 "isa_arm32.tcc"
>
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80323 "isa_arm32.tcc"
>::OpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80327 "isa_arm32.tcc"
>(code, addr, "stc_pre_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80342 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80345 "isa_arm32.tcc"
>
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80350 "isa_arm32.tcc"
>::OpStc_pre_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80354 "isa_arm32.tcc"
>(code, addr, "stc_pre_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80369 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80372 "isa_arm32.tcc"
>
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80377 "isa_arm32.tcc"
>::OpStc_pre_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80381 "isa_arm32.tcc"
>(code, addr, "stc_pre_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80395 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80398 "isa_arm32.tcc"
>
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80403 "isa_arm32.tcc"
>::OpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80407 "isa_arm32.tcc"
>(code, addr, "stc_post_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80422 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80425 "isa_arm32.tcc"
>
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80430 "isa_arm32.tcc"
>::OpStc_post_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80434 "isa_arm32.tcc"
>(code, addr, "stc_post_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80449 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80452 "isa_arm32.tcc"
>
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80457 "isa_arm32.tcc"
>::OpStc_post_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80461 "isa_arm32.tcc"
>(code, addr, "stc_post_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80476 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80479 "isa_arm32.tcc"
>
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80484 "isa_arm32.tcc"
>::OpStc_post_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80488 "isa_arm32.tcc"
>(code, addr, "stc_post_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80502 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80505 "isa_arm32.tcc"
>
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80510 "isa_arm32.tcc"
>::OpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80514 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80531 "isa_arm32.tcc"
>
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80536 "isa_arm32.tcc"
>::OpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80540 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80554 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80557 "isa_arm32.tcc"
>
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80562 "isa_arm32.tcc"
>::OpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80566 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80580 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80583 "isa_arm32.tcc"
>
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80588 "isa_arm32.tcc"
>::OpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80592 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_1110")
{
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80605 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80608 "isa_arm32.tcc"
>
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80613 "isa_arm32.tcc"
>::OpCdp2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80617 "isa_arm32.tcc"
>(code, addr, "cdp2")
{
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80634 "isa_arm32.tcc"
>
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80639 "isa_arm32.tcc"
>::OpLdc2_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80643 "isa_arm32.tcc"
>(code, addr, "ldc2_offset")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80657 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80660 "isa_arm32.tcc"
>
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80665 "isa_arm32.tcc"
>::OpLdc2_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80669 "isa_arm32.tcc"
>(code, addr, "ldc2_pre")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80686 "isa_arm32.tcc"
>
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80691 "isa_arm32.tcc"
>::OpLdc2_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80695 "isa_arm32.tcc"
>(code, addr, "ldc2_post")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80709 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80712 "isa_arm32.tcc"
>
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80717 "isa_arm32.tcc"
>::OpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80721 "isa_arm32.tcc"
>(code, addr, "ldc2_unindexed")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80735 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80738 "isa_arm32.tcc"
>
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80743 "isa_arm32.tcc"
>::OpMcr2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80747 "isa_arm32.tcc"
>(code, addr, "mcr2")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80764 "isa_arm32.tcc"
>
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80769 "isa_arm32.tcc"
>::OpMrc2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80773 "isa_arm32.tcc"
>(code, addr, "mrc2")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80787 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80790 "isa_arm32.tcc"
>
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80795 "isa_arm32.tcc"
>::OpStc2_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80799 "isa_arm32.tcc"
>(code, addr, "stc2_offset")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80813 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80816 "isa_arm32.tcc"
>
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80821 "isa_arm32.tcc"
>::OpStc2_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80825 "isa_arm32.tcc"
>(code, addr, "stc2_pre")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80842 "isa_arm32.tcc"
>
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80847 "isa_arm32.tcc"
>::OpStc2_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80851 "isa_arm32.tcc"
>(code, addr, "stc2_post")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80865 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80868 "isa_arm32.tcc"
>
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80873 "isa_arm32.tcc"
>::OpStc2_unindexed(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80877 "isa_arm32.tcc"
>(code, addr, "stc2_unindexed")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80891 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80894 "isa_arm32.tcc"
>
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80899 "isa_arm32.tcc"
>::OpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80903 "isa_arm32.tcc"
>(code, addr, "mcrr_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80917 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80920 "isa_arm32.tcc"
>
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80925 "isa_arm32.tcc"
>::OpMcrr_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80929 "isa_arm32.tcc"
>(code, addr, "mcrr_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80943 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80946 "isa_arm32.tcc"
>
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80951 "isa_arm32.tcc"
>::OpMcrr_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80955 "isa_arm32.tcc"
>(code, addr, "mcrr_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80969 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80972 "isa_arm32.tcc"
>
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80977 "isa_arm32.tcc"
>::OpMcrr_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80981 "isa_arm32.tcc"
>(code, addr, "mcrr_1110")
{
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80997 "isa_arm32.tcc"
>
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81002 "isa_arm32.tcc"
>::OpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81006 "isa_arm32.tcc"
>(code, addr, "mrrc_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81020 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81023 "isa_arm32.tcc"
>
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81028 "isa_arm32.tcc"
>::OpMrrc_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81032 "isa_arm32.tcc"
>(code, addr, "mrrc_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81046 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81049 "isa_arm32.tcc"
>
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81054 "isa_arm32.tcc"
>::OpMrrc_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81058 "isa_arm32.tcc"
>(code, addr, "mrrc_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81072 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81075 "isa_arm32.tcc"
>
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81080 "isa_arm32.tcc"
>::OpMrrc_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81084 "isa_arm32.tcc"
>(code, addr, "mrrc_1110")
{
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81100 "isa_arm32.tcc"
>
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81105 "isa_arm32.tcc"
>::OpClz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81109 "isa_arm32.tcc"
>(code, addr, "clz")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbo2 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81122 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81125 "isa_arm32.tcc"
>
DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81130 "isa_arm32.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81141 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81144 "isa_arm32.tcc"
>
DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81149 "isa_arm32.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81160 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81163 "isa_arm32.tcc"
>
DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81168 "isa_arm32.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81172 "isa_arm32.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81186 "isa_arm32.tcc"
>
Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81191 "isa_arm32.tcc"
>::Decoder()
: is_little_endian( false ), mru_page( 0 )
{
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	if(
#line 45 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	CONFIG::HAS_INSN_ARITH_CLZ
#line 81199 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81203 "isa_arm32.tcc"
	>(0x1600010UL, 0xff000f0UL, DecodeOpClz<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81207 "isa_arm32.tcc"
	>));
	if(
#line 117 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81212 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81216 "isa_arm32.tcc"
	>(0xec500000UL, 0xfff00000UL, DecodeOpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81220 "isa_arm32.tcc"
	>));
	if(
#line 115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81225 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81229 "isa_arm32.tcc"
	>(0xcc500000UL, 0xeff00000UL, DecodeOpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81233 "isa_arm32.tcc"
	>));
	if(
#line 113 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81238 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81242 "isa_arm32.tcc"
	>(0x8c500000UL, 0xcff00000UL, DecodeOpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81246 "isa_arm32.tcc"
	>));
	if(
#line 111 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81251 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81255 "isa_arm32.tcc"
	>(0xc500000UL, 0x8ff00000UL, DecodeOpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81259 "isa_arm32.tcc"
	>));
	if(
#line 51 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81264 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81268 "isa_arm32.tcc"
	>(0xec400000UL, 0xfff00000UL, DecodeOpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81272 "isa_arm32.tcc"
	>));
	if(
#line 49 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81277 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81281 "isa_arm32.tcc"
	>(0xcc400000UL, 0xeff00000UL, DecodeOpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81285 "isa_arm32.tcc"
	>));
	if(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81290 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81294 "isa_arm32.tcc"
	>(0x8c400000UL, 0xcff00000UL, DecodeOpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81298 "isa_arm32.tcc"
	>));
	if(
#line 45 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81303 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81307 "isa_arm32.tcc"
	>(0xc400000UL, 0x8ff00000UL, DecodeOpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81311 "isa_arm32.tcc"
	>));
	if(
#line 932 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81316 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81320 "isa_arm32.tcc"
	>(0xfc000000UL, 0xff300000UL, DecodeOpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81324 "isa_arm32.tcc"
	>));
	if(
#line 930 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81329 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81333 "isa_arm32.tcc"
	>(0xfc200000UL, 0xff300000UL, DecodeOpStc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81337 "isa_arm32.tcc"
	>));
	if(
#line 928 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81342 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81346 "isa_arm32.tcc"
	>(0xfd200000UL, 0xff300000UL, DecodeOpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81350 "isa_arm32.tcc"
	>));
	if(
#line 926 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81355 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81359 "isa_arm32.tcc"
	>(0xfd000000UL, 0xff300000UL, DecodeOpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81363 "isa_arm32.tcc"
	>));
	if(
#line 899 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
#line 81368 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81372 "isa_arm32.tcc"
	>(0xfe100010UL, 0xff100010UL, DecodeOpMrc2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81376 "isa_arm32.tcc"
	>));
	if(
#line 872 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
#line 81381 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81385 "isa_arm32.tcc"
	>(0xfe000010UL, 0xff100010UL, DecodeOpMcr2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81389 "isa_arm32.tcc"
	>));
	if(
#line 764 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81394 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81398 "isa_arm32.tcc"
	>(0xfc100000UL, 0xff300000UL, DecodeOpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81402 "isa_arm32.tcc"
	>));
	if(
#line 762 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81407 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81411 "isa_arm32.tcc"
	>(0xfc300000UL, 0xff300000UL, DecodeOpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81415 "isa_arm32.tcc"
	>));
	if(
#line 760 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81420 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81424 "isa_arm32.tcc"
	>(0xfd300000UL, 0xff300000UL, DecodeOpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81428 "isa_arm32.tcc"
	>));
	if(
#line 758 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81433 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81437 "isa_arm32.tcc"
	>(0xfd100000UL, 0xff300000UL, DecodeOpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81441 "isa_arm32.tcc"
	>));
	if(
#line 731 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_OPS
#line 81446 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81450 "isa_arm32.tcc"
	>(0xfe000000UL, 0xff000010UL, DecodeOpCdp2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81454 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81459 "isa_arm32.tcc"
	>(0xec800000UL, 0xffb00000UL, DecodeOpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81463 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81468 "isa_arm32.tcc"
	>(0xcc800000UL, 0xefb00000UL, DecodeOpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81472 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81477 "isa_arm32.tcc"
	>(0x8c800000UL, 0xcfb00000UL, DecodeOpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81481 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81486 "isa_arm32.tcc"
	>(0xc800000UL, 0x8fb00000UL, DecodeOpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81490 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81495 "isa_arm32.tcc"
	>(0xec200000UL, 0xff300000UL, DecodeOpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81499 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81504 "isa_arm32.tcc"
	>(0xcc200000UL, 0xef300000UL, DecodeOpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81508 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81513 "isa_arm32.tcc"
	>(0x8c200000UL, 0xcf300000UL, DecodeOpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81517 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81522 "isa_arm32.tcc"
	>(0xc200000UL, 0x8f300000UL, DecodeOpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81526 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81531 "isa_arm32.tcc"
	>(0xed200000UL, 0xff300000UL, DecodeOpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81535 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81540 "isa_arm32.tcc"
	>(0xcd200000UL, 0xef300000UL, DecodeOpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81544 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81549 "isa_arm32.tcc"
	>(0x8d200000UL, 0xcf300000UL, DecodeOpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81553 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81558 "isa_arm32.tcc"
	>(0xd200000UL, 0x8f300000UL, DecodeOpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81562 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81567 "isa_arm32.tcc"
	>(0xed000000UL, 0xff300000UL, DecodeOpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81571 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81576 "isa_arm32.tcc"
	>(0xcd000000UL, 0xef300000UL, DecodeOpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81580 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81585 "isa_arm32.tcc"
	>(0x8d000000UL, 0xcf300000UL, DecodeOpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81589 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81594 "isa_arm32.tcc"
	>(0xd000000UL, 0x8f300000UL, DecodeOpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81598 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81603 "isa_arm32.tcc"
	>(0xee100010UL, 0xff100010UL, DecodeOpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81607 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81612 "isa_arm32.tcc"
	>(0xce100010UL, 0xef100010UL, DecodeOpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81616 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81621 "isa_arm32.tcc"
	>(0x8e100010UL, 0xcf100010UL, DecodeOpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81625 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81630 "isa_arm32.tcc"
	>(0xe100010UL, 0x8f100010UL, DecodeOpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81634 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81639 "isa_arm32.tcc"
	>(0xee000010UL, 0xff100010UL, DecodeOpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81643 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81648 "isa_arm32.tcc"
	>(0xce000010UL, 0xef100010UL, DecodeOpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81652 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81657 "isa_arm32.tcc"
	>(0x8e000010UL, 0xcf100010UL, DecodeOpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81661 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81666 "isa_arm32.tcc"
	>(0xe000010UL, 0x8f100010UL, DecodeOpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81670 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81675 "isa_arm32.tcc"
	>(0xec900000UL, 0xffb00000UL, DecodeOpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81679 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81684 "isa_arm32.tcc"
	>(0xcc900000UL, 0xefb00000UL, DecodeOpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81688 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81693 "isa_arm32.tcc"
	>(0x8c900000UL, 0xcfb00000UL, DecodeOpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81697 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81702 "isa_arm32.tcc"
	>(0xc900000UL, 0x8fb00000UL, DecodeOpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81706 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81711 "isa_arm32.tcc"
	>(0xec300000UL, 0xff300000UL, DecodeOpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81715 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81720 "isa_arm32.tcc"
	>(0xcc300000UL, 0xef300000UL, DecodeOpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81724 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81729 "isa_arm32.tcc"
	>(0x8c300000UL, 0xcf300000UL, DecodeOpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81733 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81738 "isa_arm32.tcc"
	>(0xc300000UL, 0x8f300000UL, DecodeOpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81742 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81747 "isa_arm32.tcc"
	>(0xed300000UL, 0xff300000UL, DecodeOpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81751 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81756 "isa_arm32.tcc"
	>(0xcd300000UL, 0xef300000UL, DecodeOpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81760 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81765 "isa_arm32.tcc"
	>(0x8d300000UL, 0xcf300000UL, DecodeOpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81769 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81774 "isa_arm32.tcc"
	>(0xd300000UL, 0x8f300000UL, DecodeOpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81778 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81783 "isa_arm32.tcc"
	>(0xed100000UL, 0xff300000UL, DecodeOpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81787 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81792 "isa_arm32.tcc"
	>(0xcd100000UL, 0xef300000UL, DecodeOpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81796 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81801 "isa_arm32.tcc"
	>(0x8d100000UL, 0xcf300000UL, DecodeOpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81805 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81810 "isa_arm32.tcc"
	>(0xd100000UL, 0x8f300000UL, DecodeOpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81814 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81819 "isa_arm32.tcc"
	>(0xee000000UL, 0xff000010UL, DecodeOpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81823 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81828 "isa_arm32.tcc"
	>(0xce000000UL, 0xef000010UL, DecodeOpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81832 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81837 "isa_arm32.tcc"
	>(0x8e000000UL, 0xcf000010UL, DecodeOpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81841 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81846 "isa_arm32.tcc"
	>(0xe000000UL, 0x8f000010UL, DecodeOpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81850 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81855 "isa_arm32.tcc"
	>(0xe1200070UL, 0xfff000f0UL, DecodeOpBkpt<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81859 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81864 "isa_arm32.tcc"
	>(0xf000000UL, 0xf000000UL, DecodeOpSwi<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81868 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81873 "isa_arm32.tcc"
	>(0x1400090UL, 0xff00ff0UL, DecodeOpSwpb<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81877 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81882 "isa_arm32.tcc"
	>(0x1000090UL, 0xff00ff0UL, DecodeOpSwp<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81886 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81891 "isa_arm32.tcc"
	>(0x9400000UL, 0xff00000UL, DecodeOpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81895 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81900 "isa_arm32.tcc"
	>(0x8400000UL, 0xff00000UL, DecodeOpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81904 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81909 "isa_arm32.tcc"
	>(0x9c00000UL, 0xff00000UL, DecodeOpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81913 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81918 "isa_arm32.tcc"
	>(0x8c00000UL, 0xff00000UL, DecodeOpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81922 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81927 "isa_arm32.tcc"
	>(0x9000000UL, 0xfd00000UL, DecodeOpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81931 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81936 "isa_arm32.tcc"
	>(0x8000000UL, 0xfd00000UL, DecodeOpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81940 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81945 "isa_arm32.tcc"
	>(0x9800000UL, 0xfd00000UL, DecodeOpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81949 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81954 "isa_arm32.tcc"
	>(0x8800000UL, 0xfd00000UL, DecodeOpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81958 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81963 "isa_arm32.tcc"
	>(0x9508000UL, 0xfd08000UL, DecodeOpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81967 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81972 "isa_arm32.tcc"
	>(0x8508000UL, 0xfd08000UL, DecodeOpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81976 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81981 "isa_arm32.tcc"
	>(0x9d08000UL, 0xfd08000UL, DecodeOpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81985 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81990 "isa_arm32.tcc"
	>(0x8d08000UL, 0xfd08000UL, DecodeOpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81994 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81999 "isa_arm32.tcc"
	>(0x9500000UL, 0xff08000UL, DecodeOpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82003 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82008 "isa_arm32.tcc"
	>(0x8500000UL, 0xff08000UL, DecodeOpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82012 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82017 "isa_arm32.tcc"
	>(0x9d00000UL, 0xff08000UL, DecodeOpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82021 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82026 "isa_arm32.tcc"
	>(0x8d00000UL, 0xff08000UL, DecodeOpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82030 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82035 "isa_arm32.tcc"
	>(0x9100000UL, 0xfd00000UL, DecodeOpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82039 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82044 "isa_arm32.tcc"
	>(0x8100000UL, 0xfd00000UL, DecodeOpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82048 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82053 "isa_arm32.tcc"
	>(0x9900000UL, 0xfd00000UL, DecodeOpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82057 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82062 "isa_arm32.tcc"
	>(0x8900000UL, 0xfd00000UL, DecodeOpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82066 "isa_arm32.tcc"
	>));
	if(
#line 273 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82071 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82075 "isa_arm32.tcc"
	>(0x12000f0UL, 0xf7000f0UL, DecodeOpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82079 "isa_arm32.tcc"
	>));
	if(
#line 271 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82084 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82088 "isa_arm32.tcc"
	>(0x10000f0UL, 0xf7000f0UL, DecodeOpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82092 "isa_arm32.tcc"
	>));
	if(
#line 269 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82097 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82101 "isa_arm32.tcc"
	>(0xf0UL, 0xf7000f0UL, DecodeOpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82105 "isa_arm32.tcc"
	>));
	if(
#line 267 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82110 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82114 "isa_arm32.tcc"
	>(0x16000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82118 "isa_arm32.tcc"
	>));
	if(
#line 265 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82123 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82127 "isa_arm32.tcc"
	>(0x14000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82131 "isa_arm32.tcc"
	>));
	if(
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82136 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82140 "isa_arm32.tcc"
	>(0x4000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82144 "isa_arm32.tcc"
	>));
	if(
#line 56 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82149 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82153 "isa_arm32.tcc"
	>(0x12000d0UL, 0xf7000f0UL, DecodeOpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82157 "isa_arm32.tcc"
	>));
	if(
#line 54 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82162 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82166 "isa_arm32.tcc"
	>(0x10000d0UL, 0xf7000f0UL, DecodeOpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82170 "isa_arm32.tcc"
	>));
	if(
#line 52 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82175 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82179 "isa_arm32.tcc"
	>(0xd0UL, 0xf7000f0UL, DecodeOpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82183 "isa_arm32.tcc"
	>));
	if(
#line 50 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82188 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82192 "isa_arm32.tcc"
	>(0x16000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82196 "isa_arm32.tcc"
	>));
	if(
#line 48 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82201 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82205 "isa_arm32.tcc"
	>(0x14000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82209 "isa_arm32.tcc"
	>));
	if(
#line 46 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82214 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82218 "isa_arm32.tcc"
	>(0x4000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82222 "isa_arm32.tcc"
	>));
	if(
#line 553 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82227 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82231 "isa_arm32.tcc"
	>(0x12000b0UL, 0xf7000f0UL, DecodeOpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82235 "isa_arm32.tcc"
	>));
	if(
#line 551 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82240 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82244 "isa_arm32.tcc"
	>(0x10000b0UL, 0xf7000f0UL, DecodeOpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82248 "isa_arm32.tcc"
	>));
	if(
#line 549 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82253 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82257 "isa_arm32.tcc"
	>(0xb0UL, 0xf7000f0UL, DecodeOpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82261 "isa_arm32.tcc"
	>));
	if(
#line 547 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82266 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82270 "isa_arm32.tcc"
	>(0x16000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82274 "isa_arm32.tcc"
	>));
	if(
#line 545 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82279 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82283 "isa_arm32.tcc"
	>(0x14000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82287 "isa_arm32.tcc"
	>));
	if(
#line 543 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82292 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82296 "isa_arm32.tcc"
	>(0x4000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82300 "isa_arm32.tcc"
	>));
	if(
#line 393 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82305 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82309 "isa_arm32.tcc"
	>(0x13000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82313 "isa_arm32.tcc"
	>));
	if(
#line 391 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82318 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82322 "isa_arm32.tcc"
	>(0x11000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82326 "isa_arm32.tcc"
	>));
	if(
#line 389 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82331 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82335 "isa_arm32.tcc"
	>(0x1000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82339 "isa_arm32.tcc"
	>));
	if(
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82344 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82348 "isa_arm32.tcc"
	>(0x17000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82352 "isa_arm32.tcc"
	>));
	if(
#line 385 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82357 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82361 "isa_arm32.tcc"
	>(0x15000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82365 "isa_arm32.tcc"
	>));
	if(
#line 383 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82370 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82374 "isa_arm32.tcc"
	>(0x5000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82378 "isa_arm32.tcc"
	>));
	if(
#line 226 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82383 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82387 "isa_arm32.tcc"
	>(0x13000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82391 "isa_arm32.tcc"
	>));
	if(
#line 224 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82396 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82400 "isa_arm32.tcc"
	>(0x11000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82404 "isa_arm32.tcc"
	>));
	if(
#line 222 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82409 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82413 "isa_arm32.tcc"
	>(0x1000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82417 "isa_arm32.tcc"
	>));
	if(
#line 220 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82422 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82426 "isa_arm32.tcc"
	>(0x17000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82430 "isa_arm32.tcc"
	>));
	if(
#line 218 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82435 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82439 "isa_arm32.tcc"
	>(0x15000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82443 "isa_arm32.tcc"
	>));
	if(
#line 216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82448 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82452 "isa_arm32.tcc"
	>(0x5000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82456 "isa_arm32.tcc"
	>));
	if(
#line 60 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82461 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82465 "isa_arm32.tcc"
	>(0x13000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82469 "isa_arm32.tcc"
	>));
	if(
#line 58 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82474 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82478 "isa_arm32.tcc"
	>(0x11000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82482 "isa_arm32.tcc"
	>));
	if(
#line 56 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82487 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82491 "isa_arm32.tcc"
	>(0x1000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82495 "isa_arm32.tcc"
	>));
	if(
#line 54 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82500 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82504 "isa_arm32.tcc"
	>(0x17000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82508 "isa_arm32.tcc"
	>));
	if(
#line 52 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82513 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82517 "isa_arm32.tcc"
	>(0x15000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82521 "isa_arm32.tcc"
	>));
	if(
#line 50 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82526 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82530 "isa_arm32.tcc"
	>(0x5000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82534 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82539 "isa_arm32.tcc"
	>(0x6600000UL, 0xf700010UL, DecodeOpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82543 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82548 "isa_arm32.tcc"
	>(0x4600000UL, 0xf700000UL, DecodeOpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82552 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82557 "isa_arm32.tcc"
	>(0x6200000UL, 0xf700010UL, DecodeOpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82561 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82566 "isa_arm32.tcc"
	>(0x4200000UL, 0xf700000UL, DecodeOpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82570 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82575 "isa_arm32.tcc"
	>(0x7600000UL, 0xf700010UL, DecodeOpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82579 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82584 "isa_arm32.tcc"
	>(0x7400000UL, 0xf700010UL, DecodeOpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82588 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82593 "isa_arm32.tcc"
	>(0x6400000UL, 0xf700010UL, DecodeOpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82597 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82602 "isa_arm32.tcc"
	>(0x5600000UL, 0xf700000UL, DecodeOpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82606 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82611 "isa_arm32.tcc"
	>(0x5400000UL, 0xf700000UL, DecodeOpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82615 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82620 "isa_arm32.tcc"
	>(0x4400000UL, 0xf700000UL, DecodeOpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82624 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82629 "isa_arm32.tcc"
	>(0x7200000UL, 0xf700010UL, DecodeOpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82633 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82638 "isa_arm32.tcc"
	>(0x7000000UL, 0xf700010UL, DecodeOpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82642 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82647 "isa_arm32.tcc"
	>(0x6000000UL, 0xf700010UL, DecodeOpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82651 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82656 "isa_arm32.tcc"
	>(0x5200000UL, 0xf700000UL, DecodeOpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82660 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82665 "isa_arm32.tcc"
	>(0x5000000UL, 0xf700000UL, DecodeOpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82669 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82674 "isa_arm32.tcc"
	>(0x4000000UL, 0xf700000UL, DecodeOpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82678 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82683 "isa_arm32.tcc"
	>(0x6700000UL, 0xf700010UL, DecodeOpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82687 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82692 "isa_arm32.tcc"
	>(0x4700000UL, 0xf700000UL, DecodeOpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82696 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82701 "isa_arm32.tcc"
	>(0x6300000UL, 0xf700010UL, DecodeOpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82705 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82710 "isa_arm32.tcc"
	>(0x4300000UL, 0xf700000UL, DecodeOpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82714 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82719 "isa_arm32.tcc"
	>(0x770f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82723 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82728 "isa_arm32.tcc"
	>(0x750f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82732 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82737 "isa_arm32.tcc"
	>(0x650f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82741 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82746 "isa_arm32.tcc"
	>(0x570f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82750 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82755 "isa_arm32.tcc"
	>(0x550f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82759 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82764 "isa_arm32.tcc"
	>(0x450f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82768 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82773 "isa_arm32.tcc"
	>(0x7700000UL, 0xf700010UL, DecodeOpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82777 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82782 "isa_arm32.tcc"
	>(0x7500000UL, 0xf700010UL, DecodeOpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82786 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82791 "isa_arm32.tcc"
	>(0x6500000UL, 0xf700010UL, DecodeOpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82795 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82800 "isa_arm32.tcc"
	>(0x5700000UL, 0xf700000UL, DecodeOpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82804 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82809 "isa_arm32.tcc"
	>(0x5500000UL, 0xf700000UL, DecodeOpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82813 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82818 "isa_arm32.tcc"
	>(0x4500000UL, 0xf700000UL, DecodeOpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82822 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82827 "isa_arm32.tcc"
	>(0x7300000UL, 0xf700010UL, DecodeOpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82831 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82836 "isa_arm32.tcc"
	>(0x7100000UL, 0xf700010UL, DecodeOpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82840 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82845 "isa_arm32.tcc"
	>(0x6100000UL, 0xf700010UL, DecodeOpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82849 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82854 "isa_arm32.tcc"
	>(0x5300000UL, 0xf700000UL, DecodeOpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82858 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82863 "isa_arm32.tcc"
	>(0x5100000UL, 0xf700000UL, DecodeOpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82867 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82872 "isa_arm32.tcc"
	>(0x4100000UL, 0xf700000UL, DecodeOpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82876 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82881 "isa_arm32.tcc"
	>(0x120f000UL, 0xfb0fff0UL, DecodeOpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82885 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82890 "isa_arm32.tcc"
	>(0x320f000UL, 0xfb0f000UL, DecodeOpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82894 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82899 "isa_arm32.tcc"
	>(0x10f0000UL, 0xfbf0fffUL, DecodeOpMrs<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82903 "isa_arm32.tcc"
	>));
	if(
#line 348 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULWY
#line 82908 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82912 "isa_arm32.tcc"
	>(0x12000a0UL, 0xff000b0UL, DecodeOpSmulwy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82916 "isa_arm32.tcc"
	>));
	if(
#line 281 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULXY
#line 82921 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82925 "isa_arm32.tcc"
	>(0x1600080UL, 0xff00090UL, DecodeOpSmulxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82929 "isa_arm32.tcc"
	>));
	if(
#line 206 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAWY
#line 82934 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82938 "isa_arm32.tcc"
	>(0x1200080UL, 0xff000b0UL, DecodeOpSmlawy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82942 "isa_arm32.tcc"
	>));
	if(
#line 129 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLALXY
#line 82947 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82951 "isa_arm32.tcc"
	>(0x1400080UL, 0xff00090UL, DecodeOpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82955 "isa_arm32.tcc"
	>));
	if(
#line 54 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAXY
#line 82960 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82964 "isa_arm32.tcc"
	>(0x1000080UL, 0xff00090UL, DecodeOpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82968 "isa_arm32.tcc"
	>));
	if(
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_UMULL
#line 82973 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82977 "isa_arm32.tcc"
	>(0x800090UL, 0xfe000f0UL, DecodeOpUmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82981 "isa_arm32.tcc"
	>));
	if(
#line 239 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_UMLAL
#line 82986 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82990 "isa_arm32.tcc"
	>(0xa00090UL, 0xfe000f0UL, DecodeOpUmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82994 "isa_arm32.tcc"
	>));
	if(
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULL
#line 82999 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83003 "isa_arm32.tcc"
	>(0xc00090UL, 0xfe000f0UL, DecodeOpSmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83007 "isa_arm32.tcc"
	>));
	if(
#line 138 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAL
#line 83012 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83016 "isa_arm32.tcc"
	>(0xe00090UL, 0xfe000f0UL, DecodeOpSmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83020 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83025 "isa_arm32.tcc"
	>(0x90UL, 0xfe000f0UL, DecodeOpMul<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83029 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83034 "isa_arm32.tcc"
	>(0x200090UL, 0xfe000f0UL, DecodeOpMla<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83038 "isa_arm32.tcc"
	>));
	if(
#line 165 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QDSUB
#line 83043 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83047 "isa_arm32.tcc"
	>(0x1600050UL, 0xff000f0UL, DecodeOpQdsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83051 "isa_arm32.tcc"
	>));
	if(
#line 127 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QDADD
#line 83056 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83060 "isa_arm32.tcc"
	>(0x1400050UL, 0xff000f0UL, DecodeOpQdadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83064 "isa_arm32.tcc"
	>));
	if(
#line 90 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QSUB
#line 83069 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83073 "isa_arm32.tcc"
	>(0x1200050UL, 0xff000f0UL, DecodeOpQsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83077 "isa_arm32.tcc"
	>));
	if(
#line 53 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QADD
#line 83082 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83086 "isa_arm32.tcc"
	>(0x1000050UL, 0xff000f0UL, DecodeOpQadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83090 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83095 "isa_arm32.tcc"
	>(0x1f00010UL, 0xff00090UL, DecodeOpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83099 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83104 "isa_arm32.tcc"
	>(0x1f00000UL, 0xff00010UL, DecodeOpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83108 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83113 "isa_arm32.tcc"
	>(0x3f00000UL, 0xff00000UL, DecodeOpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83117 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83122 "isa_arm32.tcc"
	>(0x1e00010UL, 0xff00090UL, DecodeOpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83126 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83131 "isa_arm32.tcc"
	>(0x1e00000UL, 0xff00010UL, DecodeOpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83135 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83140 "isa_arm32.tcc"
	>(0x3e00000UL, 0xff00000UL, DecodeOpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83144 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83149 "isa_arm32.tcc"
	>(0x1d00010UL, 0xff00090UL, DecodeOpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83153 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83158 "isa_arm32.tcc"
	>(0x1d00000UL, 0xff00010UL, DecodeOpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83162 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83167 "isa_arm32.tcc"
	>(0x3d00000UL, 0xff00000UL, DecodeOpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83171 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83176 "isa_arm32.tcc"
	>(0x1c00010UL, 0xff00090UL, DecodeOpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83180 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83185 "isa_arm32.tcc"
	>(0x1c00000UL, 0xff00010UL, DecodeOpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83189 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83194 "isa_arm32.tcc"
	>(0x3c00000UL, 0xff00000UL, DecodeOpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83198 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83203 "isa_arm32.tcc"
	>(0x1b00010UL, 0xff00090UL, DecodeOpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83207 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83212 "isa_arm32.tcc"
	>(0x1b00000UL, 0xff00010UL, DecodeOpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83216 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83221 "isa_arm32.tcc"
	>(0x3b00000UL, 0xff00000UL, DecodeOpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83225 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83230 "isa_arm32.tcc"
	>(0x1a00010UL, 0xff00090UL, DecodeOpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83234 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83239 "isa_arm32.tcc"
	>(0x1a00000UL, 0xff00010UL, DecodeOpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83243 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83248 "isa_arm32.tcc"
	>(0x3a00000UL, 0xff00000UL, DecodeOpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83252 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83257 "isa_arm32.tcc"
	>(0x1900010UL, 0xff00090UL, DecodeOpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83261 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83266 "isa_arm32.tcc"
	>(0x1900000UL, 0xff00010UL, DecodeOpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83270 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83275 "isa_arm32.tcc"
	>(0x3900000UL, 0xff00000UL, DecodeOpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83279 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83284 "isa_arm32.tcc"
	>(0x1800010UL, 0xff00090UL, DecodeOpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83288 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83293 "isa_arm32.tcc"
	>(0x1800000UL, 0xff00010UL, DecodeOpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83297 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83302 "isa_arm32.tcc"
	>(0x3800000UL, 0xff00000UL, DecodeOpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83306 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83311 "isa_arm32.tcc"
	>(0x1700010UL, 0xff00090UL, DecodeOpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83315 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83320 "isa_arm32.tcc"
	>(0x1700000UL, 0xff00010UL, DecodeOpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83324 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83329 "isa_arm32.tcc"
	>(0x3700000UL, 0xff00000UL, DecodeOpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83333 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83338 "isa_arm32.tcc"
	>(0x1500010UL, 0xff00090UL, DecodeOpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83342 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83347 "isa_arm32.tcc"
	>(0x1500000UL, 0xff00010UL, DecodeOpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83351 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83356 "isa_arm32.tcc"
	>(0x3500000UL, 0xff00000UL, DecodeOpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83360 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83365 "isa_arm32.tcc"
	>(0x1300010UL, 0xff00090UL, DecodeOpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83369 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83374 "isa_arm32.tcc"
	>(0x1300000UL, 0xff00010UL, DecodeOpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83378 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83383 "isa_arm32.tcc"
	>(0x3300000UL, 0xff00000UL, DecodeOpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83387 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83392 "isa_arm32.tcc"
	>(0x1100010UL, 0xff00090UL, DecodeOpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83396 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83401 "isa_arm32.tcc"
	>(0x1100000UL, 0xff00010UL, DecodeOpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83405 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83410 "isa_arm32.tcc"
	>(0x3100000UL, 0xff00000UL, DecodeOpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83414 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83419 "isa_arm32.tcc"
	>(0xf00010UL, 0xff00090UL, DecodeOpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83423 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83428 "isa_arm32.tcc"
	>(0xf00000UL, 0xff00010UL, DecodeOpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83432 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83437 "isa_arm32.tcc"
	>(0x2f00000UL, 0xff00000UL, DecodeOpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83441 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83446 "isa_arm32.tcc"
	>(0xe00010UL, 0xff00090UL, DecodeOpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83450 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83455 "isa_arm32.tcc"
	>(0xe00000UL, 0xff00010UL, DecodeOpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83459 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83464 "isa_arm32.tcc"
	>(0x2e00000UL, 0xff00000UL, DecodeOpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83468 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83473 "isa_arm32.tcc"
	>(0xd00010UL, 0xff00090UL, DecodeOpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83477 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83482 "isa_arm32.tcc"
	>(0xd00000UL, 0xff00010UL, DecodeOpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83486 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83491 "isa_arm32.tcc"
	>(0x2d00000UL, 0xff00000UL, DecodeOpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83495 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83500 "isa_arm32.tcc"
	>(0xc00010UL, 0xff00090UL, DecodeOpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83504 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83509 "isa_arm32.tcc"
	>(0xc00000UL, 0xff00010UL, DecodeOpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83513 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83518 "isa_arm32.tcc"
	>(0x2c00000UL, 0xff00000UL, DecodeOpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83522 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83527 "isa_arm32.tcc"
	>(0xb00010UL, 0xff00090UL, DecodeOpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83531 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83536 "isa_arm32.tcc"
	>(0xb00000UL, 0xff00010UL, DecodeOpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83540 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83545 "isa_arm32.tcc"
	>(0x2b00000UL, 0xff00000UL, DecodeOpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83549 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83554 "isa_arm32.tcc"
	>(0xa00010UL, 0xff00090UL, DecodeOpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83558 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83563 "isa_arm32.tcc"
	>(0xa00000UL, 0xff00010UL, DecodeOpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83567 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83572 "isa_arm32.tcc"
	>(0x2a00000UL, 0xff00000UL, DecodeOpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83576 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83581 "isa_arm32.tcc"
	>(0x900010UL, 0xff00090UL, DecodeOpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83585 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83590 "isa_arm32.tcc"
	>(0x900000UL, 0xff00010UL, DecodeOpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83594 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83599 "isa_arm32.tcc"
	>(0x2900000UL, 0xff00000UL, DecodeOpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83603 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83608 "isa_arm32.tcc"
	>(0x800010UL, 0xff00090UL, DecodeOpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83612 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83617 "isa_arm32.tcc"
	>(0x800000UL, 0xff00010UL, DecodeOpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83621 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83626 "isa_arm32.tcc"
	>(0x2800000UL, 0xff00000UL, DecodeOpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83630 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83635 "isa_arm32.tcc"
	>(0x700010UL, 0xff00090UL, DecodeOpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83639 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83644 "isa_arm32.tcc"
	>(0x700000UL, 0xff00010UL, DecodeOpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83648 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83653 "isa_arm32.tcc"
	>(0x2700000UL, 0xff00000UL, DecodeOpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83657 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83662 "isa_arm32.tcc"
	>(0x600010UL, 0xff00090UL, DecodeOpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83666 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83671 "isa_arm32.tcc"
	>(0x600000UL, 0xff00010UL, DecodeOpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83675 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83680 "isa_arm32.tcc"
	>(0x2600000UL, 0xff00000UL, DecodeOpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83684 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83689 "isa_arm32.tcc"
	>(0x500010UL, 0xff00090UL, DecodeOpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83693 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83698 "isa_arm32.tcc"
	>(0x500000UL, 0xff00010UL, DecodeOpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83702 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83707 "isa_arm32.tcc"
	>(0x2500000UL, 0xff00000UL, DecodeOpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83711 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83716 "isa_arm32.tcc"
	>(0x400010UL, 0xff00090UL, DecodeOpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83720 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83725 "isa_arm32.tcc"
	>(0x400000UL, 0xff00010UL, DecodeOpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83729 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83734 "isa_arm32.tcc"
	>(0x2400000UL, 0xff00000UL, DecodeOpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83738 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83743 "isa_arm32.tcc"
	>(0x300010UL, 0xff00090UL, DecodeOpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83747 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83752 "isa_arm32.tcc"
	>(0x300000UL, 0xff00010UL, DecodeOpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83756 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83761 "isa_arm32.tcc"
	>(0x2300000UL, 0xff00000UL, DecodeOpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83765 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83770 "isa_arm32.tcc"
	>(0x200010UL, 0xff00090UL, DecodeOpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83774 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83779 "isa_arm32.tcc"
	>(0x200000UL, 0xff00010UL, DecodeOpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83783 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83788 "isa_arm32.tcc"
	>(0x2200000UL, 0xff00000UL, DecodeOpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83792 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83797 "isa_arm32.tcc"
	>(0x100010UL, 0xff00090UL, DecodeOpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83801 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83806 "isa_arm32.tcc"
	>(0x100000UL, 0xff00010UL, DecodeOpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83810 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83815 "isa_arm32.tcc"
	>(0x2100000UL, 0xff00000UL, DecodeOpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83819 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83824 "isa_arm32.tcc"
	>(0x10UL, 0xff00090UL, DecodeOpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83828 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83833 "isa_arm32.tcc"
	>(0x0UL, 0xff00010UL, DecodeOpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83837 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83842 "isa_arm32.tcc"
	>(0x2000000UL, 0xff00000UL, DecodeOpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83846 "isa_arm32.tcc"
	>));
	if(
#line 259 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BLX
#line 83851 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83855 "isa_arm32.tcc"
	>(0x1200030UL, 0xff000f0UL, DecodeOpBlx_2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83859 "isa_arm32.tcc"
	>));
	if(
#line 227 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BLX
#line 83864 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83868 "isa_arm32.tcc"
	>(0xfa000000UL, 0xfe000000UL, DecodeOpBlx_1<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83872 "isa_arm32.tcc"
	>));
	if(
#line 180 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BX
#line 83877 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83881 "isa_arm32.tcc"
	>(0x1200010UL, 0xff000f0UL, DecodeOpBx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83885 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83890 "isa_arm32.tcc"
	>(0xeb000000UL, 0xff000000UL, DecodeOpBl_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83894 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83899 "isa_arm32.tcc"
	>(0xcb000000UL, 0xef000000UL, DecodeOpBl_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83903 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83908 "isa_arm32.tcc"
	>(0x8b000000UL, 0xcf000000UL, DecodeOpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83912 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83917 "isa_arm32.tcc"
	>(0xb000000UL, 0x8f000000UL, DecodeOpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83921 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83926 "isa_arm32.tcc"
	>(0xea000000UL, 0xff000000UL, DecodeOpB_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83930 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83935 "isa_arm32.tcc"
	>(0xca000000UL, 0xef000000UL, DecodeOpB_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83939 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83944 "isa_arm32.tcc"
	>(0x8a000000UL, 0xcf000000UL, DecodeOpB_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83948 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83953 "isa_arm32.tcc"
	>(0xa000000UL, 0x8f000000UL, DecodeOpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83957 "isa_arm32.tcc"
	>));
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83964 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83967 "isa_arm32.tcc"
>
Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83972 "isa_arm32.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83984 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83989 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83993 "isa_arm32.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83999 "isa_arm32.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			operation->initialize_dependency_write_reglist();
			operation->initialize_dependency_write_rdlo();
			operation->initialize_dependency_write_rdhi();
			operation->initialize_dependency_write_rd();
			operation->initialize_dependency_write_rn();
			operation->initialize_dependency_read_crn();
			operation->initialize_dependency_read_crm();
			operation->initialize_dependency_read_reglist();
			operation->initialize_dependency_read_rs();
			operation->initialize_dependency_read_rn();
			operation->initialize_dependency_read_rm();
			operation->initialize_rdp1_init();
			operation->initialize_rdlo_init();
			operation->initialize_rdhi_init();
			operation->initialize_rs_init();
			operation->initialize_rd_init();
			operation->initialize_rm_init();
			operation->initialize_rn_init();
			operation->initialize_condition();
			return operation;
		}
	}
	operation = new Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84033 "isa_arm32.tcc"
	>(code, addr, "???");
	operation->initialize_dependency_write_reglist();
	operation->initialize_dependency_write_rdlo();
	operation->initialize_dependency_write_rdhi();
	operation->initialize_dependency_write_rd();
	operation->initialize_dependency_write_rn();
	operation->initialize_dependency_read_crn();
	operation->initialize_dependency_read_crm();
	operation->initialize_dependency_read_reglist();
	operation->initialize_dependency_read_rs();
	operation->initialize_dependency_read_rn();
	operation->initialize_dependency_read_rm();
	operation->initialize_rdp1_init();
	operation->initialize_rdlo_init();
	operation->initialize_rdhi_init();
	operation->initialize_rs_init();
	operation->initialize_rd_init();
	operation->initialize_rm_init();
	operation->initialize_rn_init();
	operation->initialize_condition();
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84060 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84063 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84068 "isa_arm32.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84078 "isa_arm32.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84100 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84105 "isa_arm32.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84114 "isa_arm32.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84150 "isa_arm32.tcc"
>
inline DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84155 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84159 "isa_arm32.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84167 "isa_arm32.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84201 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84204 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84209 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84213 "isa_arm32.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84219 "isa_arm32.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84225 "isa_arm32.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84233 "isa_arm32.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84258 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84263 "isa_arm32.tcc"
>::SetLittleEndian()
{
	is_little_endian = true;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84272 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84275 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84280 "isa_arm32.tcc"
>::SetBigEndian()
{
	is_little_endian = false;
}

} } } } } } }
