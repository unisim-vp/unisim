#include "isa_arm32.hh"
#include <cassert>
#line 75 "isa/arm32/arm32.isa"

#include "unisim/util/arithmetic/arithmetic.hh"
#include "unisim/component/cxx/processor/arm/exception.hh"
#include "unisim/service/interfaces/logger.hh"

using unisim::component::cxx::processor::arm::UndefinedInstructionException;
using unisim::service::interfaces::DebugInfo;
using unisim::service::interfaces::DebugWarning;
using unisim::service::interfaces::DebugError;
using unisim::service::interfaces::EndDebugInfo;
using unisim::service::interfaces::EndDebugWarning;
using unisim::service::interfaces::EndDebugError;
using unisim::service::interfaces::Endl;
using unisim::service::interfaces::Hex;
using unisim::service::interfaces::Dec;
using unisim::service::interfaces::File;
using unisim::service::interfaces::Function;
using unisim::service::interfaces::Line;
using unisim::util::arithmetic::Add32;
#line 24 "isa_arm32.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace arm { namespace isa { namespace arm32 {
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37 "isa_arm32.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
noperands(
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
0
#line 43 "isa_arm32.tcc"
),
unit(
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
NO_UNIT_T
#line 48 "isa_arm32.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67 "isa_arm32.tcc"
>::~Operation()
{
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78 "isa_arm32.tcc"
>
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
void
#line 82 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 86 "isa_arm32.tcc"
>::profile(
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
map<uint64_t, uint32_t> &
#line 90 "isa_arm32.tcc"
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
prof
#line 93 "isa_arm32.tcc"
)
{
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
	{
		uint64_t val = GetEncoding();
		map<uint64_t, uint32_t>::iterator it = prof.find(val);
		if(it != prof.end()) {
			it->second = it->second + 1;
			} else {
			prof[val] = 1;
		}
	}
#line 106 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 111 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 114 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 121 "isa_arm32.tcc"
>::initialize_dependency_write_reglist()
{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 126 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 134 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 141 "isa_arm32.tcc"
>::initialize_dependency_write_rdlo()
{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 146 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 154 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 161 "isa_arm32.tcc"
>::initialize_dependency_write_rdhi()
{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 166 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 171 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 174 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 181 "isa_arm32.tcc"
>::initialize_dependency_write_rd()
{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 186 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 191 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 194 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 201 "isa_arm32.tcc"
>::initialize_dependency_write_rn()
{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 206 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 214 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 221 "isa_arm32.tcc"
>::initialize_dependency_read_crn()
{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 226 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 234 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 241 "isa_arm32.tcc"
>::initialize_dependency_read_crm()
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 246 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 251 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 254 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 261 "isa_arm32.tcc"
>::initialize_dependency_read_reglist()
{
#line 89 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 266 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 271 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 274 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 281 "isa_arm32.tcc"
>::initialize_dependency_read_rs()
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 286 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 291 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 294 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 301 "isa_arm32.tcc"
>::initialize_dependency_read_rn()
{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 306 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 314 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 321 "isa_arm32.tcc"
>::initialize_dependency_read_rm()
{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 326 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 334 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 338 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 342 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 346 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 349 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 353 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 356 "isa_arm32.tcc"
)
{
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	{
		buffer << "Unknown instruction";
	}
#line 363 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 371 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 375 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 379 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 383 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 386 "isa_arm32.tcc"
)
{
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	{
		throw UndefinedInstructionException<CONFIG>();
	}
#line 393 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 398 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 401 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 408 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdp1_init = 0;
	}
#line 415 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 423 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 430 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdlo_init = 0;
	}
#line 437 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 442 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 445 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 452 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdhi_init = 0;
	}
#line 459 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 467 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 474 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rs_init = 0;
	}
#line 481 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 489 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 496 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rd_init = 0;
	}
#line 503 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 508 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 511 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 518 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rm_init = 0;
	}
#line 525 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 533 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 540 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rn_init = 0;
	}
#line 547 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 552 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 555 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 562 "isa_arm32.tcc"
>::initialize_condition()
{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
	}
#line 568 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 573 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 576 "isa_arm32.tcc"
>
class OpB_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 581 "isa_arm32.tcc"
>
{
public:
	OpB_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 667 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 671 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 674 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 678 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 681 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 719 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 723 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 726 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 734 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 737 "isa_arm32.tcc"
>
class OpB_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 742 "isa_arm32.tcc"
>
{
public:
	OpB_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 828 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 832 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 835 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 839 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 842 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 880 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 884 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 887 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 895 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 898 "isa_arm32.tcc"
>
class OpB_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 903 "isa_arm32.tcc"
>
{
public:
	OpB_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 989 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 993 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 996 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1000 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1003 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1041 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1045 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1048 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1056 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1059 "isa_arm32.tcc"
>
class OpB_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1064 "isa_arm32.tcc"
>
{
public:
	OpB_1110(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1149 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1153 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1156 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1160 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1163 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1201 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1205 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1208 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1216 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1219 "isa_arm32.tcc"
>
class OpBl_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1224 "isa_arm32.tcc"
>
{
public:
	OpBl_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1310 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1314 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1317 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1321 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1324 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1362 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1366 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1369 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1380 "isa_arm32.tcc"
>
class OpBl_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1385 "isa_arm32.tcc"
>
{
public:
	OpBl_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1471 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1475 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1478 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1482 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1485 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1523 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1527 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1530 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1538 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1541 "isa_arm32.tcc"
>
class OpBl_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1546 "isa_arm32.tcc"
>
{
public:
	OpBl_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1632 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1636 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1639 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1643 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1646 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1684 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1688 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1691 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1699 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1702 "isa_arm32.tcc"
>
class OpBl_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1707 "isa_arm32.tcc"
>
{
public:
	OpBl_1110(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1792 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1796 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1799 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1803 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1806 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1844 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1848 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1851 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1859 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1862 "isa_arm32.tcc"
>
class OpBx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1867 "isa_arm32.tcc"
>
{
public:
	OpBx(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t sbo2;
	uint32_t sbo3;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1880 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1884 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1887 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1891 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1894 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1932 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1936 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1939 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1950 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1953 "isa_arm32.tcc"
>
class OpBlx_1 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1958 "isa_arm32.tcc"
>
{
public:
	OpBlx_1(CodeType code, typename CONFIG::address_t addr);
	uint32_t h;
	int32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1968 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1972 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1975 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1979 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1982 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2020 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2024 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2027 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2035 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2038 "isa_arm32.tcc"
>
class OpBlx_2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2043 "isa_arm32.tcc"
>
{
public:
	OpBlx_2(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t sbo2;
	uint32_t sbo3;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2056 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2060 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2063 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2067 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2070 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2108 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2112 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2115 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2126 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2129 "isa_arm32.tcc"
>
class OpAnd_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2134 "isa_arm32.tcc"
>
{
public:
	OpAnd_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2147 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2151 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2154 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2158 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2161 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2199 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2203 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2206 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2217 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2220 "isa_arm32.tcc"
>
class OpAnd_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2225 "isa_arm32.tcc"
>
{
public:
	OpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2239 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2243 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2246 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2250 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2253 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2291 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2295 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2298 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2315 "isa_arm32.tcc"
>
class OpAnd_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2320 "isa_arm32.tcc"
>
{
public:
	OpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2334 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2338 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2341 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2345 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2348 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2386 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2390 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2393 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2413 "isa_arm32.tcc"
>
class OpAnds_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2418 "isa_arm32.tcc"
>
{
public:
	OpAnds_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2431 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2435 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2438 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2442 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2445 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2483 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2487 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2490 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2504 "isa_arm32.tcc"
>
class OpAnds_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2509 "isa_arm32.tcc"
>
{
public:
	OpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2523 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2527 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2530 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2534 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2537 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2575 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2579 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2582 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2599 "isa_arm32.tcc"
>
class OpAnds_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2604 "isa_arm32.tcc"
>
{
public:
	OpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2618 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2622 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2625 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2629 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2632 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2670 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2674 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2677 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2694 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2697 "isa_arm32.tcc"
>
class OpEor_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2702 "isa_arm32.tcc"
>
{
public:
	OpEor_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2715 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2719 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2722 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2726 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2729 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2767 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2771 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2774 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2785 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2788 "isa_arm32.tcc"
>
class OpEor_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2793 "isa_arm32.tcc"
>
{
public:
	OpEor_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2807 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2811 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2814 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2818 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2821 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2859 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2863 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2866 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2880 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2883 "isa_arm32.tcc"
>
class OpEor_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2888 "isa_arm32.tcc"
>
{
public:
	OpEor_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2902 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2906 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2909 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2913 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2916 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2954 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2958 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2961 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2978 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2981 "isa_arm32.tcc"
>
class OpEors_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2986 "isa_arm32.tcc"
>
{
public:
	OpEors_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2999 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3003 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3006 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3010 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3013 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3051 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3055 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3058 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3069 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3072 "isa_arm32.tcc"
>
class OpEors_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3077 "isa_arm32.tcc"
>
{
public:
	OpEors_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3091 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3095 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3098 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3102 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3105 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3143 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3147 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3150 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3164 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3167 "isa_arm32.tcc"
>
class OpEors_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3172 "isa_arm32.tcc"
>
{
public:
	OpEors_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3186 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3190 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3193 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3197 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3200 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3238 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3242 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3245 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3265 "isa_arm32.tcc"
>
class OpSub_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3270 "isa_arm32.tcc"
>
{
public:
	OpSub_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3283 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3287 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3290 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3294 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3297 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3335 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3339 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3342 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3353 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3356 "isa_arm32.tcc"
>
class OpSub_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3361 "isa_arm32.tcc"
>
{
public:
	OpSub_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3375 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3379 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3382 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3386 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3389 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3427 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3431 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3434 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3448 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3451 "isa_arm32.tcc"
>
class OpSub_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3456 "isa_arm32.tcc"
>
{
public:
	OpSub_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3470 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3474 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3477 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3481 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3484 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3522 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3526 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3529 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3546 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3549 "isa_arm32.tcc"
>
class OpSubs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3554 "isa_arm32.tcc"
>
{
public:
	OpSubs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3567 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3571 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3574 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3578 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3581 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3619 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3623 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3626 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3637 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3640 "isa_arm32.tcc"
>
class OpSubs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3645 "isa_arm32.tcc"
>
{
public:
	OpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3659 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3663 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3666 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3670 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3673 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3711 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3715 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3718 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3732 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3735 "isa_arm32.tcc"
>
class OpSubs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3740 "isa_arm32.tcc"
>
{
public:
	OpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3754 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3758 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3761 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3765 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3768 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3806 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3810 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3813 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3830 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3833 "isa_arm32.tcc"
>
class OpRsb_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3838 "isa_arm32.tcc"
>
{
public:
	OpRsb_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3851 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3855 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3858 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3862 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3865 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3903 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3907 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3910 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3921 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3924 "isa_arm32.tcc"
>
class OpRsb_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3929 "isa_arm32.tcc"
>
{
public:
	OpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3943 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3947 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3950 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3954 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3957 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3995 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3999 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4002 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4016 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4019 "isa_arm32.tcc"
>
class OpRsb_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4024 "isa_arm32.tcc"
>
{
public:
	OpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4038 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4042 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4045 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4049 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4052 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4090 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4094 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4097 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4117 "isa_arm32.tcc"
>
class OpRsbs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4122 "isa_arm32.tcc"
>
{
public:
	OpRsbs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4135 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4139 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4142 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4146 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4149 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4187 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4191 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4194 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4208 "isa_arm32.tcc"
>
class OpRsbs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4213 "isa_arm32.tcc"
>
{
public:
	OpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4227 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4231 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4234 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4238 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4241 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4279 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4283 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4286 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4300 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4303 "isa_arm32.tcc"
>
class OpRsbs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4308 "isa_arm32.tcc"
>
{
public:
	OpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4322 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4326 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4329 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4333 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4336 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4374 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4378 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4381 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4398 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4401 "isa_arm32.tcc"
>
class OpAdd_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4406 "isa_arm32.tcc"
>
{
public:
	OpAdd_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4419 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4423 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4426 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4430 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4433 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4471 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4475 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4478 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4492 "isa_arm32.tcc"
>
class OpAdd_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4497 "isa_arm32.tcc"
>
{
public:
	OpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4511 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4515 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4518 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4522 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4525 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4563 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4567 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4570 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4584 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4587 "isa_arm32.tcc"
>
class OpAdd_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4592 "isa_arm32.tcc"
>
{
public:
	OpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4606 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4610 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4613 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4617 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4620 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4658 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4662 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4665 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4685 "isa_arm32.tcc"
>
class OpAdds_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4690 "isa_arm32.tcc"
>
{
public:
	OpAdds_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4703 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4707 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4710 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4714 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4717 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4755 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4759 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4762 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4776 "isa_arm32.tcc"
>
class OpAdds_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4781 "isa_arm32.tcc"
>
{
public:
	OpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4795 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4799 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4802 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4806 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4809 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4847 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4851 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4854 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4868 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4871 "isa_arm32.tcc"
>
class OpAdds_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4876 "isa_arm32.tcc"
>
{
public:
	OpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4890 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4894 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4897 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4901 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4904 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4942 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4946 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4949 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4966 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4969 "isa_arm32.tcc"
>
class OpAdc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4974 "isa_arm32.tcc"
>
{
public:
	OpAdc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4987 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4991 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4994 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4998 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5001 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5039 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5043 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5046 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5060 "isa_arm32.tcc"
>
class OpAdc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5065 "isa_arm32.tcc"
>
{
public:
	OpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5079 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5083 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5086 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5090 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5093 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5131 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5135 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5138 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5155 "isa_arm32.tcc"
>
class OpAdc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5160 "isa_arm32.tcc"
>
{
public:
	OpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5174 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5178 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5181 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5185 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5188 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5226 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5230 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5233 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5250 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5253 "isa_arm32.tcc"
>
class OpAdcs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5258 "isa_arm32.tcc"
>
{
public:
	OpAdcs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5271 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5275 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5278 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5282 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5285 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5323 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5327 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5330 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5341 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5344 "isa_arm32.tcc"
>
class OpAdcs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5349 "isa_arm32.tcc"
>
{
public:
	OpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5363 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5367 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5370 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5374 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5377 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5415 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5419 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5422 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5439 "isa_arm32.tcc"
>
class OpAdcs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5444 "isa_arm32.tcc"
>
{
public:
	OpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5458 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5462 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5465 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5469 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5472 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5510 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5514 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5517 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5537 "isa_arm32.tcc"
>
class OpSbc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5542 "isa_arm32.tcc"
>
{
public:
	OpSbc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5555 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5559 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5562 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5566 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5569 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5607 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5611 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5614 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5625 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5628 "isa_arm32.tcc"
>
class OpSbc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5633 "isa_arm32.tcc"
>
{
public:
	OpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5647 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5651 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5654 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5658 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5661 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5699 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5703 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5706 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5720 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5723 "isa_arm32.tcc"
>
class OpSbc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5728 "isa_arm32.tcc"
>
{
public:
	OpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5742 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5746 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5749 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5753 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5756 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5794 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5798 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5801 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5818 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5821 "isa_arm32.tcc"
>
class OpSbcs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5826 "isa_arm32.tcc"
>
{
public:
	OpSbcs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5839 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5843 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5846 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5850 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5853 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5891 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5895 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5898 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5909 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5912 "isa_arm32.tcc"
>
class OpSbcs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5917 "isa_arm32.tcc"
>
{
public:
	OpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5931 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5935 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5938 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5942 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5945 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5983 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5987 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5990 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6007 "isa_arm32.tcc"
>
class OpSbcs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6012 "isa_arm32.tcc"
>
{
public:
	OpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6026 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6030 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6033 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6037 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6040 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6078 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6082 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6085 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6102 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6105 "isa_arm32.tcc"
>
class OpRsc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6110 "isa_arm32.tcc"
>
{
public:
	OpRsc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6123 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6127 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6130 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6134 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6137 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6175 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6179 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6182 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6196 "isa_arm32.tcc"
>
class OpRsc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6201 "isa_arm32.tcc"
>
{
public:
	OpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6215 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6219 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6222 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6226 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6229 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6267 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6271 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6274 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6288 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6291 "isa_arm32.tcc"
>
class OpRsc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6296 "isa_arm32.tcc"
>
{
public:
	OpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6310 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6314 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6317 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6321 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6324 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6362 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6366 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6369 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6386 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6389 "isa_arm32.tcc"
>
class OpRscs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6394 "isa_arm32.tcc"
>
{
public:
	OpRscs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6407 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6411 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6414 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6418 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6421 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6459 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6463 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6466 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6477 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6480 "isa_arm32.tcc"
>
class OpRscs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6485 "isa_arm32.tcc"
>
{
public:
	OpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6499 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6503 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6506 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6510 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6513 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6551 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6555 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6558 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6575 "isa_arm32.tcc"
>
class OpRscs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6580 "isa_arm32.tcc"
>
{
public:
	OpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6594 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6598 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6601 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6605 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6608 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6646 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6650 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6653 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6673 "isa_arm32.tcc"
>
class OpTst_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6678 "isa_arm32.tcc"
>
{
public:
	OpTst_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6691 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6695 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6698 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6702 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6705 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6743 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6747 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6750 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6764 "isa_arm32.tcc"
>
class OpTst_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6769 "isa_arm32.tcc"
>
{
public:
	OpTst_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6783 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6787 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6790 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6794 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6797 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6835 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6839 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6842 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6859 "isa_arm32.tcc"
>
class OpTst_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6864 "isa_arm32.tcc"
>
{
public:
	OpTst_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6878 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6882 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6885 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6889 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6892 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6930 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6934 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6937 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6957 "isa_arm32.tcc"
>
class OpTeq_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6962 "isa_arm32.tcc"
>
{
public:
	OpTeq_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6975 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6979 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6982 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6986 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6989 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7027 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7031 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7034 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7048 "isa_arm32.tcc"
>
class OpTeq_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7053 "isa_arm32.tcc"
>
{
public:
	OpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7067 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7071 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7074 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7078 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7081 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7119 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7123 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7126 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7140 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7143 "isa_arm32.tcc"
>
class OpTeq_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7148 "isa_arm32.tcc"
>
{
public:
	OpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7162 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7166 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7169 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7173 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7176 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7214 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7218 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7221 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7238 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7241 "isa_arm32.tcc"
>
class OpCmp_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7246 "isa_arm32.tcc"
>
{
public:
	OpCmp_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7259 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7263 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7266 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7270 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7273 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7311 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7315 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7318 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7332 "isa_arm32.tcc"
>
class OpCmp_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7337 "isa_arm32.tcc"
>
{
public:
	OpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7351 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7355 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7358 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7362 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7365 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7403 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7407 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7410 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7424 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7427 "isa_arm32.tcc"
>
class OpCmp_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7432 "isa_arm32.tcc"
>
{
public:
	OpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7446 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7450 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7453 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7457 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7460 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7498 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7502 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7505 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7522 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7525 "isa_arm32.tcc"
>
class OpCmn_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7530 "isa_arm32.tcc"
>
{
public:
	OpCmn_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7543 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7547 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7550 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7554 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7557 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7595 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7599 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7602 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7613 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7616 "isa_arm32.tcc"
>
class OpCmn_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7621 "isa_arm32.tcc"
>
{
public:
	OpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7635 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7639 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7642 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7646 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7649 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7687 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7691 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7694 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7708 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7711 "isa_arm32.tcc"
>
class OpCmn_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7716 "isa_arm32.tcc"
>
{
public:
	OpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7730 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7734 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7737 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7741 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7744 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7782 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7786 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7789 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7809 "isa_arm32.tcc"
>
class OpOrr_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7814 "isa_arm32.tcc"
>
{
public:
	OpOrr_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7827 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7831 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7834 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7838 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7841 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7879 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7883 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7886 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7897 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7900 "isa_arm32.tcc"
>
class OpOrr_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7905 "isa_arm32.tcc"
>
{
public:
	OpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7919 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7923 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7926 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7930 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7933 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7971 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7975 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7978 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7995 "isa_arm32.tcc"
>
class OpOrr_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8000 "isa_arm32.tcc"
>
{
public:
	OpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8014 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8018 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8021 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8025 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8028 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8066 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8070 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8073 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8093 "isa_arm32.tcc"
>
class OpOrrs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8098 "isa_arm32.tcc"
>
{
public:
	OpOrrs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8111 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8115 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8118 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8122 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8125 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8163 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8167 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8170 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8184 "isa_arm32.tcc"
>
class OpOrrs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8189 "isa_arm32.tcc"
>
{
public:
	OpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8203 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8207 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8210 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8214 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8217 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8255 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8259 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8262 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8276 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8279 "isa_arm32.tcc"
>
class OpOrrs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8284 "isa_arm32.tcc"
>
{
public:
	OpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8298 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8302 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8305 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8309 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8312 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8350 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8354 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8357 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8374 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8377 "isa_arm32.tcc"
>
class OpMov_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8382 "isa_arm32.tcc"
>
{
public:
	OpMov_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8395 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8399 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8402 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8406 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8409 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8447 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8451 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8454 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8465 "isa_arm32.tcc"
>
class OpMov_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8470 "isa_arm32.tcc"
>
{
public:
	OpMov_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8484 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8488 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8491 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8495 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8498 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8536 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8540 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8543 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8554 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8557 "isa_arm32.tcc"
>
class OpMov_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8562 "isa_arm32.tcc"
>
{
public:
	OpMov_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8576 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8580 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8583 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8587 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8590 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8628 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8632 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8635 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8652 "isa_arm32.tcc"
>
class OpMovs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8657 "isa_arm32.tcc"
>
{
public:
	OpMovs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8670 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8674 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8677 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8681 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8684 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8722 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8726 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8729 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8737 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8740 "isa_arm32.tcc"
>
class OpMovs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8745 "isa_arm32.tcc"
>
{
public:
	OpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8759 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8763 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8766 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8770 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8773 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8811 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8815 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8818 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8829 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8832 "isa_arm32.tcc"
>
class OpMovs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8837 "isa_arm32.tcc"
>
{
public:
	OpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8851 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8855 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8858 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8862 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8865 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8903 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8907 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8910 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8924 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8927 "isa_arm32.tcc"
>
class OpBic_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8932 "isa_arm32.tcc"
>
{
public:
	OpBic_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8945 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8949 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8952 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8956 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8959 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8997 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9001 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9004 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9015 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9018 "isa_arm32.tcc"
>
class OpBic_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9023 "isa_arm32.tcc"
>
{
public:
	OpBic_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9037 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9041 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9044 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9048 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9051 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9089 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9093 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9096 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9110 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9113 "isa_arm32.tcc"
>
class OpBic_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9118 "isa_arm32.tcc"
>
{
public:
	OpBic_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9132 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9136 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9139 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9143 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9146 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9184 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9188 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9191 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9211 "isa_arm32.tcc"
>
class OpBics_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9216 "isa_arm32.tcc"
>
{
public:
	OpBics_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9229 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9233 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9236 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9240 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9243 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9281 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9285 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9288 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9302 "isa_arm32.tcc"
>
class OpBics_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9307 "isa_arm32.tcc"
>
{
public:
	OpBics_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9321 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9325 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9328 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9332 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9335 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9373 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9377 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9380 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9397 "isa_arm32.tcc"
>
class OpBics_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9402 "isa_arm32.tcc"
>
{
public:
	OpBics_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9416 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9420 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9423 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9427 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9430 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9468 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9472 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9475 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9495 "isa_arm32.tcc"
>
class OpMvn_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9500 "isa_arm32.tcc"
>
{
public:
	OpMvn_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9513 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9517 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9520 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9524 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9527 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9565 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9569 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9572 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9580 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9583 "isa_arm32.tcc"
>
class OpMvn_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9588 "isa_arm32.tcc"
>
{
public:
	OpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9602 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9606 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9609 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9613 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9616 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9654 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9658 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9661 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9672 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9675 "isa_arm32.tcc"
>
class OpMvn_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9680 "isa_arm32.tcc"
>
{
public:
	OpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9694 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9698 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9701 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9705 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9708 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9746 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9750 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9753 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9770 "isa_arm32.tcc"
>
class OpMvns_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9775 "isa_arm32.tcc"
>
{
public:
	OpMvns_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9788 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9792 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9795 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9799 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9802 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9840 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9844 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9847 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9855 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9858 "isa_arm32.tcc"
>
class OpMvns_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9863 "isa_arm32.tcc"
>
{
public:
	OpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9877 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9881 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9884 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9888 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9891 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9929 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9933 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9936 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9950 "isa_arm32.tcc"
>
class OpMvns_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9955 "isa_arm32.tcc"
>
{
public:
	OpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9969 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9973 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9976 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9980 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9983 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10021 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10025 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10028 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10042 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10045 "isa_arm32.tcc"
>
class OpQadd : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10050 "isa_arm32.tcc"
>
{
public:
	OpQadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10063 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10067 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10070 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10074 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10077 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10115 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10119 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10122 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10130 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10133 "isa_arm32.tcc"
>
class OpQsub : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10138 "isa_arm32.tcc"
>
{
public:
	OpQsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10151 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10155 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10158 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10162 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10165 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10203 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10207 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10210 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10218 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10221 "isa_arm32.tcc"
>
class OpQdadd : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10226 "isa_arm32.tcc"
>
{
public:
	OpQdadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10239 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10243 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10246 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10250 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10253 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10291 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10295 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10298 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10309 "isa_arm32.tcc"
>
class OpQdsub : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10314 "isa_arm32.tcc"
>
{
public:
	OpQdsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10327 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10331 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10334 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10338 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10341 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10379 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10383 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10386 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10397 "isa_arm32.tcc"
>
class OpMla : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10402 "isa_arm32.tcc"
>
{
public:
	OpMla(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10416 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10420 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10423 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10427 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10430 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10468 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10472 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10475 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10495 "isa_arm32.tcc"
>
class OpMul : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10500 "isa_arm32.tcc"
>
{
public:
	OpMul(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10514 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10518 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10521 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10525 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10528 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10566 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10570 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10573 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10587 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10590 "isa_arm32.tcc"
>
class OpSmlal : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10595 "isa_arm32.tcc"
>
{
public:
	OpSmlal(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10609 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10613 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10616 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10620 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10623 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10661 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10665 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10668 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
	virtual
	void
	initialize_rdhi_init();
	virtual
	void
	initialize_rdlo_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10691 "isa_arm32.tcc"
>
class OpSmull : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10696 "isa_arm32.tcc"
>
{
public:
	OpSmull(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10710 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10714 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10717 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10721 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10724 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10762 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10766 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10769 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10786 "isa_arm32.tcc"
>
class OpUmlal : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10791 "isa_arm32.tcc"
>
{
public:
	OpUmlal(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10805 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10809 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10812 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10816 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10819 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10857 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10861 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10864 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
	virtual
	void
	initialize_rdhi_init();
	virtual
	void
	initialize_rdlo_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10884 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10887 "isa_arm32.tcc"
>
class OpUmull : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10892 "isa_arm32.tcc"
>
{
public:
	OpUmull(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10906 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10910 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10913 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10917 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10920 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10958 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10962 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10965 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10979 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10982 "isa_arm32.tcc"
>
class OpSmlaxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10987 "isa_arm32.tcc"
>
{
public:
	OpSmlaxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11002 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11006 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11009 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11013 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11016 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11054 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11058 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11061 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11069 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11072 "isa_arm32.tcc"
>
class OpSmlalxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11077 "isa_arm32.tcc"
>
{
public:
	OpSmlalxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11092 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11096 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11099 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11103 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11106 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11144 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11148 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11151 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11162 "isa_arm32.tcc"
>
class OpSmlawy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11167 "isa_arm32.tcc"
>
{
public:
	OpSmlawy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t y;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11181 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11185 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11188 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11192 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11195 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11233 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11237 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11240 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11248 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11251 "isa_arm32.tcc"
>
class OpSmulxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11256 "isa_arm32.tcc"
>
{
public:
	OpSmulxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11271 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11275 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11278 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11282 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11285 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11323 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11327 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11330 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11341 "isa_arm32.tcc"
>
class OpSmulwy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11346 "isa_arm32.tcc"
>
{
public:
	OpSmulwy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t y;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11360 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11364 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11367 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11371 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11374 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11412 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11416 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11419 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11427 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11430 "isa_arm32.tcc"
>
class OpMrs : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11435 "isa_arm32.tcc"
>
{
public:
	OpMrs(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t rd;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11446 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11450 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11453 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11457 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11460 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11498 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11502 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11505 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11513 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11516 "isa_arm32.tcc"
>
class OpMsr_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11521 "isa_arm32.tcc"
>
{
public:
	OpMsr_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t mask;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11534 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11538 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11541 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11545 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11548 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11586 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11590 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11593 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11601 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11604 "isa_arm32.tcc"
>
class OpMsr_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11609 "isa_arm32.tcc"
>
{
public:
	OpMsr_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t mask;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11621 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11625 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11628 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11632 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11635 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11673 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11677 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11680 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11691 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11694 "isa_arm32.tcc"
>
class OpLdr_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11699 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11712 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11716 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11719 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11723 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11726 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11764 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11768 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11771 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11782 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11785 "isa_arm32.tcc"
>
class OpLdr_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11790 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11803 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11807 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11810 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11814 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11817 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11855 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11859 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11862 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11876 "isa_arm32.tcc"
>
class OpLdr_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11881 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11894 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11898 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11901 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11905 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11908 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11946 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11950 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11953 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11964 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11967 "isa_arm32.tcc"
>
class OpLdr_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11972 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11987 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11991 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11994 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11998 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12001 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12039 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12043 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12046 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12066 "isa_arm32.tcc"
>
class OpLdr_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12071 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12086 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12090 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12093 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12097 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12100 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12138 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12142 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12145 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12162 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12165 "isa_arm32.tcc"
>
class OpLdr_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12170 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12185 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12189 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12192 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12196 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12199 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12237 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12241 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12244 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12264 "isa_arm32.tcc"
>
class OpLdrb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12269 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12282 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12286 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12289 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12293 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12296 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12334 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12338 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12341 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12352 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12355 "isa_arm32.tcc"
>
class OpLdrb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12360 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12373 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12377 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12380 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12384 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12387 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12425 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12429 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12432 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12443 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12446 "isa_arm32.tcc"
>
class OpLdrb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12451 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12464 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12468 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12471 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12475 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12478 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12516 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12520 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12523 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12537 "isa_arm32.tcc"
>
class OpLdrb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12542 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12557 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12561 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12564 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12568 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12571 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12609 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12613 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12616 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12633 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12636 "isa_arm32.tcc"
>
class OpLdrb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12641 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12656 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12660 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12663 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12667 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12670 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12708 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12712 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12715 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12732 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12735 "isa_arm32.tcc"
>
class OpLdrb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12740 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12755 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12759 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12762 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12766 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12769 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12807 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12811 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12814 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12834 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12839 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12851 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12855 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12858 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12862 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12865 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12903 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12907 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12910 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12918 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12921 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12926 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12938 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12942 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12945 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12949 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12952 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12990 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12994 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12997 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13008 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13011 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13016 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13028 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13032 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13035 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13039 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13042 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13080 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13084 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13087 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13098 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13103 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13117 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13121 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13124 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13128 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13131 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13169 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13173 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13176 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13187 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13192 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13206 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13210 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13213 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13217 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13220 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13258 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13262 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13265 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13282 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13287 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13301 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13305 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13308 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13312 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13315 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13353 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13357 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13360 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13371 "isa_arm32.tcc"
>
class OpLdrt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13376 "isa_arm32.tcc"
>
{
public:
	OpLdrt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13389 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13393 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13396 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13400 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13403 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13441 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13445 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13448 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13462 "isa_arm32.tcc"
>
class OpLdrt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13467 "isa_arm32.tcc"
>
{
public:
	OpLdrt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13482 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13486 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13489 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13493 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13496 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13534 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13538 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13541 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13558 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13561 "isa_arm32.tcc"
>
class OpLdrbt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13566 "isa_arm32.tcc"
>
{
public:
	OpLdrbt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13579 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13583 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13586 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13590 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13593 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13631 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13635 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13638 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13652 "isa_arm32.tcc"
>
class OpLdrbt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13657 "isa_arm32.tcc"
>
{
public:
	OpLdrbt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13672 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13676 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13679 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13683 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13686 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13724 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13728 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13731 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13751 "isa_arm32.tcc"
>
class OpStr_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13756 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13769 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13773 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13776 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13780 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13783 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13821 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13825 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13828 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13842 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13845 "isa_arm32.tcc"
>
class OpStr_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13850 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13863 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13867 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13870 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13874 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13877 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13915 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13919 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13922 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13936 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13939 "isa_arm32.tcc"
>
class OpStr_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13944 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13957 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13961 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13964 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13968 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13971 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14009 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14013 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14016 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14033 "isa_arm32.tcc"
>
class OpStr_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14038 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14053 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14057 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14060 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14064 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14067 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14105 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14109 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14112 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14129 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14132 "isa_arm32.tcc"
>
class OpStr_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14137 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14152 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14156 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14159 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14163 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14166 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14204 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14208 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14211 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14231 "isa_arm32.tcc"
>
class OpStr_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14236 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14251 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14255 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14258 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14262 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14265 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14303 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14307 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14310 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14327 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14330 "isa_arm32.tcc"
>
class OpStrb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14335 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14348 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14352 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14355 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14359 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14362 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14400 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14404 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14407 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14421 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14424 "isa_arm32.tcc"
>
class OpStrb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14429 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14442 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14446 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14449 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14453 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14456 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14494 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14498 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14501 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14515 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14518 "isa_arm32.tcc"
>
class OpStrb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14523 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14536 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14540 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14543 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14547 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14550 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14588 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14592 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14595 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14609 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14612 "isa_arm32.tcc"
>
class OpStrb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14617 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14632 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14636 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14639 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14643 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14646 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14684 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14688 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14691 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14708 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14711 "isa_arm32.tcc"
>
class OpStrb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14716 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14731 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14735 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14738 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14742 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14745 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14783 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14787 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14790 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14807 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14810 "isa_arm32.tcc"
>
class OpStrb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14815 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14830 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14834 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14837 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14841 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14844 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14882 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14886 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14889 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14906 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14909 "isa_arm32.tcc"
>
class OpStrt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14914 "isa_arm32.tcc"
>
{
public:
	OpStrt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14927 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14931 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14934 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14938 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14941 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14979 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14983 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14986 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15003 "isa_arm32.tcc"
>
class OpStrt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15008 "isa_arm32.tcc"
>
{
public:
	OpStrt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15023 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15027 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15030 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15034 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15037 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15075 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15079 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15082 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15099 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15102 "isa_arm32.tcc"
>
class OpStrbt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15107 "isa_arm32.tcc"
>
{
public:
	OpStrbt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15120 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15124 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15127 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15131 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15134 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15172 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15176 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15179 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15196 "isa_arm32.tcc"
>
class OpStrbt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15201 "isa_arm32.tcc"
>
{
public:
	OpStrbt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15216 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15220 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15223 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15227 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15230 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15268 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15272 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15275 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15292 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15295 "isa_arm32.tcc"
>
class OpLdrh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15300 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15314 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15318 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15321 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15325 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15328 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15366 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15370 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15373 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15387 "isa_arm32.tcc"
>
class OpLdrh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15392 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15406 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15410 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15413 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15417 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15420 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15458 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15462 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15465 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15476 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15479 "isa_arm32.tcc"
>
class OpLdrh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15484 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15498 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15502 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15505 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15509 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15512 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15550 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15554 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15557 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15571 "isa_arm32.tcc"
>
class OpLdrh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15576 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15590 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15594 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15597 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15601 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15604 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15642 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15646 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15649 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15669 "isa_arm32.tcc"
>
class OpLdrh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15674 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15688 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15692 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15695 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15699 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15702 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15740 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15744 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15747 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15764 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15767 "isa_arm32.tcc"
>
class OpLdrh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15772 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15786 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15790 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15793 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15797 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15800 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15838 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15842 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15845 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15862 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15865 "isa_arm32.tcc"
>
class OpLdrsh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15870 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15884 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15888 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15891 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15895 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15898 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15936 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15940 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15943 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15957 "isa_arm32.tcc"
>
class OpLdrsh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15962 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15976 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15980 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15983 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15987 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15990 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16028 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16032 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16035 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16046 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16049 "isa_arm32.tcc"
>
class OpLdrsh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16054 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16068 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16072 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16075 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16079 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16082 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16120 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16124 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16127 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16138 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16141 "isa_arm32.tcc"
>
class OpLdrsh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16146 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16160 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16164 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16167 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16171 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16174 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16212 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16216 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16219 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16236 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16239 "isa_arm32.tcc"
>
class OpLdrsh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16244 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16258 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16262 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16265 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16269 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16272 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16310 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16314 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16317 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16337 "isa_arm32.tcc"
>
class OpLdrsh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16342 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16356 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16360 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16363 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16367 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16370 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16408 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16412 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16415 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16432 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16435 "isa_arm32.tcc"
>
class OpLdrsb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16440 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16454 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16458 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16461 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16465 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16468 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16506 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16510 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16513 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16527 "isa_arm32.tcc"
>
class OpLdrsb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16532 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16546 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16550 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16553 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16557 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16560 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16598 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16602 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16605 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16616 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16619 "isa_arm32.tcc"
>
class OpLdrsb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16624 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16638 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16642 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16645 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16649 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16652 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16690 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16694 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16697 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16708 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16711 "isa_arm32.tcc"
>
class OpLdrsb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16716 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16730 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16734 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16737 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16741 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16744 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16782 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16786 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16789 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16809 "isa_arm32.tcc"
>
class OpLdrsb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16814 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16828 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16832 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16835 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16839 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16842 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16880 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16884 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16887 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16907 "isa_arm32.tcc"
>
class OpLdrsb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16912 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16926 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16930 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16933 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16937 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16940 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16978 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16982 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16985 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17005 "isa_arm32.tcc"
>
class OpStrh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17010 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17024 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17028 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17031 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17035 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17038 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17076 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17080 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17083 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17094 "isa_arm32.tcc"
>
class OpStrh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17099 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17113 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17117 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17120 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17124 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17127 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17165 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17169 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17172 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17180 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17183 "isa_arm32.tcc"
>
class OpStrh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17188 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17202 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17206 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17209 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17213 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17216 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17254 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17258 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17261 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17269 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17272 "isa_arm32.tcc"
>
class OpStrh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17277 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17291 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17295 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17298 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17302 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17305 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17343 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17347 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17350 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17358 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17361 "isa_arm32.tcc"
>
class OpStrh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17366 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17380 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17384 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17387 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17391 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17394 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17432 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17436 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17439 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17447 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17450 "isa_arm32.tcc"
>
class OpStrh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17455 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17469 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17473 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17476 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17480 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17483 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17521 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17525 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17528 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17536 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17539 "isa_arm32.tcc"
>
class OpLdrd_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17544 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17558 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17562 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17565 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17569 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17572 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17610 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17614 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17617 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17628 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17631 "isa_arm32.tcc"
>
class OpLdrd_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17636 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17650 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17654 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17657 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17661 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17664 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17702 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17706 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17709 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17720 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17723 "isa_arm32.tcc"
>
class OpLdrd_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17728 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17742 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17746 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17749 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17753 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17756 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17794 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17798 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17801 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17815 "isa_arm32.tcc"
>
class OpLdrd_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17820 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17834 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17838 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17841 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17845 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17848 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17886 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17890 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17893 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17910 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17913 "isa_arm32.tcc"
>
class OpLdrd_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17918 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17932 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17936 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17939 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17943 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17946 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17984 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17988 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17991 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18008 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18011 "isa_arm32.tcc"
>
class OpLdrd_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18016 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18030 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18034 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18037 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18041 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18044 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18082 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18086 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18089 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18106 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18109 "isa_arm32.tcc"
>
class OpStrd_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18114 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18128 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18132 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18135 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18139 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18142 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18180 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18184 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18187 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18207 "isa_arm32.tcc"
>
class OpStrd_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18212 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18226 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18230 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18233 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18237 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18240 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18278 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18282 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18285 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18302 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18305 "isa_arm32.tcc"
>
class OpStrd_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18310 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18324 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18328 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18331 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18335 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18338 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18376 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18380 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18383 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18400 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18403 "isa_arm32.tcc"
>
class OpStrd_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18408 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18422 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18426 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18429 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18433 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18436 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18474 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18478 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18481 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18504 "isa_arm32.tcc"
>
class OpStrd_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18509 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18523 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18527 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18530 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18534 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18537 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18575 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18579 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18582 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18602 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18605 "isa_arm32.tcc"
>
class OpStrd_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18610 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18624 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18628 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18631 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18635 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18638 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18676 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18680 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18683 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18703 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18706 "isa_arm32.tcc"
>
class OpLdm_1_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18711 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18723 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18727 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18730 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18734 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18737 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18775 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18779 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18782 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18793 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18796 "isa_arm32.tcc"
>
class OpLdm_1_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18801 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18813 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18817 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18820 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18824 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18827 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18865 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18869 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18872 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18886 "isa_arm32.tcc"
>
class OpLdm_1_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18891 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18903 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18907 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18910 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18914 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18917 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18955 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18959 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18962 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18976 "isa_arm32.tcc"
>
class OpLdm_1_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18981 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18993 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18997 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19000 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19004 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19007 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19045 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19049 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19052 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19066 "isa_arm32.tcc"
>
class OpLdm_2_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19071 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19082 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19086 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19089 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19093 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19096 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19134 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19138 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19141 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19155 "isa_arm32.tcc"
>
class OpLdm_2_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19160 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19171 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19175 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19178 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19182 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19185 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19223 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19227 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19230 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19244 "isa_arm32.tcc"
>
class OpLdm_2_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19249 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19260 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19264 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19267 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19271 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19274 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19312 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19316 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19319 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19333 "isa_arm32.tcc"
>
class OpLdm_2_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19338 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19349 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19353 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19356 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19360 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19363 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19401 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19405 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19408 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19422 "isa_arm32.tcc"
>
class OpLdm_3_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19427 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19439 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19443 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19446 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19450 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19453 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19491 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19495 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19498 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19509 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19512 "isa_arm32.tcc"
>
class OpLdm_3_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19517 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19529 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19533 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19536 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19540 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19543 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19581 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19585 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19588 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19599 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19602 "isa_arm32.tcc"
>
class OpLdm_3_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19607 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19619 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19623 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19626 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19630 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19633 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19671 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19675 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19678 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19692 "isa_arm32.tcc"
>
class OpLdm_3_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19697 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19709 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19713 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19716 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19720 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19723 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19761 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19765 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19768 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19782 "isa_arm32.tcc"
>
class OpStm_1_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19787 "isa_arm32.tcc"
>
{
public:
	OpStm_1_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19799 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19803 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19806 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19810 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19813 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19851 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19855 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19858 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19869 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19872 "isa_arm32.tcc"
>
class OpStm_1_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19877 "isa_arm32.tcc"
>
{
public:
	OpStm_1_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19889 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19893 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19896 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19900 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19903 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19941 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19945 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19948 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19959 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19962 "isa_arm32.tcc"
>
class OpStm_1_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19967 "isa_arm32.tcc"
>
{
public:
	OpStm_1_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19979 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19983 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19986 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19990 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19993 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20031 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20035 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20038 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20049 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20052 "isa_arm32.tcc"
>
class OpStm_1_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20057 "isa_arm32.tcc"
>
{
public:
	OpStm_1_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20069 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20073 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20076 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20080 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20083 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20121 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20125 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20128 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20139 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20142 "isa_arm32.tcc"
>
class OpStm_2_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20147 "isa_arm32.tcc"
>
{
public:
	OpStm_2_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20158 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20162 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20165 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20169 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20172 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20210 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20214 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20217 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20231 "isa_arm32.tcc"
>
class OpStm_2_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20236 "isa_arm32.tcc"
>
{
public:
	OpStm_2_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20247 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20251 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20254 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20258 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20261 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20299 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20303 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20306 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20320 "isa_arm32.tcc"
>
class OpStm_2_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20325 "isa_arm32.tcc"
>
{
public:
	OpStm_2_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20336 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20340 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20343 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20347 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20350 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20388 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20392 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20395 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20406 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20409 "isa_arm32.tcc"
>
class OpStm_2_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20414 "isa_arm32.tcc"
>
{
public:
	OpStm_2_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20425 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20429 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20432 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20436 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20439 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20477 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20481 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20484 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20498 "isa_arm32.tcc"
>
class OpSwp : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20503 "isa_arm32.tcc"
>
{
public:
	OpSwp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20515 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20519 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20522 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20526 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20529 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20567 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20571 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20574 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20585 "isa_arm32.tcc"
>
class OpSwpb : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20590 "isa_arm32.tcc"
>
{
public:
	OpSwpb(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20602 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20606 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20609 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20613 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20616 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20654 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20658 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20661 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20672 "isa_arm32.tcc"
>
class OpSwi : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20677 "isa_arm32.tcc"
>
{
public:
	OpSwi(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t immed;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20687 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20691 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20694 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20698 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20701 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20739 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20743 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20746 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20754 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20757 "isa_arm32.tcc"
>
class OpBkpt : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20762 "isa_arm32.tcc"
>
{
public:
	OpBkpt(CodeType code, typename CONFIG::address_t addr);
	uint32_t himmed;
	uint32_t limmed;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20772 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20776 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20779 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20783 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20786 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20824 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20828 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20831 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20842 "isa_arm32.tcc"
>
class OpCdp_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20847 "isa_arm32.tcc"
>
{
public:
	OpCdp_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20938 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20942 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20945 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20949 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20952 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20990 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20994 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20997 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21005 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21008 "isa_arm32.tcc"
>
class OpCdp_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21013 "isa_arm32.tcc"
>
{
public:
	OpCdp_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21104 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21108 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21111 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21115 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21118 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21156 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21160 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21163 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21171 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21174 "isa_arm32.tcc"
>
class OpCdp_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21179 "isa_arm32.tcc"
>
{
public:
	OpCdp_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21270 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21274 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21277 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21281 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21284 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21322 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21326 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21329 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21340 "isa_arm32.tcc"
>
class OpCdp_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21345 "isa_arm32.tcc"
>
{
public:
	OpCdp_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21435 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21439 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21442 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21446 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21449 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21487 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21491 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21494 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21502 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21505 "isa_arm32.tcc"
>
class OpLdc_offset_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21510 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21601 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21605 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21608 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21612 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21615 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21653 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21657 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21660 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21671 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21674 "isa_arm32.tcc"
>
class OpLdc_offset_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21679 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21770 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21774 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21777 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21781 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21784 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21822 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21826 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21829 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21840 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21843 "isa_arm32.tcc"
>
class OpLdc_offset_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21848 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21939 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21943 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21946 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21950 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21953 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21991 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21995 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21998 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22009 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22012 "isa_arm32.tcc"
>
class OpLdc_offset_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22017 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22107 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22111 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22114 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22118 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22121 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22159 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22163 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22166 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22180 "isa_arm32.tcc"
>
class OpLdc_pre_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22185 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22276 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22280 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22283 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22287 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22290 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22328 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22332 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22335 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22343 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22346 "isa_arm32.tcc"
>
class OpLdc_pre_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22351 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22442 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22446 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22449 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22453 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22456 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22494 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22498 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22501 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22509 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22512 "isa_arm32.tcc"
>
class OpLdc_pre_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22517 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22608 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22612 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22615 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22619 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22622 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22660 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22664 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22667 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22675 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22678 "isa_arm32.tcc"
>
class OpLdc_pre_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22683 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22773 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22777 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22780 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22784 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22787 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22825 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22829 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22832 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22840 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22843 "isa_arm32.tcc"
>
class OpLdc_post_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22848 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22939 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22943 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22946 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22950 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22953 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22991 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22995 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22998 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23006 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23009 "isa_arm32.tcc"
>
class OpLdc_post_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23014 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23105 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23109 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23112 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23116 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23119 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23157 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23161 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23164 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23172 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23175 "isa_arm32.tcc"
>
class OpLdc_post_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23180 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23271 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23275 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23278 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23282 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23285 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23323 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23327 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23330 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23341 "isa_arm32.tcc"
>
class OpLdc_post_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23346 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23436 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23440 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23443 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23447 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23450 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23488 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23492 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23495 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23506 "isa_arm32.tcc"
>
class OpLdc_unindexed_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23511 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23601 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23605 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23608 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23612 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23615 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23653 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23657 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23660 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23671 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23674 "isa_arm32.tcc"
>
class OpLdc_unindexed_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23679 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23769 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23773 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23776 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23780 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23783 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23821 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23825 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23828 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23842 "isa_arm32.tcc"
>
class OpLdc_unindexed_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23847 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23937 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23941 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23944 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23948 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23951 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23989 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23993 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23996 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24010 "isa_arm32.tcc"
>
class OpLdc_unindexed_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24015 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24104 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24108 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24111 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24115 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24118 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24156 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24160 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24163 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24174 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24177 "isa_arm32.tcc"
>
class OpMcr_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24182 "isa_arm32.tcc"
>
{
public:
	OpMcr_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24273 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24277 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24280 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24284 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24287 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24325 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24329 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24332 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24340 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24343 "isa_arm32.tcc"
>
class OpMcr_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24348 "isa_arm32.tcc"
>
{
public:
	OpMcr_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24439 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24443 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24446 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24450 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24453 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24491 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24495 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24498 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24506 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24509 "isa_arm32.tcc"
>
class OpMcr_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24514 "isa_arm32.tcc"
>
{
public:
	OpMcr_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24605 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24609 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24612 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24616 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24619 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24657 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24661 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24664 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24672 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24675 "isa_arm32.tcc"
>
class OpMcr_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24680 "isa_arm32.tcc"
>
{
public:
	OpMcr_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24770 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24774 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24777 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24781 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24784 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24822 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24826 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24829 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24837 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24840 "isa_arm32.tcc"
>
class OpMrc_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24845 "isa_arm32.tcc"
>
{
public:
	OpMrc_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24936 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24940 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24943 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24947 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24950 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24988 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24992 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24995 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25006 "isa_arm32.tcc"
>
class OpMrc_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25011 "isa_arm32.tcc"
>
{
public:
	OpMrc_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25102 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25106 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25109 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25113 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25116 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25154 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25158 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25161 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25172 "isa_arm32.tcc"
>
class OpMrc_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25177 "isa_arm32.tcc"
>
{
public:
	OpMrc_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25268 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25272 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25275 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25279 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25282 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25320 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25324 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25327 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25338 "isa_arm32.tcc"
>
class OpMrc_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25343 "isa_arm32.tcc"
>
{
public:
	OpMrc_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25433 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25437 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25440 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25444 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25447 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25485 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25489 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25492 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25500 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25503 "isa_arm32.tcc"
>
class OpStc_offset_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25508 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25599 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25603 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25606 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25610 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25613 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25651 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25655 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25658 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25672 "isa_arm32.tcc"
>
class OpStc_offset_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25677 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25768 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25772 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25775 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25779 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25782 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25820 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25824 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25827 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25841 "isa_arm32.tcc"
>
class OpStc_offset_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25846 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25937 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25941 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25944 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25948 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25951 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25989 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25993 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25996 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26010 "isa_arm32.tcc"
>
class OpStc_offset_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26015 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26105 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26109 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26112 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26116 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26119 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26157 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26161 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26164 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26175 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26178 "isa_arm32.tcc"
>
class OpStc_pre_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26183 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26274 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26278 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26281 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26285 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26288 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26326 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26330 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26333 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26341 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26344 "isa_arm32.tcc"
>
class OpStc_pre_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26349 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26440 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26444 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26447 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26451 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26454 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26492 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26496 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26499 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26510 "isa_arm32.tcc"
>
class OpStc_pre_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26515 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26606 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26610 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26613 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26617 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26620 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26658 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26662 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26665 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26673 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26676 "isa_arm32.tcc"
>
class OpStc_pre_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26681 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26771 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26775 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26778 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26782 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26785 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26823 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26827 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26830 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26841 "isa_arm32.tcc"
>
class OpStc_post_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26846 "isa_arm32.tcc"
>
{
public:
	OpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26937 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26941 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26944 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26948 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26951 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26989 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26993 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26996 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27007 "isa_arm32.tcc"
>
class OpStc_post_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27012 "isa_arm32.tcc"
>
{
public:
	OpStc_post_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27103 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27107 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27110 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27114 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27117 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27155 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27159 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27162 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27173 "isa_arm32.tcc"
>
class OpStc_post_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27178 "isa_arm32.tcc"
>
{
public:
	OpStc_post_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27269 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27273 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27276 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27280 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27283 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27321 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27325 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27328 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27336 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27339 "isa_arm32.tcc"
>
class OpStc_post_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27344 "isa_arm32.tcc"
>
{
public:
	OpStc_post_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27434 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27438 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27441 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27445 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27448 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27486 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27490 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27493 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27504 "isa_arm32.tcc"
>
class OpStc_unindexed_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27509 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27599 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27603 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27606 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27610 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27613 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27651 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27655 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27658 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27672 "isa_arm32.tcc"
>
class OpStc_unindexed_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27677 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27767 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27771 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27774 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27778 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27781 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27819 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27823 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27826 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27837 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27840 "isa_arm32.tcc"
>
class OpStc_unindexed_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27845 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27935 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27939 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27942 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27946 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27949 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27987 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27991 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27994 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28005 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28008 "isa_arm32.tcc"
>
class OpStc_unindexed_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28013 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28102 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28106 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28109 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28113 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28116 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28154 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28158 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28161 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28172 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28175 "isa_arm32.tcc"
>
class OpCdp2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28180 "isa_arm32.tcc"
>
{
public:
	OpCdp2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28194 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28198 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28201 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28205 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28208 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28246 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28250 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28253 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28264 "isa_arm32.tcc"
>
class OpLdc2_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28269 "isa_arm32.tcc"
>
{
public:
	OpLdc2_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28283 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28287 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28290 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28294 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28297 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28335 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28339 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28342 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28353 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28356 "isa_arm32.tcc"
>
class OpLdc2_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28361 "isa_arm32.tcc"
>
{
public:
	OpLdc2_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28375 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28379 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28382 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28386 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28389 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28427 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28431 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28434 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28442 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28445 "isa_arm32.tcc"
>
class OpLdc2_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28450 "isa_arm32.tcc"
>
{
public:
	OpLdc2_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28464 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28468 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28471 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28475 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28478 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28516 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28520 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28523 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28534 "isa_arm32.tcc"
>
class OpLdc2_unindexed : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28539 "isa_arm32.tcc"
>
{
public:
	OpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28553 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28557 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28560 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28564 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28567 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28605 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28609 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28612 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28626 "isa_arm32.tcc"
>
class OpMcr2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28631 "isa_arm32.tcc"
>
{
public:
	OpMcr2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28645 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28649 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28652 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28656 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28659 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28697 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28701 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28704 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28712 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28715 "isa_arm32.tcc"
>
class OpMrc2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28720 "isa_arm32.tcc"
>
{
public:
	OpMrc2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28734 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28738 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28741 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28745 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28748 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28786 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28790 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28793 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28804 "isa_arm32.tcc"
>
class OpStc2_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28809 "isa_arm32.tcc"
>
{
public:
	OpStc2_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28823 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28827 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28830 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28834 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28837 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28875 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28879 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28882 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28893 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28896 "isa_arm32.tcc"
>
class OpStc2_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28901 "isa_arm32.tcc"
>
{
public:
	OpStc2_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28915 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28919 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28922 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28926 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28929 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28967 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28971 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28974 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28985 "isa_arm32.tcc"
>
class OpStc2_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28990 "isa_arm32.tcc"
>
{
public:
	OpStc2_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29004 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29008 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29011 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29015 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29018 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29056 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29060 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29063 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29071 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29074 "isa_arm32.tcc"
>
class OpStc2_unindexed : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29079 "isa_arm32.tcc"
>
{
public:
	OpStc2_unindexed(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29093 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29097 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29100 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29104 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29107 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29145 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29149 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29152 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29163 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29166 "isa_arm32.tcc"
>
class OpMcrr_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29171 "isa_arm32.tcc"
>
{
public:
	OpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29261 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29265 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29268 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29272 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29275 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29313 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29317 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29320 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29331 "isa_arm32.tcc"
>
class OpMcrr_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29336 "isa_arm32.tcc"
>
{
public:
	OpMcrr_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29426 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29430 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29433 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29437 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29440 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29478 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29482 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29485 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29496 "isa_arm32.tcc"
>
class OpMcrr_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29501 "isa_arm32.tcc"
>
{
public:
	OpMcrr_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29591 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29595 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29598 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29602 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29605 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29643 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29647 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29650 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29658 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29661 "isa_arm32.tcc"
>
class OpMcrr_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29666 "isa_arm32.tcc"
>
{
public:
	OpMcrr_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29755 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29759 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29762 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29766 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29769 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29807 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29811 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29814 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29822 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29825 "isa_arm32.tcc"
>
class OpMrrc_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29830 "isa_arm32.tcc"
>
{
public:
	OpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29920 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29924 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29927 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29931 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29934 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29972 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29976 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29979 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29990 "isa_arm32.tcc"
>
class OpMrrc_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29995 "isa_arm32.tcc"
>
{
public:
	OpMrrc_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30085 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30089 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30092 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30096 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30099 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30137 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30141 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30144 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30155 "isa_arm32.tcc"
>
class OpMrrc_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30160 "isa_arm32.tcc"
>
{
public:
	OpMrrc_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30250 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30254 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30257 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30261 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30264 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30302 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30306 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30309 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30320 "isa_arm32.tcc"
>
class OpMrrc_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30325 "isa_arm32.tcc"
>
{
public:
	OpMrrc_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30414 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30418 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30421 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30425 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30428 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30466 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30470 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30473 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30481 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30484 "isa_arm32.tcc"
>
class OpClz : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30489 "isa_arm32.tcc"
>
{
public:
	OpClz(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t rd;
	uint32_t sbo2;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30502 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30506 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30509 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30513 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30516 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30554 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30558 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30561 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

BRANCH INSTRUCTIONS

**********************************************/
/*******************************************************************
* b (branch) instruction
* op b(cond[4]:0b1010[4]:sext<32> imm[24])
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30617 "isa_arm32.tcc"
>

void
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30624 "isa_arm32.tcc"
>::initialize_condition()
{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 30633 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30641 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30645 "isa_arm32.tcc"
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30649 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30653 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30656 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30660 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30663 "isa_arm32.tcc"
)
{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30674 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30679 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30682 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30686 "isa_arm32.tcc"
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30690 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30694 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30697 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30714 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30720 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30723 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30728 "isa_arm32.tcc"
> *DecodeOpB_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30734 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30741 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30744 "isa_arm32.tcc"
>

void
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30751 "isa_arm32.tcc"
>::initialize_condition()
{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 30760 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30765 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30768 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30772 "isa_arm32.tcc"
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30776 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30780 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30783 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30787 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30790 "isa_arm32.tcc"
)
{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30801 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30809 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30813 "isa_arm32.tcc"
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30817 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30821 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30824 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30841 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30847 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30850 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30855 "isa_arm32.tcc"
> *DecodeOpB_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30861 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30868 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30871 "isa_arm32.tcc"
>

void
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30878 "isa_arm32.tcc"
>::initialize_condition()
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 30887 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30892 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30895 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30899 "isa_arm32.tcc"
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30903 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30907 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30910 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30914 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30917 "isa_arm32.tcc"
)
{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30928 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30936 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30940 "isa_arm32.tcc"
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30944 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30948 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30951 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30968 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30977 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30982 "isa_arm32.tcc"
> *DecodeOpB_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30988 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30995 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30998 "isa_arm32.tcc"
>

void
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31005 "isa_arm32.tcc"
>::initialize_condition()
{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 31014 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31019 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31022 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31026 "isa_arm32.tcc"
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31030 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31034 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31037 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31041 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31044 "isa_arm32.tcc"
)
{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 31055 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31060 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31063 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31067 "isa_arm32.tcc"
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31071 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31075 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31078 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31095 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31101 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31104 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31109 "isa_arm32.tcc"
> *DecodeOpB_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31115 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of b (branch) instruction
*******************************************************************/
/*******************************************************************
* bl (branch & link) instruction
* op bl(cond[4]:0b1011[4]:sext<32> imm[24])
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31129 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31132 "isa_arm32.tcc"
>

void
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31139 "isa_arm32.tcc"
>::initialize_condition()
{
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 31148 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31156 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31160 "isa_arm32.tcc"
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31164 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31168 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31171 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31175 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31178 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31189 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31194 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31197 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31201 "isa_arm32.tcc"
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31205 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31209 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31212 "isa_arm32.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31231 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31237 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31240 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31245 "isa_arm32.tcc"
> *DecodeOpBl_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31251 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31261 "isa_arm32.tcc"
>

void
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31268 "isa_arm32.tcc"
>::initialize_condition()
{
#line 119 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 31277 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31285 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31289 "isa_arm32.tcc"
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31293 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31297 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31300 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31304 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31307 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31318 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31326 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31330 "isa_arm32.tcc"
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31334 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31338 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31341 "isa_arm32.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31360 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31366 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31369 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31374 "isa_arm32.tcc"
> *DecodeOpBl_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31380 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31387 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31390 "isa_arm32.tcc"
>

void
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31397 "isa_arm32.tcc"
>::initialize_condition()
{
#line 125 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 31406 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31414 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31418 "isa_arm32.tcc"
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31422 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31426 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31429 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31433 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31436 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31447 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31455 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31459 "isa_arm32.tcc"
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31463 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31467 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31470 "isa_arm32.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31489 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31498 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31503 "isa_arm32.tcc"
> *DecodeOpBl_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31509 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31519 "isa_arm32.tcc"
>

void
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31526 "isa_arm32.tcc"
>::initialize_condition()
{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 31535 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31540 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31543 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31547 "isa_arm32.tcc"
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31551 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31555 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31558 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31562 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31565 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31576 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31584 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31588 "isa_arm32.tcc"
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31592 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31596 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31599 "isa_arm32.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31618 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31627 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31632 "isa_arm32.tcc"
> *DecodeOpBl_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31638 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bl (branch & link) instruction
*******************************************************************/
/*******************************************************************
* bx (branch and exchange) instruction
* this instruction is only availabe for the following architectures
* 	CONFIG::ARMV4T,
*  CONFIG::ARMV4TXM,
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31660 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31663 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31667 "isa_arm32.tcc"
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31671 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31675 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31678 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31682 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31685 "isa_arm32.tcc"
)
{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "bx";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rm;
	}
#line 31694 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31699 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31702 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31706 "isa_arm32.tcc"
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31710 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31714 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31717 "isa_arm32.tcc"
)
{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		if(!cpu.CheckCondition(cond)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetCPSR_T((rm_value & 0x01) == 1);
		new_PC = rm_value & 0xFFFFFFFE;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31736 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31741 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31744 "isa_arm32.tcc"
>

void
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31751 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 31761 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31770 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31775 "isa_arm32.tcc"
> *DecodeOpBx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31781 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bx (branch and exchange) instruction
*******************************************************************/
/*******************************************************************
* blx (1) (branch with link and exchange version 1) instruction
* this instruction is only availabe for the following architectures
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31804 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31808 "isa_arm32.tcc"
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31812 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31816 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31819 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31823 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31826 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "blx 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8 << dec;
	}
#line 31833 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31841 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31845 "isa_arm32.tcc"
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31849 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31853 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31856 "isa_arm32.tcc"
)
{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typename CONFIG::reg_t new_PC;

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
		cpu.SetCPSR_T(true);
		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31868 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31877 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31882 "isa_arm32.tcc"
> *DecodeOpBlx_1(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31888 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of blx (1) (branch with link and exchange version 1) instruction
*******************************************************************/
/*******************************************************************
* blx (2) (branch with link and exchange version 2) instruction
* this instruction is only availabe for the following architectures
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31908 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31911 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31915 "isa_arm32.tcc"
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31919 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31923 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31926 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31930 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31933 "isa_arm32.tcc"
)
{
#line 262 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "blx";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rm;
	}
#line 31942 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31950 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31954 "isa_arm32.tcc"
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31958 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31962 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31965 "isa_arm32.tcc"
)
{
#line 268 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		if(!cpu.CheckCondition(cond)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
		cpu.SetCPSR_T((rm_value & 0x01) == 1);
		new_PC = rm_value & 0xFFFFFFFE;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31985 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31993 "isa_arm32.tcc"
>

void
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32000 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32010 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32016 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32019 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32024 "isa_arm32.tcc"
> *DecodeOpBlx_2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32030 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of blx (2) (branch with link and exchange version 2) instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

DATA PROCESSING INSTRUCTIONS

**********************************************/
/*******************************************************************
* and instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32084 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32088 "isa_arm32.tcc"
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32092 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32096 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32099 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32103 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32106 "isa_arm32.tcc"
)
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 32120 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32125 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32128 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32132 "isa_arm32.tcc"
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32136 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32140 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32143 "isa_arm32.tcc"
)
{
#line 118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32163 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32171 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32174 "isa_arm32.tcc"
>

void
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32181 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32191 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32197 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32200 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32205 "isa_arm32.tcc"
> *DecodeOpAnd_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32211 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32218 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32221 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32225 "isa_arm32.tcc"
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32229 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32233 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32236 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32240 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32243 "isa_arm32.tcc"
)
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 32257 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32265 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32269 "isa_arm32.tcc"
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32273 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32277 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32280 "isa_arm32.tcc"
)
{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32301 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32309 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32312 "isa_arm32.tcc"
>

void
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32319 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32329 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32337 "isa_arm32.tcc"
>

void
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32344 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32354 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32360 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32363 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32368 "isa_arm32.tcc"
> *DecodeOpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32374 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32381 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32384 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32388 "isa_arm32.tcc"
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32392 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32396 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32399 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32403 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32406 "isa_arm32.tcc"
)
{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 32420 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32425 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32428 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32432 "isa_arm32.tcc"
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32436 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32440 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32443 "isa_arm32.tcc"
)
{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32465 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32473 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32476 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32483 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32493 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32498 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32501 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32508 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32518 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32523 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32526 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32533 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 32543 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32549 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32552 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32557 "isa_arm32.tcc"
> *DecodeOpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32563 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32570 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32573 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32577 "isa_arm32.tcc"
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32581 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32585 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32588 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32592 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32595 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 32609 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32617 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32621 "isa_arm32.tcc"
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32625 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32629 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32632 "isa_arm32.tcc"
)
{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32662 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32673 "isa_arm32.tcc"
>

void
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32680 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32690 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32696 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32699 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32704 "isa_arm32.tcc"
> *DecodeOpAnds_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32710 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32717 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32720 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32724 "isa_arm32.tcc"
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32728 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32732 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32735 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32739 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32742 "isa_arm32.tcc"
)
{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 32756 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32764 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32768 "isa_arm32.tcc"
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32772 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32776 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32779 "isa_arm32.tcc"
)
{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32810 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32818 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32821 "isa_arm32.tcc"
>

void
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32828 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32838 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32843 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32846 "isa_arm32.tcc"
>

void
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32853 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32863 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32869 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32872 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32877 "isa_arm32.tcc"
> *DecodeOpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32883 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32890 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32893 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32897 "isa_arm32.tcc"
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32901 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32905 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32908 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32912 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32915 "isa_arm32.tcc"
)
{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 32929 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32934 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32937 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32941 "isa_arm32.tcc"
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32945 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32949 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32952 "isa_arm32.tcc"
)
{
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32984 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32995 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33002 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33012 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33020 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33027 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33037 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33042 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33045 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33052 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 33062 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33068 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33071 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33076 "isa_arm32.tcc"
> *DecodeOpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33082 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of and instruction
*******************************************************************/
/*******************************************************************
* eor instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33098 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33102 "isa_arm32.tcc"
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33106 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33110 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33113 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33117 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33120 "isa_arm32.tcc"
)
{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 33134 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33139 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33142 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33146 "isa_arm32.tcc"
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33150 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33154 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33157 "isa_arm32.tcc"
)
{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33177 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33188 "isa_arm32.tcc"
>

void
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33195 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33205 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33214 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33219 "isa_arm32.tcc"
> *DecodeOpEor_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33225 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33232 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33235 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33239 "isa_arm32.tcc"
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33243 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33247 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33250 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33254 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33257 "isa_arm32.tcc"
)
{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 33271 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33276 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33279 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33283 "isa_arm32.tcc"
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33287 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33291 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33294 "isa_arm32.tcc"
)
{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33315 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33326 "isa_arm32.tcc"
>

void
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33333 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33343 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33351 "isa_arm32.tcc"
>

void
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33358 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33368 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33374 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33377 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33382 "isa_arm32.tcc"
> *DecodeOpEor_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33388 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33395 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33398 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33402 "isa_arm32.tcc"
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33406 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33410 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33413 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33417 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33420 "isa_arm32.tcc"
)
{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 33434 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33442 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33446 "isa_arm32.tcc"
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33450 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33454 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33457 "isa_arm32.tcc"
)
{
#line 372 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33479 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33490 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33497 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33507 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33512 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33515 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33522 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33532 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33537 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33540 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33547 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 33557 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33563 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33566 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33571 "isa_arm32.tcc"
> *DecodeOpEor_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33577 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33584 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33587 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33591 "isa_arm32.tcc"
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33595 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33599 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33602 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33606 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33609 "isa_arm32.tcc"
)
{
#line 304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 33623 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33628 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33631 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33635 "isa_arm32.tcc"
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33639 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33643 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33646 "isa_arm32.tcc"
)
{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33676 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33684 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33687 "isa_arm32.tcc"
>

void
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33694 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33704 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33710 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33713 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33718 "isa_arm32.tcc"
> *DecodeOpEors_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33724 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33734 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33738 "isa_arm32.tcc"
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33742 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33746 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33749 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33753 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33756 "isa_arm32.tcc"
)
{
#line 315 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 33770 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33775 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33778 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33782 "isa_arm32.tcc"
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33786 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33790 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33793 "isa_arm32.tcc"
)
{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33824 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33835 "isa_arm32.tcc"
>

void
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33842 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33852 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33860 "isa_arm32.tcc"
>

void
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33867 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33877 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33886 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33891 "isa_arm32.tcc"
> *DecodeOpEors_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33897 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33907 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33911 "isa_arm32.tcc"
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33915 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33919 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33922 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33926 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33929 "isa_arm32.tcc"
)
{
#line 326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 33943 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33951 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33955 "isa_arm32.tcc"
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33959 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33963 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33966 "isa_arm32.tcc"
)
{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33998 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34006 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34009 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34016 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34026 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34031 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34034 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34041 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34051 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34056 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34059 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34066 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 34076 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34085 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34090 "isa_arm32.tcc"
> *DecodeOpEors_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34096 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of eor instruction
*******************************************************************/
/*******************************************************************
* sub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34109 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34112 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34116 "isa_arm32.tcc"
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34120 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34124 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34127 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34131 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34134 "isa_arm32.tcc"
)
{
#line 490 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 34148 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34156 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34160 "isa_arm32.tcc"
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34164 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34168 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34171 "isa_arm32.tcc"
)
{
#line 556 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34191 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34202 "isa_arm32.tcc"
>

void
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34209 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34219 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34225 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34228 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34233 "isa_arm32.tcc"
> *DecodeOpSub_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34239 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34246 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34249 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34253 "isa_arm32.tcc"
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34257 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34261 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34264 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34268 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34271 "isa_arm32.tcc"
)
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 34285 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34290 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34293 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34297 "isa_arm32.tcc"
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34301 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34305 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34308 "isa_arm32.tcc"
)
{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34329 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34340 "isa_arm32.tcc"
>

void
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34347 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34357 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34365 "isa_arm32.tcc"
>

void
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34372 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34382 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34391 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34396 "isa_arm32.tcc"
> *DecodeOpSub_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34402 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34409 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34412 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34416 "isa_arm32.tcc"
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34420 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34424 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34427 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34431 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34434 "isa_arm32.tcc"
)
{
#line 512 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 34448 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34453 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34456 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34460 "isa_arm32.tcc"
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34464 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34468 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34471 "isa_arm32.tcc"
)
{
#line 591 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34493 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34504 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34511 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34521 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34526 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34529 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34536 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34546 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34551 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34554 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34561 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 34571 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34577 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34580 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34585 "isa_arm32.tcc"
> *DecodeOpSub_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34591 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34598 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34601 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34605 "isa_arm32.tcc"
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34609 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34613 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34616 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34620 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34623 "isa_arm32.tcc"
)
{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 34637 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34642 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34645 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34649 "isa_arm32.tcc"
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34653 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34657 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34660 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 34689 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34697 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34700 "isa_arm32.tcc"
>

void
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34707 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34717 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34723 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34726 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34731 "isa_arm32.tcc"
> *DecodeOpSubs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34737 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34747 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34751 "isa_arm32.tcc"
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34755 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34759 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34762 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34766 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34769 "isa_arm32.tcc"
)
{
#line 534 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 34783 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34788 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34791 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34795 "isa_arm32.tcc"
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34799 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34803 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34806 "isa_arm32.tcc"
)
{
#line 636 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 34836 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34844 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34847 "isa_arm32.tcc"
>

void
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34854 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34864 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34869 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34872 "isa_arm32.tcc"
>

void
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34879 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34889 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34895 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34898 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34903 "isa_arm32.tcc"
> *DecodeOpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34909 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34919 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34923 "isa_arm32.tcc"
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34927 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34931 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34934 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34938 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34941 "isa_arm32.tcc"
)
{
#line 545 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 34955 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34963 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34967 "isa_arm32.tcc"
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34971 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34975 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34978 "isa_arm32.tcc"
)
{
#line 663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 35009 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35020 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35027 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35037 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35042 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35045 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35052 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35062 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35067 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35070 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35077 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 35087 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35096 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35101 "isa_arm32.tcc"
> *DecodeOpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35107 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of sub instruction
*******************************************************************/
/*******************************************************************
* rsb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35120 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35123 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35127 "isa_arm32.tcc"
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35131 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35135 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35138 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35142 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35145 "isa_arm32.tcc"
)
{
#line 706 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 35159 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35164 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35167 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35171 "isa_arm32.tcc"
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35175 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35179 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35182 "isa_arm32.tcc"
)
{
#line 772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35202 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35213 "isa_arm32.tcc"
>

void
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35220 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35230 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35236 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35239 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35244 "isa_arm32.tcc"
> *DecodeOpRsb_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35250 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35257 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35260 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35264 "isa_arm32.tcc"
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35268 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35272 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35275 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35279 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35282 "isa_arm32.tcc"
)
{
#line 717 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 35296 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35304 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35308 "isa_arm32.tcc"
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35312 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35316 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35319 "isa_arm32.tcc"
)
{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35340 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35351 "isa_arm32.tcc"
>

void
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35358 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35368 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35373 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35376 "isa_arm32.tcc"
>

void
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35383 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35393 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35399 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35402 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35407 "isa_arm32.tcc"
> *DecodeOpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35413 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35423 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35427 "isa_arm32.tcc"
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35431 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35435 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35438 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35442 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35445 "isa_arm32.tcc"
)
{
#line 728 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 35459 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35467 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35471 "isa_arm32.tcc"
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35475 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35479 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35482 "isa_arm32.tcc"
)
{
#line 807 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35504 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35512 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35515 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35522 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35532 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35537 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35540 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35547 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35557 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35562 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35565 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35572 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 35582 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35588 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35591 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35596 "isa_arm32.tcc"
> *DecodeOpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35602 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35609 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35612 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35616 "isa_arm32.tcc"
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35620 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35624 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35627 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35631 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35634 "isa_arm32.tcc"
)
{
#line 739 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 35648 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35653 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35656 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35660 "isa_arm32.tcc"
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35664 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35668 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35671 "isa_arm32.tcc"
)
{
#line 826 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 35700 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35708 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35711 "isa_arm32.tcc"
>

void
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35718 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35728 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35734 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35737 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35742 "isa_arm32.tcc"
> *DecodeOpRsbs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35748 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35755 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35758 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35762 "isa_arm32.tcc"
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35766 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35770 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35773 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35777 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35780 "isa_arm32.tcc"
)
{
#line 750 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 35794 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35802 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35806 "isa_arm32.tcc"
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35810 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35814 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35817 "isa_arm32.tcc"
)
{
#line 852 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 35847 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35855 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35858 "isa_arm32.tcc"
>

void
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35865 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35875 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35880 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35883 "isa_arm32.tcc"
>

void
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35890 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35900 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35906 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35909 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35914 "isa_arm32.tcc"
> *DecodeOpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35920 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35930 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35934 "isa_arm32.tcc"
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35938 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35942 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35945 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35949 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35952 "isa_arm32.tcc"
)
{
#line 761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 35966 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35971 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35974 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35978 "isa_arm32.tcc"
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35982 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35986 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35989 "isa_arm32.tcc"
)
{
#line 879 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 36020 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36028 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36031 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36038 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36048 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36053 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36056 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36063 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36073 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36078 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36081 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36088 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 36098 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36107 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36112 "isa_arm32.tcc"
> *DecodeOpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36118 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of rsb instruction
*******************************************************************/
/*******************************************************************
* add instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36134 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36138 "isa_arm32.tcc"
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36142 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36146 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36149 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36153 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36156 "isa_arm32.tcc"
)
{
#line 922 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 36170 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36175 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36178 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36182 "isa_arm32.tcc"
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36186 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36190 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36193 "isa_arm32.tcc"
)
{
#line 988 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36213 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36221 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36224 "isa_arm32.tcc"
>

void
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36231 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36241 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36247 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36250 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36255 "isa_arm32.tcc"
> *DecodeOpAdd_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36261 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36268 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36271 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36275 "isa_arm32.tcc"
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36279 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36283 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36286 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36290 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36293 "isa_arm32.tcc"
)
{
#line 933 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 36307 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36315 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36319 "isa_arm32.tcc"
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36323 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36327 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36330 "isa_arm32.tcc"
)
{
#line 1005 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36351 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36362 "isa_arm32.tcc"
>

void
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36369 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36379 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36387 "isa_arm32.tcc"
>

void
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36394 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36404 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36413 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36418 "isa_arm32.tcc"
> *DecodeOpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36424 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36431 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36434 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36438 "isa_arm32.tcc"
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36442 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36446 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36449 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36453 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36456 "isa_arm32.tcc"
)
{
#line 944 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 36470 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36475 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36478 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36482 "isa_arm32.tcc"
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36486 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36490 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36493 "isa_arm32.tcc"
)
{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36515 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36523 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36526 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36533 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36543 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36548 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36551 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36558 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36568 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36573 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36576 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36583 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 36593 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36599 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36602 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36607 "isa_arm32.tcc"
> *DecodeOpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36613 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36620 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36623 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36627 "isa_arm32.tcc"
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36631 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36635 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36638 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36642 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36645 "isa_arm32.tcc"
)
{
#line 955 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 36659 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36667 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36671 "isa_arm32.tcc"
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36675 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36679 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36682 "isa_arm32.tcc"
)
{
#line 1042 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		Add32(res, carry_out, overflow_out,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 36714 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36725 "isa_arm32.tcc"
>

void
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36732 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36742 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36751 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36756 "isa_arm32.tcc"
> *DecodeOpAdds_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36762 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36772 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36776 "isa_arm32.tcc"
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36780 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36784 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36787 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36791 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36794 "isa_arm32.tcc"
)
{
#line 966 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 36808 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36813 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36816 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36820 "isa_arm32.tcc"
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36824 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36828 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36831 "isa_arm32.tcc"
)
{
#line 1071 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		Add32(res, carry_out, overflow_out,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 36864 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36872 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36875 "isa_arm32.tcc"
>

void
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36882 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36892 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36897 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36900 "isa_arm32.tcc"
>

void
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36907 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36917 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36923 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36926 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36931 "isa_arm32.tcc"
> *DecodeOpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36937 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36947 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36951 "isa_arm32.tcc"
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36955 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36959 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36962 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36966 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36969 "isa_arm32.tcc"
)
{
#line 977 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 36983 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36991 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36995 "isa_arm32.tcc"
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36999 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37003 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37006 "isa_arm32.tcc"
)
{
#line 1101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		Add32(res, carry_out, overflow_out,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37040 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37051 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37058 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37068 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37073 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37076 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37083 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37093 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37101 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37108 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 37118 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37127 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37132 "isa_arm32.tcc"
> *DecodeOpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37138 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of add instruction
*******************************************************************/
/*******************************************************************
* adc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37154 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37158 "isa_arm32.tcc"
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37162 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37166 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37169 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37173 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37176 "isa_arm32.tcc"
)
{
#line 1147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 37190 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37195 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37198 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37202 "isa_arm32.tcc"
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37206 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37210 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37213 "isa_arm32.tcc"
)
{
#line 1213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37235 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37243 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37246 "isa_arm32.tcc"
>

void
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37253 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37263 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37269 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37272 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37277 "isa_arm32.tcc"
> *DecodeOpAdc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37283 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37290 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37293 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37297 "isa_arm32.tcc"
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37301 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37305 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37308 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37312 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37315 "isa_arm32.tcc"
)
{
#line 1158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 37329 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37337 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37341 "isa_arm32.tcc"
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37345 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37349 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37352 "isa_arm32.tcc"
)
{
#line 1232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37375 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37386 "isa_arm32.tcc"
>

void
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37393 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37403 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37408 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37411 "isa_arm32.tcc"
>

void
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37418 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37428 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37437 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37442 "isa_arm32.tcc"
> *DecodeOpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37448 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37455 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37458 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37462 "isa_arm32.tcc"
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37466 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37470 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37473 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37477 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37480 "isa_arm32.tcc"
)
{
#line 1169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 37494 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37502 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37506 "isa_arm32.tcc"
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37510 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37514 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37517 "isa_arm32.tcc"
)
{
#line 1252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37541 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37549 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37552 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37559 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37569 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37577 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37584 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37594 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37599 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37602 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37609 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 37619 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37625 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37628 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37633 "isa_arm32.tcc"
> *DecodeOpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37639 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37646 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37649 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37653 "isa_arm32.tcc"
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37657 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37661 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37664 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37668 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37671 "isa_arm32.tcc"
)
{
#line 1180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 37685 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37693 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37697 "isa_arm32.tcc"
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37701 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37705 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37708 "isa_arm32.tcc"
)
{
#line 1273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37742 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37750 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37753 "isa_arm32.tcc"
>

void
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37760 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37770 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37779 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37784 "isa_arm32.tcc"
> *DecodeOpAdcs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37790 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37797 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37800 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37804 "isa_arm32.tcc"
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37808 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37812 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37815 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37819 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37822 "isa_arm32.tcc"
)
{
#line 1191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 37836 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37841 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37844 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37848 "isa_arm32.tcc"
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37852 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37856 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37859 "isa_arm32.tcc"
)
{
#line 1304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37894 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37905 "isa_arm32.tcc"
>

void
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37912 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37922 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37930 "isa_arm32.tcc"
>

void
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37937 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37947 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37956 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37961 "isa_arm32.tcc"
> *DecodeOpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37967 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37977 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37981 "isa_arm32.tcc"
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37985 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37989 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37992 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37996 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37999 "isa_arm32.tcc"
)
{
#line 1202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 38013 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38018 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38021 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38025 "isa_arm32.tcc"
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38029 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38033 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38036 "isa_arm32.tcc"
)
{
#line 1336 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 38072 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38080 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38083 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38090 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38100 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38105 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38108 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38115 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38125 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38130 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38133 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38140 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 38150 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38159 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38164 "isa_arm32.tcc"
> *DecodeOpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38170 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of adc instruction
*******************************************************************/
/*******************************************************************
* sbc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38186 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38190 "isa_arm32.tcc"
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38194 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38198 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38201 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38205 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38208 "isa_arm32.tcc"
)
{
#line 1384 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 38222 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38227 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38230 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38234 "isa_arm32.tcc"
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38238 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38242 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38245 "isa_arm32.tcc"
)
{
#line 1450 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38267 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38275 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38278 "isa_arm32.tcc"
>

void
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38285 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38295 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38304 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38309 "isa_arm32.tcc"
> *DecodeOpSbc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38315 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38325 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38329 "isa_arm32.tcc"
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38333 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38337 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38340 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38344 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38347 "isa_arm32.tcc"
)
{
#line 1395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 38361 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38366 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38369 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38373 "isa_arm32.tcc"
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38377 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38381 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38384 "isa_arm32.tcc"
)
{
#line 1469 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38407 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38418 "isa_arm32.tcc"
>

void
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38425 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38435 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38443 "isa_arm32.tcc"
>

void
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38450 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38460 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38466 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38469 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38474 "isa_arm32.tcc"
> *DecodeOpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38480 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38490 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38494 "isa_arm32.tcc"
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38498 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38502 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38505 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38509 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38512 "isa_arm32.tcc"
)
{
#line 1406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 38526 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38534 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38538 "isa_arm32.tcc"
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38542 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38546 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38549 "isa_arm32.tcc"
)
{
#line 1489 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38573 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38584 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38591 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38601 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38606 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38609 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38616 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38626 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38634 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38641 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 38651 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38657 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38660 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38665 "isa_arm32.tcc"
> *DecodeOpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38671 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38678 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38681 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38685 "isa_arm32.tcc"
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38689 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38693 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38696 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38700 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38703 "isa_arm32.tcc"
)
{
#line 1417 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 38717 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38725 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38729 "isa_arm32.tcc"
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38733 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38737 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38740 "isa_arm32.tcc"
)
{
#line 1510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 38771 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38782 "isa_arm32.tcc"
>

void
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38789 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38799 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38808 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38813 "isa_arm32.tcc"
> *DecodeOpSbcs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38819 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38829 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38833 "isa_arm32.tcc"
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38837 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38841 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38844 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38848 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38851 "isa_arm32.tcc"
)
{
#line 1428 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 38865 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38870 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38873 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38877 "isa_arm32.tcc"
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38881 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38885 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38888 "isa_arm32.tcc"
)
{
#line 1538 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 38920 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38928 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38931 "isa_arm32.tcc"
>

void
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38938 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38948 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38956 "isa_arm32.tcc"
>

void
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38963 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38973 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38979 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38982 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38987 "isa_arm32.tcc"
> *DecodeOpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38993 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39003 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39007 "isa_arm32.tcc"
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39011 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39015 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39018 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39022 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39025 "isa_arm32.tcc"
)
{
#line 1439 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 39039 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39047 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39051 "isa_arm32.tcc"
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39055 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39059 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39062 "isa_arm32.tcc"
)
{
#line 1567 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 39095 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39103 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39106 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39113 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39123 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39131 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39138 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39148 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39156 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39163 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 39173 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39182 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39187 "isa_arm32.tcc"
> *DecodeOpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39193 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of sbc instruction
*******************************************************************/
/*******************************************************************
* rsc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39209 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39213 "isa_arm32.tcc"
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39217 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39221 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39224 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39228 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39231 "isa_arm32.tcc"
)
{
#line 1612 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 39245 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39250 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39253 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39257 "isa_arm32.tcc"
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39261 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39265 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39268 "isa_arm32.tcc"
)
{
#line 1678 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39290 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39301 "isa_arm32.tcc"
>

void
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39308 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39318 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39327 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39332 "isa_arm32.tcc"
> *DecodeOpRsc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39338 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39345 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39348 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39352 "isa_arm32.tcc"
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39356 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39360 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39363 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39367 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39370 "isa_arm32.tcc"
)
{
#line 1623 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 39384 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39392 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39396 "isa_arm32.tcc"
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39400 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39404 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39407 "isa_arm32.tcc"
)
{
#line 1697 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39430 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39441 "isa_arm32.tcc"
>

void
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39448 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39458 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39466 "isa_arm32.tcc"
>

void
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39473 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39483 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39492 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39497 "isa_arm32.tcc"
> *DecodeOpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39503 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39510 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39513 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39517 "isa_arm32.tcc"
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39521 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39525 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39528 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39532 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39535 "isa_arm32.tcc"
)
{
#line 1634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 39549 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39554 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39557 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39561 "isa_arm32.tcc"
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39565 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39569 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39572 "isa_arm32.tcc"
)
{
#line 1717 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39596 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39607 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39614 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39624 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39629 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39632 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39639 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39649 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39654 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39657 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39664 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 39674 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39680 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39683 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39688 "isa_arm32.tcc"
> *DecodeOpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39694 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39701 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39704 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39708 "isa_arm32.tcc"
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39712 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39716 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39719 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39723 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39726 "isa_arm32.tcc"
)
{
#line 1645 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 39740 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39745 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39748 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39752 "isa_arm32.tcc"
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39756 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39760 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39763 "isa_arm32.tcc"
)
{
#line 1738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 39794 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39802 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39805 "isa_arm32.tcc"
>

void
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39812 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39822 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39831 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39836 "isa_arm32.tcc"
> *DecodeOpRscs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39842 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39852 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39856 "isa_arm32.tcc"
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39860 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39864 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39867 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39871 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39874 "isa_arm32.tcc"
)
{
#line 1656 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 39888 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39893 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39896 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39900 "isa_arm32.tcc"
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39904 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39908 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39911 "isa_arm32.tcc"
)
{
#line 1766 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 39943 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39951 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39954 "isa_arm32.tcc"
>

void
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39961 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39971 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39976 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39979 "isa_arm32.tcc"
>

void
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39986 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39996 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40005 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40010 "isa_arm32.tcc"
> *DecodeOpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40016 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40026 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40030 "isa_arm32.tcc"
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40034 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40038 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40041 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40045 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40048 "isa_arm32.tcc"
)
{
#line 1667 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 40062 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40067 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40070 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40074 "isa_arm32.tcc"
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40078 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40082 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40085 "isa_arm32.tcc"
)
{
#line 1795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 40118 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40126 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40129 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40136 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40146 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40154 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40161 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40171 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40176 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40179 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40186 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 40196 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40202 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40205 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40210 "isa_arm32.tcc"
> *DecodeOpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40216 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of rsc instruction
*******************************************************************/
/*******************************************************************
* tst instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40229 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40232 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40236 "isa_arm32.tcc"
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40240 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40244 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40247 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40251 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40254 "isa_arm32.tcc"
)
{
#line 1837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 40266 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40271 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40274 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40278 "isa_arm32.tcc"
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40282 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40286 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40289 "isa_arm32.tcc"
)
{
#line 1864 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40314 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40325 "isa_arm32.tcc"
>

void
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40332 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40342 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40351 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40356 "isa_arm32.tcc"
> *DecodeOpTst_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40362 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40369 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40372 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40376 "isa_arm32.tcc"
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40380 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40384 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40387 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40391 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40394 "isa_arm32.tcc"
)
{
#line 1846 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 40406 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40414 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40418 "isa_arm32.tcc"
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40422 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40426 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40429 "isa_arm32.tcc"
)
{
#line 1886 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40455 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40466 "isa_arm32.tcc"
>

void
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40473 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40483 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40491 "isa_arm32.tcc"
>

void
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40498 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40508 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40514 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40517 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40522 "isa_arm32.tcc"
> *DecodeOpTst_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40528 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40538 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40542 "isa_arm32.tcc"
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40546 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40550 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40553 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40557 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40560 "isa_arm32.tcc"
)
{
#line 1855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 40572 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40577 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40580 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40584 "isa_arm32.tcc"
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40588 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40592 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40595 "isa_arm32.tcc"
)
{
#line 1909 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40622 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40630 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40633 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40640 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40650 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40658 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40665 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40675 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40680 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40683 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40690 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 40700 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40706 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40709 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40714 "isa_arm32.tcc"
> *DecodeOpTst_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40720 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of tst instruction
*******************************************************************/
/*******************************************************************
* teq instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40733 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40736 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40740 "isa_arm32.tcc"
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40744 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40748 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40751 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40755 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40758 "isa_arm32.tcc"
)
{
#line 1945 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 40770 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40775 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40778 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40782 "isa_arm32.tcc"
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40786 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40790 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40793 "isa_arm32.tcc"
)
{
#line 1972 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40818 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40829 "isa_arm32.tcc"
>

void
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40836 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40846 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40855 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40860 "isa_arm32.tcc"
> *DecodeOpTeq_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40866 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40876 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40880 "isa_arm32.tcc"
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40884 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40888 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40891 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40895 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40898 "isa_arm32.tcc"
)
{
#line 1954 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 40910 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40915 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40918 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40922 "isa_arm32.tcc"
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40926 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40930 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40933 "isa_arm32.tcc"
)
{
#line 1994 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40959 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40970 "isa_arm32.tcc"
>

void
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40977 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40987 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40995 "isa_arm32.tcc"
>

void
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41002 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41012 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41018 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41021 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41026 "isa_arm32.tcc"
> *DecodeOpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41032 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41042 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41046 "isa_arm32.tcc"
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41050 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41054 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41057 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41061 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41064 "isa_arm32.tcc"
)
{
#line 1963 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 41076 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41084 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41088 "isa_arm32.tcc"
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41092 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41096 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41099 "isa_arm32.tcc"
)
{
#line 2017 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 41126 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41137 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41144 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41154 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41162 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41169 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41179 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41187 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41194 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 41204 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41213 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41218 "isa_arm32.tcc"
> *DecodeOpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41224 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of teq instruction
*******************************************************************/
/*******************************************************************
* cmp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41237 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41240 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41244 "isa_arm32.tcc"
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41248 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41252 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41255 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41259 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41262 "isa_arm32.tcc"
)
{
#line 2053 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 41274 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41282 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41286 "isa_arm32.tcc"
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41290 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41294 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41297 "isa_arm32.tcc"
)
{
#line 2081 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41322 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41333 "isa_arm32.tcc"
>

void
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41340 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41350 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41359 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41364 "isa_arm32.tcc"
> *DecodeOpCmp_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41370 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41380 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41384 "isa_arm32.tcc"
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41388 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41392 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41395 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41399 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41402 "isa_arm32.tcc"
)
{
#line 2062 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 41414 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41422 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41426 "isa_arm32.tcc"
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41430 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41434 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41437 "isa_arm32.tcc"
)
{
#line 2103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N((res & 0x80000000) != 0);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41463 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41471 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41474 "isa_arm32.tcc"
>

void
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41481 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41491 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41499 "isa_arm32.tcc"
>

void
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41506 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41516 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41522 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41525 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41530 "isa_arm32.tcc"
> *DecodeOpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41536 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41546 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41550 "isa_arm32.tcc"
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41554 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41558 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41561 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41565 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41568 "isa_arm32.tcc"
)
{
#line 2072 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 41580 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41585 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41588 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41592 "isa_arm32.tcc"
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41596 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41600 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41603 "isa_arm32.tcc"
)
{
#line 2126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41630 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41641 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41648 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41658 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41666 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41673 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41691 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41698 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 41708 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41717 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41722 "isa_arm32.tcc"
> *DecodeOpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41728 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cmp instruction
*******************************************************************/
/*******************************************************************
* cmn instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41741 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41744 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41748 "isa_arm32.tcc"
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41752 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41756 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41759 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41763 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41766 "isa_arm32.tcc"
)
{
#line 2162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 41778 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41786 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41790 "isa_arm32.tcc"
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41794 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41798 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41801 "isa_arm32.tcc"
)
{
#line 2189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 41826 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41837 "isa_arm32.tcc"
>

void
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41844 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41854 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41860 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41863 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41868 "isa_arm32.tcc"
> *DecodeOpCmn_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41874 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41881 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41884 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41888 "isa_arm32.tcc"
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41892 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41896 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41899 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41903 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41906 "isa_arm32.tcc"
)
{
#line 2171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 41918 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41923 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41926 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41930 "isa_arm32.tcc"
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41934 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41938 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41941 "isa_arm32.tcc"
)
{
#line 2211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 41967 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41975 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41978 "isa_arm32.tcc"
>

void
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41985 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41995 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42003 "isa_arm32.tcc"
>

void
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42010 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42020 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42026 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42029 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42034 "isa_arm32.tcc"
> *DecodeOpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42040 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42047 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42050 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42054 "isa_arm32.tcc"
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42058 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42062 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42065 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42069 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42072 "isa_arm32.tcc"
)
{
#line 2180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 42084 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42089 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42092 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42096 "isa_arm32.tcc"
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42100 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42104 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42107 "isa_arm32.tcc"
)
{
#line 2234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 42134 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42142 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42145 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42152 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42162 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42170 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42177 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42187 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42195 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42202 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 42212 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42218 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42221 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42226 "isa_arm32.tcc"
> *DecodeOpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42232 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cmn instruction
*******************************************************************/
/*******************************************************************
* orr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42245 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42248 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42252 "isa_arm32.tcc"
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42256 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42260 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42263 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42267 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42270 "isa_arm32.tcc"
)
{
#line 2273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 42284 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42289 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42292 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42296 "isa_arm32.tcc"
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42300 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42304 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42307 "isa_arm32.tcc"
)
{
#line 2339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42327 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42338 "isa_arm32.tcc"
>

void
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42345 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42355 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42361 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42364 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42369 "isa_arm32.tcc"
> *DecodeOpOrr_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42375 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42382 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42385 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42389 "isa_arm32.tcc"
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42393 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42397 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42400 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42404 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42407 "isa_arm32.tcc"
)
{
#line 2284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 42421 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42426 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42429 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42433 "isa_arm32.tcc"
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42437 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42441 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42444 "isa_arm32.tcc"
)
{
#line 2356 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42465 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42473 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42476 "isa_arm32.tcc"
>

void
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42483 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42493 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42498 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42501 "isa_arm32.tcc"
>

void
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42508 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42518 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42527 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42532 "isa_arm32.tcc"
> *DecodeOpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42538 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42548 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42552 "isa_arm32.tcc"
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42556 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42560 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42563 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42567 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42570 "isa_arm32.tcc"
)
{
#line 2295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 42584 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42589 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42592 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42596 "isa_arm32.tcc"
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42600 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42604 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42607 "isa_arm32.tcc"
)
{
#line 2374 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42629 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42637 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42640 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42647 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42657 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42662 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42665 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42672 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42682 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42687 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42690 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42697 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 42707 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42713 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42716 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42721 "isa_arm32.tcc"
> *DecodeOpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42727 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42734 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42737 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42741 "isa_arm32.tcc"
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42745 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42749 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42752 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42756 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42759 "isa_arm32.tcc"
)
{
#line 2306 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 42773 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42781 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42785 "isa_arm32.tcc"
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42789 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42793 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42796 "isa_arm32.tcc"
)
{
#line 2393 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 42826 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42837 "isa_arm32.tcc"
>

void
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42844 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42854 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42860 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42863 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42868 "isa_arm32.tcc"
> *DecodeOpOrrs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42874 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42881 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42884 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42888 "isa_arm32.tcc"
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42892 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42896 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42899 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42903 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42906 "isa_arm32.tcc"
)
{
#line 2317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 42920 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42925 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42928 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42932 "isa_arm32.tcc"
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42936 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42940 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42943 "isa_arm32.tcc"
)
{
#line 2420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 42974 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42985 "isa_arm32.tcc"
>

void
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42992 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 43002 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43010 "isa_arm32.tcc"
>

void
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43017 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43027 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43033 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43036 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43041 "isa_arm32.tcc"
> *DecodeOpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43047 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43054 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43057 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43061 "isa_arm32.tcc"
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43065 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43069 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43072 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43076 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43079 "isa_arm32.tcc"
)
{
#line 2328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43093 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43101 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43105 "isa_arm32.tcc"
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43109 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43113 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43116 "isa_arm32.tcc"
)
{
#line 2448 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43148 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43159 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43166 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 43176 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43184 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43191 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43201 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43209 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43216 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 43226 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43232 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43235 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43240 "isa_arm32.tcc"
> *DecodeOpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43246 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of orr instruction
*******************************************************************/
/*******************************************************************
* mov instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43262 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43266 "isa_arm32.tcc"
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43270 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43274 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43277 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43281 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43284 "isa_arm32.tcc"
)
{
#line 2495 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 43296 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43304 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43308 "isa_arm32.tcc"
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43312 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43316 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43319 "isa_arm32.tcc"
)
{
#line 2549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43335 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43341 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43344 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43349 "isa_arm32.tcc"
> *DecodeOpMov_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43355 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43365 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43369 "isa_arm32.tcc"
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43373 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43377 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43380 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43384 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43387 "isa_arm32.tcc"
)
{
#line 2504 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 43399 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43407 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43411 "isa_arm32.tcc"
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43415 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43419 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43422 "isa_arm32.tcc"
)
{
#line 2562 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43441 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43446 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43449 "isa_arm32.tcc"
>

void
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43456 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43466 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43475 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43480 "isa_arm32.tcc"
> *DecodeOpMov_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43486 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43496 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43500 "isa_arm32.tcc"
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43504 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43508 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43511 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43515 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43518 "isa_arm32.tcc"
)
{
#line 2513 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43530 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43538 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43542 "isa_arm32.tcc"
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43546 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43550 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43553 "isa_arm32.tcc"
)
{
#line 2578 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43573 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43581 "isa_arm32.tcc"
>

void
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43588 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43598 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43606 "isa_arm32.tcc"
>

void
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43613 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 43623 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43629 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43632 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43637 "isa_arm32.tcc"
> *DecodeOpMov_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43643 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43650 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43653 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43657 "isa_arm32.tcc"
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43661 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43665 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43668 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43672 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43675 "isa_arm32.tcc"
)
{
#line 2522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 43687 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43695 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43699 "isa_arm32.tcc"
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43703 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43707 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43710 "isa_arm32.tcc"
)
{
#line 2595 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43736 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43745 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43750 "isa_arm32.tcc"
> *DecodeOpMovs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43756 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43763 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43766 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43770 "isa_arm32.tcc"
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43774 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43778 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43781 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43785 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43788 "isa_arm32.tcc"
)
{
#line 2531 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 43800 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43808 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43812 "isa_arm32.tcc"
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43816 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43820 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43823 "isa_arm32.tcc"
)
{
#line 2618 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43852 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43860 "isa_arm32.tcc"
>

void
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43867 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43877 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43886 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43891 "isa_arm32.tcc"
> *DecodeOpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43897 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43907 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43911 "isa_arm32.tcc"
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43915 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43919 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43922 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43926 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43929 "isa_arm32.tcc"
)
{
#line 2540 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43941 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43946 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43949 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43953 "isa_arm32.tcc"
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43957 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43961 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43964 "isa_arm32.tcc"
)
{
#line 2644 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43994 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44002 "isa_arm32.tcc"
>

void
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44009 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44019 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44027 "isa_arm32.tcc"
>

void
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44034 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 44044 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44053 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44058 "isa_arm32.tcc"
> *DecodeOpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44064 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mov instruction
*******************************************************************/
/*******************************************************************
* bic instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44080 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44084 "isa_arm32.tcc"
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44088 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44092 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44095 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44099 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44102 "isa_arm32.tcc"
)
{
#line 2686 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 44116 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44121 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44124 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44128 "isa_arm32.tcc"
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44132 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44136 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44139 "isa_arm32.tcc"
)
{
#line 2752 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44159 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44170 "isa_arm32.tcc"
>

void
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44177 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44187 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44196 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44201 "isa_arm32.tcc"
> *DecodeOpBic_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44207 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44214 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44217 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44221 "isa_arm32.tcc"
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44225 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44229 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44232 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44236 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44239 "isa_arm32.tcc"
)
{
#line 2697 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 44253 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44261 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44265 "isa_arm32.tcc"
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44269 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44273 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44276 "isa_arm32.tcc"
)
{
#line 2769 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44297 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44308 "isa_arm32.tcc"
>

void
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44315 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44325 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44333 "isa_arm32.tcc"
>

void
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44340 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44350 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44359 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44364 "isa_arm32.tcc"
> *DecodeOpBic_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44370 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44380 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44384 "isa_arm32.tcc"
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44388 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44392 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44395 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44399 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44402 "isa_arm32.tcc"
)
{
#line 2708 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 44416 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44421 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44424 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44428 "isa_arm32.tcc"
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44432 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44436 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44439 "isa_arm32.tcc"
)
{
#line 2787 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44461 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44469 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44472 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44479 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44489 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44494 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44497 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44504 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44514 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44519 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44522 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44529 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 44539 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44548 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44553 "isa_arm32.tcc"
> *DecodeOpBic_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44559 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44569 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44573 "isa_arm32.tcc"
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44577 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44581 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44584 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44588 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44591 "isa_arm32.tcc"
)
{
#line 2719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 44605 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44610 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44613 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44617 "isa_arm32.tcc"
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44621 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44625 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44628 "isa_arm32.tcc"
)
{
#line 2806 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44658 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44669 "isa_arm32.tcc"
>

void
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44676 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44686 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44695 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44700 "isa_arm32.tcc"
> *DecodeOpBics_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44706 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44713 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44716 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44720 "isa_arm32.tcc"
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44724 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44728 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44731 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44735 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44738 "isa_arm32.tcc"
)
{
#line 2730 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 44752 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44757 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44760 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44764 "isa_arm32.tcc"
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44768 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44772 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44775 "isa_arm32.tcc"
)
{
#line 2833 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44806 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44814 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44817 "isa_arm32.tcc"
>

void
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44824 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44834 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44842 "isa_arm32.tcc"
>

void
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44849 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44859 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44865 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44868 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44873 "isa_arm32.tcc"
> *DecodeOpBics_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44879 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44889 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44893 "isa_arm32.tcc"
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44897 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44901 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44904 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44908 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44911 "isa_arm32.tcc"
)
{
#line 2741 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 44925 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44930 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44933 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44937 "isa_arm32.tcc"
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44941 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44945 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44948 "isa_arm32.tcc"
)
{
#line 2861 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44980 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44991 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44998 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 45008 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45016 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45023 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45033 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45041 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45048 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45058 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45064 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45067 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45072 "isa_arm32.tcc"
> *DecodeOpBics_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45078 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bic instruction
*******************************************************************/
/*******************************************************************
* mvn instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45094 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45098 "isa_arm32.tcc"
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45102 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45106 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45109 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45113 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45116 "isa_arm32.tcc"
)
{
#line 2905 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 45128 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45136 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45140 "isa_arm32.tcc"
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45144 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45148 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45151 "isa_arm32.tcc"
)
{
#line 2959 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45167 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45173 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45176 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45181 "isa_arm32.tcc"
> *DecodeOpMvn_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45187 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45194 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45197 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45201 "isa_arm32.tcc"
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45205 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45209 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45212 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45216 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45219 "isa_arm32.tcc"
)
{
#line 2914 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 45231 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45236 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45239 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45243 "isa_arm32.tcc"
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45247 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45251 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45254 "isa_arm32.tcc"
)
{
#line 2972 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45273 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45278 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45281 "isa_arm32.tcc"
>

void
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45288 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45298 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45307 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45312 "isa_arm32.tcc"
> *DecodeOpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45318 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45328 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45332 "isa_arm32.tcc"
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45336 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45340 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45343 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45347 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45350 "isa_arm32.tcc"
)
{
#line 2923 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 45362 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45367 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45370 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45374 "isa_arm32.tcc"
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45378 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45382 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45385 "isa_arm32.tcc"
)
{
#line 2988 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45405 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45413 "isa_arm32.tcc"
>

void
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45420 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45430 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45438 "isa_arm32.tcc"
>

void
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45445 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45455 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45461 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45464 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45469 "isa_arm32.tcc"
> *DecodeOpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45475 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45482 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45485 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45489 "isa_arm32.tcc"
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45493 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45497 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45500 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45504 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45507 "isa_arm32.tcc"
)
{
#line 2932 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 45519 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45527 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45531 "isa_arm32.tcc"
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45535 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45539 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45542 "isa_arm32.tcc"
)
{
#line 3005 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45568 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45577 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45582 "isa_arm32.tcc"
> *DecodeOpMvns_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45588 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45598 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45602 "isa_arm32.tcc"
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45606 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45610 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45613 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45617 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45620 "isa_arm32.tcc"
)
{
#line 2941 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 45632 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45637 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45640 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45644 "isa_arm32.tcc"
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45648 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45652 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45655 "isa_arm32.tcc"
)
{
#line 3028 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45684 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45692 "isa_arm32.tcc"
>

void
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45699 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45709 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45718 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45723 "isa_arm32.tcc"
> *DecodeOpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45729 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45739 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45743 "isa_arm32.tcc"
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45747 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45751 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45754 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45758 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45761 "isa_arm32.tcc"
)
{
#line 2950 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 45773 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45781 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45785 "isa_arm32.tcc"
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45789 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45793 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45796 "isa_arm32.tcc"
)
{
#line 3054 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45826 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45834 "isa_arm32.tcc"
>

void
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45841 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45851 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45859 "isa_arm32.tcc"
>

void
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45866 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45876 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45882 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45885 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45890 "isa_arm32.tcc"
> *DecodeOpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45896 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

ARMV5E DATA PROCESSING INSTRUCTIONS

**********************************************/
/*******************************************************************
* qadd instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45947 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45951 "isa_arm32.tcc"
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45955 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45959 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45962 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45966 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45969 "isa_arm32.tcc"
)
{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qadd";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 45980 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45985 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45988 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45992 "isa_arm32.tcc"
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45996 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46000 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46003 "isa_arm32.tcc"
)
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat, cpu.GetGPR(rn) , cpu.GetGPR(rm));
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46024 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46033 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46038 "isa_arm32.tcc"
> *DecodeOpQadd(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46044 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qadd instruction
*******************************************************************/
/*******************************************************************
* qsub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46060 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46064 "isa_arm32.tcc"
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46068 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46072 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46075 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46079 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46082 "isa_arm32.tcc"
)
{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qsub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46093 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46101 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46105 "isa_arm32.tcc"
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46109 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46113 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46116 "isa_arm32.tcc"
)
{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , cpu.GetGPR(rn));
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46137 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46143 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46146 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46151 "isa_arm32.tcc"
> *DecodeOpQsub(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46157 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qsub instruction
*******************************************************************/
/*******************************************************************
* qdadd instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46173 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46177 "isa_arm32.tcc"
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46181 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46185 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46188 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46192 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46195 "isa_arm32.tcc"
)
{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qdadd";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46206 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46214 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46218 "isa_arm32.tcc"
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46222 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46226 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46229 "isa_arm32.tcc"
)
{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat, does_sat_tmp;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
		SignedSatAdd32(result, does_sat, cpu.GetGPR(rm) , result);
		cpu.SetCPSR_Q(does_sat == 1 || does_sat_tmp == 1? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46251 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46257 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46260 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46265 "isa_arm32.tcc"
> *DecodeOpQdadd(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQdadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46271 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qdadd instruction
*******************************************************************/
/*******************************************************************
* qdsub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46284 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46287 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46291 "isa_arm32.tcc"
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46295 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46299 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46302 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46306 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46309 "isa_arm32.tcc"
)
{
#line 168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qdsub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46320 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46328 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46332 "isa_arm32.tcc"
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46336 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46340 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46343 "isa_arm32.tcc"
)
{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat, does_sat_tmp;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
		SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , result);
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46365 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46374 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46379 "isa_arm32.tcc"
> *DecodeOpQdsub(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQdsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46385 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qdsub instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

MULTIPLY INSTRUCTIONS

**********************************************/
/* TODO: implement missing instructions:for E variants of version 5 and above
*  - smulxy
*  - smulwy
*  - smlaxy
*  - smlawy
*  - smlalxy
*/
/*******************************************************************
* mla instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46443 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46446 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46450 "isa_arm32.tcc"
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46454 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46458 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46461 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46465 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46468 "isa_arm32.tcc"
)
{
#line 55 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "mla";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "r" << rs << ", "
		<< "r" << rn << "";
	}
#line 46481 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46489 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46493 "isa_arm32.tcc"
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46497 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46501 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46504 "isa_arm32.tcc"
)
{
#line 65 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rm_value * rs_value;
		res += rn_value;
		cpu.SetGPR(rd, res);

		if(s) {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
		}
	}
#line 46529 "isa_arm32.tcc"
}
/*
* end of umull instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46537 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46540 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46547 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 46557 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46562 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46565 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46572 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46582 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46587 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46590 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46597 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46607 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46613 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46616 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46621 "isa_arm32.tcc"
> *DecodeOpMla(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMla<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46627 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mla instruction
*******************************************************************/
/*******************************************************************
* mul instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46640 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46643 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46647 "isa_arm32.tcc"
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46651 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46655 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46658 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46662 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46665 "isa_arm32.tcc"
)
{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "mul";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 46677 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46685 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46689 "isa_arm32.tcc"
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46693 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46697 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46700 "isa_arm32.tcc"
)
{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rm_value * rs_value;
		cpu.SetGPR(rd, res);

		if(s) {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
		}
	}
#line 46723 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46728 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46731 "isa_arm32.tcc"
>

void
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46738 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46748 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46753 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46756 "isa_arm32.tcc"
>

void
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46763 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46773 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46782 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46787 "isa_arm32.tcc"
> *DecodeOpMul(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMul<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46793 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mul instruction
*******************************************************************/
/*******************************************************************
* smlal instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46810 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46813 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46817 "isa_arm32.tcc"
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46821 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46825 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46828 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46832 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46835 "isa_arm32.tcc"
)
{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "smlal";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 46848 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46856 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46860 "isa_arm32.tcc"
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46864 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46868 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46871 "isa_arm32.tcc"
)
{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rdhi_value = inherited::rdhi_init + cpu.GetGPR(rdhi);
		typename CONFIG::reg_t rdlo_value = inherited::rdlo_init + cpu.GetGPR(rdlo);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rdlo_value + (((uint64_t)rdhi_value) << 32);
		res += ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 46901 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46906 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46909 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46916 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46926 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46931 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46934 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46941 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46951 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46956 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46959 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46966 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdhi == 15) inherited::rdhi_init = 8;
		else inherited::rdhi_init = 0;
	}
#line 46976 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46984 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46991 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 365 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdlo == 15) inherited::rdlo_init = 8;
		else inherited::rdlo_init = 0;
	}
#line 47001 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47010 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47015 "isa_arm32.tcc"
> *DecodeOpSmlal(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47021 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlal instruction
*******************************************************************/
/*******************************************************************
* smull instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47041 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47045 "isa_arm32.tcc"
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47049 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47053 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47056 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47060 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47063 "isa_arm32.tcc"
)
{
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "smull";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47076 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47084 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47088 "isa_arm32.tcc"
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47092 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47096 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47099 "isa_arm32.tcc"
)
{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = ((int64_t)(int32_t)rm_value) * ((int64_t)(int32_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47126 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47134 "isa_arm32.tcc"
>

void
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47141 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47151 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47159 "isa_arm32.tcc"
>

void
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47166 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47176 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47182 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47185 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47190 "isa_arm32.tcc"
> *DecodeOpSmull(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47196 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smull instruction
*******************************************************************/
/*******************************************************************
* umlal instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47216 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47220 "isa_arm32.tcc"
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47224 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47228 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47231 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47235 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47238 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "umlal";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47251 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47259 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47263 "isa_arm32.tcc"
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47267 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47271 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47274 "isa_arm32.tcc"
)
{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rdhi_value = inherited::rdhi_init + cpu.GetGPR(rdhi);
		typename CONFIG::reg_t rdlo_value = inherited::rdlo_init + cpu.GetGPR(rdlo);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rdlo_value + (((uint64_t)rdhi_value) << 32);
		res += ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47304 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47309 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47312 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47319 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47329 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47337 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47344 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47354 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47362 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47369 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdhi == 15) inherited::rdhi_init = 8;
		else inherited::rdhi_init = 0;
	}
#line 47379 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47387 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47394 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 365 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdlo == 15) inherited::rdlo_init = 8;
		else inherited::rdlo_init = 0;
	}
#line 47404 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47413 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47418 "isa_arm32.tcc"
> *DecodeOpUmlal(CodeType code, typename CONFIG::address_t addr)
{
	return new OpUmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47424 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of umlal instruction
*******************************************************************/
/*******************************************************************
* umull instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47444 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47448 "isa_arm32.tcc"
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47452 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47456 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47459 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47463 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47466 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "umull";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47479 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47487 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47491 "isa_arm32.tcc"
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47495 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47499 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47502 "isa_arm32.tcc"
)
{
#line 304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47529 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47537 "isa_arm32.tcc"
>

void
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47544 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47554 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47559 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47562 "isa_arm32.tcc"
>

void
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47569 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47579 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47585 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47588 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47593 "isa_arm32.tcc"
> *DecodeOpUmull(CodeType code, typename CONFIG::address_t addr)
{
	return new OpUmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47599 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

ARMV5E MULTIPLY INSTRUCTIONS

**********************************************/
/*****************************************************************************
* TODO:
* op smla()
* op smlal()
* op smlaw()
* op smul()
* op smulw()
*/
/*******************************************************************
* smlaxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47658 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47662 "isa_arm32.tcc"
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47666 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47670 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47673 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47677 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47680 "isa_arm32.tcc"
)
{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smla";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
		buffer << ", r" << rn;
	}
#line 47696 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47701 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47704 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47708 "isa_arm32.tcc"
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47712 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47716 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47719 "isa_arm32.tcc"
)
{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rn;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rn = cpu.GetGPR(rn);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rd = op1 + val_rn;
		if(op1 > 0 && (val_rd & (typename CONFIG::reg_t)0x80000000ULL) != 0) {
			cpu.SetCPSR_Q(true);
			} else {
			cpu.SetCPSR_Q(false);
		}
		cpu.SetGPR(rd, val_rd);
	}
#line 47773 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47782 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47787 "isa_arm32.tcc"
> *DecodeOpSmlaxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47793 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlaxy instruction
*******************************************************************/
/*******************************************************************
* smlalxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47809 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47813 "isa_arm32.tcc"
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47817 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47821 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47824 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47828 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47831 "isa_arm32.tcc"
)
{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smlal";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rdlo;
		buffer << ", r" << rdhi;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 47847 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47855 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47859 "isa_arm32.tcc"
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47863 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47867 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47870 "isa_arm32.tcc"
)
{
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rdhi;
		typename CONFIG::reg_t val_rdlo, val_rdlo_init;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rdhi == cpu.PC_reg || rdlo == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rdhi = cpu.GetGPR(rdhi);
		val_rdlo_init = cpu.GetGPR(rdlo);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rdlo = val_rdlo_init + op1;
		if(op1 < 0) rdhi = rdhi + (typename CONFIG::reg_t)0xffffffffULL;
		else {
			if(cpu.CarryFrom(val_rdlo, val_rdlo_init, (typename CONFIG::reg_t)op1))
			rdhi++;
		}
		cpu.SetGPR(rdlo, val_rdlo);
		cpu.SetGPR(rdhi, val_rdhi);
	}
#line 47926 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47935 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47940 "isa_arm32.tcc"
> *DecodeOpSmlalxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47946 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlalxy instruction
*******************************************************************/
/*******************************************************************
* smlawy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47959 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47962 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47966 "isa_arm32.tcc"
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47970 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47974 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47977 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47981 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47984 "isa_arm32.tcc"
)
{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smlaw";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
		buffer << ", r" << rn;
	}
#line 47998 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48006 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48010 "isa_arm32.tcc"
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48014 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48018 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48021 "isa_arm32.tcc"
)
{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rn;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rn = cpu.GetGPR(rn);

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op = (typename CONFIG::sreg_t)val_rs;
		}

		int64_t op64;
		op64 = (typename CONFIG::sreg_t)val_rm;
		op64 = op64 * op;
		op64 = op64 >> 16;
		op64 = op64 & (uint64_t)0xffffffffULL;
		typename CONFIG::sreg_t sval_rd;
		typename CONFIG::reg_t op_tmp = op64;
		sval_rd = (typename CONFIG::sreg_t)op_tmp;
		val_rd = (typename CONFIG::reg_t)(sval_rd + (typename CONFIG::sreg_t)val_rn);
		if(op_tmp & (typename CONFIG::reg_t)0x80000000ULL !=
		val_rn & (typename CONFIG::reg_t)0x80000000ULL) {
			cpu.SetCPSR_Q(false);
			} else {
			if(op_tmp & (typename CONFIG::reg_t)0x80000000ULL !=
			val_rd & (typename CONFIG::reg_t)0x80000000ULL) {
				cpu.SetCPSR_Q(true);
			} else
			cpu.SetCPSR_Q(false);
		}
		cpu.SetGPR(rd, val_rd);

	}
#line 48077 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48083 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48086 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48091 "isa_arm32.tcc"
> *DecodeOpSmlawy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48097 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlawy instruction
*******************************************************************/
/*******************************************************************
* smulxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48110 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48113 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48117 "isa_arm32.tcc"
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48121 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48125 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48128 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48132 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48135 "isa_arm32.tcc"
)
{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smul";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 48150 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48155 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48158 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48162 "isa_arm32.tcc"
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48166 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48170 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48173 "isa_arm32.tcc"
)
{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rd = (typename CONFIG::reg_t)op1;
		cpu.SetGPR(rd, val_rd);
	}
#line 48220 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48226 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48229 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48234 "isa_arm32.tcc"
> *DecodeOpSmulxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48240 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smulxy instruction
*******************************************************************/
/*******************************************************************
* smulwy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48253 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48256 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48260 "isa_arm32.tcc"
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48264 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48268 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48271 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48275 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48278 "isa_arm32.tcc"
)
{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smulw";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 48291 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48296 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48299 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48303 "isa_arm32.tcc"
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48307 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48311 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48314 "isa_arm32.tcc"
)
{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = (typename CONFIG::sreg_t)val_rm;
		int64_t op64 = (int64_t)op1 * (int64_t)op2;
		val_rd = (typename CONFIG::reg_t)((uint64_t)(op64 >> 16) & (uint64_t)0xffffffffULL);
		cpu.SetGPR(rd, val_rd);
	}
#line 48352 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48358 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48361 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48366 "isa_arm32.tcc"
> *DecodeOpSmulwy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48372 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smulwy instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

STATUS REGISTER ACCESS INSTRUCTIONS

**********************************************/
/*******************************************************************
* mrs instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48423 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48426 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48430 "isa_arm32.tcc"
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48434 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48438 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48441 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48445 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48448 "isa_arm32.tcc"
)
{
#line 46 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "mrs";
		cpu.DisasmCondition(cond, buffer);
		buffer << "r" << rd << ", ";
		if(r) buffer << "spsr";
		else buffer << "cpsr";
	}
#line 48459 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48467 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48471 "isa_arm32.tcc"
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48475 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48479 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48482 "isa_arm32.tcc"
)
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		/* if rd is the pc register the behavior is unpredictable,
		*   we just return */
		if(rd == cpu.PC_reg) {
			return;
		}

		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning("
				<< __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str() << endl;

#else // SOCLIB

				if(cpu.logger_import) {
					(*cpu.logger_import) << DebugWarning
					<< Function << __FUNCTION__
					<< File << __FILE__
					<< Line << __LINE__
					<< "trying to access SPSR while running in "
					<< ((run_mode == cpu.USER_MODE)?"user":"system")
					<< " mode with the following instruction: "
					<< Endl;
					(*cpu.logger_import) << str.str() << Endl << EndDebugWarning;
				}

#endif // SOCLIB

				return;
			}
			cpu.SetGPR(rd, cpu.GetSPSR());
			} else {
			cpu.SetGPR(rd, cpu.GetCPSR());
		}
	}
#line 48541 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48547 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48550 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48555 "isa_arm32.tcc"
> *DecodeOpMrs(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrs<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48561 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrs instruction
*******************************************************************/
/*******************************************************************
* msr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48577 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48581 "isa_arm32.tcc"
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48585 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48589 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48592 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48596 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48599 "isa_arm32.tcc"
)
{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "msr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " ";
		if(r) buffer << "spsr_";
		else buffer << "cpsr_";
		cpu.DisasmConditionFieldsMask(mask, buffer);
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 48613 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48621 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48625 "isa_arm32.tcc"
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48629 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48633 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48636 "isa_arm32.tcc"
)
{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		uint32_t operand;
		typename CONFIG::reg_t reg;
		typename CONFIG::reg_t reg_mask;
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		operand = cpu.ShiftOperand32imm(rotate_imm,
		imm);
		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				if(cpu.logger_import) {
					(*cpu.logger_import) << DebugWarning
					<< Function << __FUNCTION__
					<< File << __FILE__
					<< Line << __LINE__
					<< "trying to access SPSR while running in "
					<< ((run_mode == cpu.USER_MODE)?"user":"system")
					<< " mode with the following instruction: "
					<< Endl;
					(*cpu.logger_import) << str.str()
					<< Endl << EndDebugWarning;
				}

#endif // SOCLIB

				return;
			}
			reg = cpu.GetSPSR();
			} else {
			/* check current running mode, if in user mode then the behaviour is
			*   unpredictable, so we will do a return */
			if(mask != 0x08 && run_mode == cpu.USER_MODE) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << Endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				if(cpu.logger_import) {
					(*cpu.logger_import) << DebugWarning
					<< Function << __FUNCTION__
					<< File << __FILE__
					<< Line << __LINE__
					<< "Warning: trying to execute msr instruction  while running in "
					<< "user"
					<< " mode: " << Endl;
					(*cpu.logger_import) << str.str()
					<< Endl << EndDebugWarning;
				}

#endif // SOCLIB

				return;
			}
			reg = cpu.GetCPSR();
		}

		/* creating the register mask */
		reg_mask = 0;
		if((mask & 0x01) == 0x01) reg_mask = reg_mask | 0xFF;
		if((mask & 0x02) == 0x02) reg_mask = reg_mask | 0xFF00;
		if((mask & 0x04) == 0x04) reg_mask = reg_mask | 0xFF0000;
		if((mask & 0x08) == 0x08) reg_mask = reg_mask | 0xFF000000;

		/* updating the register */
		reg = (reg & ~reg_mask) | (operand & reg_mask);

		if(r) cpu.SetSPSR(reg);
		else {
			cpu.SetCPSR(reg);
			/* check if there has been any change in the running mode,
			*   and switch registers if so */
			typename CONFIG::reg_t new_run_mode = reg & cpu.RUNNING_MODE_MASK;
			if(run_mode != new_run_mode) {
				cpu.SetGPRMapping(run_mode, new_run_mode);
			}
		}
	}
#line 48753 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48762 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48767 "isa_arm32.tcc"
> *DecodeOpMsr_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48773 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48783 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48787 "isa_arm32.tcc"
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48791 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48795 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48798 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48802 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48805 "isa_arm32.tcc"
)
{
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "msr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " ";
		if(r) buffer << "spsr_";
		else buffer << "cpsr_";
		cpu.DisasmConditionFieldsMask(mask, buffer);
		buffer << ", r" << rm;
	}
#line 48818 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48823 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48826 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48830 "isa_arm32.tcc"
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48834 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48838 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48841 "isa_arm32.tcc"
)
{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint32_t operand;
		typename CONFIG::reg_t reg;
		typename CONFIG::reg_t reg_mask;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		operand = rm_value;
		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				if(cpu.logger_import) {
					(*cpu.logger_import) << DebugWarning
					<< Function << __FUNCTION__
					<< File << __FILE__
					<< Line << __LINE__
					<< "Warning: trying to access SPSR while running in "
					<< ((run_mode == cpu.USER_MODE)?"user":"system")
					<< " mode with the following instruction: "
					<< Endl;
					(*cpu.logger_import) << str.str()
					<< Endl << EndDebugWarning;
				}

#endif // SOCLIB

				return;
			}
			reg = cpu.GetSPSR();
			} else {
			/* check current running mode, if in user mode then the behaviour is
			* 	 unpredictable, so we will do a return */
			if(mask != 0x08 && run_mode == cpu.USER_MODE) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				if(cpu.logger_import) {
					(*cpu.logger_import) << DebugWarning
					<< Function << __FUNCTION__
					<< File << __FILE__
					<< Line << __LINE__
					<< "Warning: trying to execute msr instruction  while running in "
					<< "user"
					<< " mode: " << Endl;
					(*cpu.logger_import) << str.str()
					<< Endl << EndDebugWarning;
				}

#endif // SOCLIB

				return;
			}
			reg = cpu.GetCPSR();
		}

		/* creating the register mask */
		reg_mask = 0;
		if((mask & 0x01) == 0x01) reg_mask = reg_mask | 0xFF;
		if((mask & 0x02) == 0x02) reg_mask = reg_mask | 0xFF00;
		if((mask & 0x04) == 0x04) reg_mask = reg_mask | 0xFF0000;
		if((mask & 0x08) == 0x08) reg_mask = reg_mask | 0xFF000000;

		/* updating the register */
		reg = (reg & ~reg_mask) | (operand & reg_mask);

		if(r) cpu.SetSPSR(reg);
		else {
			cpu.SetCPSR(reg);
			/* check if there has been any change in the running mode,
			*   and switch registers if so */
			typename CONFIG::reg_t new_run_mode = reg & cpu.RUNNING_MODE_MASK;
			if(run_mode != new_run_mode) {
				cpu.SetGPRMapping(run_mode, new_run_mode);
			}
		}
	}
#line 48960 "isa_arm32.tcc"
}
/*
* end of msr instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48971 "isa_arm32.tcc"
>

void
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48978 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 378 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 48988 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48997 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49002 "isa_arm32.tcc"
> *DecodeOpMsr_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49008 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49094 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49097 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49101 "isa_arm32.tcc"
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49105 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49109 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49112 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49116 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49119 "isa_arm32.tcc"
)
{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 49130 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49135 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49138 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49142 "isa_arm32.tcc"
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49146 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49150 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49153 "isa_arm32.tcc"
)
{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t new_rn_value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		new_rn_value = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.SetGPR(rn, new_rn_value); // update rn

		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49178 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49186 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49189 "isa_arm32.tcc"
>

void
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49196 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49206 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49215 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49220 "isa_arm32.tcc"
> *DecodeOpLdr_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49226 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49233 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49236 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49240 "isa_arm32.tcc"
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49244 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49248 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49251 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49255 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49258 "isa_arm32.tcc"
)
{
#line 67 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 49269 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49274 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49277 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49281 "isa_arm32.tcc"
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49285 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49289 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49292 "isa_arm32.tcc"
)
{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49313 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49321 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49324 "isa_arm32.tcc"
>

void
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49331 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49341 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49350 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49355 "isa_arm32.tcc"
> *DecodeOpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49361 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49371 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49375 "isa_arm32.tcc"
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49379 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49383 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49386 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49390 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49393 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 49404 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49409 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49412 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49416 "isa_arm32.tcc"
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49420 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49424 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49427 "isa_arm32.tcc"
)
{
#line 144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49449 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49457 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49460 "isa_arm32.tcc"
>

void
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49467 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49477 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49486 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49491 "isa_arm32.tcc"
> *DecodeOpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49497 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49507 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49511 "isa_arm32.tcc"
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49515 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49519 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49522 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49526 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49529 "isa_arm32.tcc"
)
{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49539 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49547 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49551 "isa_arm32.tcc"
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49555 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49559 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49562 "isa_arm32.tcc"
)
{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49586 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49594 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49597 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49604 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49614 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49622 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49629 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49639 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49647 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49654 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 49664 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49673 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49678 "isa_arm32.tcc"
> *DecodeOpLdr_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49684 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49691 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49694 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49698 "isa_arm32.tcc"
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49702 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49706 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49709 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49713 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49716 "isa_arm32.tcc"
)
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49726 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49734 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49738 "isa_arm32.tcc"
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49742 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49746 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49749 "isa_arm32.tcc"
)
{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49772 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49783 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49790 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49800 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49808 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49815 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49825 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49830 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49833 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49840 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 49850 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49859 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49864 "isa_arm32.tcc"
> *DecodeOpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49870 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49880 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49884 "isa_arm32.tcc"
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49888 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49892 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49895 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49899 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49902 "isa_arm32.tcc"
)
{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49912 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49917 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49920 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49924 "isa_arm32.tcc"
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49928 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49932 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49935 "isa_arm32.tcc"
)
{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49959 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49970 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49977 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49987 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49995 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50002 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50012 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50020 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50027 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50037 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50043 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50046 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50051 "isa_arm32.tcc"
> *DecodeOpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50057 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldr instruction
*******************************************************************/
/*******************************************************************
* ldrb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50070 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50073 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50077 "isa_arm32.tcc"
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50081 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50085 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50088 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50092 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50095 "isa_arm32.tcc"
)
{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 50106 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50111 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50114 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50118 "isa_arm32.tcc"
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50122 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50126 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50129 "isa_arm32.tcc"
)
{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		cpu.Read8toGPR(address, rd);
	}
#line 50147 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50155 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50158 "isa_arm32.tcc"
>

void
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50165 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50175 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50184 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50189 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50195 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50202 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50205 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50209 "isa_arm32.tcc"
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50213 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50217 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50220 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50224 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50227 "isa_arm32.tcc"
)
{
#line 248 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 50238 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50243 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50246 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50250 "isa_arm32.tcc"
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50254 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50258 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50261 "isa_arm32.tcc"
)
{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.Read8toGPR(address, rd);
	}
#line 50278 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50289 "isa_arm32.tcc"
>

void
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50296 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50306 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50315 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50320 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50326 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50333 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50336 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50340 "isa_arm32.tcc"
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50344 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50348 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50351 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50355 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50358 "isa_arm32.tcc"
)
{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 50369 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50374 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50377 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50381 "isa_arm32.tcc"
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50385 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50389 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50392 "isa_arm32.tcc"
)
{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read8toGPR(address, rd);
	}
#line 50410 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50418 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50421 "isa_arm32.tcc"
>

void
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50428 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50438 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50444 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50447 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50452 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50458 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50465 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50468 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50472 "isa_arm32.tcc"
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50476 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50480 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50483 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50487 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50490 "isa_arm32.tcc"
)
{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50500 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50505 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50508 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50512 "isa_arm32.tcc"
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50516 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50520 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50523 "isa_arm32.tcc"
)
{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		cpu.Read8toGPR(address, rd);
	}
#line 50543 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50551 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50554 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50561 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50571 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50576 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50579 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50586 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50596 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50601 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50604 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50611 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50621 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50630 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50635 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50641 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50651 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50655 "isa_arm32.tcc"
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50659 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50663 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50666 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50670 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50673 "isa_arm32.tcc"
)
{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50691 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50695 "isa_arm32.tcc"
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50699 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50703 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50706 "isa_arm32.tcc"
)
{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.Read8toGPR(address, rd);
	}
#line 50725 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50733 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50736 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50743 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50753 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50758 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50761 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50768 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50778 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50786 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50793 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50803 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50809 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50812 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50817 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50823 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50830 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50833 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50837 "isa_arm32.tcc"
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50841 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50845 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50848 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50852 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50855 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50865 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50870 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50873 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50877 "isa_arm32.tcc"
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50881 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50885 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50888 "isa_arm32.tcc"
)
{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		cpu.Read8toGPR(address, rd);
	}
#line 50908 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50919 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50926 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50936 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50944 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50951 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50961 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50966 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50969 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50976 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50986 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50995 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51000 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51006 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrb instruction
*******************************************************************/
/*******************************************************************
* ldrb_rd15 instruction
* this is the specialization of the instruction ldrb when rd = 15
* for most of the arm architectures this is an undefined behavior instruction (do nothing is our action)
* however for the armv5e architectures some of the combinations correspond to a pld instruction if
* it is a imm_offset or reg_offset type and cond == 0b1111
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51026 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51030 "isa_arm32.tcc"
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51034 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51038 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51041 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51045 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51048 "isa_arm32.tcc"
)
{
#line 398 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51055 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51060 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51063 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51067 "isa_arm32.tcc"
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51071 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51075 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51078 "isa_arm32.tcc"
)
{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51087 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51096 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51101 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51107 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51117 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51121 "isa_arm32.tcc"
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51125 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51129 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51132 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51136 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51139 "isa_arm32.tcc"
)
{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E) {
			buffer << "pld";
			cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
		} else
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51150 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51155 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51158 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51162 "isa_arm32.tcc"
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51166 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51170 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51173 "isa_arm32.tcc"
)
{
#line 436 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E && cond == 15) {
			typedef Operation<CONFIG> inherited;

			typename CONFIG::address_t address;
			typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

			address = cpu.LSWUBImmOffset(u, rn_value, offset);
			cpu.ReadPrefetch(address);
			} else {
			/* unpredictable */
			cpu.Unpredictable();
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		}
	}
#line 51194 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51202 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51205 "isa_arm32.tcc"
>

void
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51212 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51222 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51231 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51236 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51242 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51249 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51252 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51256 "isa_arm32.tcc"
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51260 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51264 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51267 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51271 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51274 "isa_arm32.tcc"
)
{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51281 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51289 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51293 "isa_arm32.tcc"
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51297 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51301 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51304 "isa_arm32.tcc"
)
{
#line 454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51313 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51319 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51322 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51327 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51333 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51340 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51343 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51347 "isa_arm32.tcc"
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51351 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51355 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51358 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51362 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51365 "isa_arm32.tcc"
)
{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51372 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51380 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51384 "isa_arm32.tcc"
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51388 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51392 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51395 "isa_arm32.tcc"
)
{
#line 460 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51404 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51413 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51418 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51424 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51431 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51434 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51438 "isa_arm32.tcc"
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51442 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51446 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51449 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51453 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51456 "isa_arm32.tcc"
)
{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E) {
			buffer << "pld ";
			cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
		} else
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51467 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51475 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51479 "isa_arm32.tcc"
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51483 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51487 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51490 "isa_arm32.tcc"
)
{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E && cond == 15) {
			typedef Operation<CONFIG> inherited;

			typename CONFIG::address_t address;
			typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
			typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

			address = cpu.LSWUBReg(u, rn_value, 15, shift_imm, shift, rm_value);
			cpu.ReadPrefetch(address);
			} else {
			/* unpredictable */
			cpu.Unpredictable();
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		}
	}
#line 51512 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51523 "isa_arm32.tcc"
>

void
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51530 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51540 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51548 "isa_arm32.tcc"
>

void
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51555 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 51565 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51574 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51579 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51585 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51595 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51599 "isa_arm32.tcc"
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51603 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51607 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51610 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51614 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51617 "isa_arm32.tcc"
)
{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51624 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51629 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51632 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51636 "isa_arm32.tcc"
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51640 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51644 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51647 "isa_arm32.tcc"
)
{
#line 485 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51656 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51662 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51665 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51670 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51676 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrb instruction
*******************************************************************/
/*******************************************************************
* ldrt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51693 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51697 "isa_arm32.tcc"
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51701 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51705 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51708 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51712 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51715 "isa_arm32.tcc"
)
{
#line 503 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 51725 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51730 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51733 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51737 "isa_arm32.tcc"
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51741 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51745 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51748 "isa_arm32.tcc"
)
{
#line 517 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset));
		cpu.Read32toGPR(address, rd);
	}
#line 51766 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51774 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51777 "isa_arm32.tcc"
>

void
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51784 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51794 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51803 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51808 "isa_arm32.tcc"
> *DecodeOpLdrt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51814 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51821 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51824 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51828 "isa_arm32.tcc"
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51832 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51836 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51839 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51843 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51846 "isa_arm32.tcc"
)
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 51856 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51861 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51864 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51868 "isa_arm32.tcc"
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51872 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51876 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51879 "isa_arm32.tcc"
)
{
#line 532 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.Read32toGPR(address, rd);
	}
#line 51896 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51907 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51914 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51924 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51929 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51932 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51939 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 51949 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51957 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51964 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 51974 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51980 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51983 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51988 "isa_arm32.tcc"
> *DecodeOpLdrt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51994 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrt instruction
*******************************************************************/
/*******************************************************************
* ldrbt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52008 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52011 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52015 "isa_arm32.tcc"
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52019 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52023 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52026 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52030 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52033 "isa_arm32.tcc"
)
{
#line 558 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 52043 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52051 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52055 "isa_arm32.tcc"
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52059 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52063 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52066 "isa_arm32.tcc"
)
{
#line 572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset));
		cpu.Read8toGPR(address, rd);
	}
#line 52084 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52092 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52095 "isa_arm32.tcc"
>

void
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52102 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52112 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52118 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52121 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52126 "isa_arm32.tcc"
> *DecodeOpLdrbt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52132 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52139 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52142 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52146 "isa_arm32.tcc"
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52150 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52154 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52157 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52161 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52164 "isa_arm32.tcc"
)
{
#line 565 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 52174 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52182 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52186 "isa_arm32.tcc"
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52190 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52194 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52197 "isa_arm32.tcc"
)
{
#line 587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		cpu.Read8toGPR(address, rd);
	}
#line 52217 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52225 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52228 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52235 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52245 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52250 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52253 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52260 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 52270 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52275 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52278 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52285 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52295 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52304 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52309 "isa_arm32.tcc"
> *DecodeOpLdrbt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52315 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrbt instruction
*******************************************************************/
/*******************************************************************
* str instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52331 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52335 "isa_arm32.tcc"
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52339 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52343 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52346 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52350 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52353 "isa_arm32.tcc"
)
{
#line 619 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 52363 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52371 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52375 "isa_arm32.tcc"
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52379 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52383 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52386 "isa_arm32.tcc"
)
{
#line 661 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52408 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52416 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52419 "isa_arm32.tcc"
>

void
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52426 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52436 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52444 "isa_arm32.tcc"
>

void
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52451 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52461 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52467 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52470 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52475 "isa_arm32.tcc"
> *DecodeOpStr_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52481 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52491 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52495 "isa_arm32.tcc"
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52499 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52503 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52506 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52510 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52513 "isa_arm32.tcc"
)
{
#line 626 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 52523 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52531 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52535 "isa_arm32.tcc"
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52539 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52543 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52546 "isa_arm32.tcc"
)
{
#line 680 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.CheckAlignmentExcep(address); // TODO
		value = rd_value;

		cpu.Write32(address, value);
	}
#line 52568 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52576 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52579 "isa_arm32.tcc"
>

void
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52586 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52596 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52601 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52604 "isa_arm32.tcc"
>

void
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52611 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52621 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52630 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52635 "isa_arm32.tcc"
> *DecodeOpStr_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52641 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52651 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52655 "isa_arm32.tcc"
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52659 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52663 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52666 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52670 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52673 "isa_arm32.tcc"
)
{
#line 633 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 52683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52691 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52695 "isa_arm32.tcc"
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52699 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52703 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52706 "isa_arm32.tcc"
)
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52728 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52739 "isa_arm32.tcc"
>

void
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52746 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52756 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52764 "isa_arm32.tcc"
>

void
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52771 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52781 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52787 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52790 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52795 "isa_arm32.tcc"
> *DecodeOpStr_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52801 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52808 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52811 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52815 "isa_arm32.tcc"
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52819 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52823 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52826 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52830 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52833 "isa_arm32.tcc"
)
{
#line 640 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 52843 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52848 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52851 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52855 "isa_arm32.tcc"
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52859 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52863 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52866 "isa_arm32.tcc"
)
{
#line 718 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52889 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52897 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52900 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52907 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52917 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52922 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52925 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52932 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 52942 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52950 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52957 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52967 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52976 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52981 "isa_arm32.tcc"
> *DecodeOpStr_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52987 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52997 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53001 "isa_arm32.tcc"
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53005 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53009 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53012 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53016 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53019 "isa_arm32.tcc"
)
{
#line 647 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53029 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53034 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53037 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53041 "isa_arm32.tcc"
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53045 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53049 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53052 "isa_arm32.tcc"
)
{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 53074 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53085 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53092 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53102 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53107 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53110 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53117 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53127 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53132 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53135 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53142 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53152 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53161 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53166 "isa_arm32.tcc"
> *DecodeOpStr_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53172 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53182 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53186 "isa_arm32.tcc"
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53190 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53194 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53197 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53201 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53204 "isa_arm32.tcc"
)
{
#line 654 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53214 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53219 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53222 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53226 "isa_arm32.tcc"
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53230 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53234 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53237 "isa_arm32.tcc"
)
{
#line 757 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, address);
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 53260 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53268 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53271 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53278 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53288 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53293 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53296 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53303 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53313 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53318 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53321 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53328 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53338 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53344 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53347 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53352 "isa_arm32.tcc"
> *DecodeOpStr_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53358 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of str instruction
*******************************************************************/
/*******************************************************************
* strb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53374 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53378 "isa_arm32.tcc"
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53382 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53386 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53389 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53393 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53396 "isa_arm32.tcc"
)
{
#line 792 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 53407 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53412 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53415 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53419 "isa_arm32.tcc"
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53423 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53427 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53430 "isa_arm32.tcc"
)
{
#line 837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53451 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53462 "isa_arm32.tcc"
>

void
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53469 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53479 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53487 "isa_arm32.tcc"
>

void
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53494 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53504 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53510 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53513 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53518 "isa_arm32.tcc"
> *DecodeOpStrb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53524 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53534 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53538 "isa_arm32.tcc"
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53542 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53546 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53549 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53553 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53556 "isa_arm32.tcc"
)
{
#line 800 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 53567 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53575 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53579 "isa_arm32.tcc"
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53583 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53587 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53590 "isa_arm32.tcc"
)
{
#line 855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53610 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53621 "isa_arm32.tcc"
>

void
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53628 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53638 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53643 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53646 "isa_arm32.tcc"
>

void
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53653 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53663 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53672 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53677 "isa_arm32.tcc"
> *DecodeOpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53683 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53693 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53697 "isa_arm32.tcc"
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53701 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53705 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53708 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53712 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53715 "isa_arm32.tcc"
)
{
#line 808 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 53726 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53734 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53738 "isa_arm32.tcc"
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53742 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53746 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53749 "isa_arm32.tcc"
)
{
#line 872 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53770 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53781 "isa_arm32.tcc"
>

void
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53788 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53798 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53803 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53806 "isa_arm32.tcc"
>

void
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53813 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53823 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53829 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53832 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53837 "isa_arm32.tcc"
> *DecodeOpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53843 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53853 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53857 "isa_arm32.tcc"
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53861 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53865 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53868 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53872 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53875 "isa_arm32.tcc"
)
{
#line 816 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53885 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53890 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53893 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53897 "isa_arm32.tcc"
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53901 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53905 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53908 "isa_arm32.tcc"
)
{
#line 890 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53930 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53938 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53941 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53948 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53958 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53963 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53966 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53973 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53983 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53991 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53998 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54008 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54017 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54022 "isa_arm32.tcc"
> *DecodeOpStrb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54028 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54035 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54038 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54042 "isa_arm32.tcc"
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54046 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54050 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54053 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54057 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54060 "isa_arm32.tcc"
)
{
#line 823 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54070 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54078 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54082 "isa_arm32.tcc"
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54086 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54090 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54093 "isa_arm32.tcc"
)
{
#line 909 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54114 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54122 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54125 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54132 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54142 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54150 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54157 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54167 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54172 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54175 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54182 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54192 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54201 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54206 "isa_arm32.tcc"
> *DecodeOpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54212 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54219 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54222 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54226 "isa_arm32.tcc"
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54230 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54234 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54237 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54241 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54244 "isa_arm32.tcc"
)
{
#line 830 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54254 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54262 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54266 "isa_arm32.tcc"
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54270 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54274 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54277 "isa_arm32.tcc"
)
{
#line 927 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54299 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54307 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54310 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54317 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54327 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54335 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54342 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54352 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54357 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54360 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54367 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54377 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54386 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54391 "isa_arm32.tcc"
> *DecodeOpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54397 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of strb instruction
*******************************************************************/
/*******************************************************************
* strt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54414 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54418 "isa_arm32.tcc"
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54422 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54426 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54429 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54433 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54436 "isa_arm32.tcc"
)
{
#line 958 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 54446 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54451 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54454 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54458 "isa_arm32.tcc"
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54462 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54466 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54469 "isa_arm32.tcc"
)
{
#line 972 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 54491 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54502 "isa_arm32.tcc"
>

void
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54509 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54519 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54527 "isa_arm32.tcc"
>

void
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54534 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54544 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54550 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54553 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54558 "isa_arm32.tcc"
> *DecodeOpStrt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54564 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54574 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54578 "isa_arm32.tcc"
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54582 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54586 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54589 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54593 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54596 "isa_arm32.tcc"
)
{
#line 965 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54606 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54611 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54614 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54618 "isa_arm32.tcc"
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54622 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54626 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54629 "isa_arm32.tcc"
)
{
#line 991 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 54652 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54660 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54663 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54670 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54680 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54685 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54688 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54695 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54705 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54710 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54713 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54720 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54730 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54739 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54744 "isa_arm32.tcc"
> *DecodeOpStrt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54750 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of strt instruction
*******************************************************************/
/*******************************************************************
* strbt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54764 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54767 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54771 "isa_arm32.tcc"
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54775 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54779 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54782 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54786 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54789 "isa_arm32.tcc"
)
{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 54800 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54808 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54812 "isa_arm32.tcc"
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54816 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54820 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54823 "isa_arm32.tcc"
)
{
#line 1038 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typename CONFIG::address_t address;
		uint8_t value;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, cpu.GetGPR(rn), offset)); // update rn
		value = cpu.GetGPR(rd) & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54840 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54848 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54851 "isa_arm32.tcc"
>

void
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54858 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54868 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54876 "isa_arm32.tcc"
>

void
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54883 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54893 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54899 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54902 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54907 "isa_arm32.tcc"
> *DecodeOpStrbt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54913 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54920 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54923 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54927 "isa_arm32.tcc"
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54931 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54935 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54938 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54942 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54945 "isa_arm32.tcc"
)
{
#line 1031 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54955 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54963 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54967 "isa_arm32.tcc"
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54971 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54975 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54978 "isa_arm32.tcc"
)
{
#line 1052 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 55000 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55008 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55011 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55018 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55028 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55033 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55036 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55043 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55053 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55058 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55061 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55068 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55078 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55087 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55092 "isa_arm32.tcc"
> *DecodeOpStrbt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55098 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldrh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55149 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55152 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55156 "isa_arm32.tcc"
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55160 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55164 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55167 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55171 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55174 "isa_arm32.tcc"
)
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 55185 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55190 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55193 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55197 "isa_arm32.tcc"
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55201 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55205 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55208 "isa_arm32.tcc"
)
{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55227 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55238 "isa_arm32.tcc"
>

void
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55245 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55255 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55264 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55269 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55275 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55285 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55289 "isa_arm32.tcc"
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55293 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55297 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55300 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55304 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55307 "isa_arm32.tcc"
)
{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 55318 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55326 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55330 "isa_arm32.tcc"
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55334 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55338 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55341 "isa_arm32.tcc"
)
{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55359 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55367 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55370 "isa_arm32.tcc"
>

void
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55377 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55387 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55396 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55401 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55407 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55417 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55421 "isa_arm32.tcc"
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55425 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55429 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55432 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55436 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55439 "isa_arm32.tcc"
)
{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 55450 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55455 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55458 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55462 "isa_arm32.tcc"
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55466 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55470 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55473 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55492 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55500 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55503 "isa_arm32.tcc"
>

void
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55510 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55520 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55526 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55529 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55534 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55540 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55547 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55550 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55554 "isa_arm32.tcc"
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55558 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55562 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55565 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55569 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55572 "isa_arm32.tcc"
)
{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 55582 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55587 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55590 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55594 "isa_arm32.tcc"
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55598 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55602 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55605 "isa_arm32.tcc"
)
{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55626 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55634 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55637 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55644 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55654 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55659 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55662 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55669 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55679 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55684 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55687 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55694 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55704 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55710 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55713 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55718 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55724 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55734 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55738 "isa_arm32.tcc"
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55742 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55746 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55749 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55753 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55756 "isa_arm32.tcc"
)
{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 55766 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55771 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55774 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55778 "isa_arm32.tcc"
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55782 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55786 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55789 "isa_arm32.tcc"
)
{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55809 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55817 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55820 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55827 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55837 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55842 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55845 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55852 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55862 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55867 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55870 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55877 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55887 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55893 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55896 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55901 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55907 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55914 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55917 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55921 "isa_arm32.tcc"
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55925 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55929 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55932 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55936 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55939 "isa_arm32.tcc"
)
{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 55949 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55957 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55961 "isa_arm32.tcc"
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55965 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55969 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55972 "isa_arm32.tcc"
)
{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55993 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56004 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56011 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56021 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56026 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56029 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56036 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56046 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56054 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56061 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56071 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56080 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56085 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56091 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrh instruction
*******************************************************************/
/*******************************************************************
* ldrsh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56107 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56110 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56114 "isa_arm32.tcc"
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56118 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56122 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56125 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56129 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56132 "isa_arm32.tcc"
)
{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 56143 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56148 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56151 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56155 "isa_arm32.tcc"
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56159 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56163 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56166 "isa_arm32.tcc"
)
{
#line 274 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56185 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56196 "isa_arm32.tcc"
>

void
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56203 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56213 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56219 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56222 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56227 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56233 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56243 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56247 "isa_arm32.tcc"
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56251 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56255 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56258 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56262 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56265 "isa_arm32.tcc"
)
{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 56276 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56284 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56288 "isa_arm32.tcc"
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56292 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56296 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56299 "isa_arm32.tcc"
)
{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56317 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56328 "isa_arm32.tcc"
>

void
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56335 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56345 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56351 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56354 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56359 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56365 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56372 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56375 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56379 "isa_arm32.tcc"
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56383 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56387 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56390 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56394 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56397 "isa_arm32.tcc"
)
{
#line 245 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 56408 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56416 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56420 "isa_arm32.tcc"
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56424 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56428 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56431 "isa_arm32.tcc"
)
{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56450 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56461 "isa_arm32.tcc"
>

void
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56468 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56478 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56487 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56492 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56498 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56505 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56508 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56512 "isa_arm32.tcc"
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56516 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56520 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56523 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56527 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56530 "isa_arm32.tcc"
)
{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 56540 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56548 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56552 "isa_arm32.tcc"
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56556 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56560 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56563 "isa_arm32.tcc"
)
{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56584 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56595 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56602 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56612 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56617 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56620 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56627 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56637 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56642 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56645 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56652 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56662 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56668 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56671 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56676 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56682 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56692 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56696 "isa_arm32.tcc"
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56700 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56704 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56707 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56711 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56714 "isa_arm32.tcc"
)
{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 56724 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56729 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56732 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56736 "isa_arm32.tcc"
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56740 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56744 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56747 "isa_arm32.tcc"
)
{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		//	address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56768 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56779 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56786 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56796 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56804 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56811 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56821 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56829 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56836 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56846 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56855 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56860 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56866 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56876 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56880 "isa_arm32.tcc"
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56884 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56888 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56891 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56895 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56898 "isa_arm32.tcc"
)
{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 56908 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56913 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56916 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56920 "isa_arm32.tcc"
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56924 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56928 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56931 "isa_arm32.tcc"
)
{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56952 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56963 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56970 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56980 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56985 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56988 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56995 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57005 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57013 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57020 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57030 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57039 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57044 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57050 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrsh instruction
*******************************************************************/
/*******************************************************************
* ldrsb instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57066 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57069 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57073 "isa_arm32.tcc"
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57077 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57081 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57084 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57088 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57091 "isa_arm32.tcc"
)
{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 57102 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57107 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57110 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57114 "isa_arm32.tcc"
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57118 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57122 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57125 "isa_arm32.tcc"
)
{
#line 441 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.ReadS8toGPR(address, rd);
	}
#line 57143 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57154 "isa_arm32.tcc"
>

void
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57161 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57171 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57180 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57185 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57191 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57201 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57205 "isa_arm32.tcc"
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57209 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57213 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57216 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57220 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57223 "isa_arm32.tcc"
)
{
#line 404 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 57234 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57239 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57242 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57246 "isa_arm32.tcc"
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57250 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57254 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57257 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57274 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57285 "isa_arm32.tcc"
>

void
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57292 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57302 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57311 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57316 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57322 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57332 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57336 "isa_arm32.tcc"
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57340 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57344 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57347 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57351 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57354 "isa_arm32.tcc"
)
{
#line 412 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 57365 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57370 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57373 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57377 "isa_arm32.tcc"
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57381 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57385 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57388 "isa_arm32.tcc"
)
{
#line 470 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.ReadS8toGPR(address, rd);
	}
#line 57406 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57417 "isa_arm32.tcc"
>

void
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57424 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57434 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57443 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57448 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57454 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57461 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57464 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57468 "isa_arm32.tcc"
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57472 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57476 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57479 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57483 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57486 "isa_arm32.tcc"
)
{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 57496 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57504 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57508 "isa_arm32.tcc"
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57512 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57516 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57519 "isa_arm32.tcc"
)
{
#line 485 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.ReadS8toGPR(address, rd);
	}
#line 57539 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57547 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57550 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57557 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57567 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57575 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57582 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57592 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57600 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57607 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57617 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57626 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57631 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57637 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57647 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57651 "isa_arm32.tcc"
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57655 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57659 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57662 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57666 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57669 "isa_arm32.tcc"
)
{
#line 427 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 57679 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57684 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57687 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57691 "isa_arm32.tcc"
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57695 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57699 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57702 "isa_arm32.tcc"
)
{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57721 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57729 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57732 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57739 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57749 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57754 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57757 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57764 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57774 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57782 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57789 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57799 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57808 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57813 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57819 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57829 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57833 "isa_arm32.tcc"
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57837 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57841 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57844 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57848 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57851 "isa_arm32.tcc"
)
{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 57861 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57866 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57869 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57873 "isa_arm32.tcc"
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57877 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57881 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57884 "isa_arm32.tcc"
)
{
#line 518 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.SetGPR(rn, address);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57904 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57912 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57915 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57922 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57932 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57937 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57940 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57947 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57957 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57962 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57965 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57972 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57982 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57991 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57996 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58002 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrsb instruction
*******************************************************************/
/*******************************************************************
* strh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58018 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58021 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58025 "isa_arm32.tcc"
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58029 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58033 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58036 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58040 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58043 "isa_arm32.tcc"
)
{
#line 556 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 58054 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58059 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58062 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58066 "isa_arm32.tcc"
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58070 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58074 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58077 "isa_arm32.tcc"
)
{
#line 601 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL)); // update rn
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58095 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58101 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58104 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58109 "isa_arm32.tcc"
> *DecodeOpStrh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58115 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58122 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58125 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58129 "isa_arm32.tcc"
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58133 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58137 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58140 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58144 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58147 "isa_arm32.tcc"
)
{
#line 564 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 58158 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58163 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58166 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58170 "isa_arm32.tcc"
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58174 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58178 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58181 "isa_arm32.tcc"
)
{
#line 616 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58198 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58207 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58212 "isa_arm32.tcc"
> *DecodeOpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58218 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58225 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58228 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58232 "isa_arm32.tcc"
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58236 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58240 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58243 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58247 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58250 "isa_arm32.tcc"
)
{
#line 572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 58261 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58266 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58269 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58273 "isa_arm32.tcc"
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58277 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58281 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58284 "isa_arm32.tcc"
)
{
#line 630 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58302 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58311 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58316 "isa_arm32.tcc"
> *DecodeOpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58322 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58332 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58336 "isa_arm32.tcc"
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58340 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58344 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58347 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58351 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58354 "isa_arm32.tcc"
)
{
#line 580 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 58364 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58369 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58372 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58376 "isa_arm32.tcc"
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58380 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58384 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58387 "isa_arm32.tcc"
)
{
#line 645 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm)));
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58405 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58414 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58419 "isa_arm32.tcc"
> *DecodeOpStrh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58425 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58432 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58435 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58439 "isa_arm32.tcc"
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58443 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58447 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58450 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58454 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58457 "isa_arm32.tcc"
)
{
#line 587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 58467 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58475 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58479 "isa_arm32.tcc"
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58483 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58487 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58490 "isa_arm32.tcc"
)
{
#line 660 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58507 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58513 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58516 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58521 "isa_arm32.tcc"
> *DecodeOpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58527 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58537 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58541 "isa_arm32.tcc"
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58545 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58549 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58552 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58556 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58559 "isa_arm32.tcc"
)
{
#line 594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 58569 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58577 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58581 "isa_arm32.tcc"
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58585 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58589 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58592 "isa_arm32.tcc"
)
{
#line 674 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58610 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58616 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58619 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58624 "isa_arm32.tcc"
> *DecodeOpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58630 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS
(specific for arm version 5e)

**********************************************/
/*******************************************************************
* ldrd instruction
*/
/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58685 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58689 "isa_arm32.tcc"
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58693 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58697 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58700 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58704 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58707 "isa_arm32.tcc"
)
{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 58718 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58723 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58726 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58730 "isa_arm32.tcc"
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58734 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58738 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58741 "isa_arm32.tcc"
)
{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 58768 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58786 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58789 "isa_arm32.tcc"
>

void
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58796 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 58806 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58815 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58820 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58826 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58836 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58839 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58843 "isa_arm32.tcc"
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58847 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58851 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58854 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58858 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58861 "isa_arm32.tcc"
)
{
#line 67 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 58872 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58880 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58884 "isa_arm32.tcc"
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58888 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58892 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58895 "isa_arm32.tcc"
)
{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 58921 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58939 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58942 "isa_arm32.tcc"
>

void
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58949 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 58959 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58965 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58968 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58973 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58979 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58989 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58992 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58996 "isa_arm32.tcc"
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59000 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59004 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59007 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59011 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59014 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 59025 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59033 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59037 "isa_arm32.tcc"
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59041 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59045 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59048 "isa_arm32.tcc"
)
{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59075 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59096 "isa_arm32.tcc"
>

void
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59103 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59113 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59119 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59122 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59127 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59133 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59143 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59146 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59150 "isa_arm32.tcc"
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59154 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59158 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59161 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59165 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59168 "isa_arm32.tcc"
)
{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 59179 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59187 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59191 "isa_arm32.tcc"
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59195 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59199 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59202 "isa_arm32.tcc"
)
{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59231 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59249 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59252 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59259 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59269 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59274 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59277 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59284 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59294 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59302 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59309 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59319 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59328 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59333 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59339 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59349 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59352 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59356 "isa_arm32.tcc"
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59360 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59364 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59367 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59371 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59374 "isa_arm32.tcc"
)
{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 59385 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59393 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59397 "isa_arm32.tcc"
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59401 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59405 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59408 "isa_arm32.tcc"
)
{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59436 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59454 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59457 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59464 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59474 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59479 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59482 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59489 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59499 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59507 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59514 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59524 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59533 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59538 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59544 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59554 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59557 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59561 "isa_arm32.tcc"
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59565 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59569 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59572 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59576 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59579 "isa_arm32.tcc"
)
{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 59590 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59598 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59602 "isa_arm32.tcc"
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59606 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59610 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59613 "isa_arm32.tcc"
)
{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address);
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59642 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59660 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59663 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59670 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59680 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59685 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59688 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59695 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59705 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59710 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59713 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59720 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59730 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59739 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59744 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59750 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrd instruction
*******************************************************************/
/*******************************************************************
* strd instruction
*/
/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59766 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59769 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59773 "isa_arm32.tcc"
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59777 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59781 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59784 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59788 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59791 "isa_arm32.tcc"
)
{
#line 276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 59802 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59807 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59810 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59814 "isa_arm32.tcc"
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59818 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59822 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59825 "isa_arm32.tcc"
)
{
#line 324 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 59854 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59872 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59875 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59882 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59892 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59897 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59900 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59907 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59917 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59922 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59925 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59932 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 59942 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59951 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59956 "isa_arm32.tcc"
> *DecodeOpStrd_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59962 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59972 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59975 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59979 "isa_arm32.tcc"
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59983 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59987 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59990 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59994 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59997 "isa_arm32.tcc"
)
{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 60008 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60016 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60020 "isa_arm32.tcc"
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60024 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60028 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60031 "isa_arm32.tcc"
)
{
#line 350 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60059 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60080 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60087 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60097 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60102 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60105 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60112 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60122 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60130 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60137 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60147 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60156 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60161 "isa_arm32.tcc"
> *DecodeOpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60167 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60180 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60184 "isa_arm32.tcc"
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60188 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60192 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60195 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60199 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60202 "isa_arm32.tcc"
)
{
#line 292 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 60213 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60218 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60221 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60225 "isa_arm32.tcc"
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60229 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60233 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60236 "isa_arm32.tcc"
)
{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60265 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60283 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60286 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60293 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60303 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60311 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60318 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60328 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60333 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60336 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60343 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60353 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60362 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60367 "isa_arm32.tcc"
> *DecodeOpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60373 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60386 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60390 "isa_arm32.tcc"
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60394 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60398 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60401 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60405 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60408 "isa_arm32.tcc"
)
{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 60419 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60424 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60427 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60431 "isa_arm32.tcc"
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60435 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60439 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60442 "isa_arm32.tcc"
)
{
#line 401 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60472 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60493 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60500 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60510 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60515 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60518 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60525 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60535 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60540 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60543 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60550 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60560 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60565 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60568 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60575 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60585 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60591 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60594 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60599 "isa_arm32.tcc"
> *DecodeOpStrd_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60605 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60618 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60622 "isa_arm32.tcc"
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60626 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60630 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60633 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60637 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60640 "isa_arm32.tcc"
)
{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 60651 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60656 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60659 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60663 "isa_arm32.tcc"
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60667 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60671 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60674 "isa_arm32.tcc"
)
{
#line 428 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60703 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60721 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60724 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60731 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60741 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60746 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60749 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60756 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60766 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60771 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60774 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60781 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60791 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60799 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60806 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60816 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60822 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60825 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60830 "isa_arm32.tcc"
> *DecodeOpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60836 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60849 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60853 "isa_arm32.tcc"
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60857 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60861 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60864 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60868 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60871 "isa_arm32.tcc"
)
{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 60882 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60890 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60894 "isa_arm32.tcc"
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60898 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60902 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60905 "isa_arm32.tcc"
)
{
#line 454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address);
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60935 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60956 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60963 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60973 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60978 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60981 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60988 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60998 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61006 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61013 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 61023 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61028 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61031 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61038 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 61048 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61054 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61057 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61062 "isa_arm32.tcc"
> *DecodeOpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61068 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE MULTIPLE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldm_1 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61116 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61119 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61123 "isa_arm32.tcc"
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61127 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61131 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61134 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61138 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61141 "isa_arm32.tcc"
)
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61167 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61172 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61175 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61179 "isa_arm32.tcc"
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61183 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61187 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61190 "isa_arm32.tcc"
)
{
#line 144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61233 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61244 "isa_arm32.tcc"
>

void
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61251 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61261 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61267 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61270 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61275 "isa_arm32.tcc"
> *DecodeOpLdm_1_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61281 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61288 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61291 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61295 "isa_arm32.tcc"
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61299 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61303 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61306 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61310 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61313 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61339 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61344 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61347 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61351 "isa_arm32.tcc"
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61355 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61359 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61362 "isa_arm32.tcc"
)
{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61405 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61416 "isa_arm32.tcc"
>

void
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61423 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61433 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61442 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61447 "isa_arm32.tcc"
> *DecodeOpLdm_1_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61453 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61460 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61463 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61467 "isa_arm32.tcc"
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61471 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61475 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61478 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61482 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61485 "isa_arm32.tcc"
)
{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61511 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61519 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61523 "isa_arm32.tcc"
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61527 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61531 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61534 "isa_arm32.tcc"
)
{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61577 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61585 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61588 "isa_arm32.tcc"
>

void
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61595 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61605 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61611 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61614 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61619 "isa_arm32.tcc"
> *DecodeOpLdm_1_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61625 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61632 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61635 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61639 "isa_arm32.tcc"
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61643 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61647 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61650 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61654 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61657 "isa_arm32.tcc"
)
{
#line 121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61691 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61695 "isa_arm32.tcc"
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61699 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61703 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61706 "isa_arm32.tcc"
)
{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61749 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61757 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61760 "isa_arm32.tcc"
>

void
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61767 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61777 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61786 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61791 "isa_arm32.tcc"
> *DecodeOpLdm_1_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61797 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldm_1 instruction
*******************************************************************/
/*******************************************************************
* ldm_2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61810 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61813 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61817 "isa_arm32.tcc"
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61821 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61825 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61828 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61832 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61835 "isa_arm32.tcc"
)
{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 61861 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61866 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61869 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61873 "isa_arm32.tcc"
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61877 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61881 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61884 "isa_arm32.tcc"
)
{
#line 411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPR(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 61919 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61930 "isa_arm32.tcc"
>

void
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61937 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61947 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61956 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61961 "isa_arm32.tcc"
> *DecodeOpLdm_2_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61967 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61977 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61981 "isa_arm32.tcc"
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61985 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61989 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61992 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61996 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61999 "isa_arm32.tcc"
)
{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62025 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62033 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62037 "isa_arm32.tcc"
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62041 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62045 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62048 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62083 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62094 "isa_arm32.tcc"
>

void
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62101 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62111 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62117 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62120 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62125 "isa_arm32.tcc"
> *DecodeOpLdm_2_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62131 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62138 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62141 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62145 "isa_arm32.tcc"
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62149 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62153 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62156 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62160 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62163 "isa_arm32.tcc"
)
{
#line 365 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62189 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62194 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62197 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62201 "isa_arm32.tcc"
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62205 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62209 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62212 "isa_arm32.tcc"
)
{
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62247 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62258 "isa_arm32.tcc"
>

void
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62265 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62275 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62284 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62289 "isa_arm32.tcc"
> *DecodeOpLdm_2_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62295 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62302 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62305 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62309 "isa_arm32.tcc"
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62313 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62317 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62320 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62324 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62327 "isa_arm32.tcc"
)
{
#line 388 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62353 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62358 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62361 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62365 "isa_arm32.tcc"
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62369 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62373 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62376 "isa_arm32.tcc"
)
{
#line 507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62411 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62422 "isa_arm32.tcc"
>

void
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62429 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62439 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62448 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62453 "isa_arm32.tcc"
> *DecodeOpLdm_2_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62459 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldm_2 instruction
*******************************************************************/
/*******************************************************************
* ldm_3 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62475 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62479 "isa_arm32.tcc"
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62483 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62487 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62490 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62494 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62497 "isa_arm32.tcc"
)
{
#line 554 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62523 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62531 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62535 "isa_arm32.tcc"
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62539 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62543 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62546 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 62589 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62600 "isa_arm32.tcc"
>

void
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62607 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62617 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62626 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62631 "isa_arm32.tcc"
> *DecodeOpLdm_3_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62637 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62647 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62651 "isa_arm32.tcc"
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62655 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62659 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62662 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62666 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62669 "isa_arm32.tcc"
)
{
#line 577 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62695 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62700 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62703 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62707 "isa_arm32.tcc"
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62711 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62715 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62718 "isa_arm32.tcc"
)
{
#line 686 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 62761 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62772 "isa_arm32.tcc"
>

void
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62779 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62789 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62798 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62803 "isa_arm32.tcc"
> *DecodeOpLdm_3_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62809 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62816 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62819 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62823 "isa_arm32.tcc"
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62827 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62831 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62834 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62838 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62841 "isa_arm32.tcc"
)
{
#line 600 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62867 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62872 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62875 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62879 "isa_arm32.tcc"
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62883 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62887 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62890 "isa_arm32.tcc"
)
{
#line 726 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 62933 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62944 "isa_arm32.tcc"
>

void
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62951 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62961 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62970 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62975 "isa_arm32.tcc"
> *DecodeOpLdm_3_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62981 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62991 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62995 "isa_arm32.tcc"
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62999 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63003 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63006 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63010 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63013 "isa_arm32.tcc"
)
{
#line 623 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 63039 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63047 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63051 "isa_arm32.tcc"
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63055 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63059 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63062 "isa_arm32.tcc"
)
{
#line 766 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63105 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63113 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63116 "isa_arm32.tcc"
>

void
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63123 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63133 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63139 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63142 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63147 "isa_arm32.tcc"
> *DecodeOpLdm_3_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63153 "isa_arm32.tcc"
	>(code, addr);
}

// ldm_3.nextpc = {
	//   if(cond_res) {
		//     /* nothing to do */
		//   } else {
		//     cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		//   }
	// }
/*
* end of ldm_3 instruction
*******************************************************************/
/*******************************************************************
* stm_1 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63173 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63176 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63180 "isa_arm32.tcc"
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63184 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63188 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63191 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63195 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63198 "isa_arm32.tcc"
)
{
#line 829 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63223 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63231 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63235 "isa_arm32.tcc"
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63239 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63243 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63246 "isa_arm32.tcc"
)
{
#line 917 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63291 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63302 "isa_arm32.tcc"
>

void
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63309 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63319 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63328 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63333 "isa_arm32.tcc"
> *DecodeOpStm_1_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63339 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63346 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63349 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63353 "isa_arm32.tcc"
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63357 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63361 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63364 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63368 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63371 "isa_arm32.tcc"
)
{
#line 851 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63396 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63401 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63404 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63408 "isa_arm32.tcc"
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63412 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63416 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63419 "isa_arm32.tcc"
)
{
#line 959 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63464 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63475 "isa_arm32.tcc"
>

void
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63482 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63492 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63498 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63501 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63506 "isa_arm32.tcc"
> *DecodeOpStm_1_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63512 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63519 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63522 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63526 "isa_arm32.tcc"
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63530 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63534 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63537 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63541 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63544 "isa_arm32.tcc"
)
{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63569 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63577 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63581 "isa_arm32.tcc"
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63585 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63589 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63592 "isa_arm32.tcc"
)
{
#line 1001 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63637 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63645 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63648 "isa_arm32.tcc"
>

void
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63655 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63665 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63671 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63674 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63679 "isa_arm32.tcc"
> *DecodeOpStm_1_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63685 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63695 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63699 "isa_arm32.tcc"
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63703 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63707 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63710 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63714 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63717 "isa_arm32.tcc"
)
{
#line 895 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63742 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63750 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63754 "isa_arm32.tcc"
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63758 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63762 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63765 "isa_arm32.tcc"
)
{
#line 1043 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63810 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63818 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63821 "isa_arm32.tcc"
>

void
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63828 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63838 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63844 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63847 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63852 "isa_arm32.tcc"
> *DecodeOpStm_1_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63858 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of stm_1 instruction
*******************************************************************/
/*******************************************************************
* stm_2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63871 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63874 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63878 "isa_arm32.tcc"
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63882 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63886 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63889 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63893 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63896 "isa_arm32.tcc"
)
{
#line 1100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 63921 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63929 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63933 "isa_arm32.tcc"
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63937 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63941 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63944 "isa_arm32.tcc"
)
{
#line 1188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 63985 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63996 "isa_arm32.tcc"
>

void
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64003 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64013 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64019 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64022 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64027 "isa_arm32.tcc"
> *DecodeOpStm_2_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64033 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64040 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64043 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64047 "isa_arm32.tcc"
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64051 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64055 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64058 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64062 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64065 "isa_arm32.tcc"
)
{
#line 1122 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64090 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64098 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64102 "isa_arm32.tcc"
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64106 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64110 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64113 "isa_arm32.tcc"
)
{
#line 1226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64154 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64162 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64165 "isa_arm32.tcc"
>

void
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64172 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64182 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64188 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64191 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64196 "isa_arm32.tcc"
> *DecodeOpStm_2_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64202 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64209 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64212 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64216 "isa_arm32.tcc"
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64220 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64224 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64227 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64231 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64234 "isa_arm32.tcc"
)
{
#line 1144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64259 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64264 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64267 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64271 "isa_arm32.tcc"
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64275 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64279 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64282 "isa_arm32.tcc"
)
{
#line 1264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64323 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64334 "isa_arm32.tcc"
>

void
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64341 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64351 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64357 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64360 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64365 "isa_arm32.tcc"
> *DecodeOpStm_2_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64371 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64381 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64385 "isa_arm32.tcc"
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64389 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64393 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64396 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64400 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64403 "isa_arm32.tcc"
)
{
#line 1166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64428 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64433 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64436 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64440 "isa_arm32.tcc"
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64444 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64448 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64451 "isa_arm32.tcc"
)
{
#line 1302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64492 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64500 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64503 "isa_arm32.tcc"
>

void
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64510 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64520 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64526 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64529 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64534 "isa_arm32.tcc"
> *DecodeOpStm_2_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64540 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

SEMAPHORE INSTRUCTIONS

**********************************************/
/* TODO: missing implementation */
/* NOTE: r15 should never be used for rn, rd and/or rm, so no need to
*   initialize them.
*/
/*******************************************************************
* swp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64595 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64599 "isa_arm32.tcc"
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64603 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64607 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64610 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64614 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64617 "isa_arm32.tcc"
)
{
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		buffer << "swp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "[r" << rn << "]";
	}
#line 64628 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64633 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64636 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64640 "isa_arm32.tcc"
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64644 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64648 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64651 "isa_arm32.tcc"
)
{
#line 61 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		/* if r15 is used the result is impredictable, so just ignore the case of using r15 */
		if(!cpu.CheckCondition(cond)) return;
	}
#line 64659 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64668 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64673 "isa_arm32.tcc"
> *DecodeOpSwp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwp<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64679 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swp instruction
*******************************************************************/
/*******************************************************************
* swpb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64695 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64699 "isa_arm32.tcc"
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64703 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64707 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64710 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64714 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64717 "isa_arm32.tcc"
)
{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		buffer << "swp";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", "
		<< "r" << rm << ", "
		<< "[r" << rn << "]";
	}
#line 64728 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64733 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64736 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64740 "isa_arm32.tcc"
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64744 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64748 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64751 "isa_arm32.tcc"
)
{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		if(!cpu.CheckCondition(cond)) return;
	}
#line 64758 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64764 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64767 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64772 "isa_arm32.tcc"
> *DecodeOpSwpb(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwpb<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64778 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swpb instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

EXCEPTION-GENERATING INSTRUCTIONS

**********************************************/
/*******************************************************************
* swi instruction
* NOTE: this instruction is used to make the system calls
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64830 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64833 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64837 "isa_arm32.tcc"
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64841 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64845 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64848 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64852 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64855 "isa_arm32.tcc"
)
{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		buffer << "swi";
		cpu.DisasmCondition(cond, buffer);
		buffer << " #" << dec << immed;
	}
#line 64864 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64869 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64872 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64876 "isa_arm32.tcc"
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64880 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64884 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64887 "isa_arm32.tcc"
)
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		//	if(cpu.logger_import)
		//		(*cpu.logger_import) << DebugInfo
		//			<< Function << __FUNCTION__
		//			<< File << __FILE__
		//			<< Line << __LINE__
		//			<< "executing swi (#" << immed << ")"
		//			<< Endl << EndDebugInfo;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

#ifdef SOCLIB

		throw SoftwareInterruptException<CONFIG>();

#else // SOCLIB

		if(cpu.linux_os_import) {
			// we are executing on linux emulation mode
			// use linux_os_import
			try {
				cpu.linux_os_import->ExecuteSystemCall(immed);
				} catch(exception &e) {
				cerr << e.what() << endl;
			}
			} else {
			// we are executing on full system mode
			throw SoftwareInterruptException<CONFIG>();
		}

#endif // SOCLIB

	}
#line 64926 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64935 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64940 "isa_arm32.tcc"
> *DecodeOpSwi(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwi<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64946 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swi instruction
*******************************************************************/
/*******************************************************************
* bkpt instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64959 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64962 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64966 "isa_arm32.tcc"
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64970 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64974 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64977 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64981 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64984 "isa_arm32.tcc"
)
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		uint32_t immed;

		immed = limmed + ((uint32_t)himmed << 4);
		buffer << "bkpt";
		buffer << " #" << dec << immed;
	}
#line 64995 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65003 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65007 "isa_arm32.tcc"
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65011 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65015 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65018 "isa_arm32.tcc"
)
{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		//	if(cpu.logger_import)
		//		(*cpu.logger_import) << DebugInfo
		//			<< Function << __FUNCTION__
		//			<< File << __FILE__
		//			<< Line << __LINE__
		//			<< "executing swi (#" << immed << ")"
		//			<< Endl << EndDebugInfo;
		uint32_t immed;

		immed = limmed + ((uint32_t)himmed << 4);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

#ifdef SOCLIB

		throw PrefetchAbortException<CONFIG>();

#else // SOCLIB

		if(cpu.linux_os_import) {
			// we are executing on linux emulation mode
			// what should we do with this kind of call? ignore it
			} else {
			// we are executing on full system mode
			throw PrefetchAbortException<CONFIG>();
		}

#endif // SOCLIB

	}
#line 65053 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65059 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65062 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65067 "isa_arm32.tcc"
> *DecodeOpBkpt(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBkpt<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65073 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bkpt instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

COPROCESSOR INSTRUCTIONS

**********************************************/
/*******************************************************************
* cdp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65127 "isa_arm32.tcc"
>

void
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65134 "isa_arm32.tcc"
>::initialize_condition()
{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 65143 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65148 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65151 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65155 "isa_arm32.tcc"
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65159 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65163 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65166 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65170 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65173 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65189 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65194 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65197 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65201 "isa_arm32.tcc"
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65205 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65209 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65212 "isa_arm32.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65225 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65234 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65239 "isa_arm32.tcc"
> *DecodeOpCdp_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65245 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65252 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65255 "isa_arm32.tcc"
>

void
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65262 "isa_arm32.tcc"
>::initialize_condition()
{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 65271 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65276 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65279 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65283 "isa_arm32.tcc"
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65287 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65291 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65294 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65298 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65301 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65317 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65325 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65329 "isa_arm32.tcc"
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65333 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65337 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65340 "isa_arm32.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65353 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65362 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65367 "isa_arm32.tcc"
> *DecodeOpCdp_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65373 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65380 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65383 "isa_arm32.tcc"
>

void
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65390 "isa_arm32.tcc"
>::initialize_condition()
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 65399 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65407 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65411 "isa_arm32.tcc"
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65415 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65419 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65422 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65426 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65429 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65445 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65450 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65453 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65457 "isa_arm32.tcc"
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65461 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65465 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65468 "isa_arm32.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65481 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65490 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65495 "isa_arm32.tcc"
> *DecodeOpCdp_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65501 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65508 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65511 "isa_arm32.tcc"
>

void
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65518 "isa_arm32.tcc"
>::initialize_condition()
{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 65527 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65532 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65535 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65539 "isa_arm32.tcc"
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65543 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65547 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65550 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65554 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65557 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65573 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65581 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65585 "isa_arm32.tcc"
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65589 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65593 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65596 "isa_arm32.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65609 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65618 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65623 "isa_arm32.tcc"
> *DecodeOpCdp_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65629 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cdp instruction
*******************************************************************/
/*******************************************************************
* ldc instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65646 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65649 "isa_arm32.tcc"
>

void
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65656 "isa_arm32.tcc"
>::initialize_condition()
{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 65665 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65673 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65677 "isa_arm32.tcc"
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65681 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65685 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65688 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65692 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65695 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 65710 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65718 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65722 "isa_arm32.tcc"
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65726 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65730 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65733 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 65752 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65760 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65763 "isa_arm32.tcc"
>

void
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65770 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 65780 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65786 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65789 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65794 "isa_arm32.tcc"
> *DecodeOpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65800 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65811 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65814 "isa_arm32.tcc"
>

void
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65821 "isa_arm32.tcc"
>::initialize_condition()
{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 65830 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65838 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65842 "isa_arm32.tcc"
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65846 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65850 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65853 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65857 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65860 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 65875 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65880 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65883 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65887 "isa_arm32.tcc"
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65891 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65895 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65898 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 65917 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65925 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65928 "isa_arm32.tcc"
>

void
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65935 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 65945 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65951 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65954 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65959 "isa_arm32.tcc"
> *DecodeOpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65965 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65976 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65979 "isa_arm32.tcc"
>

void
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65986 "isa_arm32.tcc"
>::initialize_condition()
{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 65995 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66003 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66007 "isa_arm32.tcc"
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66011 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66015 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66018 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66022 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66025 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 66040 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66048 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66052 "isa_arm32.tcc"
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66056 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66060 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66063 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66082 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66093 "isa_arm32.tcc"
>

void
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66100 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 66110 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66116 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66119 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66124 "isa_arm32.tcc"
> *DecodeOpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66130 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66141 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66144 "isa_arm32.tcc"
>

void
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66151 "isa_arm32.tcc"
>::initialize_condition()
{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 66160 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66168 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66172 "isa_arm32.tcc"
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66176 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66180 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66183 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66187 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66190 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 66205 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66213 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66217 "isa_arm32.tcc"
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66221 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66225 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66228 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66247 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66258 "isa_arm32.tcc"
>

void
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66265 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 66275 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66284 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66289 "isa_arm32.tcc"
> *DecodeOpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66295 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66309 "isa_arm32.tcc"
>

void
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66316 "isa_arm32.tcc"
>::initialize_condition()
{
#line 142 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 66325 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66333 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66337 "isa_arm32.tcc"
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66341 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66345 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66348 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66352 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66355 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66370 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66375 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66378 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66382 "isa_arm32.tcc"
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66386 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66390 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66393 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66413 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66422 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66427 "isa_arm32.tcc"
> *DecodeOpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66433 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66444 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66447 "isa_arm32.tcc"
>

void
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66454 "isa_arm32.tcc"
>::initialize_condition()
{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 66463 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66468 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66471 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66475 "isa_arm32.tcc"
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66479 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66483 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66486 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66490 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66493 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66508 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66513 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66516 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66520 "isa_arm32.tcc"
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66524 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66528 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66531 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66551 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66557 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66560 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66565 "isa_arm32.tcc"
> *DecodeOpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66571 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66585 "isa_arm32.tcc"
>

void
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66592 "isa_arm32.tcc"
>::initialize_condition()
{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 66601 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66606 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66609 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66613 "isa_arm32.tcc"
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66617 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66621 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66624 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66628 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66631 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66646 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66651 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66654 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66658 "isa_arm32.tcc"
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66662 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66666 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66669 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66689 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66695 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66698 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66703 "isa_arm32.tcc"
> *DecodeOpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66709 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66720 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66723 "isa_arm32.tcc"
>

void
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66730 "isa_arm32.tcc"
>::initialize_condition()
{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 66739 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66747 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66751 "isa_arm32.tcc"
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66755 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66759 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66762 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66766 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66769 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66784 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66789 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66792 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66796 "isa_arm32.tcc"
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66800 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66804 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66807 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66827 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66836 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66841 "isa_arm32.tcc"
> *DecodeOpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66847 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66858 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66861 "isa_arm32.tcc"
>

void
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66868 "isa_arm32.tcc"
>::initialize_condition()
{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 66877 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66882 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66885 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66889 "isa_arm32.tcc"
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66893 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66897 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66900 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66904 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66907 "isa_arm32.tcc"
)
{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 66922 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66930 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66934 "isa_arm32.tcc"
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66938 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66942 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66945 "isa_arm32.tcc"
)
{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66965 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66971 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66974 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66979 "isa_arm32.tcc"
> *DecodeOpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66985 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66996 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66999 "isa_arm32.tcc"
>

void
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67006 "isa_arm32.tcc"
>::initialize_condition()
{
#line 179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 67015 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67020 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67023 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67027 "isa_arm32.tcc"
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67031 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67035 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67038 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67042 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67045 "isa_arm32.tcc"
)
{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67060 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67065 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67068 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67072 "isa_arm32.tcc"
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67076 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67080 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67083 "isa_arm32.tcc"
)
{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67103 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67109 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67112 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67117 "isa_arm32.tcc"
> *DecodeOpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67123 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67137 "isa_arm32.tcc"
>

void
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67144 "isa_arm32.tcc"
>::initialize_condition()
{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 67153 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67161 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67165 "isa_arm32.tcc"
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67169 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67173 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67176 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67180 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67183 "isa_arm32.tcc"
)
{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67198 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67203 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67206 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67210 "isa_arm32.tcc"
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67214 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67218 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67221 "isa_arm32.tcc"
)
{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67241 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67247 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67250 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67255 "isa_arm32.tcc"
> *DecodeOpLdc_post_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67261 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67272 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67275 "isa_arm32.tcc"
>

void
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67282 "isa_arm32.tcc"
>::initialize_condition()
{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 67291 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67296 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67299 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67303 "isa_arm32.tcc"
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67307 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67311 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67314 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67318 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67321 "isa_arm32.tcc"
)
{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67336 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67341 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67344 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67348 "isa_arm32.tcc"
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67352 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67356 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67359 "isa_arm32.tcc"
)
{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67379 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67385 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67388 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67393 "isa_arm32.tcc"
> *DecodeOpLdc_post_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67399 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67413 "isa_arm32.tcc"
>

void
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67420 "isa_arm32.tcc"
>::initialize_condition()
{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 67429 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67437 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67441 "isa_arm32.tcc"
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67445 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67449 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67452 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67456 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67459 "isa_arm32.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67474 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67479 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67482 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67486 "isa_arm32.tcc"
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67490 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67494 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67497 "isa_arm32.tcc"
)
{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67516 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67527 "isa_arm32.tcc"
>

void
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67534 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67544 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67550 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67553 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67558 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67564 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67575 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67578 "isa_arm32.tcc"
>

void
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67585 "isa_arm32.tcc"
>::initialize_condition()
{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 67594 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67599 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67602 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67606 "isa_arm32.tcc"
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67610 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67614 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67617 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67621 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67624 "isa_arm32.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67639 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67647 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67651 "isa_arm32.tcc"
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67655 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67659 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67662 "isa_arm32.tcc"
)
{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67681 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67692 "isa_arm32.tcc"
>

void
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67699 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67709 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67718 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67723 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67729 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67740 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67743 "isa_arm32.tcc"
>

void
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67750 "isa_arm32.tcc"
>::initialize_condition()
{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 67759 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67764 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67767 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67771 "isa_arm32.tcc"
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67775 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67779 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67782 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67786 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67789 "isa_arm32.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67804 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67809 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67812 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67816 "isa_arm32.tcc"
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67820 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67824 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67827 "isa_arm32.tcc"
)
{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67846 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67854 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67857 "isa_arm32.tcc"
>

void
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67864 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67874 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67880 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67883 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67888 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67894 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67905 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67908 "isa_arm32.tcc"
>

void
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67915 "isa_arm32.tcc"
>::initialize_condition()
{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 67924 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67929 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67932 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67936 "isa_arm32.tcc"
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67940 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67944 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67947 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67951 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67954 "isa_arm32.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67969 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67977 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67981 "isa_arm32.tcc"
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67985 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67989 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67992 "isa_arm32.tcc"
)
{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 68011 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68019 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68022 "isa_arm32.tcc"
>

void
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68029 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 68039 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68048 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68053 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68059 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldc instruction
*******************************************************************/
/*******************************************************************
* mcr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68072 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68075 "isa_arm32.tcc"
>

void
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68082 "isa_arm32.tcc"
>::initialize_condition()
{
#line 358 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 68091 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68099 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68103 "isa_arm32.tcc"
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68107 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68111 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68114 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68118 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68121 "isa_arm32.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68137 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68142 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68145 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68149 "isa_arm32.tcc"
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68153 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68157 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68160 "isa_arm32.tcc"
)
{
#line 395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68173 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68182 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68187 "isa_arm32.tcc"
> *DecodeOpMcr_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68193 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68200 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68203 "isa_arm32.tcc"
>

void
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68210 "isa_arm32.tcc"
>::initialize_condition()
{
#line 364 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 68219 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68224 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68227 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68231 "isa_arm32.tcc"
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68235 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68239 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68242 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68246 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68249 "isa_arm32.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68265 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68270 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68273 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68277 "isa_arm32.tcc"
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68281 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68285 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68288 "isa_arm32.tcc"
)
{
#line 395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68301 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68307 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68310 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68315 "isa_arm32.tcc"
> *DecodeOpMcr_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68321 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68331 "isa_arm32.tcc"
>

void
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68338 "isa_arm32.tcc"
>::initialize_condition()
{
#line 370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 68347 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68352 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68355 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68359 "isa_arm32.tcc"
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68363 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68367 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68370 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68374 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68377 "isa_arm32.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68393 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68398 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68401 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68405 "isa_arm32.tcc"
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68409 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68413 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68416 "isa_arm32.tcc"
)
{
#line 395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68429 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68438 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68443 "isa_arm32.tcc"
> *DecodeOpMcr_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68449 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68456 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68459 "isa_arm32.tcc"
>

void
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68466 "isa_arm32.tcc"
>::initialize_condition()
{
#line 376 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 68475 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68480 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68483 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68487 "isa_arm32.tcc"
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68491 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68495 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68498 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68502 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68505 "isa_arm32.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68521 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68526 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68529 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68533 "isa_arm32.tcc"
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68537 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68541 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68544 "isa_arm32.tcc"
)
{
#line 395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68557 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68563 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68566 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68571 "isa_arm32.tcc"
> *DecodeOpMcr_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68577 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcr instruction
*******************************************************************/
/*******************************************************************
* mrc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68590 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68593 "isa_arm32.tcc"
>

void
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68600 "isa_arm32.tcc"
>::initialize_condition()
{
#line 419 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 68609 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68617 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68621 "isa_arm32.tcc"
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68625 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68629 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68632 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68636 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68639 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68655 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68660 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68663 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68667 "isa_arm32.tcc"
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68671 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68675 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68678 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68691 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68697 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68700 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68705 "isa_arm32.tcc"
> *DecodeOpMrc_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68711 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68718 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68721 "isa_arm32.tcc"
>

void
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68728 "isa_arm32.tcc"
>::initialize_condition()
{
#line 425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 68737 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68745 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68749 "isa_arm32.tcc"
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68753 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68757 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68760 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68764 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68767 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68783 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68788 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68791 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68795 "isa_arm32.tcc"
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68799 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68803 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68806 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68819 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68828 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68833 "isa_arm32.tcc"
> *DecodeOpMrc_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68839 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68849 "isa_arm32.tcc"
>

void
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68856 "isa_arm32.tcc"
>::initialize_condition()
{
#line 431 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 68865 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68870 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68873 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68877 "isa_arm32.tcc"
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68881 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68885 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68888 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68892 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68895 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68911 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68919 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68923 "isa_arm32.tcc"
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68927 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68931 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68934 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68947 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68956 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68961 "isa_arm32.tcc"
> *DecodeOpMrc_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68967 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68977 "isa_arm32.tcc"
>

void
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68984 "isa_arm32.tcc"
>::initialize_condition()
{
#line 437 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 68993 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69001 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69005 "isa_arm32.tcc"
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69009 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69013 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69016 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69020 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69023 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 69039 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69047 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69051 "isa_arm32.tcc"
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69055 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69059 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69062 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 69075 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69084 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69089 "isa_arm32.tcc"
> *DecodeOpMrc_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69095 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrc instruction
*******************************************************************/
/*******************************************************************
* stc instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69112 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69115 "isa_arm32.tcc"
>

void
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69122 "isa_arm32.tcc"
>::initialize_condition()
{
#line 479 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 69131 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69136 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69139 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69143 "isa_arm32.tcc"
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69147 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69151 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69154 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69158 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69161 "isa_arm32.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69176 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69184 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69188 "isa_arm32.tcc"
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69192 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69196 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69199 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69218 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69226 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69229 "isa_arm32.tcc"
>

void
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69236 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69246 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69252 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69255 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69260 "isa_arm32.tcc"
> *DecodeOpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69266 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69277 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69280 "isa_arm32.tcc"
>

void
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69287 "isa_arm32.tcc"
>::initialize_condition()
{
#line 485 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 69296 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69304 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69308 "isa_arm32.tcc"
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69312 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69316 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69319 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69323 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69326 "isa_arm32.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69341 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69346 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69349 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69353 "isa_arm32.tcc"
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69357 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69361 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69364 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69383 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69391 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69394 "isa_arm32.tcc"
>

void
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69401 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69411 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69417 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69420 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69425 "isa_arm32.tcc"
> *DecodeOpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69431 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69442 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69445 "isa_arm32.tcc"
>

void
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69452 "isa_arm32.tcc"
>::initialize_condition()
{
#line 491 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 69461 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69466 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69469 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69473 "isa_arm32.tcc"
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69477 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69481 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69484 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69488 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69491 "isa_arm32.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69506 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69511 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69514 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69518 "isa_arm32.tcc"
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69522 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69526 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69529 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69548 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69556 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69559 "isa_arm32.tcc"
>

void
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69566 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69576 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69585 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69590 "isa_arm32.tcc"
> *DecodeOpStc_offset_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69596 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69610 "isa_arm32.tcc"
>

void
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69617 "isa_arm32.tcc"
>::initialize_condition()
{
#line 497 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 69626 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69634 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69638 "isa_arm32.tcc"
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69642 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69646 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69649 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69653 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69656 "isa_arm32.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69671 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69676 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69679 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69683 "isa_arm32.tcc"
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69687 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69691 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69694 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69713 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69721 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69724 "isa_arm32.tcc"
>

void
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69731 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69741 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69750 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69755 "isa_arm32.tcc"
> *DecodeOpStc_offset_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69761 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69772 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69775 "isa_arm32.tcc"
>

void
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69782 "isa_arm32.tcc"
>::initialize_condition()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 69791 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69799 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69803 "isa_arm32.tcc"
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69807 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69811 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69814 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69818 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69821 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 69836 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69841 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69844 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69848 "isa_arm32.tcc"
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69852 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69856 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69859 "isa_arm32.tcc"
)
{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69879 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69885 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69888 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69893 "isa_arm32.tcc"
> *DecodeOpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69899 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69910 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69913 "isa_arm32.tcc"
>

void
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69920 "isa_arm32.tcc"
>::initialize_condition()
{
#line 516 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 69929 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69934 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69937 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69941 "isa_arm32.tcc"
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69945 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69949 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69952 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69956 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69959 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 69974 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69979 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69982 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69986 "isa_arm32.tcc"
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69990 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69994 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69997 "isa_arm32.tcc"
)
{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70017 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70026 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70031 "isa_arm32.tcc"
> *DecodeOpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70037 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70051 "isa_arm32.tcc"
>

void
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70058 "isa_arm32.tcc"
>::initialize_condition()
{
#line 522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 70067 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70072 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70075 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70079 "isa_arm32.tcc"
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70083 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70087 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70090 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70094 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70097 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 70112 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70117 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70120 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70124 "isa_arm32.tcc"
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70128 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70132 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70135 "isa_arm32.tcc"
)
{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70155 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70161 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70164 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70169 "isa_arm32.tcc"
> *DecodeOpStc_pre_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70175 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70186 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70189 "isa_arm32.tcc"
>

void
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70196 "isa_arm32.tcc"
>::initialize_condition()
{
#line 528 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 70205 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70213 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70217 "isa_arm32.tcc"
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70221 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70225 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70228 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70232 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70235 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 70250 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70258 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70262 "isa_arm32.tcc"
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70266 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70270 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70273 "isa_arm32.tcc"
)
{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70293 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70302 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70307 "isa_arm32.tcc"
> *DecodeOpStc_pre_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70313 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70327 "isa_arm32.tcc"
>

void
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70334 "isa_arm32.tcc"
>::initialize_condition()
{
#line 541 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 70343 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70351 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70355 "isa_arm32.tcc"
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70359 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70363 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70366 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70370 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70373 "isa_arm32.tcc"
)
{
#line 622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70388 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70396 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70400 "isa_arm32.tcc"
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70404 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70408 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70411 "isa_arm32.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70431 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70440 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70445 "isa_arm32.tcc"
> *DecodeOpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70451 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70465 "isa_arm32.tcc"
>

void
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70472 "isa_arm32.tcc"
>::initialize_condition()
{
#line 547 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 70481 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70489 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70493 "isa_arm32.tcc"
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70497 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70501 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70504 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70508 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70511 "isa_arm32.tcc"
)
{
#line 622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70526 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70534 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70538 "isa_arm32.tcc"
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70542 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70546 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70549 "isa_arm32.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70569 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70575 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70578 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70583 "isa_arm32.tcc"
> *DecodeOpStc_post_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70589 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70600 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70603 "isa_arm32.tcc"
>

void
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70610 "isa_arm32.tcc"
>::initialize_condition()
{
#line 553 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 70619 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70627 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70631 "isa_arm32.tcc"
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70635 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70639 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70642 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70646 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70649 "isa_arm32.tcc"
)
{
#line 622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70664 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70672 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70676 "isa_arm32.tcc"
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70680 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70684 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70687 "isa_arm32.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70707 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70713 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70716 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70721 "isa_arm32.tcc"
> *DecodeOpStc_post_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70727 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70738 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70741 "isa_arm32.tcc"
>

void
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70748 "isa_arm32.tcc"
>::initialize_condition()
{
#line 559 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 70757 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70762 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70765 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70769 "isa_arm32.tcc"
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70773 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70777 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70780 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70784 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70787 "isa_arm32.tcc"
)
{
#line 622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70802 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70807 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70810 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70814 "isa_arm32.tcc"
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70818 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70822 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70825 "isa_arm32.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70845 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70854 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70859 "isa_arm32.tcc"
> *DecodeOpStc_post_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70865 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70876 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70879 "isa_arm32.tcc"
>

void
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70886 "isa_arm32.tcc"
>::initialize_condition()
{
#line 572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 70895 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70903 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70907 "isa_arm32.tcc"
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70911 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70915 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70918 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70922 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70925 "isa_arm32.tcc"
)
{
#line 634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 70940 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70945 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70948 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70952 "isa_arm32.tcc"
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70956 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70960 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70963 "isa_arm32.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 70982 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70993 "isa_arm32.tcc"
>

void
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71000 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71010 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71016 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71019 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71024 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71030 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71041 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71044 "isa_arm32.tcc"
>

void
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71051 "isa_arm32.tcc"
>::initialize_condition()
{
#line 578 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 71060 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71065 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71068 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71072 "isa_arm32.tcc"
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71076 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71080 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71083 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71087 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71090 "isa_arm32.tcc"
)
{
#line 634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71105 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71110 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71113 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71117 "isa_arm32.tcc"
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71121 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71125 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71128 "isa_arm32.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71147 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71155 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71158 "isa_arm32.tcc"
>

void
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71165 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71175 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71184 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71189 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71195 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71209 "isa_arm32.tcc"
>

void
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71216 "isa_arm32.tcc"
>::initialize_condition()
{
#line 584 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 71225 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71233 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71237 "isa_arm32.tcc"
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71241 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71245 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71248 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71252 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71255 "isa_arm32.tcc"
)
{
#line 634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71270 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71275 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71278 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71282 "isa_arm32.tcc"
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71286 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71290 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71293 "isa_arm32.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71312 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71320 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71323 "isa_arm32.tcc"
>

void
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71330 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71340 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71346 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71349 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71354 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71360 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71374 "isa_arm32.tcc"
>

void
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71381 "isa_arm32.tcc"
>::initialize_condition()
{
#line 590 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 71390 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71395 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71398 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71402 "isa_arm32.tcc"
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71406 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71410 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71413 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71417 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71420 "isa_arm32.tcc"
)
{
#line 634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71435 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71443 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71447 "isa_arm32.tcc"
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71451 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71455 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71458 "isa_arm32.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71477 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71485 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71488 "isa_arm32.tcc"
>

void
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71495 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71505 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71511 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71514 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71519 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71525 "isa_arm32.tcc"
	>(code, addr);
}

/*******************************************************************
* cdp2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71538 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71542 "isa_arm32.tcc"
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71546 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71550 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71553 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71557 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71560 "isa_arm32.tcc"
)
{
#line 734 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "cdp2";
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 71573 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71581 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71585 "isa_arm32.tcc"
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71589 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71593 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71596 "isa_arm32.tcc"
)
{
#line 744 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 71605 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71611 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71614 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71619 "isa_arm32.tcc"
> *DecodeOpCdp2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71625 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cdp2 instruction
*******************************************************************/
/*******************************************************************
* ldc2 instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71642 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71645 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71649 "isa_arm32.tcc"
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71653 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71657 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71660 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71664 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71667 "isa_arm32.tcc"
)
{
#line 767 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 71679 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71684 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71687 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71691 "isa_arm32.tcc"
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71695 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71699 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71702 "isa_arm32.tcc"
)
{
#line 806 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71719 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71727 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71730 "isa_arm32.tcc"
>

void
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71737 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71747 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71753 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71756 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71761 "isa_arm32.tcc"
> *DecodeOpLdc2_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71767 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71781 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71785 "isa_arm32.tcc"
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71789 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71793 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71796 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71800 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71803 "isa_arm32.tcc"
)
{
#line 776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 71815 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71820 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71823 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71827 "isa_arm32.tcc"
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71831 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71835 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71838 "isa_arm32.tcc"
)
{
#line 820 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71856 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71862 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71865 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71870 "isa_arm32.tcc"
> *DecodeOpLdc2_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71876 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71890 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71894 "isa_arm32.tcc"
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71898 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71902 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71905 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71909 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71912 "isa_arm32.tcc"
)
{
#line 785 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 71924 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71929 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71932 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71936 "isa_arm32.tcc"
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71940 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71944 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71947 "isa_arm32.tcc"
)
{
#line 835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71965 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71971 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71974 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71979 "isa_arm32.tcc"
> *DecodeOpLdc2_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71985 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71996 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71999 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72003 "isa_arm32.tcc"
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72007 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72011 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72014 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72018 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72021 "isa_arm32.tcc"
)
{
#line 794 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 72036 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72041 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72044 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72048 "isa_arm32.tcc"
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72052 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72056 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72059 "isa_arm32.tcc"
)
{
#line 850 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 72076 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72087 "isa_arm32.tcc"
>

void
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72094 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72104 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72110 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72113 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72118 "isa_arm32.tcc"
> *DecodeOpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72124 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldc2 instruction
*******************************************************************/
/*******************************************************************
* mcr2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72137 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72140 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72144 "isa_arm32.tcc"
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72148 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72152 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72155 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72159 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72162 "isa_arm32.tcc"
)
{
#line 875 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "mcr2";
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 72175 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72180 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72183 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72187 "isa_arm32.tcc"
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72191 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72195 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72198 "isa_arm32.tcc"
)
{
#line 885 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 72207 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72216 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72221 "isa_arm32.tcc"
> *DecodeOpMcr2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72227 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcr2 instruction
*******************************************************************/
/*******************************************************************
* mrc2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72243 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72247 "isa_arm32.tcc"
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72251 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72255 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72258 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72262 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72265 "isa_arm32.tcc"
)
{
#line 902 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "mrc2";
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 72278 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72283 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72286 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72290 "isa_arm32.tcc"
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72294 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72298 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72301 "isa_arm32.tcc"
)
{
#line 912 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 72310 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72316 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72319 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72324 "isa_arm32.tcc"
> *DecodeOpMrc2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72330 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrc2 instruction
*******************************************************************/
/*******************************************************************
* stc2 instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72350 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72354 "isa_arm32.tcc"
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72358 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72362 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72365 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72369 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72372 "isa_arm32.tcc"
)
{
#line 935 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 72384 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72392 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72396 "isa_arm32.tcc"
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72400 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72404 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72407 "isa_arm32.tcc"
)
{
#line 971 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72424 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72432 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72435 "isa_arm32.tcc"
>

void
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72442 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72452 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72461 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72466 "isa_arm32.tcc"
> *DecodeOpStc2_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72472 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72486 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72490 "isa_arm32.tcc"
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72494 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72498 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72501 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72505 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72508 "isa_arm32.tcc"
)
{
#line 944 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 72520 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72528 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72532 "isa_arm32.tcc"
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72536 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72540 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72543 "isa_arm32.tcc"
)
{
#line 985 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72561 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72570 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72575 "isa_arm32.tcc"
> *DecodeOpStc2_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72581 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72595 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72599 "isa_arm32.tcc"
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72603 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72607 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72610 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72614 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72617 "isa_arm32.tcc"
)
{
#line 953 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 72629 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72634 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72637 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72641 "isa_arm32.tcc"
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72645 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72649 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72652 "isa_arm32.tcc"
)
{
#line 1000 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72670 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72676 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72679 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72684 "isa_arm32.tcc"
> *DecodeOpStc2_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72690 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72701 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72704 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72708 "isa_arm32.tcc"
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72712 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72716 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72719 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72723 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72726 "isa_arm32.tcc"
)
{
#line 962 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 72738 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72743 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72746 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72750 "isa_arm32.tcc"
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72754 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72758 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72761 "isa_arm32.tcc"
)
{
#line 1015 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 72778 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72786 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72789 "isa_arm32.tcc"
>

void
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72796 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72806 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72815 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72820 "isa_arm32.tcc"
> *DecodeOpStc2_unindexed(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72826 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

COPROCESSOR INSTRUCTIONS

**********************************************/
/*******************************************************************
* mcrr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72877 "isa_arm32.tcc"
>

void
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72884 "isa_arm32.tcc"
>::initialize_condition()
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 72893 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72898 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72901 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72905 "isa_arm32.tcc"
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72909 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72913 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72916 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72920 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72923 "isa_arm32.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 72938 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72943 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72946 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72950 "isa_arm32.tcc"
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72954 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72958 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72961 "isa_arm32.tcc"
)
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 72975 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72984 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72989 "isa_arm32.tcc"
> *DecodeOpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72995 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73005 "isa_arm32.tcc"
>

void
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73012 "isa_arm32.tcc"
>::initialize_condition()
{
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 73021 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73026 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73029 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73033 "isa_arm32.tcc"
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73037 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73041 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73044 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73048 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73051 "isa_arm32.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73066 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73071 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73074 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73078 "isa_arm32.tcc"
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73082 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73086 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73089 "isa_arm32.tcc"
)
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73103 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73109 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73112 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73117 "isa_arm32.tcc"
> *DecodeOpMcrr_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73123 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73130 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73133 "isa_arm32.tcc"
>

void
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73140 "isa_arm32.tcc"
>::initialize_condition()
{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 73149 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73157 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73161 "isa_arm32.tcc"
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73165 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73169 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73172 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73176 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73179 "isa_arm32.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73194 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73202 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73206 "isa_arm32.tcc"
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73210 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73214 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73217 "isa_arm32.tcc"
)
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73231 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73237 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73240 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73245 "isa_arm32.tcc"
> *DecodeOpMcrr_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73251 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73261 "isa_arm32.tcc"
>

void
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73268 "isa_arm32.tcc"
>::initialize_condition()
{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 73277 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73285 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73289 "isa_arm32.tcc"
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73293 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73297 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73300 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73304 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73307 "isa_arm32.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73322 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73327 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73330 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73334 "isa_arm32.tcc"
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73338 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73342 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73345 "isa_arm32.tcc"
)
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73359 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73365 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73368 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73373 "isa_arm32.tcc"
> *DecodeOpMcrr_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73379 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcrr instruction
*******************************************************************/
/*******************************************************************
* mrrc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73395 "isa_arm32.tcc"
>

void
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73402 "isa_arm32.tcc"
>::initialize_condition()
{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 73411 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73416 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73419 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73423 "isa_arm32.tcc"
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73427 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73431 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73434 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73438 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73441 "isa_arm32.tcc"
)
{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73456 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73461 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73464 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73468 "isa_arm32.tcc"
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73472 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73476 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73479 "isa_arm32.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73493 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73502 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73507 "isa_arm32.tcc"
> *DecodeOpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73513 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73523 "isa_arm32.tcc"
>

void
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73530 "isa_arm32.tcc"
>::initialize_condition()
{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 73539 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73547 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73551 "isa_arm32.tcc"
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73555 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73559 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73562 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73566 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73569 "isa_arm32.tcc"
)
{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73584 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73589 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73592 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73596 "isa_arm32.tcc"
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73600 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73604 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73607 "isa_arm32.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73621 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73630 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73635 "isa_arm32.tcc"
> *DecodeOpMrrc_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73641 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73651 "isa_arm32.tcc"
>

void
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73658 "isa_arm32.tcc"
>::initialize_condition()
{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 73667 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73672 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73675 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73679 "isa_arm32.tcc"
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73683 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73687 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73690 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73694 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73697 "isa_arm32.tcc"
)
{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73712 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73717 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73720 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73724 "isa_arm32.tcc"
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73728 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73732 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73735 "isa_arm32.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73749 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73755 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73758 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73763 "isa_arm32.tcc"
> *DecodeOpMrrc_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73769 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73779 "isa_arm32.tcc"
>

void
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73786 "isa_arm32.tcc"
>::initialize_condition()
{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 73795 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73803 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73807 "isa_arm32.tcc"
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73811 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73815 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73818 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73822 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73825 "isa_arm32.tcc"
)
{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73840 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73845 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73848 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73852 "isa_arm32.tcc"
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73856 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73860 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73863 "isa_arm32.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73877 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73886 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73891 "isa_arm32.tcc"
> *DecodeOpMrrc_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73897 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrrc instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

MISCELLANEOUS ARITHMETIC INSTRUCTIONS

**********************************************/
/*******************************************************************
* clz instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73951 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73955 "isa_arm32.tcc"
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73959 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73963 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73966 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73970 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73973 "isa_arm32.tcc"
)
{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		buffer << "clz";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", r" << rm;
	}
#line 73982 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73990 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73994 "isa_arm32.tcc"
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73998 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 74002 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 74005 "isa_arm32.tcc"
)
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t src;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		src = rm_value;
		if(src == 0) {
			res = 32;
			} else {
			res = 0;
			while((src & 0x80000000) == 0) {
				res++;
				src = src << 1;
			}
			//    res = 31 - res;
		}

		cpu.SetGPR(rd, res);
	}
#line 74032 "isa_arm32.tcc"
}
/*
* end of clz instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74040 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74043 "isa_arm32.tcc"
>

void
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74050 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == CPU<CONFIG>::PC_reg) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 74060 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74066 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74069 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74074 "isa_arm32.tcc"
> *DecodeOpClz(CodeType code, typename CONFIG::address_t addr)
{
	return new OpClz<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 74080 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74090 "isa_arm32.tcc"
>
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74095 "isa_arm32.tcc"
>::OpB_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74099 "isa_arm32.tcc"
>(code, addr, "b_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74109 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74112 "isa_arm32.tcc"
>
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74117 "isa_arm32.tcc"
>::OpB_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74121 "isa_arm32.tcc"
>(code, addr, "b_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74134 "isa_arm32.tcc"
>
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74139 "isa_arm32.tcc"
>::OpB_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74143 "isa_arm32.tcc"
>(code, addr, "b_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74156 "isa_arm32.tcc"
>
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74161 "isa_arm32.tcc"
>::OpB_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74165 "isa_arm32.tcc"
>(code, addr, "b_1110")
{
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74174 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74177 "isa_arm32.tcc"
>
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74182 "isa_arm32.tcc"
>::OpBl_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74186 "isa_arm32.tcc"
>(code, addr, "bl_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74196 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74199 "isa_arm32.tcc"
>
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74204 "isa_arm32.tcc"
>::OpBl_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74208 "isa_arm32.tcc"
>(code, addr, "bl_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74218 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74221 "isa_arm32.tcc"
>
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74226 "isa_arm32.tcc"
>::OpBl_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74230 "isa_arm32.tcc"
>(code, addr, "bl_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74243 "isa_arm32.tcc"
>
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74248 "isa_arm32.tcc"
>::OpBl_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74252 "isa_arm32.tcc"
>(code, addr, "bl_1110")
{
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74264 "isa_arm32.tcc"
>
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74269 "isa_arm32.tcc"
>::OpBx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74273 "isa_arm32.tcc"
>(code, addr, "bx")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	sbo2 = ((code >> 12) & 0xf);
	sbo3 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74289 "isa_arm32.tcc"
>
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74294 "isa_arm32.tcc"
>::OpBlx_1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74298 "isa_arm32.tcc"
>(code, addr, "blx_1")
{
	h = ((code >> 24) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74311 "isa_arm32.tcc"
>
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74316 "isa_arm32.tcc"
>::OpBlx_2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74320 "isa_arm32.tcc"
>(code, addr, "blx_2")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	sbo2 = ((code >> 12) & 0xf);
	sbo3 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74333 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74336 "isa_arm32.tcc"
>
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74341 "isa_arm32.tcc"
>::OpAnd_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74345 "isa_arm32.tcc"
>(code, addr, "and_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74358 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74361 "isa_arm32.tcc"
>
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74366 "isa_arm32.tcc"
>::OpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74370 "isa_arm32.tcc"
>(code, addr, "and_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74387 "isa_arm32.tcc"
>
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74392 "isa_arm32.tcc"
>::OpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74396 "isa_arm32.tcc"
>(code, addr, "and_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74413 "isa_arm32.tcc"
>
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74418 "isa_arm32.tcc"
>::OpAnds_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74422 "isa_arm32.tcc"
>(code, addr, "ands_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74438 "isa_arm32.tcc"
>
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74443 "isa_arm32.tcc"
>::OpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74447 "isa_arm32.tcc"
>(code, addr, "ands_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74461 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74464 "isa_arm32.tcc"
>
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74469 "isa_arm32.tcc"
>::OpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74473 "isa_arm32.tcc"
>(code, addr, "ands_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74490 "isa_arm32.tcc"
>
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74495 "isa_arm32.tcc"
>::OpEor_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74499 "isa_arm32.tcc"
>(code, addr, "eor_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74512 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74515 "isa_arm32.tcc"
>
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74520 "isa_arm32.tcc"
>::OpEor_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74524 "isa_arm32.tcc"
>(code, addr, "eor_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74538 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74541 "isa_arm32.tcc"
>
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74546 "isa_arm32.tcc"
>::OpEor_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74550 "isa_arm32.tcc"
>(code, addr, "eor_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74564 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74567 "isa_arm32.tcc"
>
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74572 "isa_arm32.tcc"
>::OpEors_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74576 "isa_arm32.tcc"
>(code, addr, "eors_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74589 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74592 "isa_arm32.tcc"
>
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74597 "isa_arm32.tcc"
>::OpEors_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74601 "isa_arm32.tcc"
>(code, addr, "eors_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74618 "isa_arm32.tcc"
>
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74623 "isa_arm32.tcc"
>::OpEors_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74627 "isa_arm32.tcc"
>(code, addr, "eors_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74641 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74644 "isa_arm32.tcc"
>
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74649 "isa_arm32.tcc"
>::OpSub_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74653 "isa_arm32.tcc"
>(code, addr, "sub_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74669 "isa_arm32.tcc"
>
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74674 "isa_arm32.tcc"
>::OpSub_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74678 "isa_arm32.tcc"
>(code, addr, "sub_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74695 "isa_arm32.tcc"
>
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74700 "isa_arm32.tcc"
>::OpSub_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74704 "isa_arm32.tcc"
>(code, addr, "sub_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74718 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74721 "isa_arm32.tcc"
>
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74726 "isa_arm32.tcc"
>::OpSubs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74730 "isa_arm32.tcc"
>(code, addr, "subs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74743 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74746 "isa_arm32.tcc"
>
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74751 "isa_arm32.tcc"
>::OpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74755 "isa_arm32.tcc"
>(code, addr, "subs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74772 "isa_arm32.tcc"
>
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74777 "isa_arm32.tcc"
>::OpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74781 "isa_arm32.tcc"
>(code, addr, "subs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74798 "isa_arm32.tcc"
>
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74803 "isa_arm32.tcc"
>::OpRsb_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74807 "isa_arm32.tcc"
>(code, addr, "rsb_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74820 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74823 "isa_arm32.tcc"
>
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74828 "isa_arm32.tcc"
>::OpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74832 "isa_arm32.tcc"
>(code, addr, "rsb_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74849 "isa_arm32.tcc"
>
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74854 "isa_arm32.tcc"
>::OpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74858 "isa_arm32.tcc"
>(code, addr, "rsb_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74872 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74875 "isa_arm32.tcc"
>
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74880 "isa_arm32.tcc"
>::OpRsbs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74884 "isa_arm32.tcc"
>(code, addr, "rsbs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74897 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74900 "isa_arm32.tcc"
>
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74905 "isa_arm32.tcc"
>::OpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74909 "isa_arm32.tcc"
>(code, addr, "rsbs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74923 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74926 "isa_arm32.tcc"
>
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74931 "isa_arm32.tcc"
>::OpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74935 "isa_arm32.tcc"
>(code, addr, "rsbs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74949 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74952 "isa_arm32.tcc"
>
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74957 "isa_arm32.tcc"
>::OpAdd_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74961 "isa_arm32.tcc"
>(code, addr, "add_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74977 "isa_arm32.tcc"
>
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74982 "isa_arm32.tcc"
>::OpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74986 "isa_arm32.tcc"
>(code, addr, "add_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75003 "isa_arm32.tcc"
>
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75008 "isa_arm32.tcc"
>::OpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75012 "isa_arm32.tcc"
>(code, addr, "add_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75026 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75029 "isa_arm32.tcc"
>
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75034 "isa_arm32.tcc"
>::OpAdds_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75038 "isa_arm32.tcc"
>(code, addr, "adds_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75054 "isa_arm32.tcc"
>
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75059 "isa_arm32.tcc"
>::OpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75063 "isa_arm32.tcc"
>(code, addr, "adds_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75080 "isa_arm32.tcc"
>
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75085 "isa_arm32.tcc"
>::OpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75089 "isa_arm32.tcc"
>(code, addr, "adds_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75103 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75106 "isa_arm32.tcc"
>
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75111 "isa_arm32.tcc"
>::OpAdc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75115 "isa_arm32.tcc"
>(code, addr, "adc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75131 "isa_arm32.tcc"
>
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75136 "isa_arm32.tcc"
>::OpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75140 "isa_arm32.tcc"
>(code, addr, "adc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75157 "isa_arm32.tcc"
>
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75162 "isa_arm32.tcc"
>::OpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75166 "isa_arm32.tcc"
>(code, addr, "adc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75180 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75183 "isa_arm32.tcc"
>
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75188 "isa_arm32.tcc"
>::OpAdcs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75192 "isa_arm32.tcc"
>(code, addr, "adcs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75208 "isa_arm32.tcc"
>
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75213 "isa_arm32.tcc"
>::OpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75217 "isa_arm32.tcc"
>(code, addr, "adcs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75234 "isa_arm32.tcc"
>
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75239 "isa_arm32.tcc"
>::OpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75243 "isa_arm32.tcc"
>(code, addr, "adcs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75257 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75260 "isa_arm32.tcc"
>
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75265 "isa_arm32.tcc"
>::OpSbc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75269 "isa_arm32.tcc"
>(code, addr, "sbc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75285 "isa_arm32.tcc"
>
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75290 "isa_arm32.tcc"
>::OpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75294 "isa_arm32.tcc"
>(code, addr, "sbc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75311 "isa_arm32.tcc"
>
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75316 "isa_arm32.tcc"
>::OpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75320 "isa_arm32.tcc"
>(code, addr, "sbc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75337 "isa_arm32.tcc"
>
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75342 "isa_arm32.tcc"
>::OpSbcs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75346 "isa_arm32.tcc"
>(code, addr, "sbcs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75362 "isa_arm32.tcc"
>
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75367 "isa_arm32.tcc"
>::OpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75371 "isa_arm32.tcc"
>(code, addr, "sbcs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75385 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75388 "isa_arm32.tcc"
>
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75393 "isa_arm32.tcc"
>::OpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75397 "isa_arm32.tcc"
>(code, addr, "sbcs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75414 "isa_arm32.tcc"
>
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75419 "isa_arm32.tcc"
>::OpRsc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75423 "isa_arm32.tcc"
>(code, addr, "rsc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75439 "isa_arm32.tcc"
>
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75444 "isa_arm32.tcc"
>::OpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75448 "isa_arm32.tcc"
>(code, addr, "rsc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75465 "isa_arm32.tcc"
>
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75470 "isa_arm32.tcc"
>::OpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75474 "isa_arm32.tcc"
>(code, addr, "rsc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75491 "isa_arm32.tcc"
>
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75496 "isa_arm32.tcc"
>::OpRscs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75500 "isa_arm32.tcc"
>(code, addr, "rscs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75513 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75516 "isa_arm32.tcc"
>
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75521 "isa_arm32.tcc"
>::OpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75525 "isa_arm32.tcc"
>(code, addr, "rscs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75539 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75542 "isa_arm32.tcc"
>
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75547 "isa_arm32.tcc"
>::OpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75551 "isa_arm32.tcc"
>(code, addr, "rscs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75565 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75568 "isa_arm32.tcc"
>
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75573 "isa_arm32.tcc"
>::OpTst_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75577 "isa_arm32.tcc"
>(code, addr, "tst_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75590 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75593 "isa_arm32.tcc"
>
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75598 "isa_arm32.tcc"
>::OpTst_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75602 "isa_arm32.tcc"
>(code, addr, "tst_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75616 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75619 "isa_arm32.tcc"
>
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75624 "isa_arm32.tcc"
>::OpTst_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75628 "isa_arm32.tcc"
>(code, addr, "tst_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75642 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75645 "isa_arm32.tcc"
>
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75650 "isa_arm32.tcc"
>::OpTeq_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75654 "isa_arm32.tcc"
>(code, addr, "teq_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75670 "isa_arm32.tcc"
>
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75675 "isa_arm32.tcc"
>::OpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75679 "isa_arm32.tcc"
>(code, addr, "teq_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75696 "isa_arm32.tcc"
>
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75701 "isa_arm32.tcc"
>::OpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75705 "isa_arm32.tcc"
>(code, addr, "teq_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75719 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75722 "isa_arm32.tcc"
>
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75727 "isa_arm32.tcc"
>::OpCmp_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75731 "isa_arm32.tcc"
>(code, addr, "cmp_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75747 "isa_arm32.tcc"
>
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75752 "isa_arm32.tcc"
>::OpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75756 "isa_arm32.tcc"
>(code, addr, "cmp_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75770 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75773 "isa_arm32.tcc"
>
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75778 "isa_arm32.tcc"
>::OpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75782 "isa_arm32.tcc"
>(code, addr, "cmp_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75799 "isa_arm32.tcc"
>
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75804 "isa_arm32.tcc"
>::OpCmn_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75808 "isa_arm32.tcc"
>(code, addr, "cmn_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75821 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75824 "isa_arm32.tcc"
>
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75829 "isa_arm32.tcc"
>::OpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75833 "isa_arm32.tcc"
>(code, addr, "cmn_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75847 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75850 "isa_arm32.tcc"
>
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75855 "isa_arm32.tcc"
>::OpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75859 "isa_arm32.tcc"
>(code, addr, "cmn_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75876 "isa_arm32.tcc"
>
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75881 "isa_arm32.tcc"
>::OpOrr_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75885 "isa_arm32.tcc"
>(code, addr, "orr_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75898 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75901 "isa_arm32.tcc"
>
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75906 "isa_arm32.tcc"
>::OpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75910 "isa_arm32.tcc"
>(code, addr, "orr_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75924 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75927 "isa_arm32.tcc"
>
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75932 "isa_arm32.tcc"
>::OpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75936 "isa_arm32.tcc"
>(code, addr, "orr_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75950 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75953 "isa_arm32.tcc"
>
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75958 "isa_arm32.tcc"
>::OpOrrs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75962 "isa_arm32.tcc"
>(code, addr, "orrs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75975 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75978 "isa_arm32.tcc"
>
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75983 "isa_arm32.tcc"
>::OpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75987 "isa_arm32.tcc"
>(code, addr, "orrs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76004 "isa_arm32.tcc"
>
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76009 "isa_arm32.tcc"
>::OpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76013 "isa_arm32.tcc"
>(code, addr, "orrs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76027 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76030 "isa_arm32.tcc"
>
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76035 "isa_arm32.tcc"
>::OpMov_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76039 "isa_arm32.tcc"
>(code, addr, "mov_32imm")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76052 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76055 "isa_arm32.tcc"
>
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76060 "isa_arm32.tcc"
>::OpMov_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76064 "isa_arm32.tcc"
>(code, addr, "mov_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76078 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76081 "isa_arm32.tcc"
>
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76086 "isa_arm32.tcc"
>::OpMov_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76090 "isa_arm32.tcc"
>(code, addr, "mov_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76107 "isa_arm32.tcc"
>
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76112 "isa_arm32.tcc"
>::OpMovs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76116 "isa_arm32.tcc"
>(code, addr, "movs_32imm")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76129 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76132 "isa_arm32.tcc"
>
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76137 "isa_arm32.tcc"
>::OpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76141 "isa_arm32.tcc"
>(code, addr, "movs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76155 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76158 "isa_arm32.tcc"
>
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76163 "isa_arm32.tcc"
>::OpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76167 "isa_arm32.tcc"
>(code, addr, "movs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76184 "isa_arm32.tcc"
>
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76189 "isa_arm32.tcc"
>::OpBic_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76193 "isa_arm32.tcc"
>(code, addr, "bic_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76209 "isa_arm32.tcc"
>
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76214 "isa_arm32.tcc"
>::OpBic_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76218 "isa_arm32.tcc"
>(code, addr, "bic_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76232 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76235 "isa_arm32.tcc"
>
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76240 "isa_arm32.tcc"
>::OpBic_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76244 "isa_arm32.tcc"
>(code, addr, "bic_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76261 "isa_arm32.tcc"
>
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76266 "isa_arm32.tcc"
>::OpBics_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76270 "isa_arm32.tcc"
>(code, addr, "bics_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76283 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76286 "isa_arm32.tcc"
>
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76291 "isa_arm32.tcc"
>::OpBics_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76295 "isa_arm32.tcc"
>(code, addr, "bics_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76309 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76312 "isa_arm32.tcc"
>
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76317 "isa_arm32.tcc"
>::OpBics_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76321 "isa_arm32.tcc"
>(code, addr, "bics_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76338 "isa_arm32.tcc"
>
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76343 "isa_arm32.tcc"
>::OpMvn_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76347 "isa_arm32.tcc"
>(code, addr, "mvn_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76360 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76363 "isa_arm32.tcc"
>
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76368 "isa_arm32.tcc"
>::OpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76372 "isa_arm32.tcc"
>(code, addr, "mvn_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76386 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76389 "isa_arm32.tcc"
>
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76394 "isa_arm32.tcc"
>::OpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76398 "isa_arm32.tcc"
>(code, addr, "mvn_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76412 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76415 "isa_arm32.tcc"
>
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76420 "isa_arm32.tcc"
>::OpMvns_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76424 "isa_arm32.tcc"
>(code, addr, "mvns_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76440 "isa_arm32.tcc"
>
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76445 "isa_arm32.tcc"
>::OpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76449 "isa_arm32.tcc"
>(code, addr, "mvns_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76466 "isa_arm32.tcc"
>
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76471 "isa_arm32.tcc"
>::OpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76475 "isa_arm32.tcc"
>(code, addr, "mvns_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76492 "isa_arm32.tcc"
>
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76497 "isa_arm32.tcc"
>::OpQadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76501 "isa_arm32.tcc"
>(code, addr, "qadd")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76514 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76517 "isa_arm32.tcc"
>
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76522 "isa_arm32.tcc"
>::OpQsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76526 "isa_arm32.tcc"
>(code, addr, "qsub")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76539 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76542 "isa_arm32.tcc"
>
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76547 "isa_arm32.tcc"
>::OpQdadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76551 "isa_arm32.tcc"
>(code, addr, "qdadd")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76564 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76567 "isa_arm32.tcc"
>
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76572 "isa_arm32.tcc"
>::OpQdsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76576 "isa_arm32.tcc"
>(code, addr, "qdsub")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76589 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76592 "isa_arm32.tcc"
>
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76597 "isa_arm32.tcc"
>::OpMla(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76601 "isa_arm32.tcc"
>(code, addr, "mla")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76618 "isa_arm32.tcc"
>
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76623 "isa_arm32.tcc"
>::OpMul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76627 "isa_arm32.tcc"
>(code, addr, "mul")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76641 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76644 "isa_arm32.tcc"
>
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76649 "isa_arm32.tcc"
>::OpSmlal(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76653 "isa_arm32.tcc"
>(code, addr, "smlal")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76670 "isa_arm32.tcc"
>
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76675 "isa_arm32.tcc"
>::OpSmull(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76679 "isa_arm32.tcc"
>(code, addr, "smull")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76696 "isa_arm32.tcc"
>
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76701 "isa_arm32.tcc"
>::OpUmlal(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76705 "isa_arm32.tcc"
>(code, addr, "umlal")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76719 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76722 "isa_arm32.tcc"
>
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76727 "isa_arm32.tcc"
>::OpUmull(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76731 "isa_arm32.tcc"
>(code, addr, "umull")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76745 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76748 "isa_arm32.tcc"
>
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76753 "isa_arm32.tcc"
>::OpSmlaxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76757 "isa_arm32.tcc"
>(code, addr, "smlaxy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76772 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76775 "isa_arm32.tcc"
>
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76780 "isa_arm32.tcc"
>::OpSmlalxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76784 "isa_arm32.tcc"
>(code, addr, "smlalxy")
{
	cond = ((code >> 28) & 0xf);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76802 "isa_arm32.tcc"
>
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76807 "isa_arm32.tcc"
>::OpSmlawy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76811 "isa_arm32.tcc"
>(code, addr, "smlawy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76828 "isa_arm32.tcc"
>
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76833 "isa_arm32.tcc"
>::OpSmulxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76837 "isa_arm32.tcc"
>(code, addr, "smulxy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76855 "isa_arm32.tcc"
>
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76860 "isa_arm32.tcc"
>::OpSmulwy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76864 "isa_arm32.tcc"
>(code, addr, "smulwy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76881 "isa_arm32.tcc"
>
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76886 "isa_arm32.tcc"
>::OpMrs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76890 "isa_arm32.tcc"
>(code, addr, "mrs")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	rd = ((code >> 12) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76904 "isa_arm32.tcc"
>
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76909 "isa_arm32.tcc"
>::OpMsr_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76913 "isa_arm32.tcc"
>(code, addr, "msr_imm")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	mask = ((code >> 16) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76929 "isa_arm32.tcc"
>
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76934 "isa_arm32.tcc"
>::OpMsr_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76938 "isa_arm32.tcc"
>(code, addr, "msr_reg")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	mask = ((code >> 16) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76950 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76953 "isa_arm32.tcc"
>
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76958 "isa_arm32.tcc"
>::OpLdr_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76962 "isa_arm32.tcc"
>(code, addr, "ldr_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76975 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76978 "isa_arm32.tcc"
>
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76983 "isa_arm32.tcc"
>::OpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76987 "isa_arm32.tcc"
>(code, addr, "ldr_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77003 "isa_arm32.tcc"
>
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77008 "isa_arm32.tcc"
>::OpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77012 "isa_arm32.tcc"
>(code, addr, "ldr_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77025 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77028 "isa_arm32.tcc"
>
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77033 "isa_arm32.tcc"
>::OpLdr_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77037 "isa_arm32.tcc"
>(code, addr, "ldr_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77052 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77055 "isa_arm32.tcc"
>
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77060 "isa_arm32.tcc"
>::OpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77064 "isa_arm32.tcc"
>(code, addr, "ldr_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77079 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77082 "isa_arm32.tcc"
>
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77087 "isa_arm32.tcc"
>::OpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77091 "isa_arm32.tcc"
>(code, addr, "ldr_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77106 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77109 "isa_arm32.tcc"
>
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77114 "isa_arm32.tcc"
>::OpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77118 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77134 "isa_arm32.tcc"
>
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77139 "isa_arm32.tcc"
>::OpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77143 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77159 "isa_arm32.tcc"
>
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77164 "isa_arm32.tcc"
>::OpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77168 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77184 "isa_arm32.tcc"
>
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77189 "isa_arm32.tcc"
>::OpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77193 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77211 "isa_arm32.tcc"
>
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77216 "isa_arm32.tcc"
>::OpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77220 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77238 "isa_arm32.tcc"
>
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77243 "isa_arm32.tcc"
>::OpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77247 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77265 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77270 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77274 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77289 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77294 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77298 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77310 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77313 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77318 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77322 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77337 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77342 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77346 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77360 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77363 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77368 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77372 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77386 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77389 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77394 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77398 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77412 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77415 "isa_arm32.tcc"
>
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77420 "isa_arm32.tcc"
>::OpLdrt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77424 "isa_arm32.tcc"
>(code, addr, "ldrt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77440 "isa_arm32.tcc"
>
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77445 "isa_arm32.tcc"
>::OpLdrt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77449 "isa_arm32.tcc"
>(code, addr, "ldrt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77467 "isa_arm32.tcc"
>
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77472 "isa_arm32.tcc"
>::OpLdrbt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77476 "isa_arm32.tcc"
>(code, addr, "ldrbt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77492 "isa_arm32.tcc"
>
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77497 "isa_arm32.tcc"
>::OpLdrbt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77501 "isa_arm32.tcc"
>(code, addr, "ldrbt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77519 "isa_arm32.tcc"
>
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77524 "isa_arm32.tcc"
>::OpStr_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77528 "isa_arm32.tcc"
>(code, addr, "str_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77541 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77544 "isa_arm32.tcc"
>
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77549 "isa_arm32.tcc"
>::OpStr_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77553 "isa_arm32.tcc"
>(code, addr, "str_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77569 "isa_arm32.tcc"
>
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77574 "isa_arm32.tcc"
>::OpStr_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77578 "isa_arm32.tcc"
>(code, addr, "str_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77591 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77594 "isa_arm32.tcc"
>
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77599 "isa_arm32.tcc"
>::OpStr_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77603 "isa_arm32.tcc"
>(code, addr, "str_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77621 "isa_arm32.tcc"
>
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77626 "isa_arm32.tcc"
>::OpStr_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77630 "isa_arm32.tcc"
>(code, addr, "str_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77645 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77648 "isa_arm32.tcc"
>
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77653 "isa_arm32.tcc"
>::OpStr_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77657 "isa_arm32.tcc"
>(code, addr, "str_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77672 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77675 "isa_arm32.tcc"
>
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77680 "isa_arm32.tcc"
>::OpStrb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77684 "isa_arm32.tcc"
>(code, addr, "strb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77697 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77700 "isa_arm32.tcc"
>
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77705 "isa_arm32.tcc"
>::OpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77709 "isa_arm32.tcc"
>(code, addr, "strb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77725 "isa_arm32.tcc"
>
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77730 "isa_arm32.tcc"
>::OpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77734 "isa_arm32.tcc"
>(code, addr, "strb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77750 "isa_arm32.tcc"
>
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77755 "isa_arm32.tcc"
>::OpStrb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77759 "isa_arm32.tcc"
>(code, addr, "strb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77774 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77777 "isa_arm32.tcc"
>
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77782 "isa_arm32.tcc"
>::OpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77786 "isa_arm32.tcc"
>(code, addr, "strb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77804 "isa_arm32.tcc"
>
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77809 "isa_arm32.tcc"
>::OpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77813 "isa_arm32.tcc"
>(code, addr, "strb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77831 "isa_arm32.tcc"
>
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77836 "isa_arm32.tcc"
>::OpStrt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77840 "isa_arm32.tcc"
>(code, addr, "strt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77856 "isa_arm32.tcc"
>
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77861 "isa_arm32.tcc"
>::OpStrt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77865 "isa_arm32.tcc"
>(code, addr, "strt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77880 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77883 "isa_arm32.tcc"
>
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77888 "isa_arm32.tcc"
>::OpStrbt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77892 "isa_arm32.tcc"
>(code, addr, "strbt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77905 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77908 "isa_arm32.tcc"
>
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77913 "isa_arm32.tcc"
>::OpStrbt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77917 "isa_arm32.tcc"
>(code, addr, "strbt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77935 "isa_arm32.tcc"
>
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77940 "isa_arm32.tcc"
>::OpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77944 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77958 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77961 "isa_arm32.tcc"
>
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77966 "isa_arm32.tcc"
>::OpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77970 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77984 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77987 "isa_arm32.tcc"
>
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77992 "isa_arm32.tcc"
>::OpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77996 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78013 "isa_arm32.tcc"
>
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78018 "isa_arm32.tcc"
>::OpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78022 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78039 "isa_arm32.tcc"
>
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78044 "isa_arm32.tcc"
>::OpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78048 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78062 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78065 "isa_arm32.tcc"
>
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78070 "isa_arm32.tcc"
>::OpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78074 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78088 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78091 "isa_arm32.tcc"
>
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78096 "isa_arm32.tcc"
>::OpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78100 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78117 "isa_arm32.tcc"
>
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78122 "isa_arm32.tcc"
>::OpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78126 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78140 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78143 "isa_arm32.tcc"
>
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78148 "isa_arm32.tcc"
>::OpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78152 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78169 "isa_arm32.tcc"
>
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78174 "isa_arm32.tcc"
>::OpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78178 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78195 "isa_arm32.tcc"
>
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78200 "isa_arm32.tcc"
>::OpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78204 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78218 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78221 "isa_arm32.tcc"
>
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78226 "isa_arm32.tcc"
>::OpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78230 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78244 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78247 "isa_arm32.tcc"
>
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78252 "isa_arm32.tcc"
>::OpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78256 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78270 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78273 "isa_arm32.tcc"
>
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78278 "isa_arm32.tcc"
>::OpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78282 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78296 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78299 "isa_arm32.tcc"
>
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78304 "isa_arm32.tcc"
>::OpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78308 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78325 "isa_arm32.tcc"
>
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78330 "isa_arm32.tcc"
>::OpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78334 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78351 "isa_arm32.tcc"
>
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78356 "isa_arm32.tcc"
>::OpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78360 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78374 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78377 "isa_arm32.tcc"
>
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78382 "isa_arm32.tcc"
>::OpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78386 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78400 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78403 "isa_arm32.tcc"
>
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78408 "isa_arm32.tcc"
>::OpStrh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78412 "isa_arm32.tcc"
>(code, addr, "strh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78426 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78429 "isa_arm32.tcc"
>
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78434 "isa_arm32.tcc"
>::OpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78438 "isa_arm32.tcc"
>(code, addr, "strh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78455 "isa_arm32.tcc"
>
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78460 "isa_arm32.tcc"
>::OpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78464 "isa_arm32.tcc"
>(code, addr, "strh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78478 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78481 "isa_arm32.tcc"
>
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78486 "isa_arm32.tcc"
>::OpStrh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78490 "isa_arm32.tcc"
>(code, addr, "strh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78507 "isa_arm32.tcc"
>
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78512 "isa_arm32.tcc"
>::OpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78516 "isa_arm32.tcc"
>(code, addr, "strh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78533 "isa_arm32.tcc"
>
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78538 "isa_arm32.tcc"
>::OpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78542 "isa_arm32.tcc"
>(code, addr, "strh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78556 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78559 "isa_arm32.tcc"
>
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78564 "isa_arm32.tcc"
>::OpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78568 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78585 "isa_arm32.tcc"
>
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78590 "isa_arm32.tcc"
>::OpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78594 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78608 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78611 "isa_arm32.tcc"
>
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78616 "isa_arm32.tcc"
>::OpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78620 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78634 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78637 "isa_arm32.tcc"
>
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78642 "isa_arm32.tcc"
>::OpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78646 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78660 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78663 "isa_arm32.tcc"
>
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78668 "isa_arm32.tcc"
>::OpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78672 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78686 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78689 "isa_arm32.tcc"
>
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78694 "isa_arm32.tcc"
>::OpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78698 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78712 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78715 "isa_arm32.tcc"
>
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78720 "isa_arm32.tcc"
>::OpStrd_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78724 "isa_arm32.tcc"
>(code, addr, "strd_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78738 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78741 "isa_arm32.tcc"
>
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78746 "isa_arm32.tcc"
>::OpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78750 "isa_arm32.tcc"
>(code, addr, "strd_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78764 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78767 "isa_arm32.tcc"
>
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78772 "isa_arm32.tcc"
>::OpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78776 "isa_arm32.tcc"
>(code, addr, "strd_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78790 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78793 "isa_arm32.tcc"
>
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78798 "isa_arm32.tcc"
>::OpStrd_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78802 "isa_arm32.tcc"
>(code, addr, "strd_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78816 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78819 "isa_arm32.tcc"
>
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78824 "isa_arm32.tcc"
>::OpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78828 "isa_arm32.tcc"
>(code, addr, "strd_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78842 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78845 "isa_arm32.tcc"
>
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78850 "isa_arm32.tcc"
>::OpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78854 "isa_arm32.tcc"
>(code, addr, "strd_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78868 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78871 "isa_arm32.tcc"
>
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78876 "isa_arm32.tcc"
>::OpLdm_1_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78880 "isa_arm32.tcc"
>(code, addr, "ldm_1_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78892 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78895 "isa_arm32.tcc"
>
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78900 "isa_arm32.tcc"
>::OpLdm_1_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78904 "isa_arm32.tcc"
>(code, addr, "ldm_1_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78919 "isa_arm32.tcc"
>
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78924 "isa_arm32.tcc"
>::OpLdm_1_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78928 "isa_arm32.tcc"
>(code, addr, "ldm_1_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78940 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78943 "isa_arm32.tcc"
>
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78948 "isa_arm32.tcc"
>::OpLdm_1_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78952 "isa_arm32.tcc"
>(code, addr, "ldm_1_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78964 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78967 "isa_arm32.tcc"
>
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78972 "isa_arm32.tcc"
>::OpLdm_2_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78976 "isa_arm32.tcc"
>(code, addr, "ldm_2_ia")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78990 "isa_arm32.tcc"
>
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78995 "isa_arm32.tcc"
>::OpLdm_2_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78999 "isa_arm32.tcc"
>(code, addr, "ldm_2_ib")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79013 "isa_arm32.tcc"
>
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79018 "isa_arm32.tcc"
>::OpLdm_2_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79022 "isa_arm32.tcc"
>(code, addr, "ldm_2_da")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79033 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79036 "isa_arm32.tcc"
>
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79041 "isa_arm32.tcc"
>::OpLdm_2_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79045 "isa_arm32.tcc"
>(code, addr, "ldm_2_db")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79056 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79059 "isa_arm32.tcc"
>
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79064 "isa_arm32.tcc"
>::OpLdm_3_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79068 "isa_arm32.tcc"
>(code, addr, "ldm_3_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79080 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79083 "isa_arm32.tcc"
>
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79088 "isa_arm32.tcc"
>::OpLdm_3_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79092 "isa_arm32.tcc"
>(code, addr, "ldm_3_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79107 "isa_arm32.tcc"
>
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79112 "isa_arm32.tcc"
>::OpLdm_3_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79116 "isa_arm32.tcc"
>(code, addr, "ldm_3_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79131 "isa_arm32.tcc"
>
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79136 "isa_arm32.tcc"
>::OpLdm_3_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79140 "isa_arm32.tcc"
>(code, addr, "ldm_3_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79155 "isa_arm32.tcc"
>
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79160 "isa_arm32.tcc"
>::OpStm_1_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79164 "isa_arm32.tcc"
>(code, addr, "stm_1_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79176 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79179 "isa_arm32.tcc"
>
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79184 "isa_arm32.tcc"
>::OpStm_1_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79188 "isa_arm32.tcc"
>(code, addr, "stm_1_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79200 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79203 "isa_arm32.tcc"
>
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79208 "isa_arm32.tcc"
>::OpStm_1_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79212 "isa_arm32.tcc"
>(code, addr, "stm_1_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79224 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79227 "isa_arm32.tcc"
>
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79232 "isa_arm32.tcc"
>::OpStm_1_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79236 "isa_arm32.tcc"
>(code, addr, "stm_1_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79248 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79251 "isa_arm32.tcc"
>
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79256 "isa_arm32.tcc"
>::OpStm_2_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79260 "isa_arm32.tcc"
>(code, addr, "stm_2_ia")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79271 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79274 "isa_arm32.tcc"
>
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79279 "isa_arm32.tcc"
>::OpStm_2_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79283 "isa_arm32.tcc"
>(code, addr, "stm_2_ib")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79294 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79297 "isa_arm32.tcc"
>
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79302 "isa_arm32.tcc"
>::OpStm_2_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79306 "isa_arm32.tcc"
>(code, addr, "stm_2_da")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79320 "isa_arm32.tcc"
>
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79325 "isa_arm32.tcc"
>::OpStm_2_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79329 "isa_arm32.tcc"
>(code, addr, "stm_2_db")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79340 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79343 "isa_arm32.tcc"
>
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79348 "isa_arm32.tcc"
>::OpSwp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79352 "isa_arm32.tcc"
>(code, addr, "swp")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79364 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79367 "isa_arm32.tcc"
>
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79372 "isa_arm32.tcc"
>::OpSwpb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79376 "isa_arm32.tcc"
>(code, addr, "swpb")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79391 "isa_arm32.tcc"
>
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79396 "isa_arm32.tcc"
>::OpSwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79400 "isa_arm32.tcc"
>(code, addr, "swi")
{
	cond = ((code >> 28) & 0xf);
	immed = ((code >> 0) & 0xffffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79413 "isa_arm32.tcc"
>
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79418 "isa_arm32.tcc"
>::OpBkpt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79422 "isa_arm32.tcc"
>(code, addr, "bkpt")
{
	himmed = ((code >> 8) & 0xfff);
	limmed = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79432 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79435 "isa_arm32.tcc"
>
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79440 "isa_arm32.tcc"
>::OpCdp_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79444 "isa_arm32.tcc"
>(code, addr, "cdp_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79462 "isa_arm32.tcc"
>
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79467 "isa_arm32.tcc"
>::OpCdp_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79471 "isa_arm32.tcc"
>(code, addr, "cdp_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79489 "isa_arm32.tcc"
>
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79494 "isa_arm32.tcc"
>::OpCdp_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79498 "isa_arm32.tcc"
>(code, addr, "cdp_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79513 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79516 "isa_arm32.tcc"
>
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79521 "isa_arm32.tcc"
>::OpCdp_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79525 "isa_arm32.tcc"
>(code, addr, "cdp_1110")
{
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79539 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79542 "isa_arm32.tcc"
>
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79547 "isa_arm32.tcc"
>::OpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79551 "isa_arm32.tcc"
>(code, addr, "ldc_offset_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79569 "isa_arm32.tcc"
>
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79574 "isa_arm32.tcc"
>::OpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79578 "isa_arm32.tcc"
>(code, addr, "ldc_offset_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79596 "isa_arm32.tcc"
>
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79601 "isa_arm32.tcc"
>::OpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79605 "isa_arm32.tcc"
>(code, addr, "ldc_offset_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79620 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79623 "isa_arm32.tcc"
>
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79628 "isa_arm32.tcc"
>::OpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79632 "isa_arm32.tcc"
>(code, addr, "ldc_offset_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79646 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79649 "isa_arm32.tcc"
>
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79654 "isa_arm32.tcc"
>::OpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79658 "isa_arm32.tcc"
>(code, addr, "ldc_pre_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79673 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79676 "isa_arm32.tcc"
>
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79681 "isa_arm32.tcc"
>::OpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79685 "isa_arm32.tcc"
>(code, addr, "ldc_pre_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79700 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79703 "isa_arm32.tcc"
>
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79708 "isa_arm32.tcc"
>::OpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79712 "isa_arm32.tcc"
>(code, addr, "ldc_pre_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79727 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79730 "isa_arm32.tcc"
>
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79735 "isa_arm32.tcc"
>::OpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79739 "isa_arm32.tcc"
>(code, addr, "ldc_pre_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79753 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79756 "isa_arm32.tcc"
>
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79761 "isa_arm32.tcc"
>::OpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79765 "isa_arm32.tcc"
>(code, addr, "ldc_post_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79783 "isa_arm32.tcc"
>
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79788 "isa_arm32.tcc"
>::OpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79792 "isa_arm32.tcc"
>(code, addr, "ldc_post_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79807 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79810 "isa_arm32.tcc"
>
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79815 "isa_arm32.tcc"
>::OpLdc_post_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79819 "isa_arm32.tcc"
>(code, addr, "ldc_post_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79837 "isa_arm32.tcc"
>
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79842 "isa_arm32.tcc"
>::OpLdc_post_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79846 "isa_arm32.tcc"
>(code, addr, "ldc_post_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79860 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79863 "isa_arm32.tcc"
>
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79868 "isa_arm32.tcc"
>::OpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79872 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79889 "isa_arm32.tcc"
>
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79894 "isa_arm32.tcc"
>::OpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79898 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79912 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79915 "isa_arm32.tcc"
>
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79920 "isa_arm32.tcc"
>::OpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79924 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79938 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79941 "isa_arm32.tcc"
>
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79946 "isa_arm32.tcc"
>::OpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79950 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_1110")
{
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79963 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79966 "isa_arm32.tcc"
>
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79971 "isa_arm32.tcc"
>::OpMcr_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79975 "isa_arm32.tcc"
>(code, addr, "mcr_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79993 "isa_arm32.tcc"
>
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79998 "isa_arm32.tcc"
>::OpMcr_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80002 "isa_arm32.tcc"
>(code, addr, "mcr_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80020 "isa_arm32.tcc"
>
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80025 "isa_arm32.tcc"
>::OpMcr_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80029 "isa_arm32.tcc"
>(code, addr, "mcr_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80047 "isa_arm32.tcc"
>
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80052 "isa_arm32.tcc"
>::OpMcr_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80056 "isa_arm32.tcc"
>(code, addr, "mcr_1110")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80070 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80073 "isa_arm32.tcc"
>
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80078 "isa_arm32.tcc"
>::OpMrc_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80082 "isa_arm32.tcc"
>(code, addr, "mrc_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80100 "isa_arm32.tcc"
>
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80105 "isa_arm32.tcc"
>::OpMrc_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80109 "isa_arm32.tcc"
>(code, addr, "mrc_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80127 "isa_arm32.tcc"
>
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80132 "isa_arm32.tcc"
>::OpMrc_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80136 "isa_arm32.tcc"
>(code, addr, "mrc_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80154 "isa_arm32.tcc"
>
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80159 "isa_arm32.tcc"
>::OpMrc_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80163 "isa_arm32.tcc"
>(code, addr, "mrc_1110")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80180 "isa_arm32.tcc"
>
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80185 "isa_arm32.tcc"
>::OpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80189 "isa_arm32.tcc"
>(code, addr, "stc_offset_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80207 "isa_arm32.tcc"
>
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80212 "isa_arm32.tcc"
>::OpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80216 "isa_arm32.tcc"
>(code, addr, "stc_offset_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80234 "isa_arm32.tcc"
>
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80239 "isa_arm32.tcc"
>::OpStc_offset_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80243 "isa_arm32.tcc"
>(code, addr, "stc_offset_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80261 "isa_arm32.tcc"
>
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80266 "isa_arm32.tcc"
>::OpStc_offset_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80270 "isa_arm32.tcc"
>(code, addr, "stc_offset_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80284 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80287 "isa_arm32.tcc"
>
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80292 "isa_arm32.tcc"
>::OpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80296 "isa_arm32.tcc"
>(code, addr, "stc_pre_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80314 "isa_arm32.tcc"
>
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80319 "isa_arm32.tcc"
>::OpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80323 "isa_arm32.tcc"
>(code, addr, "stc_pre_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80341 "isa_arm32.tcc"
>
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80346 "isa_arm32.tcc"
>::OpStc_pre_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80350 "isa_arm32.tcc"
>(code, addr, "stc_pre_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80365 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80368 "isa_arm32.tcc"
>
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80373 "isa_arm32.tcc"
>::OpStc_pre_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80377 "isa_arm32.tcc"
>(code, addr, "stc_pre_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80391 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80394 "isa_arm32.tcc"
>
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80399 "isa_arm32.tcc"
>::OpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80403 "isa_arm32.tcc"
>(code, addr, "stc_post_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80418 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80421 "isa_arm32.tcc"
>
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80426 "isa_arm32.tcc"
>::OpStc_post_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80430 "isa_arm32.tcc"
>(code, addr, "stc_post_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80448 "isa_arm32.tcc"
>
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80453 "isa_arm32.tcc"
>::OpStc_post_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80457 "isa_arm32.tcc"
>(code, addr, "stc_post_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80475 "isa_arm32.tcc"
>
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80480 "isa_arm32.tcc"
>::OpStc_post_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80484 "isa_arm32.tcc"
>(code, addr, "stc_post_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80498 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80501 "isa_arm32.tcc"
>
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80506 "isa_arm32.tcc"
>::OpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80510 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80527 "isa_arm32.tcc"
>
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80532 "isa_arm32.tcc"
>::OpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80536 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80550 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80553 "isa_arm32.tcc"
>
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80558 "isa_arm32.tcc"
>::OpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80562 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80576 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80579 "isa_arm32.tcc"
>
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80584 "isa_arm32.tcc"
>::OpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80588 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_1110")
{
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80601 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80604 "isa_arm32.tcc"
>
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80609 "isa_arm32.tcc"
>::OpCdp2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80613 "isa_arm32.tcc"
>(code, addr, "cdp2")
{
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80630 "isa_arm32.tcc"
>
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80635 "isa_arm32.tcc"
>::OpLdc2_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80639 "isa_arm32.tcc"
>(code, addr, "ldc2_offset")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80653 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80656 "isa_arm32.tcc"
>
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80661 "isa_arm32.tcc"
>::OpLdc2_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80665 "isa_arm32.tcc"
>(code, addr, "ldc2_pre")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80679 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80682 "isa_arm32.tcc"
>
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80687 "isa_arm32.tcc"
>::OpLdc2_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80691 "isa_arm32.tcc"
>(code, addr, "ldc2_post")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80705 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80708 "isa_arm32.tcc"
>
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80713 "isa_arm32.tcc"
>::OpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80717 "isa_arm32.tcc"
>(code, addr, "ldc2_unindexed")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80734 "isa_arm32.tcc"
>
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80739 "isa_arm32.tcc"
>::OpMcr2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80743 "isa_arm32.tcc"
>(code, addr, "mcr2")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80757 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80760 "isa_arm32.tcc"
>
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80765 "isa_arm32.tcc"
>::OpMrc2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80769 "isa_arm32.tcc"
>(code, addr, "mrc2")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80786 "isa_arm32.tcc"
>
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80791 "isa_arm32.tcc"
>::OpStc2_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80795 "isa_arm32.tcc"
>(code, addr, "stc2_offset")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80809 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80812 "isa_arm32.tcc"
>
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80817 "isa_arm32.tcc"
>::OpStc2_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80821 "isa_arm32.tcc"
>(code, addr, "stc2_pre")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80838 "isa_arm32.tcc"
>
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80843 "isa_arm32.tcc"
>::OpStc2_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80847 "isa_arm32.tcc"
>(code, addr, "stc2_post")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80861 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80864 "isa_arm32.tcc"
>
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80869 "isa_arm32.tcc"
>::OpStc2_unindexed(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80873 "isa_arm32.tcc"
>(code, addr, "stc2_unindexed")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80890 "isa_arm32.tcc"
>
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80895 "isa_arm32.tcc"
>::OpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80899 "isa_arm32.tcc"
>(code, addr, "mcrr_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80913 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80916 "isa_arm32.tcc"
>
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80921 "isa_arm32.tcc"
>::OpMcrr_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80925 "isa_arm32.tcc"
>(code, addr, "mcrr_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80939 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80942 "isa_arm32.tcc"
>
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80947 "isa_arm32.tcc"
>::OpMcrr_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80951 "isa_arm32.tcc"
>(code, addr, "mcrr_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80965 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80968 "isa_arm32.tcc"
>
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80973 "isa_arm32.tcc"
>::OpMcrr_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80977 "isa_arm32.tcc"
>(code, addr, "mcrr_1110")
{
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80993 "isa_arm32.tcc"
>
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80998 "isa_arm32.tcc"
>::OpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81002 "isa_arm32.tcc"
>(code, addr, "mrrc_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81016 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81019 "isa_arm32.tcc"
>
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81024 "isa_arm32.tcc"
>::OpMrrc_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81028 "isa_arm32.tcc"
>(code, addr, "mrrc_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81042 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81045 "isa_arm32.tcc"
>
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81050 "isa_arm32.tcc"
>::OpMrrc_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81054 "isa_arm32.tcc"
>(code, addr, "mrrc_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81068 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81071 "isa_arm32.tcc"
>
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81076 "isa_arm32.tcc"
>::OpMrrc_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81080 "isa_arm32.tcc"
>(code, addr, "mrrc_1110")
{
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81096 "isa_arm32.tcc"
>
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81101 "isa_arm32.tcc"
>::OpClz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81105 "isa_arm32.tcc"
>(code, addr, "clz")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbo2 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81118 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81121 "isa_arm32.tcc"
>
DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81126 "isa_arm32.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81137 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81140 "isa_arm32.tcc"
>
DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81145 "isa_arm32.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81159 "isa_arm32.tcc"
>
DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81164 "isa_arm32.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81168 "isa_arm32.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81182 "isa_arm32.tcc"
>
Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81187 "isa_arm32.tcc"
>::Decoder()
{
	little_endian = false;
	mru_page = 0;
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	if(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	CONFIG::HAS_INSN_ARITH_CLZ
#line 81196 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81200 "isa_arm32.tcc"
	>(0x1600010UL, 0xff000f0UL, DecodeOpClz<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81204 "isa_arm32.tcc"
	>));
	if(
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81209 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81213 "isa_arm32.tcc"
	>(0xec500000UL, 0xfff00000UL, DecodeOpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81217 "isa_arm32.tcc"
	>));
	if(
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81222 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81226 "isa_arm32.tcc"
	>(0xcc500000UL, 0xeff00000UL, DecodeOpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81230 "isa_arm32.tcc"
	>));
	if(
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81235 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81239 "isa_arm32.tcc"
	>(0x8c500000UL, 0xcff00000UL, DecodeOpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81243 "isa_arm32.tcc"
	>));
	if(
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81248 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81252 "isa_arm32.tcc"
	>(0xc500000UL, 0x8ff00000UL, DecodeOpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81256 "isa_arm32.tcc"
	>));
	if(
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81261 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81265 "isa_arm32.tcc"
	>(0xec400000UL, 0xfff00000UL, DecodeOpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81269 "isa_arm32.tcc"
	>));
	if(
#line 49 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81274 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81278 "isa_arm32.tcc"
	>(0xcc400000UL, 0xeff00000UL, DecodeOpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81282 "isa_arm32.tcc"
	>));
	if(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81287 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81291 "isa_arm32.tcc"
	>(0x8c400000UL, 0xcff00000UL, DecodeOpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81295 "isa_arm32.tcc"
	>));
	if(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81300 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81304 "isa_arm32.tcc"
	>(0xc400000UL, 0x8ff00000UL, DecodeOpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81308 "isa_arm32.tcc"
	>));
	if(
#line 932 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81313 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81317 "isa_arm32.tcc"
	>(0xfc000000UL, 0xff300000UL, DecodeOpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81321 "isa_arm32.tcc"
	>));
	if(
#line 930 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81326 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81330 "isa_arm32.tcc"
	>(0xfc200000UL, 0xff300000UL, DecodeOpStc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81334 "isa_arm32.tcc"
	>));
	if(
#line 928 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81339 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81343 "isa_arm32.tcc"
	>(0xfd200000UL, 0xff300000UL, DecodeOpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81347 "isa_arm32.tcc"
	>));
	if(
#line 926 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81352 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81356 "isa_arm32.tcc"
	>(0xfd000000UL, 0xff300000UL, DecodeOpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81360 "isa_arm32.tcc"
	>));
	if(
#line 899 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
#line 81365 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81369 "isa_arm32.tcc"
	>(0xfe100010UL, 0xff100010UL, DecodeOpMrc2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81373 "isa_arm32.tcc"
	>));
	if(
#line 872 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
#line 81378 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81382 "isa_arm32.tcc"
	>(0xfe000010UL, 0xff100010UL, DecodeOpMcr2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81386 "isa_arm32.tcc"
	>));
	if(
#line 764 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81391 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81395 "isa_arm32.tcc"
	>(0xfc100000UL, 0xff300000UL, DecodeOpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81399 "isa_arm32.tcc"
	>));
	if(
#line 762 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81404 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81408 "isa_arm32.tcc"
	>(0xfc300000UL, 0xff300000UL, DecodeOpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81412 "isa_arm32.tcc"
	>));
	if(
#line 760 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81417 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81421 "isa_arm32.tcc"
	>(0xfd300000UL, 0xff300000UL, DecodeOpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81425 "isa_arm32.tcc"
	>));
	if(
#line 758 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81430 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81434 "isa_arm32.tcc"
	>(0xfd100000UL, 0xff300000UL, DecodeOpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81438 "isa_arm32.tcc"
	>));
	if(
#line 731 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_OPS
#line 81443 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81447 "isa_arm32.tcc"
	>(0xfe000000UL, 0xff000010UL, DecodeOpCdp2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81451 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81456 "isa_arm32.tcc"
	>(0xec800000UL, 0xffb00000UL, DecodeOpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81460 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81465 "isa_arm32.tcc"
	>(0xcc800000UL, 0xefb00000UL, DecodeOpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81469 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81474 "isa_arm32.tcc"
	>(0x8c800000UL, 0xcfb00000UL, DecodeOpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81478 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81483 "isa_arm32.tcc"
	>(0xc800000UL, 0x8fb00000UL, DecodeOpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81487 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81492 "isa_arm32.tcc"
	>(0xec200000UL, 0xff300000UL, DecodeOpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81496 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81501 "isa_arm32.tcc"
	>(0xcc200000UL, 0xef300000UL, DecodeOpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81505 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81510 "isa_arm32.tcc"
	>(0x8c200000UL, 0xcf300000UL, DecodeOpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81514 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81519 "isa_arm32.tcc"
	>(0xc200000UL, 0x8f300000UL, DecodeOpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81523 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81528 "isa_arm32.tcc"
	>(0xed200000UL, 0xff300000UL, DecodeOpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81532 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81537 "isa_arm32.tcc"
	>(0xcd200000UL, 0xef300000UL, DecodeOpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81541 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81546 "isa_arm32.tcc"
	>(0x8d200000UL, 0xcf300000UL, DecodeOpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81550 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81555 "isa_arm32.tcc"
	>(0xd200000UL, 0x8f300000UL, DecodeOpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81559 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81564 "isa_arm32.tcc"
	>(0xed000000UL, 0xff300000UL, DecodeOpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81568 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81573 "isa_arm32.tcc"
	>(0xcd000000UL, 0xef300000UL, DecodeOpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81577 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81582 "isa_arm32.tcc"
	>(0x8d000000UL, 0xcf300000UL, DecodeOpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81586 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81591 "isa_arm32.tcc"
	>(0xd000000UL, 0x8f300000UL, DecodeOpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81595 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81600 "isa_arm32.tcc"
	>(0xee100010UL, 0xff100010UL, DecodeOpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81604 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81609 "isa_arm32.tcc"
	>(0xce100010UL, 0xef100010UL, DecodeOpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81613 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81618 "isa_arm32.tcc"
	>(0x8e100010UL, 0xcf100010UL, DecodeOpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81622 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81627 "isa_arm32.tcc"
	>(0xe100010UL, 0x8f100010UL, DecodeOpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81631 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81636 "isa_arm32.tcc"
	>(0xee000010UL, 0xff100010UL, DecodeOpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81640 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81645 "isa_arm32.tcc"
	>(0xce000010UL, 0xef100010UL, DecodeOpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81649 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81654 "isa_arm32.tcc"
	>(0x8e000010UL, 0xcf100010UL, DecodeOpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81658 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81663 "isa_arm32.tcc"
	>(0xe000010UL, 0x8f100010UL, DecodeOpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81667 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81672 "isa_arm32.tcc"
	>(0xec900000UL, 0xffb00000UL, DecodeOpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81676 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81681 "isa_arm32.tcc"
	>(0xcc900000UL, 0xefb00000UL, DecodeOpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81685 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81690 "isa_arm32.tcc"
	>(0x8c900000UL, 0xcfb00000UL, DecodeOpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81694 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81699 "isa_arm32.tcc"
	>(0xc900000UL, 0x8fb00000UL, DecodeOpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81703 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81708 "isa_arm32.tcc"
	>(0xec300000UL, 0xff300000UL, DecodeOpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81712 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81717 "isa_arm32.tcc"
	>(0xcc300000UL, 0xef300000UL, DecodeOpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81721 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81726 "isa_arm32.tcc"
	>(0x8c300000UL, 0xcf300000UL, DecodeOpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81730 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81735 "isa_arm32.tcc"
	>(0xc300000UL, 0x8f300000UL, DecodeOpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81739 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81744 "isa_arm32.tcc"
	>(0xed300000UL, 0xff300000UL, DecodeOpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81748 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81753 "isa_arm32.tcc"
	>(0xcd300000UL, 0xef300000UL, DecodeOpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81757 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81762 "isa_arm32.tcc"
	>(0x8d300000UL, 0xcf300000UL, DecodeOpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81766 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81771 "isa_arm32.tcc"
	>(0xd300000UL, 0x8f300000UL, DecodeOpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81775 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81780 "isa_arm32.tcc"
	>(0xed100000UL, 0xff300000UL, DecodeOpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81784 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81789 "isa_arm32.tcc"
	>(0xcd100000UL, 0xef300000UL, DecodeOpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81793 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81798 "isa_arm32.tcc"
	>(0x8d100000UL, 0xcf300000UL, DecodeOpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81802 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81807 "isa_arm32.tcc"
	>(0xd100000UL, 0x8f300000UL, DecodeOpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81811 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81816 "isa_arm32.tcc"
	>(0xee000000UL, 0xff000010UL, DecodeOpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81820 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81825 "isa_arm32.tcc"
	>(0xce000000UL, 0xef000010UL, DecodeOpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81829 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81834 "isa_arm32.tcc"
	>(0x8e000000UL, 0xcf000010UL, DecodeOpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81838 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81843 "isa_arm32.tcc"
	>(0xe000000UL, 0x8f000010UL, DecodeOpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81847 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81852 "isa_arm32.tcc"
	>(0xe1200070UL, 0xfff000f0UL, DecodeOpBkpt<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81856 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81861 "isa_arm32.tcc"
	>(0xf000000UL, 0xf000000UL, DecodeOpSwi<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81865 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81870 "isa_arm32.tcc"
	>(0x1400090UL, 0xff00ff0UL, DecodeOpSwpb<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81874 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81879 "isa_arm32.tcc"
	>(0x1000090UL, 0xff00ff0UL, DecodeOpSwp<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81883 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81888 "isa_arm32.tcc"
	>(0x9400000UL, 0xff00000UL, DecodeOpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81892 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81897 "isa_arm32.tcc"
	>(0x8400000UL, 0xff00000UL, DecodeOpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81901 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81906 "isa_arm32.tcc"
	>(0x9c00000UL, 0xff00000UL, DecodeOpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81910 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81915 "isa_arm32.tcc"
	>(0x8c00000UL, 0xff00000UL, DecodeOpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81919 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81924 "isa_arm32.tcc"
	>(0x9000000UL, 0xfd00000UL, DecodeOpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81928 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81933 "isa_arm32.tcc"
	>(0x8000000UL, 0xfd00000UL, DecodeOpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81937 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81942 "isa_arm32.tcc"
	>(0x9800000UL, 0xfd00000UL, DecodeOpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81946 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81951 "isa_arm32.tcc"
	>(0x8800000UL, 0xfd00000UL, DecodeOpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81955 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81960 "isa_arm32.tcc"
	>(0x9508000UL, 0xfd08000UL, DecodeOpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81964 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81969 "isa_arm32.tcc"
	>(0x8508000UL, 0xfd08000UL, DecodeOpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81973 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81978 "isa_arm32.tcc"
	>(0x9d08000UL, 0xfd08000UL, DecodeOpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81982 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81987 "isa_arm32.tcc"
	>(0x8d08000UL, 0xfd08000UL, DecodeOpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81991 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81996 "isa_arm32.tcc"
	>(0x9500000UL, 0xff08000UL, DecodeOpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82000 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82005 "isa_arm32.tcc"
	>(0x8500000UL, 0xff08000UL, DecodeOpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82009 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82014 "isa_arm32.tcc"
	>(0x9d00000UL, 0xff08000UL, DecodeOpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82018 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82023 "isa_arm32.tcc"
	>(0x8d00000UL, 0xff08000UL, DecodeOpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82027 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82032 "isa_arm32.tcc"
	>(0x9100000UL, 0xfd00000UL, DecodeOpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82036 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82041 "isa_arm32.tcc"
	>(0x8100000UL, 0xfd00000UL, DecodeOpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82045 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82050 "isa_arm32.tcc"
	>(0x9900000UL, 0xfd00000UL, DecodeOpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82054 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82059 "isa_arm32.tcc"
	>(0x8900000UL, 0xfd00000UL, DecodeOpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82063 "isa_arm32.tcc"
	>));
	if(
#line 273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82068 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82072 "isa_arm32.tcc"
	>(0x12000f0UL, 0xf7000f0UL, DecodeOpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82076 "isa_arm32.tcc"
	>));
	if(
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82081 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82085 "isa_arm32.tcc"
	>(0x10000f0UL, 0xf7000f0UL, DecodeOpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82089 "isa_arm32.tcc"
	>));
	if(
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82094 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82098 "isa_arm32.tcc"
	>(0xf0UL, 0xf7000f0UL, DecodeOpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82102 "isa_arm32.tcc"
	>));
	if(
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82107 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82111 "isa_arm32.tcc"
	>(0x16000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82115 "isa_arm32.tcc"
	>));
	if(
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82120 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82124 "isa_arm32.tcc"
	>(0x14000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82128 "isa_arm32.tcc"
	>));
	if(
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82133 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82137 "isa_arm32.tcc"
	>(0x4000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82141 "isa_arm32.tcc"
	>));
	if(
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82146 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82150 "isa_arm32.tcc"
	>(0x12000d0UL, 0xf7000f0UL, DecodeOpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82154 "isa_arm32.tcc"
	>));
	if(
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82159 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82163 "isa_arm32.tcc"
	>(0x10000d0UL, 0xf7000f0UL, DecodeOpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82167 "isa_arm32.tcc"
	>));
	if(
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82172 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82176 "isa_arm32.tcc"
	>(0xd0UL, 0xf7000f0UL, DecodeOpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82180 "isa_arm32.tcc"
	>));
	if(
#line 50 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82185 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82189 "isa_arm32.tcc"
	>(0x16000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82193 "isa_arm32.tcc"
	>));
	if(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82198 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82202 "isa_arm32.tcc"
	>(0x14000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82206 "isa_arm32.tcc"
	>));
	if(
#line 46 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82211 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82215 "isa_arm32.tcc"
	>(0x4000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82219 "isa_arm32.tcc"
	>));
	if(
#line 553 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82224 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82228 "isa_arm32.tcc"
	>(0x12000b0UL, 0xf7000f0UL, DecodeOpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82232 "isa_arm32.tcc"
	>));
	if(
#line 551 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82237 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82241 "isa_arm32.tcc"
	>(0x10000b0UL, 0xf7000f0UL, DecodeOpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82245 "isa_arm32.tcc"
	>));
	if(
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82250 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82254 "isa_arm32.tcc"
	>(0xb0UL, 0xf7000f0UL, DecodeOpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82258 "isa_arm32.tcc"
	>));
	if(
#line 547 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82263 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82267 "isa_arm32.tcc"
	>(0x16000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82271 "isa_arm32.tcc"
	>));
	if(
#line 545 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82276 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82280 "isa_arm32.tcc"
	>(0x14000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82284 "isa_arm32.tcc"
	>));
	if(
#line 543 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82289 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82293 "isa_arm32.tcc"
	>(0x4000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82297 "isa_arm32.tcc"
	>));
	if(
#line 393 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82302 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82306 "isa_arm32.tcc"
	>(0x13000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82310 "isa_arm32.tcc"
	>));
	if(
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82315 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82319 "isa_arm32.tcc"
	>(0x11000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82323 "isa_arm32.tcc"
	>));
	if(
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82328 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82332 "isa_arm32.tcc"
	>(0x1000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82336 "isa_arm32.tcc"
	>));
	if(
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82341 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82345 "isa_arm32.tcc"
	>(0x17000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82349 "isa_arm32.tcc"
	>));
	if(
#line 385 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82354 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82358 "isa_arm32.tcc"
	>(0x15000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82362 "isa_arm32.tcc"
	>));
	if(
#line 383 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82367 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82371 "isa_arm32.tcc"
	>(0x5000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82375 "isa_arm32.tcc"
	>));
	if(
#line 226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82380 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82384 "isa_arm32.tcc"
	>(0x13000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82388 "isa_arm32.tcc"
	>));
	if(
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82393 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82397 "isa_arm32.tcc"
	>(0x11000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82401 "isa_arm32.tcc"
	>));
	if(
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82406 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82410 "isa_arm32.tcc"
	>(0x1000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82414 "isa_arm32.tcc"
	>));
	if(
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82419 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82423 "isa_arm32.tcc"
	>(0x17000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82427 "isa_arm32.tcc"
	>));
	if(
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82432 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82436 "isa_arm32.tcc"
	>(0x15000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82440 "isa_arm32.tcc"
	>));
	if(
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82445 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82449 "isa_arm32.tcc"
	>(0x5000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82453 "isa_arm32.tcc"
	>));
	if(
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82458 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82462 "isa_arm32.tcc"
	>(0x13000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82466 "isa_arm32.tcc"
	>));
	if(
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82471 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82475 "isa_arm32.tcc"
	>(0x11000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82479 "isa_arm32.tcc"
	>));
	if(
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82484 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82488 "isa_arm32.tcc"
	>(0x1000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82492 "isa_arm32.tcc"
	>));
	if(
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82497 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82501 "isa_arm32.tcc"
	>(0x17000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82505 "isa_arm32.tcc"
	>));
	if(
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82510 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82514 "isa_arm32.tcc"
	>(0x15000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82518 "isa_arm32.tcc"
	>));
	if(
#line 50 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82523 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82527 "isa_arm32.tcc"
	>(0x5000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82531 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82536 "isa_arm32.tcc"
	>(0x6600000UL, 0xf700010UL, DecodeOpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82540 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82545 "isa_arm32.tcc"
	>(0x4600000UL, 0xf700000UL, DecodeOpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82549 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82554 "isa_arm32.tcc"
	>(0x6200000UL, 0xf700010UL, DecodeOpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82558 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82563 "isa_arm32.tcc"
	>(0x4200000UL, 0xf700000UL, DecodeOpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82567 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82572 "isa_arm32.tcc"
	>(0x7600000UL, 0xf700010UL, DecodeOpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82576 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82581 "isa_arm32.tcc"
	>(0x7400000UL, 0xf700010UL, DecodeOpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82585 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82590 "isa_arm32.tcc"
	>(0x6400000UL, 0xf700010UL, DecodeOpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82594 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82599 "isa_arm32.tcc"
	>(0x5600000UL, 0xf700000UL, DecodeOpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82603 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82608 "isa_arm32.tcc"
	>(0x5400000UL, 0xf700000UL, DecodeOpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82612 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82617 "isa_arm32.tcc"
	>(0x4400000UL, 0xf700000UL, DecodeOpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82621 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82626 "isa_arm32.tcc"
	>(0x7200000UL, 0xf700010UL, DecodeOpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82630 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82635 "isa_arm32.tcc"
	>(0x7000000UL, 0xf700010UL, DecodeOpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82639 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82644 "isa_arm32.tcc"
	>(0x6000000UL, 0xf700010UL, DecodeOpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82648 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82653 "isa_arm32.tcc"
	>(0x5200000UL, 0xf700000UL, DecodeOpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82657 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82662 "isa_arm32.tcc"
	>(0x5000000UL, 0xf700000UL, DecodeOpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82666 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82671 "isa_arm32.tcc"
	>(0x4000000UL, 0xf700000UL, DecodeOpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82675 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82680 "isa_arm32.tcc"
	>(0x6700000UL, 0xf700010UL, DecodeOpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82684 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82689 "isa_arm32.tcc"
	>(0x4700000UL, 0xf700000UL, DecodeOpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82693 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82698 "isa_arm32.tcc"
	>(0x6300000UL, 0xf700010UL, DecodeOpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82702 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82707 "isa_arm32.tcc"
	>(0x4300000UL, 0xf700000UL, DecodeOpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82711 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82716 "isa_arm32.tcc"
	>(0x770f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82720 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82725 "isa_arm32.tcc"
	>(0x750f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82729 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82734 "isa_arm32.tcc"
	>(0x650f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82738 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82743 "isa_arm32.tcc"
	>(0x570f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82747 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82752 "isa_arm32.tcc"
	>(0x550f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82756 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82761 "isa_arm32.tcc"
	>(0x450f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82765 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82770 "isa_arm32.tcc"
	>(0x7700000UL, 0xf700010UL, DecodeOpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82774 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82779 "isa_arm32.tcc"
	>(0x7500000UL, 0xf700010UL, DecodeOpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82783 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82788 "isa_arm32.tcc"
	>(0x6500000UL, 0xf700010UL, DecodeOpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82792 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82797 "isa_arm32.tcc"
	>(0x5700000UL, 0xf700000UL, DecodeOpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82801 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82806 "isa_arm32.tcc"
	>(0x5500000UL, 0xf700000UL, DecodeOpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82810 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82815 "isa_arm32.tcc"
	>(0x4500000UL, 0xf700000UL, DecodeOpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82819 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82824 "isa_arm32.tcc"
	>(0x7300000UL, 0xf700010UL, DecodeOpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82828 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82833 "isa_arm32.tcc"
	>(0x7100000UL, 0xf700010UL, DecodeOpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82837 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82842 "isa_arm32.tcc"
	>(0x6100000UL, 0xf700010UL, DecodeOpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82846 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82851 "isa_arm32.tcc"
	>(0x5300000UL, 0xf700000UL, DecodeOpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82855 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82860 "isa_arm32.tcc"
	>(0x5100000UL, 0xf700000UL, DecodeOpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82864 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82869 "isa_arm32.tcc"
	>(0x4100000UL, 0xf700000UL, DecodeOpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82873 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82878 "isa_arm32.tcc"
	>(0x120f000UL, 0xfb0fff0UL, DecodeOpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82882 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82887 "isa_arm32.tcc"
	>(0x320f000UL, 0xfb0f000UL, DecodeOpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82891 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82896 "isa_arm32.tcc"
	>(0x10f0000UL, 0xfbf0fffUL, DecodeOpMrs<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82900 "isa_arm32.tcc"
	>));
	if(
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULWY
#line 82905 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82909 "isa_arm32.tcc"
	>(0x12000a0UL, 0xff000b0UL, DecodeOpSmulwy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82913 "isa_arm32.tcc"
	>));
	if(
#line 281 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULXY
#line 82918 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82922 "isa_arm32.tcc"
	>(0x1600080UL, 0xff00090UL, DecodeOpSmulxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82926 "isa_arm32.tcc"
	>));
	if(
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAWY
#line 82931 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82935 "isa_arm32.tcc"
	>(0x1200080UL, 0xff000b0UL, DecodeOpSmlawy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82939 "isa_arm32.tcc"
	>));
	if(
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLALXY
#line 82944 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82948 "isa_arm32.tcc"
	>(0x1400080UL, 0xff00090UL, DecodeOpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82952 "isa_arm32.tcc"
	>));
	if(
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAXY
#line 82957 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82961 "isa_arm32.tcc"
	>(0x1000080UL, 0xff00090UL, DecodeOpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82965 "isa_arm32.tcc"
	>));
	if(
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_UMULL
#line 82970 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82974 "isa_arm32.tcc"
	>(0x800090UL, 0xfe000f0UL, DecodeOpUmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82978 "isa_arm32.tcc"
	>));
	if(
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_UMLAL
#line 82983 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82987 "isa_arm32.tcc"
	>(0xa00090UL, 0xfe000f0UL, DecodeOpUmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82991 "isa_arm32.tcc"
	>));
	if(
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULL
#line 82996 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83000 "isa_arm32.tcc"
	>(0xc00090UL, 0xfe000f0UL, DecodeOpSmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83004 "isa_arm32.tcc"
	>));
	if(
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAL
#line 83009 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83013 "isa_arm32.tcc"
	>(0xe00090UL, 0xfe000f0UL, DecodeOpSmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83017 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83022 "isa_arm32.tcc"
	>(0x90UL, 0xfe000f0UL, DecodeOpMul<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83026 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83031 "isa_arm32.tcc"
	>(0x200090UL, 0xfe000f0UL, DecodeOpMla<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83035 "isa_arm32.tcc"
	>));
	if(
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QDSUB
#line 83040 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83044 "isa_arm32.tcc"
	>(0x1600050UL, 0xff000f0UL, DecodeOpQdsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83048 "isa_arm32.tcc"
	>));
	if(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QDADD
#line 83053 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83057 "isa_arm32.tcc"
	>(0x1400050UL, 0xff000f0UL, DecodeOpQdadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83061 "isa_arm32.tcc"
	>));
	if(
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QSUB
#line 83066 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83070 "isa_arm32.tcc"
	>(0x1200050UL, 0xff000f0UL, DecodeOpQsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83074 "isa_arm32.tcc"
	>));
	if(
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QADD
#line 83079 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83083 "isa_arm32.tcc"
	>(0x1000050UL, 0xff000f0UL, DecodeOpQadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83087 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83092 "isa_arm32.tcc"
	>(0x1f00010UL, 0xff00090UL, DecodeOpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83096 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83101 "isa_arm32.tcc"
	>(0x1f00000UL, 0xff00010UL, DecodeOpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83105 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83110 "isa_arm32.tcc"
	>(0x3f00000UL, 0xff00000UL, DecodeOpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83114 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83119 "isa_arm32.tcc"
	>(0x1e00010UL, 0xff00090UL, DecodeOpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83123 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83128 "isa_arm32.tcc"
	>(0x1e00000UL, 0xff00010UL, DecodeOpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83132 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83137 "isa_arm32.tcc"
	>(0x3e00000UL, 0xff00000UL, DecodeOpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83141 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83146 "isa_arm32.tcc"
	>(0x1d00010UL, 0xff00090UL, DecodeOpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83150 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83155 "isa_arm32.tcc"
	>(0x1d00000UL, 0xff00010UL, DecodeOpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83159 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83164 "isa_arm32.tcc"
	>(0x3d00000UL, 0xff00000UL, DecodeOpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83168 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83173 "isa_arm32.tcc"
	>(0x1c00010UL, 0xff00090UL, DecodeOpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83177 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83182 "isa_arm32.tcc"
	>(0x1c00000UL, 0xff00010UL, DecodeOpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83186 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83191 "isa_arm32.tcc"
	>(0x3c00000UL, 0xff00000UL, DecodeOpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83195 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83200 "isa_arm32.tcc"
	>(0x1b00010UL, 0xff00090UL, DecodeOpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83204 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83209 "isa_arm32.tcc"
	>(0x1b00000UL, 0xff00010UL, DecodeOpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83213 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83218 "isa_arm32.tcc"
	>(0x3b00000UL, 0xff00000UL, DecodeOpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83222 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83227 "isa_arm32.tcc"
	>(0x1a00010UL, 0xff00090UL, DecodeOpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83231 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83236 "isa_arm32.tcc"
	>(0x1a00000UL, 0xff00010UL, DecodeOpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83240 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83245 "isa_arm32.tcc"
	>(0x3a00000UL, 0xff00000UL, DecodeOpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83249 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83254 "isa_arm32.tcc"
	>(0x1900010UL, 0xff00090UL, DecodeOpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83258 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83263 "isa_arm32.tcc"
	>(0x1900000UL, 0xff00010UL, DecodeOpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83267 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83272 "isa_arm32.tcc"
	>(0x3900000UL, 0xff00000UL, DecodeOpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83276 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83281 "isa_arm32.tcc"
	>(0x1800010UL, 0xff00090UL, DecodeOpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83285 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83290 "isa_arm32.tcc"
	>(0x1800000UL, 0xff00010UL, DecodeOpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83294 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83299 "isa_arm32.tcc"
	>(0x3800000UL, 0xff00000UL, DecodeOpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83303 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83308 "isa_arm32.tcc"
	>(0x1700010UL, 0xff00090UL, DecodeOpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83312 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83317 "isa_arm32.tcc"
	>(0x1700000UL, 0xff00010UL, DecodeOpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83321 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83326 "isa_arm32.tcc"
	>(0x3700000UL, 0xff00000UL, DecodeOpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83330 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83335 "isa_arm32.tcc"
	>(0x1500010UL, 0xff00090UL, DecodeOpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83339 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83344 "isa_arm32.tcc"
	>(0x1500000UL, 0xff00010UL, DecodeOpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83348 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83353 "isa_arm32.tcc"
	>(0x3500000UL, 0xff00000UL, DecodeOpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83357 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83362 "isa_arm32.tcc"
	>(0x1300010UL, 0xff00090UL, DecodeOpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83366 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83371 "isa_arm32.tcc"
	>(0x1300000UL, 0xff00010UL, DecodeOpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83375 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83380 "isa_arm32.tcc"
	>(0x3300000UL, 0xff00000UL, DecodeOpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83384 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83389 "isa_arm32.tcc"
	>(0x1100010UL, 0xff00090UL, DecodeOpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83393 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83398 "isa_arm32.tcc"
	>(0x1100000UL, 0xff00010UL, DecodeOpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83402 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83407 "isa_arm32.tcc"
	>(0x3100000UL, 0xff00000UL, DecodeOpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83411 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83416 "isa_arm32.tcc"
	>(0xf00010UL, 0xff00090UL, DecodeOpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83420 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83425 "isa_arm32.tcc"
	>(0xf00000UL, 0xff00010UL, DecodeOpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83429 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83434 "isa_arm32.tcc"
	>(0x2f00000UL, 0xff00000UL, DecodeOpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83438 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83443 "isa_arm32.tcc"
	>(0xe00010UL, 0xff00090UL, DecodeOpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83447 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83452 "isa_arm32.tcc"
	>(0xe00000UL, 0xff00010UL, DecodeOpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83456 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83461 "isa_arm32.tcc"
	>(0x2e00000UL, 0xff00000UL, DecodeOpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83465 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83470 "isa_arm32.tcc"
	>(0xd00010UL, 0xff00090UL, DecodeOpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83474 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83479 "isa_arm32.tcc"
	>(0xd00000UL, 0xff00010UL, DecodeOpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83483 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83488 "isa_arm32.tcc"
	>(0x2d00000UL, 0xff00000UL, DecodeOpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83492 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83497 "isa_arm32.tcc"
	>(0xc00010UL, 0xff00090UL, DecodeOpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83501 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83506 "isa_arm32.tcc"
	>(0xc00000UL, 0xff00010UL, DecodeOpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83510 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83515 "isa_arm32.tcc"
	>(0x2c00000UL, 0xff00000UL, DecodeOpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83519 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83524 "isa_arm32.tcc"
	>(0xb00010UL, 0xff00090UL, DecodeOpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83528 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83533 "isa_arm32.tcc"
	>(0xb00000UL, 0xff00010UL, DecodeOpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83537 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83542 "isa_arm32.tcc"
	>(0x2b00000UL, 0xff00000UL, DecodeOpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83546 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83551 "isa_arm32.tcc"
	>(0xa00010UL, 0xff00090UL, DecodeOpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83555 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83560 "isa_arm32.tcc"
	>(0xa00000UL, 0xff00010UL, DecodeOpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83564 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83569 "isa_arm32.tcc"
	>(0x2a00000UL, 0xff00000UL, DecodeOpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83573 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83578 "isa_arm32.tcc"
	>(0x900010UL, 0xff00090UL, DecodeOpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83582 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83587 "isa_arm32.tcc"
	>(0x900000UL, 0xff00010UL, DecodeOpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83591 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83596 "isa_arm32.tcc"
	>(0x2900000UL, 0xff00000UL, DecodeOpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83600 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83605 "isa_arm32.tcc"
	>(0x800010UL, 0xff00090UL, DecodeOpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83609 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83614 "isa_arm32.tcc"
	>(0x800000UL, 0xff00010UL, DecodeOpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83618 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83623 "isa_arm32.tcc"
	>(0x2800000UL, 0xff00000UL, DecodeOpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83627 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83632 "isa_arm32.tcc"
	>(0x700010UL, 0xff00090UL, DecodeOpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83636 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83641 "isa_arm32.tcc"
	>(0x700000UL, 0xff00010UL, DecodeOpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83645 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83650 "isa_arm32.tcc"
	>(0x2700000UL, 0xff00000UL, DecodeOpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83654 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83659 "isa_arm32.tcc"
	>(0x600010UL, 0xff00090UL, DecodeOpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83663 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83668 "isa_arm32.tcc"
	>(0x600000UL, 0xff00010UL, DecodeOpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83672 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83677 "isa_arm32.tcc"
	>(0x2600000UL, 0xff00000UL, DecodeOpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83681 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83686 "isa_arm32.tcc"
	>(0x500010UL, 0xff00090UL, DecodeOpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83690 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83695 "isa_arm32.tcc"
	>(0x500000UL, 0xff00010UL, DecodeOpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83699 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83704 "isa_arm32.tcc"
	>(0x2500000UL, 0xff00000UL, DecodeOpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83708 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83713 "isa_arm32.tcc"
	>(0x400010UL, 0xff00090UL, DecodeOpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83717 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83722 "isa_arm32.tcc"
	>(0x400000UL, 0xff00010UL, DecodeOpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83726 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83731 "isa_arm32.tcc"
	>(0x2400000UL, 0xff00000UL, DecodeOpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83735 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83740 "isa_arm32.tcc"
	>(0x300010UL, 0xff00090UL, DecodeOpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83744 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83749 "isa_arm32.tcc"
	>(0x300000UL, 0xff00010UL, DecodeOpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83753 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83758 "isa_arm32.tcc"
	>(0x2300000UL, 0xff00000UL, DecodeOpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83762 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83767 "isa_arm32.tcc"
	>(0x200010UL, 0xff00090UL, DecodeOpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83771 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83776 "isa_arm32.tcc"
	>(0x200000UL, 0xff00010UL, DecodeOpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83780 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83785 "isa_arm32.tcc"
	>(0x2200000UL, 0xff00000UL, DecodeOpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83789 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83794 "isa_arm32.tcc"
	>(0x100010UL, 0xff00090UL, DecodeOpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83798 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83803 "isa_arm32.tcc"
	>(0x100000UL, 0xff00010UL, DecodeOpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83807 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83812 "isa_arm32.tcc"
	>(0x2100000UL, 0xff00000UL, DecodeOpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83816 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83821 "isa_arm32.tcc"
	>(0x10UL, 0xff00090UL, DecodeOpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83825 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83830 "isa_arm32.tcc"
	>(0x0UL, 0xff00010UL, DecodeOpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83834 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83839 "isa_arm32.tcc"
	>(0x2000000UL, 0xff00000UL, DecodeOpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83843 "isa_arm32.tcc"
	>));
	if(
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BLX
#line 83848 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83852 "isa_arm32.tcc"
	>(0x1200030UL, 0xff000f0UL, DecodeOpBlx_2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83856 "isa_arm32.tcc"
	>));
	if(
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BLX
#line 83861 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83865 "isa_arm32.tcc"
	>(0xfa000000UL, 0xfe000000UL, DecodeOpBlx_1<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83869 "isa_arm32.tcc"
	>));
	if(
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BX
#line 83874 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83878 "isa_arm32.tcc"
	>(0x1200010UL, 0xff000f0UL, DecodeOpBx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83882 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83887 "isa_arm32.tcc"
	>(0xeb000000UL, 0xff000000UL, DecodeOpBl_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83891 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83896 "isa_arm32.tcc"
	>(0xcb000000UL, 0xef000000UL, DecodeOpBl_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83900 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83905 "isa_arm32.tcc"
	>(0x8b000000UL, 0xcf000000UL, DecodeOpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83909 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83914 "isa_arm32.tcc"
	>(0xb000000UL, 0x8f000000UL, DecodeOpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83918 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83923 "isa_arm32.tcc"
	>(0xea000000UL, 0xff000000UL, DecodeOpB_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83927 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83932 "isa_arm32.tcc"
	>(0xca000000UL, 0xef000000UL, DecodeOpB_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83936 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83941 "isa_arm32.tcc"
	>(0x8a000000UL, 0xcf000000UL, DecodeOpB_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83945 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83950 "isa_arm32.tcc"
	>(0xa000000UL, 0x8f000000UL, DecodeOpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83954 "isa_arm32.tcc"
	>));
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83961 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83964 "isa_arm32.tcc"
>
Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83969 "isa_arm32.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83978 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83981 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83986 "isa_arm32.tcc"
>::Fetch(void *, typename CONFIG::address_t, uint32_t)
{
	assert( ! "Calling unimplemented virtual method Fetch" );
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83995 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83998 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84003 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84007 "isa_arm32.tcc"
>::NCDecode(typename CONFIG::address_t addr)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84013 "isa_arm32.tcc"
	> *operation;
	CodeType code;
	Fetch(&code, addr, sizeof(code));
#if BYTE_ORDER == LITTLE_ENDIAN
	if(!little_endian)
#else
	if(little_endian)
#endif
	{
		code = ((code & 0xff000000UL) >> 24) | ((code & 0x00ff0000UL) >> 8) | ((code & 0x0000ff00UL) << 8) | ((code & 0x000000ffUL) << 24);
	}
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			operation->initialize_dependency_write_reglist();
			operation->initialize_dependency_write_rdlo();
			operation->initialize_dependency_write_rdhi();
			operation->initialize_dependency_write_rd();
			operation->initialize_dependency_write_rn();
			operation->initialize_dependency_read_crn();
			operation->initialize_dependency_read_crm();
			operation->initialize_dependency_read_reglist();
			operation->initialize_dependency_read_rs();
			operation->initialize_dependency_read_rn();
			operation->initialize_dependency_read_rm();
			operation->initialize_rdp1_init();
			operation->initialize_rdlo_init();
			operation->initialize_rdhi_init();
			operation->initialize_rs_init();
			operation->initialize_rd_init();
			operation->initialize_rm_init();
			operation->initialize_rn_init();
			operation->initialize_condition();
			return operation;
		}
	}
	operation = new Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84057 "isa_arm32.tcc"
	>(code, addr, "???");
	operation->initialize_dependency_write_reglist();
	operation->initialize_dependency_write_rdlo();
	operation->initialize_dependency_write_rdhi();
	operation->initialize_dependency_write_rd();
	operation->initialize_dependency_write_rn();
	operation->initialize_dependency_read_crn();
	operation->initialize_dependency_read_crm();
	operation->initialize_dependency_read_reglist();
	operation->initialize_dependency_read_rs();
	operation->initialize_dependency_read_rn();
	operation->initialize_dependency_read_rm();
	operation->initialize_rdp1_init();
	operation->initialize_rdlo_init();
	operation->initialize_rdhi_init();
	operation->initialize_rs_init();
	operation->initialize_rd_init();
	operation->initialize_rm_init();
	operation->initialize_rn_init();
	operation->initialize_condition();
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84087 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84092 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84096 "isa_arm32.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84102 "isa_arm32.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			operation->initialize_dependency_write_reglist();
			operation->initialize_dependency_write_rdlo();
			operation->initialize_dependency_write_rdhi();
			operation->initialize_dependency_write_rd();
			operation->initialize_dependency_write_rn();
			operation->initialize_dependency_read_crn();
			operation->initialize_dependency_read_crm();
			operation->initialize_dependency_read_reglist();
			operation->initialize_dependency_read_rs();
			operation->initialize_dependency_read_rn();
			operation->initialize_dependency_read_rm();
			operation->initialize_rdp1_init();
			operation->initialize_rdlo_init();
			operation->initialize_rdhi_init();
			operation->initialize_rs_init();
			operation->initialize_rd_init();
			operation->initialize_rm_init();
			operation->initialize_rn_init();
			operation->initialize_condition();
			return operation;
		}
	}
	operation = new Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84136 "isa_arm32.tcc"
	>(code, addr, "???");
	operation->initialize_dependency_write_reglist();
	operation->initialize_dependency_write_rdlo();
	operation->initialize_dependency_write_rdhi();
	operation->initialize_dependency_write_rd();
	operation->initialize_dependency_write_rn();
	operation->initialize_dependency_read_crn();
	operation->initialize_dependency_read_crm();
	operation->initialize_dependency_read_reglist();
	operation->initialize_dependency_read_rs();
	operation->initialize_dependency_read_rn();
	operation->initialize_dependency_read_rm();
	operation->initialize_rdp1_init();
	operation->initialize_rdlo_init();
	operation->initialize_rdhi_init();
	operation->initialize_rs_init();
	operation->initialize_rd_init();
	operation->initialize_rm_init();
	operation->initialize_rn_init();
	operation->initialize_condition();
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84163 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84166 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84171 "isa_arm32.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84181 "isa_arm32.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84200 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84203 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84208 "isa_arm32.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84217 "isa_arm32.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84250 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84253 "isa_arm32.tcc"
>
inline DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84258 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84262 "isa_arm32.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84270 "isa_arm32.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84307 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84312 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84316 "isa_arm32.tcc"
>::Decode(typename CONFIG::address_t addr)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84322 "isa_arm32.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84328 "isa_arm32.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84336 "isa_arm32.tcc"
		>(page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		return operation;
	}
	operation = NCDecode(addr);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84359 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84364 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84368 "isa_arm32.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84374 "isa_arm32.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84380 "isa_arm32.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84388 "isa_arm32.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84413 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84418 "isa_arm32.tcc"
>::SetLittleEndian()
{
	little_endian = true;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84427 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84430 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84435 "isa_arm32.tcc"
>::SetBigEndian()
{
	little_endian = false;
}

} } } } } } }
