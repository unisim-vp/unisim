/*
 *  Copyright (c) 2007-2013,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

    THUMB LOAD STORE MULTIPLE INSTRUCTIONS

**********************************************/

/*******************************************************************
 * ldmia (load multiple) instruction
 */

op ldmia(0b11001[5]:rn[3]:<32> reglist[8]);

ldmia.disasm = {
  buffer << "ldmia\t" << DisasmRegister(rn) << ", {" << DisasmRegList( reglist ) << "}";
};

ldmia.execute = {
  LSMIter itr(LSMIter::IA, reglist, cpu.GetGPR( rn ));
  while (itr.next()) {
    cpu.SetGPR( itr.reg(), cpu.MemRead32( itr.addr() ) );
  }
  
  bool overwritten = (reglist >> rn) & 1;
  if (not overwritten) cpu.SetGPR( rn, itr.addr() );
};

/*
 * end of ldmia (load multiple) instruction
 *******************************************************************/

/*******************************************************************
* pop (pop multiple) instruction
 */

op pop(0b1011110[7]:shl<15> reglist1[1]:reglist0[8]);
pop.var reglist : {uint32_t} = {reglist1|reglist0};

pop.disasm = {
  buffer << "pop\t{" << DisasmRegList(reglist) << "}";
};

pop.execute = {
  LSMIter itr(LSMIter::IA, reglist, cpu.GetGPR( cpu.SP_reg ));
  while (itr.next()) {
    cpu.SetGPR( itr.reg(), cpu.MemRead32( itr.addr() ) );
  }
  
  bool overwritten = (reglist >> cpu.SP_reg) & 1;
  if (not overwritten) cpu.SetGPR( cpu.SP_reg, itr.addr() );
};

/*
 * end of pop (pop multiple) instruction
 *******************************************************************/

/*******************************************************************
 * push (push multiple) instruction
 */

op push(0b1011010[7]:shl<14> reglist1[1]:reglist0[8]);
push.var reglist : {uint32_t} = {reglist1|reglist0};

push.disasm = {
  buffer << "push\t{" << DisasmRegList(reglist) << "}";
};

push.execute = {
  LSMIter itr(LSMIter::DB, reglist, cpu.GetGPR( cpu.SP_reg ));
  while (itr.next()) {
    cpu.MemWrite32( itr.addr(), cpu.GetGPR( itr.reg() ) );
  }
  
  cpu.SetGPR( cpu.SP_reg, itr.addr() );
};

/*
 * end of push (push multiple) instruction
 *******************************************************************/

/*******************************************************************
 * stmia (store multiple) instruction
 */

op stmia(0b11000[5]:rn[3]:reglist[8]);

stmia.disasm = {
  buffer << "stmia\t" << DisasmRegister(rn) << "!, {" << DisasmRegList(reglist) << "}";
};

stmia.execute = {
  LSMIter itr(LSMIter::IA, reglist, cpu.GetGPR( rn ));
  while (itr.next()) {
    cpu.MemWrite32( itr.addr(), cpu.GetGPR( itr.reg() ) );
  }
  
  cpu.SetGPR( rn, itr.addr() );
};

/*
 * end of stmia (store multiple) instruction
 *******************************************************************/

