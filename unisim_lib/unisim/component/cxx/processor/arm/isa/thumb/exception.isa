/*
 *  Copyright (c) 2007-2013,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

        THUMB EXCEPTION INSTRUCTIONS

**********************************************/

/*******************************************************************
 * swi (software interrupt) instruction; also known as: svc (supervisor call) in armv7
 * NOTE: this instruction is used to make the system calls
 */

op swi( 0b11011111[8]: imm[8] );

swi.disasm = {
  buffer << "swi\t" << DisasmI(imm);
};

swi.execute = {
  if (typename ARCH::Cond n=( not CheckCondition(cpu, cpu.itcond()) )) return;
  
  cpu.CallSupervisor( imm );
};

/*
 * end of swi (software interrupt) instruction
 *******************************************************************/

/*******************************************************************
 * bkpt (breakpoint) instruction
 */

op bkpt( 0b10111110[8]: imm[8] );

bkpt.disasm = {
  buffer << "bkpt\t0x"
         << std::hex << std::setfill('0') << std::setw(4) << imm
         << std::setw(0) << std::setfill(' ') << std::dec;
};

bkpt.execute = {
  if (typename ARCH::Cond n=( not CheckCondition(cpu, cpu.itcond()) )) return;
  
  cpu.BKPT( imm );
};

/*
 * end of bkpt (breakpoint) instruction
 *******************************************************************/

{ ARCH::Config::insns6 }:                               \
op cps( 0b10110110011[11]: dis[1]: 0[1]: a[1]: i[1]: f[1] );
cps.var reject : {Reject} = {(not (a or i or f))};
/* chmod = 0, chitm = 1, mode = 0 */

cps.disasm = {
  buffer << "cps" << (dis?"id":"ie") << '\t' << (a?"a":"") << (i?"i":"") << (f?"f":"");
};

cps.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::Cond Cond;
  
  if (Cond is_usr=( cpu.CPSR().Get(M) == U32(cpu.USER_MODE) ))
    return;
  
  typename ARCH::psr_type cpsr_val = cpu.CPSR();
  
  if (a)     cpsr_val.Set( A, U32(dis) );
  if (i)     cpsr_val.Set( I, U32(dis) );
  if (f)     cpsr_val.Set( F, U32(dis) );
  
  // CPSRWriteByInstr() checks for illegal mode changes
  CPSRWriteByInstr( cpu, cpsr_val.bits(), 0b1111, false );
};

