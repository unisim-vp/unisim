/*
 *  Copyright (c) 2007-2013,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/*******************************************************************
 * sxtb (Signed Extend Byte) instruction
 *
 * SXTB extracts an 8-bit value from a register, sign-extends it to 32 bits, and writes the result to the destination register. You can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit value.
 */

{ ARCH::insns6 }:                               \
op sxtb( 0b1011001001[10]: rm[3]: rd[3] );

sxtb.disasm = {
  buffer << "sxtb\t" << DisasmRegister(rd) << ", " << DisasmRegister(rm);
}

sxtb.execute = {
  if (not CheckCondition(cpu, cpu.itcond())) return;
  
  cpu.SetGPR( rd, (int32_t)((int8_t)cpu.GetGPR_npc( rm )) );
};

/*
 * end of sxtb instruction
 *******************************************************************/

/*******************************************************************
 * sxth (Signed Extend Halfword) instruction
 *
 * SXTH extracts a 16-bit value from a register, sign-extends it to 32 bits, and writes the result to the destination register. You can specify a rotation by 0, 8, 16, or 24 bits before extracting the 16-bit value.
 */

{ ARCH::insns6 }:                               \
op sxth( 0b1011001000[10]: rm[3]: rd[3] );

sxth.disasm = {
  buffer << "sxth\t" << DisasmRegister(rd) << ", " << DisasmRegister(rm);
};

sxth.execute = {
  if (not CheckCondition(cpu, cpu.itcond())) return;
  
  cpu.SetGPR( rd, (int32_t)((int16_t)cpu.GetGPR_npc( rm )) );
};

/*
 * end of sxth instruction
 *******************************************************************/

/*******************************************************************
 * uxtb (Unsigned Extend Byte) instruction
 *
 * UXTB extracts an 8-bit value from a register, zero-extends it to 32 bits, and writes the result to the destination register. You can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit value.
 */

{ ARCH::insns6 }:                               \
op uxtb( 0b1011001011[10]: rm[3]: rd[3] );

uxtb.disasm = {
  buffer << "uxtb\t" << DisasmRegister(rd) << ", " << DisasmRegister(rm);
};

uxtb.execute = {
  if (not CheckCondition(cpu, cpu.itcond())) return;
  
  cpu.SetGPR( rd, (uint32_t)((uint8_t)cpu.GetGPR_npc( rm )) );
};

/*
 * end of uxtb instruction
 *******************************************************************/

/*******************************************************************
 * uxth (Unsigned Extend Halfword) instruction
 *
 * UXTH extracts a 16-bit value from a register, zero-extends it to 32 bits, and writes the result to the destination register. You can specify a rotation by 0, 8, 16, or 24 bits before extracting the 16-bit value.
 */

{ ARCH::insns6 }:                               \
op uxth( 0b1011001010[10]: rm[3]: rd[3] );

uxth.disasm = {
  buffer << "uxth\t" << DisasmRegister(rd) << ", " << DisasmRegister(rm);
};

uxth.execute = {
  if (not CheckCondition(cpu, cpu.itcond())) return;
  
  cpu.SetGPR( rd, (uint32_t)((uint16_t)cpu.GetGPR_npc( rm )) );
};

/*
 * end of uxth instruction
 *******************************************************************/
