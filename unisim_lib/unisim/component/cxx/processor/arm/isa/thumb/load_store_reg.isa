/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

    THUMB LOAD STORE REGISTER INSTRUCTIONS

**********************************************/

/*******************************************************************
 * ldr(1) (load word immediate offset) instruction
 */

op ldr_1(0b01101[5]:imm[5]:rn[3]:rd[3])

ldr_1.disasm = {
	buffer << "ldr r" << rd << ", [r" << rn << ", #" << dec << (imm * 4) << "]";
}

ldr_1.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rn_value, value;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	addr = rn_value + (imm * 4);
	value = 0;
	cpu.Read32toGPRAligned(addr, rd);
}

/* 
 * end of ldr(1) (load word immediate offset) instruction
 *******************************************************************/

/*******************************************************************
 * ldr(2) (load word register offset) instruction
 */

op ldr_2(0b0101100[7]:rm[3]:rn[3]:rd[3])

ldr_2.disasm = {
	buffer << "ldr r" << rd << ", [r" << rn << ", r" << rm << "]";
}

ldr_2.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rn_value, rm_value, value;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	rm_value = cpu.GetGPR(rm);
	addr = rn_value + rm_value;
	value = 0;
	cpu.Read32toGPRAligned(addr, rd);
}

/* 
 * ldr(2) (load word register offset) instruction
 *******************************************************************/

/*******************************************************************
 * ldr(3) (load word pc-relative) instruction
 */

op ldr_3(0b01001[5]:rd[3]:imm[8])

ldr_3.disasm = {
	buffer << "ldr r" << rd << ", [pc, #" << dec << (imm * 4) << "]";
}

ldr_3.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t pc_value, value;
	
	pc_value = (cpu.GetGPR(cpu.PC_reg) + 4) & ~((typename CONFIG::reg_t)0x03);
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	addr = pc_value + (imm * 4);
	value = 0;
	cpu.Read32toGPRAligned(addr, rd);
}

/* 
 * ldr(3) (load word pc-relative) instruction
 *******************************************************************/

/*******************************************************************
 * ldr(4) (load word sp-relative) instruction
 */

op ldr_4(0b10011[5]:rd[3]:imm[8])

ldr_4.disasm = {
	buffer << "ldr r" << rd << ", [sp, #" << dec << (imm * 4) << "]";
}

ldr_4.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t sp_value, value;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	sp_value = cpu.GetGPR(cpu.SP_reg);
	addr = sp_value + (imm * 4);
	value = 0;
	cpu.Read32toGPRAligned(addr, rd);
}

/* 
 * ldr(4) (load word sp-relative) instruction
 *******************************************************************/

/*******************************************************************
 * ldrb(1) (load unsigned byte immediate offset) instruction
 */

op ldrb_1(0b01111[5]:imm[5]:rn[3]:rd[3])

ldrb_1.disasm = {
	buffer << "ldrb r" << rd << ", [r" << rn << ", #" << dec << imm << "]";
}

ldrb_1.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rn_value, value;
	uint8_t val8;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	addr = rn_value + imm;
	val8 = 0;
	cpu.Read8toGPR(addr, rd);
}

/* 
 * ldrb(1) (load unsigned byte immediate offset) instruction
 *******************************************************************/

/*******************************************************************
 * ldrb(2) (load unsigned byte register offset) instruction
 */

op ldrb_2(0b0101110[7]:rm[3]:rn[3]:rd[3])

ldrb_2.disasm = {
	buffer << "ldrb r" << rd << ", [r" << rn << ", r" << rm << "]";
}

ldrb_2.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rn_value, rm_value, value;
	uint8_t val8;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	rm_value = cpu.GetGPR(rm);
	addr = rn_value + rm_value;
	val8 = 0;
	cpu.Read8toGPR(addr, rd);
}

/* 
 * ldrb(2) (load unsigned byte register offset) instruction
 *******************************************************************/

/*******************************************************************
 * ldrh(1) (load unsigned halfword immediate offset) instruction
 */

op ldrh_1(0b10001[5]:imm[5]:rn[3]:rd[3])

ldrh_1.disasm = {
	buffer << "ldrh r" << rd << ", [r" << rn << ", #" << dec << (imm * 2) << "]";
}

ldrh_1.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rn_value, value;
	uint16_t val16;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	addr = rn_value + (imm * 2);
	val16 = 0;
	cpu.Read16toGPRAligned(addr, rd);
}

/* 
 * ldrh(1) (load unsigned halfword immediate offset) instruction
 *******************************************************************/

/*******************************************************************
 * ldrh(2) (load unsigned halfword register offset) instruction
 */

op ldrh_2(0b0101101[7]:rm[3]:rn[3]:rd[3])

ldrh_2.disasm = {
	buffer << "ldrh r" << rd << ", [r" << rn << ", r" << rm << "]";
}

ldrh_2.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rn_value, rm_value, value;
	uint16_t val16;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	rm_value = cpu.GetGPR(rm);
	addr = rn_value + rm_value;
	val16 = 0;
	cpu.Read16toGPRAligned(addr, rd);
}

/* 
 * ldrh(2) (load unsigned halfword register offset) instruction
 *******************************************************************/

/*******************************************************************
 * ldrsb (load signed byte register offset) instruction
 */

op ldrsb(0b0101011[7]:rm[3]:rn[3]:rd[3])

ldrsb.disasm = {
	buffer << "ldrsb r" << rd << ", [r" << rn << ", r" << rm << "]";
}

ldrsb.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rn_value, rm_value, value;
	int8_t val8;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	rm_value = cpu.GetGPR(rm);
	addr = rn_value + rm_value;
	val8 = 0;
	cpu.ReadS8toGPR(addr, rd);
}

/* 
 * ldrsb (load signed byte register offset) instruction
 *******************************************************************/

/*******************************************************************
 * ldrsh (load signed halfword register offset) instruction
 */

op ldrsh(0b0101111[7]:rm[3]:rn[3]:rd[3])

ldrsh.disasm = {
	buffer << "ldrsh r" << rd << ", [r" << rn << ", r" << rm << "]";
}

ldrsh.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rn_value, rm_value, value;
	int16_t val16;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	rm_value = cpu.GetGPR(rm);
	addr = rn_value + rm_value;
	val16 = 0;
	cpu.ReadS16toGPRAligned(addr, rd);
}

/* 
 * ldrsh (load signed halfword register offset) instruction
 *******************************************************************/

/*******************************************************************
 * str(1) (store word immediate offset) instruction
 */

op str_1(0b01100[5]:imm[5]:rn[3]:rd[3])

str_1.disasm = {
	buffer << "str r" << rd << ", [r" << rn << ", #" << (imm * 4) << "]";
}

str_1.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rd_value, rn_value;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	addr = rn_value + (imm * 4);
	rd_value = cpu.GetGPR(rd);
	cpu.Write32(addr, rd_value);
}

/* 
 * str(1) (store word immediate offset) instruction
 *******************************************************************/

/*******************************************************************
 * str(2) (store word register offset) instruction
 */

op str_2(0b0101000[7]:rm[3]:rn[3]:rd[3])

str_2.disasm = {
	buffer << "str r" << rd << ", [r" << rn << ", r" << rm << "]";
}

str_2.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rd_value, rn_value, rm_value;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	rm_value = cpu.GetGPR(rm);
	addr = rn_value + rm_value;
	rd_value = cpu.GetGPR(rd);
	cpu.Write32(addr, rd_value);
}

/* 
 * str(2) (store word register offset) instruction
 *******************************************************************/

/*******************************************************************
 * str(3) (store word sp-relative) instruction
 */

op str_3(0b10010[5]:rd[3]:imm[8])

str_3.disasm = {
	buffer << "str r" << rd << ", [sp, #" << (imm * 4) << "]";
}

str_3.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rd_value, sp_value;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	sp_value = cpu.GetGPR(cpu.SP_reg);
	addr = sp_value + (imm * 4);
	rd_value = cpu.GetGPR(rd);
	cpu.Write32(addr, rd_value);
}

/* 
 * str(3) (store word sp-relative) instruction
 *******************************************************************/

/*******************************************************************
 * strb(1) (store byte immediate offset) instruction
 */

op strb_1(0b01110[5]:imm[5]:rn[3]:rd[3])

strb_1.disasm = {
	buffer << "strb r" << rd << ", [r" << rn << ", #" << dec << imm << "]";
}

strb_1.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rd_value, rn_value;
	uint8_t data;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	addr = rn_value + imm;
	rd_value = cpu.GetGPR(rd);
	data = rd_value & (typename CONFIG::reg_t)0x0ff;
	cpu.Write8(addr, data);
}

/* 
 * strb(1) (store byte immediate offset) instruction
 *******************************************************************/

/*******************************************************************
 * strb(2) (store byte register offset) instruction
 */

op strb_2(0b0101010[7]:rm[3]:rn[3]:rd[3])

strb_2.disasm = {
	buffer << "strb r" << rd << ", [r" << rn << ", r" << rm << "]";
}

strb_2.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rd_value, rn_value, rm_value;
	uint8_t data;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	rm_value = cpu.GetGPR(rm);
	addr = rn_value + rm_value;
	rd_value = cpu.GetGPR(rd);
	data = rd_value & (typename CONFIG::reg_t)0x0ff;
	cpu.Write8(addr, data);
}

/* 
 * strb(2) (store byte register offset) instruction
 *******************************************************************/

/*******************************************************************
 * strh(1) (store halfword immediate offset) instruction
 */

op strh_1(0b10000[5]:imm[5]:rn[3]:rd[3])

strh_1.disasm = {
	buffer << "strh r" << rd << ", [r" << rn << ", #" << dec << (imm * 2) << "]";
}

strh_1.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rd_value, rn_value;
	uint16_t data;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	addr = rn_value + (imm * 2);
	rd_value = cpu.GetGPR(rd);
	data = rd_value & (typename CONFIG::reg_t)0x0ffff;
	cpu.Write16(addr, data);
}

/* 
 * strh(1) (store halfword immediate offset) instruction
 *******************************************************************/

/*******************************************************************
 * strh(2) (store halfword register offset) instruction
 */

op strh_2(0b0101001[7]:rm[3]:rn[3]:rd[3])

strh_2.disasm = {
	buffer << "strh r" << rd << ", [r" << rn << ", r" << rm << "]";
}

strh_2.execute = {
	typename CONFIG::address_t addr;
	typename CONFIG::reg_t rd_value, rn_value, rm_value;
	uint16_t data;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	rn_value = cpu.GetGPR(rn);
	rm_value = cpu.GetGPR(rm);
	addr = rn_value + rm_value;
	rd_value = cpu.GetGPR(rd);
	data = rd_value & (typename CONFIG::reg_t)0x0ff;
	cpu.Write16(addr, data);
}

/* 
 * strh(2) (store halfword register offset) instruction
 *******************************************************************/

