/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

      THUMB DATA PROCESSING INSTRUCTIONS

**********************************************/


/*******************************************************************
 * adc (add with carry) instruction
 */

op adc(0b010000[6]:0b0101[4]:rm[3]:rd[3])

adc.disasm = {
	buffer << "adc r" << rd << ", r" << rm;
}

adc.execute = {
	typename CONFIG::reg_t res;
	typename CONFIG::reg_t s1, s2;
	uint8_t carry_in, carry_out, overflow_out;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 2);
	
	carry_in = (cpu.GetCPSR_C() ? 1 : 0);
	s1 = cpu.GetGPR(rd);
	s2 = cpu.GetGPR(rm);
	Add32(res, carry_out, overflow_out,
			s1, s2, carry_in);
	cpu.SetGPR(rd, res);

	cpu.SetCPSR_N(res & 0x80000000);
	cpu.SetCPSR_Z(res == 0);
	cpu.SetCPSR_C(carry_out); // to check
	cpu.SetCPSR_V(overflow_out); // to check
}

/*
 * end of adc (add with carry) instruction
 *******************************************************************/

/*******************************************************************
 * add(1) (add immediate) instruction
 * NOTE: mov(2) is equivalent to add(1)
 */

op add_1(0b0001110[7]:imm[3]:rm[3]:rd[3])

/*
 * end of add(1) (add immediate) instruction
 *******************************************************************/

/*******************************************************************
 * add (add large immediate) instruction
 */

op add_2(0b00110[5]:rd[3]:imm[8])

/*
 * end of add (add large immediate) instruction
 *******************************************************************/

/*******************************************************************
 * add (add register) instruction
 */

op add_3(0b0001100[7]:rm[3]:rn[3]:rd[3])

/*
 * end of add (add register) instruction
 *******************************************************************/

/*******************************************************************
 * add (add high registers) instruction
 */

op add_4(0b01000100[8]:h1[1]:h2[1]:rm[3]:rd[3])

/*
 * end of add (add high registers) instruction
 *******************************************************************/

/*******************************************************************
 * add (add immediate to program counter) instruction
 */

op add_5(0b10100[5]:rd[3]:imm[8])

/*
 * end of add (add immediate to program counter) instruction
 *******************************************************************/

/*******************************************************************
 * add (add immediate to stack pointer) instruction
 */

op add_6(0b10101[5]:rd[3]:imm[8])

/*
 * end of add (add immediate to stack pointer) instruction
 *******************************************************************/

/*******************************************************************
 * add (increment stack pointer) instruction
 */

op add_7(0b101100000[9]:imm[7])

/*
 * end of add (increment stack pointer) instruction
 *******************************************************************/

/*******************************************************************
 * and (logical and) instruction
 */

op and(0b010000[6]:0b0000[4]:rm[3]:rd[3])

/*
 * end of and (logical and) instruction
 *******************************************************************/

/*******************************************************************
 * asr(1) (arithmetic shift right immediate) instruction
 */

op asr_1(0b00010[5]:imm[5]:rm[3]:rd[3])

/*
 * end of asr(1) (arithmetic shift right immediate) instruction
 *******************************************************************/

/*******************************************************************
 * asr(1) (arithmetic shift right register) instruction
 */

op asr_2(0b010000[6]:0b0100[4]:rs[3]:rd[3])

/*
 * end of asr(2) (arithmetic shift right register) instruction
 *******************************************************************/

/*******************************************************************
 * bic (bit clear) instruction
 */

op bic(0b010000[6]:0b1110[4]:rm[3]:rd[3])

/*
 * end of bic (bit clear) instruction
 *******************************************************************/

/*******************************************************************
 * cmn (compare negative) instruction
 */

op cmn(0b010000[6]:0b1011[4]:rm[3]:rn[3])

/*
 * end of cmn (compare negative) instruction
 *******************************************************************/

/*******************************************************************
 * cmp(1) (compare immediate) instruction
 */

op cmp_1(0b00101[5]:rn[3]:imm[8])

/*
 * end of cmp(1) (compare immediate) instruction
 *******************************************************************/

/*******************************************************************
 * cmp(2) (compare register) instruction
 */

op cmp_2(0b010000[6]:0b1010[4]:rm[3]:rn[3])

/*
 * end of cmp(2) (compare register) instruction
 *******************************************************************/

/*******************************************************************
 * cmp(3) (compare high registers) instruction
 */

op cmp_3(0b01000101[8]:h1[1]:h2[1]:rm[3]:rn[3])

/*
 * end of cmp(3) (compare high registers) instruction
 *******************************************************************/

/*******************************************************************
 * eor (exclusive or) instruction
 */

op eor(0b010000[6]:0b0001[4]:rm[3]:rd[3])

/*
 * end of eor (exclusive or) instruction
 *******************************************************************/

/*******************************************************************
 * lsl(1) (logical shift left immediate) instruction
 */

op lsl_1(0b00000[5]:imm[5]:rm[3]:rd[3])

/*
 * end of lsl(1) (logical shift left immediate) instruction
 *******************************************************************/

/*******************************************************************
 * lsl(2) (logical shift left register) instruction
 */

op lsl_2(0b010000[6]:0b0010[4]:rs[3]:rd[3])

/*
 * end of lsl(2) (logical shift left register) instruction
 *******************************************************************/

/*******************************************************************
 * lsr(1) (logical shift right immediate) instruction
 */

op lsr_1(0b00001[5]:imm[5]:rm[3]:rd[3])

/*
 * end of lsr(1) (logical shift right immediate) instruction
 *******************************************************************/

/*******************************************************************
 * lsr(2) (logical shift right register) instruction
 */

op lsr_2(0b010000[6]:0b0011[4]:rs[3]:rd[3])

/*
 * end of lsr(2) (logical shift right register) instruction
 *******************************************************************/

/*******************************************************************
 * mov(1) (move immediate) instruction
 */

op mov_1(0b00100[5]:rd[3]:imm[8])

/*
 * end of mov(1) (move immediate) instruction
 *******************************************************************/

///*******************************************************************
// * mov(2) (move a low register to another low register) instruction
// */
//
//op mov_2(0b0001110[7]:0b000[3]:rn[3]:rd[3])
//
///*
// * end of mov(2) (move register a low register to another low register) instruction
// *******************************************************************/

/*******************************************************************
 * mov(3) (move high registers) instruction
 */

op mov_3(0b01000110[8]:h1[1]:h2[1]:rm[3]:rd[3])

/*
 * end of mov(3) (move high registers) instruction
 *******************************************************************/

/*******************************************************************
 * mul (multiply) instruction
 */

op mul(0b010000[6]:0b1101[4]:rm[3]:rd[3])

/*
 * end of mul (multiply) instruction
 *******************************************************************/

/*******************************************************************
 * mvn (move not register) instruction
 */

op mvn(0b010000[6]:0b1111[4]:rm[3]:rd[3])

/*
 * end of mvn (move not register) instruction
 *******************************************************************/

/*******************************************************************
 * neg (negate register) instruction
 */

op neg(0b010000[6]:0b1001[4]:rm[3]:rd[3])

/*
 * end of neg (negate register) instruction
 *******************************************************************/

/*******************************************************************
 * orr (logical or) instruction
 */

op orr(0b010000[6]:0b1100[4]:rm[3]:rd[3])

/*
 * end of orr (logical or) instruction
 *******************************************************************/

/*******************************************************************
 * ror (rotate right register) instruction
 */

op ror(0b010000[6]:0b0111[4]:rs[3]:rd[3])

/*
 * end of ror (rotate right register) instruction
 *******************************************************************/

/*******************************************************************
 * sbc (subtract with carry register) instruction
 */

op sbc(0b010000[6]:0b0110[4]:rm[3]:rd[3])

/*
 * end of sbc (subtract with carry register) instruction
 *******************************************************************/

/*******************************************************************
 * sub(1) (subtract immediate) instruction
 */

op sub_1(0b0001111[7]:imm[3]:rn[3]:rd[3])

/*
 * end of sub(1) (subtract immediate) instruction
 *******************************************************************/

/*******************************************************************
 * sub(2) (subtract large immediate) instruction
 */

op sub_2(0b00111[5]:rd[3]:imm[8])

/*
 * end of sub(2) (subtract large immediate) instruction
 *******************************************************************/

/*******************************************************************
 * sub(3) (subtract register) instruction
 */

op sub_3(0b0001101[7]:rm[3]:rn[3]:rd[3])

/*
 * end of sub(3) (subtract register) instruction
 *******************************************************************/

/*******************************************************************
 * sub(4) (decrement stack pointer) instruction
 */

op sub_4(0b101100001[9]:imm[7])

/*
 * end of sub(4) (decrement stack pointer) instruction
 *******************************************************************/

/*******************************************************************
 * tst (test register) instruction
 */

op tst(0b010000[6]:0b1000[4]:rm[3]:rn[3])

/*
 * end of tst (test register) instruction
 *******************************************************************/

