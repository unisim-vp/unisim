/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

        THUMB BRANCH INSTRUCTIONS

**********************************************/

/*******************************************************************
 * b(1) (conditional branch) instruction
 * op b_1(0b1101[4]:cond[4]:sext<32> imm[8])
 */

op b_1(0b1101[4]:cond[4]:sext<32> imm[8])

b_1.disasm = {
	buffer << "b" << DisasmCondition(cond) << " 0x" << std::hex << cpu.GetGPR(cpu.PC_reg) + 4 + (imm << 1) << std::dec;
}

b_1.execute = {
	if(not CheckCondition(cpu, cond)) return;
	
	cpu.Branch(cpu.GetGPR(cpu.PC_reg) + (imm << 1));
}

/*
 * end of b(1) (conditional branch) instruction
 *******************************************************************/

/*******************************************************************
 * b(2) (unconditional branch) instruction
 * op b_2(0b11100[5]:sext<32> imm[11])
 */

op b_2(0b11100[5]:sext<32> imm[11])

b_2.disasm = {
	buffer << "b" << " 0x" << std::hex << cpu.GetGPR(cpu.PC_reg) + 4 + (imm << 1) << std::dec;
}

b_2.execute = {
	cpu.Branch(cpu.GetGPR(cpu.PC_reg) + (imm << 1));
}

/*
 * end of b(2) (unconditional branch) instruction
 *******************************************************************/

/*******************************************************************
 * bl (branch with link) instruction
 * op bl(0b111[3]:0b1[1]:h2[1]:offset[11])
 */

op bl(0b111[3]:0b1[1]:h2[1]:offset[11])

bl.disasm = {
	int32_t bl_soffset;

	buffer << "bl ";
	if(h2 == 0) {
		buffer << "????";
		return;
	} else {
		bl_soffset = cpu.GetGPR(cpu.LR_reg) + (offset << 1);
		buffer << "0x" << std::hex << bl_soffset << std::dec;
	}
}

bl.execute = {
	int32_t bl_soffset;
	
	if(offset & 0x0400)
		bl_soffset = (int32_t)(uint32_t(0xfffff800) + offset);
	else
		bl_soffset = offset;
	
	if(h2) {
		cpu.SetGPR(cpu.LR_reg, cpu.GetNPC());
		cpu.Branch(cpu.GetGPR(cpu.LR_reg) + (offset << 1));
	} else {
		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + (bl_soffset << 12));
	}
}

/*
 * end of bl (branch with link) instruction
 *******************************************************************/

/*******************************************************************
 * bx (branch and exchange) instruction
 * op bx(0b010001110[9]:h2[1]:rm[3]:/ *sbz* /0[3])
 */

op bx(0b010001110[9]:shl<3> rm1[1]:rm0[3]:/*sbz*/0[3]);
bx.var rm : {uint8_t} = {rm1|rm0};

bx.disasm = {
  buffer << "bx\t" << DisasmRegister(rm);
}

bx.execute = {
  cpu.BranchExchange( cpu.GetGPR(rm) );
}

/*
 * end of bx (branch and exchange) instruction
 *******************************************************************/

/*******************************************************************
 * blx(1) (branch with link and exchange) instruction
 * op blx_1(0b111[3]:0b01[2]:sext<32> imm[11])
 */

op blx_1(0b111[3]:0b01[2]:offset[11])

blx_1.disasm = {
	int32_t blx_soffset;
	
	if(offset & 0x0400)
		blx_soffset = (int32_t)((~(uint32_t)0x0400) + offset);
	else
		blx_soffset = offset;
	
	buffer << "blx" << " 0x" << std::hex
		<< ((blx_soffset << 12) + cpu.GetGPR(cpu.PC_reg) + 4 + (offset << 1))
		<< std::dec;
}

blx_1.execute = {
	uint32_t new_PC = (cpu.GetGPR(cpu.LR_reg) + (offset << 1)) & -4;
	cpu.SetGPR(cpu.LR_reg, cpu.GetNPC());
	cpu.Branch(new_PC);
}

/*
 * end of blx(1) (branch with link and exchange) instruction
 *******************************************************************/

/*******************************************************************
 * blx(2) (branch with link and exchange) instruction
 * op blx_2(0b111[3]:0b01[2]:sext<32> imm[11])
 */

op blx_2(0b010001111[9]:shl<3> rm1[1]:rm0[3]:/*sbz*/0[3]);
blx_2.var rm : {uint8_t} = {rm1|rm0};

blx_2.disasm = {
  buffer << "blx\t" << DisasmRegister(rm);
}

blx_2.execute = {
  uint32_t rm_value = cpu.GetGPR(rm);
  
  cpu.SetGPR(cpu.LR_reg, cpu.GetNPC());
  cpu.BranchExchange(rm_value);
}

/*
 * end of blx(2) (branch with link and exchange) instruction
 *******************************************************************/
