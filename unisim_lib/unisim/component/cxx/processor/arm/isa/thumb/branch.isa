/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

        THUMB BRANCH INSTRUCTIONS

**********************************************/

/*******************************************************************
 * b(1) (conditional branch) instruction
 * op b_1(0b1101[4]:cond[4]:sext<32> imm[8])
 */

op b_1(0b1101[4]:cond[4]:sext<32> imm[8])

b_1.disasm = {
	buffer << "b" << DisasmCondition(cond) << " 0x" << std::hex << cpu.GetGPR(cpu.PC_reg) + 4 + (imm << 1) << std::dec;
}

b_1.execute = {
	if(not CheckCondition(cpu, cond)) return;
	
	cpu.Branch(cpu.GetGPR(cpu.PC_reg) + (imm << 1));
}

/*
 * end of b(1) (conditional branch) instruction
 *******************************************************************/

/*******************************************************************
 * b(2) (unconditional branch) instruction
 * op b_2(0b11100[5]:sext<32> imm[11])
 */

op b_2(0b11100[5]:sext<32> imm[11])

b_2.disasm = {
	buffer << "b" << " 0x" << std::hex << cpu.GetGPR(cpu.PC_reg) + 4 + (imm << 1) << std::dec;
}

b_2.execute = {
	cpu.Branch(cpu.GetGPR(cpu.PC_reg) + (imm << 1));
}

/*
 * end of b(2) (unconditional branch) instruction
 *******************************************************************/

/*******************************************************************
 * bx (branch and exchange) instruction
 * op bx(0b010001110[9]:h2[1]:rm[3]:/ *sbz* /0[3])
 */

op bx(0b010001110[9]:shl<3> rm1[1]:rm0[3]:/*sbz*/0[3]);
bx.var rm : {uint8_t} = {rm1|rm0};

bx.disasm = {
  buffer << "bx\t" << DisasmRegister(rm);
}

bx.execute = {
  cpu.BranchExchange( cpu.GetGPR(rm) );
}

/*
 * end of bx (branch and exchange) instruction
 *******************************************************************/

/*******************************************************************
 * blx(2) (branch with link and exchange) instruction
 * op blx_2(0b111[3]:0b01[2]:sext<32> imm[11])
 */

op blx_2(0b010001111[9]:rm[4]:/*sbz*/0[3]);

blx_2.disasm = {
  buffer << "blx\t" << DisasmRegister(rm);
}

blx_2.execute = {
  uint32_t rm_value = cpu.GetGPR(rm);
  
  cpu.SetGPR(cpu.LR_reg, cpu.GetNPC());
  cpu.BranchExchange(rm_value);
}

/*
 * end of blx(2) (branch with link and exchange) instruction
 *******************************************************************/

/*******************************************************************
 * bl prefix (Branch with Link) instruction
 *
 * Prefix for BL and BLX Thumb1 instructions
 *
 */

op bl_h1(0b11110[5]:shl<12> sext<32> imm1[11]);

bl_h1.disasm = {
  buffer << "bl{x}\tLR=0x" << std::hex << (this->GetAddr() + 4 + imm1) << std::dec << " (prefix)";
};

bl_h1.execute = {
  cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + imm1);
};

/*
 * end of bl prefix (Branch with Link) instruction
 *******************************************************************/

/*******************************************************************
 * bl postfix (Branch with Link) instruction
 *
 * Postfix for the BL Thumb1 instruction.
 *
 * BL calls a subroutine at a PC-relative address.
 */

op bl_h2(0b11111[5]:shl<1> imm0[11]);

bl_h2.disasm = {
  buffer << "bl\tLR+0x" << std::hex << imm0 << std::dec << " (postfix)";
};

bl_h2.execute = {
  uint32_t address = cpu.GetGPR(cpu.LR_reg) + imm0;
  cpu.SetGPR( cpu.LR_reg, cpu.GetNPC() );
  cpu.Branch( address );
};

/*
 * end of bl postfix (Branch with Link) instruction
 *******************************************************************/

/*******************************************************************
 * blx postfix (Branch with Link and Exchange) instruction
 *
 * Postfix for the BLX Thumb1 instruction.
 *
 * BLX calls a subroutine at a PC-relative address, and changes
 * instruction set from Thumb to ARM.
 */

op blx_h3(0b11101[5]:shl<2> imm0[10]:0[1]);

blx_h3.disasm = {
  buffer << "blx\tLR+0x" << std::hex  << imm0 << std::dec << " (postfix)";
}

blx_h3.execute = {
  uint32_t address = (cpu.GetGPR(cpu.LR_reg) + imm0) & -4;
  cpu.SetGPR( cpu.LR_reg, cpu.GetNPC() );
  cpu.BranchExchange( address );
}

/*
 * end of blx postfix (Branch with Link and Exchange) instruction
 *******************************************************************/
