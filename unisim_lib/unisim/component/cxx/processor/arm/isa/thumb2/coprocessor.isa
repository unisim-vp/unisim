/*
 *  Copyright (c) 2007-2014,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr), Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
op mrc( 0b11101110[8]: opc1[3]: 0b1[1]: crn[4]:> <: rd[4]: cp_num[4]: opc2[3]: 0b1[1]: crm[4] );

mrc.disasm = {
  buffer << "mrc\t" << uint32_t( cp_num ) << ", " << uint32_t( opc1 ) << ", ";
  if (rd == 15) buffer << "APSR_nzcv";
  else          buffer << DisasmRegister(rd);
  buffer << ", cr" << uint32_t( crn ) << ", cr" << uint32_t( crm ) << ", {" << opc2 << "}";
};

mrc.execute = {
  if (not CheckCondition(cpu, cpu.itcond())) return;
  
  uint32_t res = cpu.readcopro( cp_num, opc1, opc2, crn, crm );
  if (rd == 15)
    assert( false );
  else
    cpu.SetGPR( rd, res );
}

op mrc2( 0b11111110[8]: opc1[3]: 0b1[1]: crn[4]:> <: rd[4]: cp_num[4]: opc2[3]: 0b1[1]: crm[4] );

mrc2.disasm = {
  buffer << "mrc2\t" << cp_num << ", " << opc1 << ", " << DisasmRegister(rd) << ", cr" << crn << ", cr" << crm << ", {" << opc2 << "}";
};

op mcr( 0b11101110[8]: y[3]: 0b0[1]: cr1[4]:> <: r0[4]: cp_num[4]: imm[3]: 0b1[1]: cr0[4] );

mcr.disasm = {
  buffer << "mcr\t" << cp_num << ", " << y << ", " << DisasmRegister(r0) << ", cr" << cr1 << ", cr" << cr0 << ", {" << imm << "}";
};

op mcr2( 0b1111[4]: 0b1110[4]: opc1[3]: 0b0[1]: crn[4]:> <: rt[4]: cp_num[4]: opc2[3]: 0b1[1]: crm[4] );

mcr2.disasm = {
  buffer << "mcr2\t" << uint32_t( cp_num ) << ", " << uint32_t( opc1 ) << ", "
         << DisasmRegister(rt) << ", cr" << uint32_t( crn ) << ", cr" << uint32_t( crm )
         << ", {" << uint32_t( opc2 ) << "}";
};

op cdp( 0b11101110[8]: y[4]: cr2[4]:> <: cr1[4]: cp_num[4]: imm[3]: 0b0[1]: cr0[4] );

cdp.disasm = {
  buffer << "cdp\t" << cp_num << ", " << y << ", cr" << cr1 << ", cr" << cr2 << ", cr" << cr0 << ", {" << imm << "}";
};

op cdp2( 0b11111110[8]: y[4]: cr2[4]:> <: cr1[4]: cp_num[4]: imm[3]: 0b0[1]: cr0[4] );

cdp2.disasm = {
  buffer << "cdp2\t" << cp_num << ", " << y << ", cr" << cr1 << ", cr" << cr2 << ", cr" << cr0 << ", {" << imm << "}";
};

op mrrc( 0b111011000101[12]: rn[4]:> <: rd[4]: cp_num[4]: opc1[4]: crm[4] );

mrrc.disasm = {
  buffer << "mrrc\t" << cp_num << ", " << opc1 << ", " << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", cr" << crm;
};

op mrrc2( 0b111111000101[12]: rn[4]:> <: rd[4]: cp_num[4]: opc1[4]: crm[4] );

mrrc2.disasm = {
  buffer << "mrrc2\t" << cp_num << ", " << opc1 << ", " << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", cr" << crm;
};

op mcrr( 0b111011000100[12]: r1[4]:> <: r0[4]: cp_num[4]: x[4]: cr[4] );

mcrr.disasm = {
  buffer << "mcrr\t" << cp_num << ", " << x << ", " << DisasmRegister(r0) << ", " << DisasmRegister(r1) << ", cr" << cr;
};

op mcrr2( 0b111111000100[12]: r1[4]:> <: r0[4]: cp_num[4]: x[4]: cr[4] );

mcrr2.disasm = {
  buffer << "mcrr2\t" << cp_num << ", " << x << ", " << DisasmRegister(r0) << ", " << DisasmRegister(r1) << ", cr" << cr;
};

/*******************************************************************
 * stc instruction
 */

op stc( 0b1110110[7]: p[1]: u[1]: d[1]: w[1]: 0b0[1]: rn[4]:> <: crd[4]: cp_num[4]: shl<2> offset[8] );
stc.var imm : {int32_t} = {u?offset:-offset};

stc.disasm = {
  buffer << "stc" << (d?"l":"") << '\t'
         << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << DisasmMemoryRI( rn, imm, p, w );
};

// stc.execute = {
//   if (not CheckCondition(cpu, cond)) return;
  
//   uint32_t addr = cpu.GetGPR( rn ), oaddr = addr + imm;
//   if (w) cpu.SetGPR( rn, oaddr );
  
//   uint32_t address = p?oaddr:addr;
//   while(cpu.CoprocessorStore(cp_num, address)) { address += 4; }
// };

op stc_undefined( 0b1110110[7]: 0b0[1]: 0b0[1]: 0b0[1]: 0b0[1]: 0b0[1]: rn[4]:> <: crd[4]: cp_num[4]: option[8] );

stc_undefined.disasm = {
  buffer << "stc\t" << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << "[" << DisasmRegister(rn) << "]"
         << ", {" << option << "}";
};

op stc_unindexed( 0b1110110[7]: 0b0[1]: 0b1[1]: d[1]: 0b0[1]: 0b0[1]: rn[4]:> <: crd[4]: cp_num[4]: option[8] );

stc_unindexed.disasm = {
  buffer << "stc" << (d?"l":"") << '\t' << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << "[" << DisasmRegister(rn) << "]"
         << ", {" << option << "}";
};

// stc_unindexed.execute = {
//   if (not CheckCondition(cpu, cond)) return;
	
//   uint32_t address = cpu.GetGPR(rn);
//   while(cpu.CoprocessorStore(cp_num, address, option)) { address += 4; }
// };

/*
 * end of stc instruction
 *******************************************************************/

/*******************************************************************
 * stc2 instruction
 */

{ ARCH::insns5T }: \
op stc2( 0b1111[4]: 0b110[3]: p[1]: u[1]: d[1]: w[1]: 0b0[1]: rn[4]:> <: crd[4]: cp_num[4]: shl<2> offset[8] );
stc2.var imm : {int32_t} = {u?offset:-offset};

stc2.disasm = {
  buffer << "stc2" << (d?"l":"") << '\t' << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << DisasmMemoryRI( rn, imm, p, w );
};

// stc2.execute = {
//   uint32_t addr = cpu.GetGPR( rn ), oaddr = addr + imm;
//   if (w) cpu.SetGPR( rn, oaddr );
  
//   uint32_t address = p?oaddr:addr;
//   while (cpu.CoprocessorStore(cp_num, address)) { address += 4; }
// };

{ ARCH::insns5T }: \
op stc2_undefined( 0b1111[4]: 0b110[3]: 0b0[1]: 0b0[1]: 0b0[1]: 0b0[1]: 0b0[1]: rn[4]:> <: crd[4]: cp_num[4]: option[8] );

stc2_undefined.disasm = {
  buffer << "stc2\t" << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << "[" << DisasmRegister(rn) << "]"
         << ", {" << option << "}";
};

{ ARCH::insns5T }: \
op stc2_unindexed( 0b1111[4]: 0b110[3]: 0b0[1]: 0b1[1]: d[1]: 0b0[1]: 0b0[1]: rn[4]:> <: crd[4]: cp_num[4]: option[8] );

stc2_unindexed.disasm = {
  buffer << "stc2" << (d?"l":"") << '\t' << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << "[" << DisasmRegister(rn) << "]"
         << ", {" << option << "}";
};

// stc2_unindexed.execute = {
//   uint32_t address = cpu.GetGPR(rn);
//   while(cpu.CoprocessorStore(cp_num, address, option)) { address += 4; }
// };

/*
 * end of stc2 instruction
 *******************************************************************/

/*******************************************************************
 * ldc instruction
 */

op ldc( 0b1110110[7]: p[1]: u[1]: d[1]: w[1]: 0b1[1]: rn[4]:> <: crd[4]: cp_num[4]: shl<2> offset[8] );
ldc.var imm : {int32_t} = {u?offset:-offset};

ldc.disasm = {
  buffer << "ldc" << (d?"l":"") << '\t'
         << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << DisasmMemoryRI( rn, imm, p, w );
};

// ldc.execute = {
//   if (not CheckCondition(cpu, cond)) return;
	
//   uint32_t addr = cpu.GetGPR( rn ), oaddr = addr + imm;
//   if (w) cpu.SetGPR( rn, oaddr );
  
//   uint32_t address = p?oaddr:addr;
//   while (cpu.CoprocessorLoad(cp_num, address)) { address += 4; }
// };

op ldc_undefined( 0b1110110[7]: 0b0[1]: 0b0[1]: 0b0[1]: 0b0[1]: 0b1[1]: rn[4]:> <: crd[4]: cp_num[4]: option[8] );

ldc_undefined.disasm = {
  buffer << "ldc\t" << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << "[" << DisasmRegister(rn) << "]"
         << ", {" << option << "}";
};

op ldc_unindexed( 0b1110110[7]: 0b0[1]: 0b1[1]: d[1]: 0b0[1]: 0b1[1]: rn[4]:> <: crd[4]: cp_num[4]: option[8] );

ldc_unindexed.disasm = {
  buffer << "ldc" << (d?"l":"") << '\t' << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << "[" << DisasmRegister(rn) << "]"
         << ", {" << option << "}";
};

// ldc_unindexed.execute = {
//   if (not CheckCondition(cpu, cond)) return;
	
//   uint32_t address = cpu.GetGPR(rn);
//   while(cpu.CoprocessorLoad(cp_num, address, option)) { address += 4; }
// };

/*
 * end of ldc instruction
 *******************************************************************/

/*******************************************************************
 * ldc2 instruction
 */

{ ARCH::insns5T }: \
op ldc2( 0b1111[4]: 0b110[3]: p[1]: u[1]: d[1]: w[1]: 0b1[1]: rn[4]:> <: crd[4]: cp_num[4]: shl<2> offset[8] );
ldc2.var imm : {int32_t} = {u?offset:-offset};

ldc2.disasm = {
  buffer << "ldc2" << (d?"l":"") << '\t'
         << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << DisasmMemoryRI( rn, imm, p, w );
};

// ldc2.execute = {
//   uint32_t addr = cpu.GetGPR( rn ), oaddr = addr + imm;
//   if (w) cpu.SetGPR( rn, oaddr );
  
//   uint32_t address = p?oaddr:addr;
//   while(cpu.CoprocessorLoad(cp_num, address)) { address += 4; }
// };

{ ARCH::insns5T }: \
op ldc2_undefined( 0b1111[4]: 0b110[3]: 0b0[1]: 0b0[1]: 0b0[1]: 0b0[1]: 0b1[1]: rn[4]:> <: crd[4]: cp_num[4]: option[8] );

ldc2_undefined.disasm = {
  buffer << "ldc2\t" << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << "[" << DisasmRegister(rn) << "]"
         << ", {" << option << "}";
};

{ ARCH::insns5T }: \
op ldc2_unindexed( 0b1111[4]: 0b110[3]: 0b0[1]: 0b1[1]: d[1]: 0b0[1]: 0b1[1]: rn[4]:> <: crd[4]: cp_num[4]: option[8] );

ldc2_unindexed.disasm = {
  buffer << "ldc2" << (d?"l":"") << '\t' << uint32_t( cp_num ) << ", cr" << uint32_t( crd ) << ", "
         << "[" << DisasmRegister(rn) << "]"
         << ", {" << option << "}";
};

// ldc2_unindexed.execute = {
//   uint32_t address = cpu.GetGPR(rn);
//   while(cpu.CoprocessorLoad(cp_num, address, option)) { address += 4; }
// };

/*
 * end of ldc2 instruction
 *******************************************************************/
