/*
 *  Copyright (c) 2007-2014,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr), Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */

/**********************************************

      EXCEPTION-GENERATING INSTRUCTIONS

**********************************************/


op rfedb( 0b11101000[8]: 0b00[2]: x[1]: 0b1[1]: r0[4]:> <: 0b1100000000000000[16] );

rfedb.disasm = {
  buffer << "rfedb\t" << DisasmRegister(r0) << (x ? "!" : "");
};

op rfeia( 0b11101001[8]: 0b10[2]: x[1]: 0b1[1]: r0[4]:> <: 0b1100000000000000[16] );

rfeia.disasm = {
  buffer << "rfeia\t" << DisasmRegister(r0) << (x ? "!" : "");
};

op smc_i( 0b111101111111[12]: imm0[4]:> <: 0b1000[4]: shl<4> imm1[8]: shl<12> imm2[4] );
smc_i.var imm : {uint32_t} = {imm2|imm1|imm0};
smc_i.disasm = { buffer << "smc\t#" << imm; };

op srsdb( 0b11101000[8]: 0b00[2]: x[1]: 0b0[1]: r0[4]:> <: 0b11000000000[11]: imm[5] );

srsdb.disasm = {
  buffer << "srsdb\t" << DisasmRegister(r0) << (x ? "!" : "") << ", #" << imm;
};

op srsia( 0b11101001[8]: 0b10[2]: x[1]: 0b0[1]: r0[4]:> <: 0b11000000000[11]: imm[5] );

srsia.disasm = {
  buffer << "srsia\t" << DisasmRegister(r0) << (x ? "!" : "") << ", #" << imm;
};

op hvc_i( 0b111101111110[12]: shl<12> imm1[4]:> <: 0b1000[4]: imm0[12] );
hvc_i.var imm : {uint32_t} = {imm1|imm0};
hvc_i.disasm = { buffer << "hvc\t#" << imm; };

op cps_i( 0b1111001110101111[16]:> <: 0b10000001[8]: 0b000[3]: imm[5] );
cps_i.disasm = { buffer << "cps\t#" << imm; };

op cpsid_i( 0b1111001110101111[16]:> <: 0b10000111[8]: bf[3]: imm[5] );

cpsid_i.disasm = {
  buffer << "cpsid\t";
  for (int bit = 3; --bit >= 0;)
    if ((bf >> bit) & 1) buffer << ("fia"[bit]);
  buffer << ", #" << imm;
};

op cpsid_w( 0b1111001110101111[16]:> <: 0b10000110[8]: bf[3]: 0b0[1]: 0b0000[4] );

cpsid_w.disasm = {
  buffer << "cpsid.w" << (bf ? "\t" : "");
  for (int bit = 3; --bit >= 0;)
    if ((bf >> bit) & 1) buffer << ("fia"[bit]);
};

op cpsie_i( 0b1111001110101111[16]:> <: 0b10000101[8]: bf[3]: imm[5] );

cpsie_i.disasm = {
  buffer << "cpsie\t";
  for (int bit = 3; --bit >= 0;)
    if ((bf >> bit) & 1) buffer << ("fia"[bit]);
  buffer << ", #" << imm;
};

op cpsie_w( 0b1111001110101111[16]:> <: 0b10000100[8]: bf[3]: 0b0[1]: 0b0000[4] );

cpsie_w.disasm = {
  buffer << "cpsie.w" << (bf ? "\t" : "");
  for (int bit = 3; --bit >= 0;)
    if ((bf >> bit) & 1) buffer << ("fia"[bit]);
};

