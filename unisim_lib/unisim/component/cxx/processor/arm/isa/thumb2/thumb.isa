/*
 *  Copyright (c) 2007-2013,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */

/**********************************************

           THUMB ARM EMULATOR ISA

**********************************************/

namespace unisim::component::cxx::processor::arm::isa::thumb2

set codetype buffer;
set addressclass {uint32_t}
set endianness little;
//set fields_order descending;
set words_order ascending;
//set withencode_p true;

template <{typename} {ARCH}>

decl {
#include <iosfwd>
#include <stdint.h>
} // end of decl

impl {
#include "unisim/component/cxx/processor/arm/models.hh"
#include "unisim/component/cxx/processor/arm/execute.hh"
#include "unisim/component/cxx/processor/arm/disasm.hh"
#include "unisim/component/cxx/processor/arm/exception.hh"
#include "unisim/util/arithmetic/arithmetic.hh"
#include <iostream>
#include <iomanip>
} // end of impl

action {void} execute({ARCH &} {cpu}) {
  cpu.MarkVirtualExceptionVector(unisim::component::cxx::processor::arm::exception::UNDEF);
}

action {void} disasm({ARCH &} {cpu}, {std::ostream &} {buffer}) {
  buffer << "Unknown instruction (thumb2)";
}

include "unisim/component/cxx/processor/arm/isa/thumb/data_processing.isa"
include "unisim/component/cxx/processor/arm/isa/thumb/load_store.isa"
include "unisim/component/cxx/processor/arm/isa/thumb/multiply.isa"
include "unisim/component/cxx/processor/arm/isa/thumb/misc_arithmetic.isa"
include "unisim/component/cxx/processor/arm/isa/thumb/branch.isa"
include "unisim/component/cxx/processor/arm/isa/thumb/exception.isa"

include "data_processing.isa"
include "load_store.isa"
include "misc_arithmetic.isa"
include "branch.isa"
include "multiply.isa"
include "coprocessor.isa"
include "hints.isa"
include "exception.isa"
include "status_register_access.isa"
include "vfp.isa"
//include "neon.isa"
//include "unisim/component/cxx/processor/arm/isa/thumb2/xscale.isa"
include "ordering.isa"

