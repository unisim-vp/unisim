/*
 *  Copyright (c) 2007-2014,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr), Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

      STATUS REGISTER ACCESS INSTRUCTIONS

**********************************************/

/*******************************************************************
 * mrs instruction
 */

op mrs( 0b11110[5]: 0b011111[6]: shl<6> sr2[1]: sr0[4]:> <: 0b1000[4]: rd[4]: 0[2]: shl<4> sr1[2]: 0[4] );
mrs.var sr : {uint32_t} = {sr2|sr1|sr0};

mrs.disasm = {
  buffer << "mrs\t" << DisasmRegister(rd) << ", " << DisasmSpecReg(sr);
};

op mrs_IAPSRr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00000001[8] );
mrs_IAPSRr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", IAPSR"; };

op mrs_EAPSRr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00000010[8] );
mrs_EAPSRr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", EAPSR"; };

op mrs_PSRr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00000011[8] );
mrs_PSRr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", PSR"; };

op mrs_IPSRr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00000101[8] );
mrs_IPSRr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", IPSR"; };

op mrs_EPSRr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00000110[8] );
mrs_EPSRr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", EPSR"; };

op mrs_IEPSRr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00000111[8] );
mrs_IEPSRr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", IEPSR"; };

op mrs_MSPr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00001000[8] );
mrs_MSPr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", MSP"; };

op mrs_PSPr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00001001[8] );
mrs_PSPr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", PSP"; };

op mrs_PRIMASKr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00010000[8] );
mrs_PRIMASKr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", PRIMASK"; };

op mrs_BASEPRIr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00010001[8] );
mrs_BASEPRIr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", BASEPRI"; };

op mrs_BASEPRI_MAXr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00010010[8] );
mrs_BASEPRI_MAXr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", BASEPRI_MAX"; };

op mrs_FAULTMASKr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00010011[8] );
mrs_FAULTMASKr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", FAULTMASK"; };

op mrs_CONTROLr( 0b11110011[8]: 0b111[3]: ?[1]: ?[4]:> <: 0b1000[4]: rd[4]: 0b00010100[8] );
mrs_CONTROLr.disasm = { buffer << "mrs\t" << DisasmRegister(rd) << ", CONTROL"; };

/*
 * end of mrs instruction
 *******************************************************************/

/*******************************************************************
 * msr instruction
 */

op msr_reg( 0b11110[5]: 0b011100[6]: shl<6> sr2[1]: rn[4]:> <: 0b1000[4]: sr0[4]: 0[2]: shl<4> sr1[2]: 0[4] );
msr_reg.var sr : {uint32_t} = {sr2|sr1|sr0};

msr_reg.disasm = {
  buffer << "msr\t" << DisasmSpecReg(sr) << ", " << DisasmRegister(rn);
};

op msr_reg_psr( 0b11110011[8]: 0b100[3]: r[1]: rn[4]:> <: 0b1000[4]: mask[4]: 0b00000000[8] );

msr_reg_psr.disasm = {
  buffer << "msr\t" << DisasmPSRMask(r,mask) << ", " << DisasmRegister(rn);
};

op msr_IAPSRr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00000001[8] );
msr_IAPSRr.disasm = { buffer << "msr\tIAPSR, " << DisasmRegister(ra); };

op msr_EAPSRr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00000010[8] );
msr_EAPSRr.disasm = { buffer << "msr\tEAPSR, " << DisasmRegister(ra); };

op msr_PSRr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00000011[8] );
msr_PSRr.disasm = { buffer << "msr\tPSR, " << DisasmRegister(ra); };

op msr_IPSRr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00000101[8] );
msr_IPSRr.disasm = { buffer << "msr\tIPSR, " << DisasmRegister(ra); };

op msr_EPSRr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00000110[8] );
msr_EPSRr.disasm = { buffer << "msr\tEPSR, " << DisasmRegister(ra); };

op msr_IEPSRr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00000111[8] );
msr_IEPSRr.disasm = { buffer << "msr\tIEPSR, " << DisasmRegister(ra); };

op msr_MSPr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00001000[8] );
msr_MSPr.disasm = { buffer << "msr\tMSP, " << DisasmRegister(ra); };

op msr_PSPr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00001001[8] );
msr_PSPr.disasm = { buffer << "msr\tPSP, " << DisasmRegister(ra); };

op msr_PRIMASKr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00010000[8] );
msr_PRIMASKr.disasm = { buffer << "msr\tPRIMASK, " << DisasmRegister(ra); };

op msr_BASEPRIr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00010001[8] );
msr_BASEPRIr.disasm = { buffer << "msr\tBASEPRI, " << DisasmRegister(ra); };

op msr_BASEPRI_MAXr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00010010[8] );
msr_BASEPRI_MAXr.disasm = { buffer << "msr\tBASEPRI_MAX, " << DisasmRegister(ra); };

op msr_FAULTMASKr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00010011[8] );
msr_FAULTMASKr.disasm = { buffer << "msr\tFAULTMASK, " << DisasmRegister(ra); };

op msr_CONTROLr( 0b11110011[8]: 0b100[3]: ?[1]: ra[4]:> <: 0b1000[4]: ?[4]: 0b00010100[8] );
msr_CONTROLr.disasm = { buffer << "msr\tCONTROL, " << DisasmRegister(ra); };

/*
 * end of msr instruction
 *******************************************************************/
