/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

           SEMAPHORE INSTRUCTIONS

**********************************************/

/* TODO: missing implementation */

/* NOTE: r15 should never be used for rn, rd and/or rm, so no need to 
 *   initialize them.
 */

/*******************************************************************
 * swp instruction
 */

op swp(cond[4]:0b00010000[8]:rn[4]:rd[4]:0b0000[4]:0b1001[4]:rm[4])

swp.disasm = {
  buffer << "swp";
  cpu.DisasmCondition(cond, buffer);
  buffer << " r" << rd << ", "
  << "r" << rm << ", "
  << "[r" << rn << "]";
}

swp.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	address = rn_value;
	cpu.Read32toGPR(address, rd);
	cpu.Write32(address, rm_value);
}

/*
 * end of swp instruction
 *******************************************************************/

/*******************************************************************
 * swpb instruction
 */

op swpb(cond[4]:0b00010100[8]:rn[4]:rd[4]:0b0000[4]:0b1001[4]:rm[4])

swpb.disasm = {
  buffer << "swp";
  cpu.DisasmCondition(cond, buffer);
  buffer << "b r" << rd << ", "
  << "r" << rm << ", "
  << "[r" << rn << "]";
}

swpb.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	uint8_t value = rm_value & (uint32_t)0x0ff;
	address = rn_value;
	cpu.Read8toGPR(address, rd);
	cpu.Write8(address, value);
}

/*
 * end of swpb instruction
 *******************************************************************/
