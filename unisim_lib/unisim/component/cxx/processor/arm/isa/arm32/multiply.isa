/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

           MULTIPLY INSTRUCTIONS

**********************************************/

/*******************************************************************
 * mla instruction
 */

op mla(cond[4]:0b01[7]:s[1]:rd[4]:rn[4]:rs[4]:0b01001[4]:rm[4])

mla.disasm = {
	buffer << "mla";
	DisasmCondition(cond, buffer);
	if(s) buffer << "s";
	buffer << " r" << (unsigned int) rd << ", "
		<< "r" << (unsigned int) rm << ", "
		<< "r" << (unsigned int) rs << ", "
		<< "r" << (unsigned int) rn << "";
}

mla.execute = {
	typedef Operation<STATE> inherited;

	uint32_t res;
	uint32_t rm_value = cpu.GetGPR(rm);
	uint32_t rn_value = cpu.GetGPR(rn);
	uint32_t rs_value = cpu.GetGPR(rs);


	if(!cpu.CheckCondition(cond)) return;

	res = rm_value * rs_value;
	res += rn_value;
	cpu.SetGPR(rd, res);
  
	if(s) {
		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
	}
}

/*
 * end of mla instruction
 *******************************************************************/

/*******************************************************************
 * mul instruction
 */

op mul(cond[4]:0b0[7]:s[1]:rd[4]:sbz[4]:rs[4]:0b01001[4]:rm[4])

mul.disasm = {
	buffer << "mul";
	DisasmCondition(cond, buffer);
	if(s) buffer << "s";
	buffer << " r" << (unsigned int) rd << ", "
		<< "r" << (unsigned int) rm << ", "
		<< "r" << (unsigned int) rs << "";
}

mul.execute = {
	typedef Operation<STATE> inherited;

	uint32_t res;
	uint32_t rm_value = cpu.GetGPR(rm);
	uint32_t rs_value = cpu.GetGPR(rs);


	if(!cpu.CheckCondition(cond)) return;

	res = rm_value * rs_value;
	cpu.SetGPR(rd, res);
  
	if(s) {
		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
	}
}

/*
 * end of mul instruction
 *******************************************************************/

/*******************************************************************
 * smlal instruction
 * Note: this instruction is only supported for the M variants, that is:
 *    ARMV4TXM
 *    ARMV5XM
 *    ARMV5TXM
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op smlal(cond[4]:0b0111[7]:s[1]:rdhi[4]:rdlo[4]:rs[4]:0b01001[4]:rm[4])

smlal.disasm = {
	buffer << "smlal";
	DisasmCondition(cond, buffer);
	if(s) buffer << "s";
	buffer << " r" << (unsigned int) rdhi << ", "
		<< "r" << (unsigned int) rdlo << ", "
		<< "r" << (unsigned int) rm << ", "
		<< "r" << (unsigned int) rs << "";
}

smlal.execute = {
	typedef Operation<STATE> inherited;

	uint64_t res;
	uint64_t res_lo, res_hi;
	uint32_t rdhi_value = cpu.GetGPR(rdhi);
	uint32_t rdlo_value = cpu.GetGPR(rdlo);
	uint32_t rm_value = cpu.GetGPR(rm);
	uint32_t rs_value = cpu.GetGPR(rs);


	if(!cpu.CheckCondition(cond)) return;

	res = rdlo_value + (((uint64_t)rdhi_value) << 32);
	res = (int64_t)res + ((int64_t)(int32_t)rm_value) * ((int64_t)(int32_t)rs_value);
	res_lo = res & (uint64_t)(~(uint32_t)0);
	res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
	cpu.SetGPR(rdhi, (uint32_t)res_hi);
	cpu.SetGPR(rdlo, (uint32_t)res_lo);

	if(s) {
		cpu.SetCPSR_N(res_hi & 0x80000000);
		cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
	}
}

/*
 * end of smlal instruction
 *******************************************************************/

/*******************************************************************
 * smull instruction
 * Note: this instruction is only supported for the M variants, that is:
 *    ARMV4TXM
 *    ARMV5XM
 *    ARMV5TXM
 */

op smull(cond[4]:0b0110[7]:s[1]:rdhi[4]:rdlo[4]:rs[4]:0b1001[4]:rm[4])

smull.disasm = {
	buffer << "smull";
	DisasmCondition(cond, buffer);
	if(s) buffer << "s";
	buffer << " r" << (unsigned int) rdhi << ", "
	<< "r" << (unsigned int) rdlo << ", "
	<< "r" << (unsigned int) rm << ", "
	<< "r" << (unsigned int) rs << "";
}

smull.execute = {
	typedef Operation<STATE> inherited;

	uint64_t res;
	uint64_t res_lo, res_hi;
	uint32_t rm_value = cpu.GetGPR(rm);
	uint32_t rs_value = cpu.GetGPR(rs);


	if(!cpu.CheckCondition(cond)) return;

	res = ((int64_t)(int32_t)rm_value) * ((int64_t)(int32_t)rs_value);
	res_lo = res & (uint64_t)(~(uint32_t)0);
	res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
	cpu.SetGPR(rdhi, (uint32_t)res_hi);
	cpu.SetGPR(rdlo, (uint32_t)res_lo);
	
	if(s) {
		cpu.SetCPSR_N(res_hi & 0x80000000);
		cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
	}
}

/*
 * end of smull instruction
 *******************************************************************/

/*******************************************************************
 * umlal instruction
 * Note: this instruction is only supported for the M variants, that is:
 *    ARMV4TXM
 *    ARMV5XM
 *    ARMV5TXM
 */

op umlal(cond[4]:0b0101[7]:s[1]:rdhi[4]:rdlo[4]:rs[4]:0b1001[4]:rm[4])

umlal.disasm = {
	buffer << "umlal";
	DisasmCondition(cond, buffer);
	if(s) buffer << "s";
	buffer << " r" << (unsigned int) rdhi << ", "
		<< "r" << (unsigned int) rdlo << ", "
		<< "r" << (unsigned int) rm << ", "
		<< "r" << (unsigned int) rs << "";
}

umlal.execute = {
	typedef Operation<STATE> inherited;

	uint64_t res;
	uint64_t res_lo, res_hi;
	uint32_t rdhi_value = cpu.GetGPR(rdhi);
	uint32_t rdlo_value = cpu.GetGPR(rdlo);
	uint32_t rm_value = cpu.GetGPR(rm);
	uint32_t rs_value = cpu.GetGPR(rs);


	if(!cpu.CheckCondition(cond)) return;

	res = rdlo_value + (((uint64_t)rdhi_value) << 32);
	res += ((int64_t)rm_value) * ((int64_t)rs_value);
	res_lo = res & (uint64_t)(~(uint32_t)0);
	res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
	cpu.SetGPR(rdhi, (uint32_t)res_hi);
	cpu.SetGPR(rdlo, (uint32_t)res_lo);

	if(s) {
		cpu.SetCPSR_N(res_hi & 0x80000000);
		cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
	}
}

/*
 * end of umlal instruction
 *******************************************************************/

/*******************************************************************
 * umull instruction
 * Note: this instruction is only supported for the M variants, that is:
 *    ARMV4TXM
 *    ARMV5XM
 *    ARMV5TXM
 */

op umull(cond[4]:0b0100[7]:s[1]:rdhi[4]:rdlo[4]:rs[4]:0b1001[4]:rm[4])

umull.disasm = {
	buffer << "umull";
	DisasmCondition(cond, buffer);
	if(s) buffer << "s";
	buffer << " r" << (unsigned int) rdhi << ", "
		<< "r" << (unsigned int) rdlo << ", "
		<< "r" << (unsigned int) rm << ", "
		<< "r" << (unsigned int) rs << "";
}

umull.execute = {
	typedef Operation<STATE> inherited;

	uint64_t res;
	uint64_t res_lo, res_hi;
	uint32_t rm_value = cpu.GetGPR(rm);
	uint32_t rs_value = cpu.GetGPR(rs);


	if(!cpu.CheckCondition(cond)) return;

	res = ((int64_t)rm_value) * ((int64_t)rs_value);
	res_lo = res & (uint64_t)(~(uint32_t)0);
	res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
	cpu.SetGPR(rdhi, (uint32_t)res_hi);
	cpu.SetGPR(rdlo, (uint32_t)res_lo);

	if(s) {
		cpu.SetCPSR_N(res_hi & 0x80000000);
		cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
	}
}

/*
 * end of umull instruction
 *******************************************************************/
