/*
 *  Copyright (c) 2008,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */

/**********************************************

       ARMV5E MULTIPLY INSTRUCTIONS

**********************************************/

/*****************************************************************************
 * TODO:
 * op smla()
 * op smlal()
 * op smlaw()
 * op smul()
 * op smulw()
 */

/*******************************************************************
 * smlaxy instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op smlaxy(cond[4]:0b00010000[8]:rd[4]:rn[4]:rs[4]:0b1[1]:y[1]:x[1]:0b0[1]:rm[4])

smlaxy.disasm = {
	buffer << "smla";
	if(x) buffer << "t";
	else buffer << "b";
	if(y) buffer << "t";
	else buffer << "b";
	DisasmCondition(cond, buffer);
	buffer << " r" << (unsigned int) rd;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rs;
	buffer << ", r" << (unsigned int) rn;
}

smlaxy.execute = {
	int32_t op1;
	int32_t op2;
	uint32_t val_rm;
	uint32_t val_rs;
	uint32_t val_rn;
	uint32_t val_rd;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	val_rm = cpu.GetGPR(rm);
	val_rs = cpu.GetGPR(rs);
	val_rn = cpu.GetGPR(rn);
	
	if(x)
		val_rm = val_rm >> 16;
	if(val_rm & (uint32_t)0x00008000ULL) {
		val_rm = val_rm | (uint32_t)0xffff0000ULL;
		op1 = (int32_t)val_rm;
	} else {
		val_rm = val_rm & (uint32_t)0x0000ffffULL;
		op1 = (int32_t)val_rm;
	}
	
	if(y)
		val_rs = val_rs >> 16;
	if(val_rs & (uint32_t)0x00008000ULL) {
		val_rs = val_rs | (uint32_t)0xffff0000ULL;
		op2 = (int32_t)val_rs;
	} else {
		val_rs = val_rs & (uint32_t)0x0000ffffULL;
		op2 = (int32_t)val_rs;
	}
	
	op1 = op1 * op2;
	val_rd = op1 + val_rn;
	if(op1 > 0 && (val_rd & (uint32_t)0x80000000ULL) != 0) {
		cpu.SetCPSR_Q(true);
	} else {
		cpu.SetCPSR_Q(false);
	}
	cpu.SetGPR(rd, val_rd);
}

/*
 * end of smlaxy instruction
 *******************************************************************/

/*******************************************************************
 * smlalxy instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op smlalxy(cond[4]:0b00010100[8]:rdhi[4]:rdlo[4]:rs[4]:0b1[1]:y[1]:x[1]:0b0[1]:rm[4])

smlalxy.disasm = {
	buffer << "smlal";
	if(x) buffer << "t";
	else buffer << "b";
	if(y) buffer << "t";
	else buffer << "b";
	DisasmCondition(cond, buffer);
	buffer << " r" << (unsigned int) rdlo;
	buffer << ", r" << (unsigned int) rdhi;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rs;
}

smlalxy.execute = {
	int32_t op1;
	int32_t op2;
	uint32_t val_rm;
	uint32_t val_rs;
	uint32_t val_rdhi;
	uint32_t val_rdlo, val_rdlo_init;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	if(rdhi == cpu.PC_reg || rdlo == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	val_rm = cpu.GetGPR(rm);
	val_rs = cpu.GetGPR(rs);
	val_rdhi = cpu.GetGPR(rdhi);
	val_rdlo_init = cpu.GetGPR(rdlo);
	
	if(x)
		val_rm = val_rm >> 16;
	if(val_rm & (uint32_t)0x00008000ULL) {
		val_rm = val_rm | (uint32_t)0xffff0000ULL;
		op1 = (int32_t)val_rm;
	} else {
		val_rm = val_rm & (uint32_t)0x0000ffffULL;
		op1 = (int32_t)val_rm;
	}
	
	if(y)
		val_rs = val_rs >> 16;
	if(val_rs & (uint32_t)0x00008000ULL) {
		val_rs = val_rs | (uint32_t)0xffff0000ULL;
		op2 = (int32_t)val_rs;
	} else {
		val_rs = val_rs & (uint32_t)0x0000ffffULL;
		op2 = (int32_t)val_rs;
	}
	
	op1 = op1 * op2;
	val_rdlo = val_rdlo_init + op1;
	if(op1 < 0) rdhi = rdhi + (uint32_t)0xffffffffULL;
	else {
		if(CarryFrom(val_rdlo, val_rdlo_init, (uint32_t)op1))
			rdhi++;
	}
	cpu.SetGPR(rdlo, val_rdlo);
	cpu.SetGPR(rdhi, val_rdhi);
}

/*
 * end of smlalxy instruction
 *******************************************************************/

/*******************************************************************
 * smlawy instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op smlawy(cond[4]:0b00010010[8]:rd[4]:rn[4]:rs[4]:0b1[1]:y[1]:0b00[2]:rm[4])

smlawy.disasm = {
	buffer << "smlaw";
	if(y) buffer << "t";
	else buffer << "b";
	DisasmCondition(cond, buffer);
	buffer << " r" << (unsigned int) rd;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rs;
	buffer << ", r" << (unsigned int) rn;
}

smlawy.execute = {
	int32_t op;
	uint32_t val_rm;
	uint32_t val_rs;
	uint32_t val_rn;
	uint32_t val_rd;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	val_rm = cpu.GetGPR(rm);
	val_rs = cpu.GetGPR(rs);
	val_rn = cpu.GetGPR(rn);
	
	if(y)
		val_rs = val_rs >> 16;
	if(val_rs & (uint32_t)0x00008000ULL) {
		val_rs = val_rs | (uint32_t)0xffff0000ULL;
		op = (int32_t)val_rs;
	} else {
		val_rs = val_rs & (uint32_t)0x0000ffffULL;
		op = (int32_t)val_rs;
	}
	
	int64_t op64;
	op64 = (int32_t)val_rm;
	op64 = op64 * op;
	op64 = op64 >> 16;
	op64 = op64 & (uint64_t)0xffffffffULL;
	int32_t sval_rd;
	uint32_t op_tmp = op64;
	sval_rd = (int32_t)op_tmp;
	val_rd = (uint32_t)(sval_rd + (int32_t)val_rn);
	if ( (op_tmp & (uint32_t)0x80000000ULL) !=
		(val_rn & (uint32_t)0x80000000ULL) ) 
	{
		cpu.SetCPSR_Q(false);
	} 
	else 
	{
		if ( (op_tmp & (uint32_t)0x80000000ULL) !=
			(val_rd & (uint32_t)0x80000000ULL) )
		{
			cpu.SetCPSR_Q(true);
		} 
		else
			cpu.SetCPSR_Q(false);
	}
	cpu.SetGPR(rd, val_rd);

}

/*
 * end of smlawy instruction
 *******************************************************************/

/*******************************************************************
 * smulxy instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op smulxy(cond[4]:0b00010110[8]:rd[4]:sbz[4]:rs[4]:0b1[1]:y[1]:x[1]:0b0[1]:rm[4])

smulxy.disasm = {
	buffer << "smul";
	if(x) buffer << "t";
	else buffer << "b";
	if(y) buffer << "t";
	else buffer << "b";
	DisasmCondition(cond, buffer);
	buffer << " r" << (unsigned int) rd;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rs;
}

smulxy.execute = {
	int32_t op1;
	int32_t op2;
	uint32_t val_rm;
	uint32_t val_rs;
	uint32_t val_rd;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	val_rm = cpu.GetGPR(rm);
	val_rs = cpu.GetGPR(rs);
	
	if(x)
		val_rm = val_rm >> 16;
	if(val_rm & (uint32_t)0x00008000ULL) {
		val_rm = val_rm | (uint32_t)0xffff0000ULL;
		op1 = (int32_t)val_rm;
	} else {
		val_rm = val_rm & (uint32_t)0x0000ffffULL;
		op1 = (int32_t)val_rm;
	}
	
	if(y)
		val_rs = val_rs >> 16;
	if(val_rs & (uint32_t)0x00008000ULL) {
		val_rs = val_rs | (uint32_t)0xffff0000ULL;
		op2 = (int32_t)val_rs;
	} else {
		val_rs = val_rs & (uint32_t)0x0000ffffULL;
		op2 = (int32_t)val_rs;
	}
	
	op1 = op1 * op2;
	val_rd = (uint32_t)op1;
	cpu.SetGPR(rd, val_rd);
}

/*
 * end of smulxy instruction
 *******************************************************************/

/*******************************************************************
 * smulwy instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op smulwy(cond[4]:0b00010010[8]:rd[4]:sbz[4]:rs[4]:0b1[1]:y[1]:0b10[2]:rm[4])

smulwy.disasm = {
	buffer << "smulw";
	if(y) buffer << "t";
	else buffer << "b";
	DisasmCondition(cond, buffer);
	buffer << " r" << (unsigned int) rd;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rs;
}

smulwy.execute = {
	int32_t op1;
	int32_t op2;
	uint32_t val_rm;
	uint32_t val_rs;
	uint32_t val_rd;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	val_rm = cpu.GetGPR(rm);
	val_rs = cpu.GetGPR(rs);
	
	if(y)
		val_rs = val_rs >> 16;
	if(val_rs & (uint32_t)0x00008000ULL) {
		val_rs = val_rs | (uint32_t)0xffff0000ULL;
		op2 = (int32_t)val_rs;
	} else {
		val_rs = val_rs & (uint32_t)0x0000ffffULL;
		op2 = (int32_t)val_rs;
	}
	
	op1 = (int32_t)val_rm;
	int64_t op64 = (int64_t)op1 * (int64_t)op2;
	val_rd = (uint32_t)((uint64_t)(op64 >> 16) & (uint64_t)0xffffffffULL);
	cpu.SetGPR(rd, val_rd);
}

/*
 * end of smulwy instruction
 *******************************************************************/
