/*
 *  Copyright (c) 2007-2013,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

     MISCELLANEOUS ARITHMETIC INSTRUCTIONS

**********************************************/

/*******************************************************************
 * clz (count leading zero) instruction
 */

{ STATE::MODEL == ARMV5T ||
  STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMV7 ||
  STATE::MODEL == ARMEMU
}:op clz(cond[4]:0b00010110[8]:/*sbo*/0xf[4]:rd[4]:/*sbo*/0xf[4]:0b0001[4]:rm[4]);

clz.disasm = {
  buffer << "clz" << DisasmCondition(cond) << '\t' << DisasmRegister(rd) << ", " << DisasmRegister(rm);
};

clz.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  cpu.SetGPR(rd, CountLeadingZeros( cpu.GetGPR(rm) ));
};

/*
 * end of (count leading zero) clz instruction
 *******************************************************************/

/*******************************************************************
 * rbit instruction
 */

{ STATE::MODEL == ARMV7 }:                              \
op rbit( cond[4]:0x6ff[12]:rd[4]:0xf3[8]:rm[4] );

rbit.disasm = {
  buffer << "rbit" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm);
};

rbit.execute = {
  uint32_t src = cpu.GetGPR( rm ), dst = 0;
  for (int idx = 0; idx < 32; ++idx) { dst = (dst << 1) | (src & 1); src >>= 1; }
  cpu.SetGPR( rd, dst );
};

/*
 * end of rbit instruction
 *******************************************************************/

/*******************************************************************
 * rev (Byte-Reverse Word) instruction
 *
 * REV reverses the byte order in a 32-bit register.
 */

{ STATE::MODEL == ARMV7 }:                                              \
op rev( cond[4]:0b01101[5]:0[1]:0b11[2]:/*sbo*/0b1111[4]:rd[4]:/*sbo*/0b1111[4]:0b0011[4]:rm[4] );

rev.disasm = {
  buffer << "rev" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm);
};

rev.execute = {
  uint32_t src = cpu.GetGPR( rm ), dst = 0;
  for (int idx = 0; idx < 32; idx += 8) { dst = (dst << 8) | (src & 0xff); src >>= 8; }
  cpu.SetGPR( rd, dst );
};

/*
 * end of rev instruction
 *******************************************************************/

/*******************************************************************
 * revsh (Byte-Reverse Word) instruction
 *
 * REVSH reverses the byte order in a 32-bit register.
 */

{ STATE::MODEL == ARMV7 }:                                              \
op revsh( cond[4]:0b01101[5]:1[1]:0b11[2]:/*sbo*/0b1111[4]:rd[4]:/*sbo*/0b1111[4]:0b1011[4]:rm[4] );

revsh.disasm = {
  buffer << "revsh" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm);
};

/*
 * end of revsh instruction
 *******************************************************************/

/*******************************************************************
 * rev16 (Byte-Reverse Packed Halfword) instruction
 *
 * REV16 reverses the byte order in each16-bit halfword of a 32-bit
 * register.
 */

{ STATE::MODEL == ARMV7 }:                                              \
op rev16( cond[4]:0b01101[5]:0[1]:0b11[2]:/*sbo*/0b1111[4]:rd[4]:/*sbo*/0b1111[4]:0b1011[4]:rm[4] );

rev16.disasm = {
  buffer << "rev16" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm);
};

rev16.execute = {
  uint32_t src = cpu.GetGPR( rm ), dst = 0;
  for (int idx = 0; idx < 32; idx += 8) { dst = (dst << 8) | (src & 0xff); src >>= 8; }
  cpu.SetGPR( rd, (dst << 16) | (dst >> 16) );
};

/*
 * end of rev16 instruction
 *******************************************************************/

/*******************************************************************
 * nop instruction
 */

op nop( cond[4]:0b0011[4]:0b0010[4]:0b0000[4]:/*sbo*/0b1111[4]:/*sbz*/0b0000[4]:idx[8] );

nop.disasm = { buffer << "nop" << DisasmCondition(cond) << "\t{" << idx << "}"; };

/*
 * end of nop instruction
 *******************************************************************/

/*******************************************************************
 * yield instruction
 */

op yield( cond[4]:0b0011[4]:0b0010[4]:0b0000[4]:/*sbo*/0b1111[4]:/*sbz*/0b0000[4]:1[8] );

yield.disasm = { buffer << "yield" << DisasmCondition(cond); };

/*
 * end of yield instruction
 *******************************************************************/

/*******************************************************************
 * wfe instruction
 */

op wfe( cond[4]:0b0011[4]:0b0010[4]:0b0000[4]:/*sbo*/0b1111[4]:/*sbz*/0b0000[4]:2[8] );

wfe.disasm = { buffer << "wfe" << DisasmCondition(cond); };

/*
 * end of wfe instruction
 *******************************************************************/

/*******************************************************************
 * wfi instruction
 */

op wfi( cond[4]:0b0011[4]:0b0010[4]:0b0000[4]:/*sbo*/0b1111[4]:/*sbz*/0b0000[4]:3[8] );

wfi.disasm = { buffer << "wfi" << DisasmCondition(cond); };

/*
 * end of wfi instruction
 *******************************************************************/

/*******************************************************************
 * sev instruction
 */

op sev( cond[4]:0b0011[4]:0b0010[4]:0b0000[4]:/*sbo*/0b1111[4]:/*sbz*/0b0000[4]:4[8] );

sev.disasm = { buffer << "sev" << DisasmCondition(cond); };

/*
 * end of sev instruction
 *******************************************************************/

/*******************************************************************
 * dbg instruction
 */

op dbg( cond[4]:0b0011[4]:0b0010[4]:0b0000[4]:/*sbo*/0b1111[4]:/*sbz*/0b0000[4]:0b1111[4]:idx[4] );

dbg.disasm = { buffer << "dbg" << DisasmCondition(cond) << '\t' << DisasmI(idx); };

/*
 * end of dbg instruction
 *******************************************************************/

/*******************************************************************
 * pkh (Pack Halfword) instruction
 *
 * PKH combines one halfword of its first operand with the other
 * halfword of its shifted second operand.
 */

op pkh(cond[4]:0b01101000[8]:rn[4]:rd[4]:imm[5]:tb[1]:0b01[2]:rm[4]);

pkh.disasm = {
  buffer << "pkh" << (tb?"tb":"bt")<< DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
         << DisasmRegister(rm) << DisasmShImm( tb?2:0, imm );
};

/*
 * end of pkh instruction
 *******************************************************************/

/*******************************************************************
 * sxtab16 (Signed Extend and Add Byte 16) instruction
 *
 * SXTAB16 extracts two 8-bit values from a register, sign-extends
 * them to 16 bits each, adds the results to two 16-bit values from
 * another register, and writes the final results to the destination
 * register. You can specify a rotation by 0, 8, 16, or 24 bits before
 * extracting the 8-bit values.
 */

op sxtab16(cond[4]:0b01101000[8]:rn[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

sxtab16.disasm = {
  buffer << "sxtab16" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
         << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of sxtab16 instruction
 *******************************************************************/

/*******************************************************************
 * sxtb16 (Signed Extend Byte 16) instruction
 *  
 * SXTB16 extracts two 8-bit values from a register, sign-extends them
 * to 16 bits each, and writes the results to the destination
 * register. You can specify a rotation by 0, 8, 16, or 24 bits before
 * extracting the 8-bit values.
 */

op sxtb16(cond[4]:0b01101000[8]:0b1111[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

sxtb16.disasm = {
  buffer << "sxtb16" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of sxtb16 instruction
 *******************************************************************/

/*******************************************************************
 * uxtab16 (Unsigned Extend and Add Byte 16) instruction
 *
 * UXTAB16 extracts two 8-bit values from a register, sign-extends
 * them to 16 bits each, adds the results to two 16-bit values from
 * another register, and writes the final results to the destination
 * register. You can specify a rotation by 0, 8, 16, or 24 bits before
 * extracting the 8-bit values.
 */

op uxtab16(cond[4]:0b01101100[8]:rn[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

uxtab16.disasm = {
  buffer << "uxtab16" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
         << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of uxtab16 instruction
 *******************************************************************/

/*******************************************************************
 * uxtb16 (Unsigned Extend Byte 16) instruction
 *  
 * UXTB16 extracts two 8-bit values from a register, sign-extends them
 * to 16 bits each, and writes the results to the destination
 * register. You can specify a rotation by 0, 8, 16, or 24 bits before
 * extracting the 8-bit values.
 */

op uxtb16(cond[4]:0b01101100[8]:0b1111[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

uxtb16.disasm = {
  buffer << "uxtb16" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of uxtb16 instruction
 *******************************************************************/

/*******************************************************************
 * sel (Select Bytes) instruction
 *
 * SEL selects each byte of its result from either its first operand
 * or its second operand, according to the values of the GE flags.
 */

op sel(cond[4]:0b01101000[8]:rn[4]:rd[4]:/*sbo*/0b1111[4]:0b1011[4]:rm[4]);

sel.disasm = {
  buffer << "sel" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
         << DisasmRegister(rm);
};

/*
 * end of sel instruction
 *******************************************************************/

/*******************************************************************
 * ssat (Signed Saturate) instruction
 *  
 * SSAT saturates an optionally-shifted signed value to a selectable
 * signed range.  The Q flag is set if the operation saturates.
 */

op ssat(cond[4]:0b0110101[7]:sat_imm[5]:rd[4]:imm[5]:sh[1]:0b01[2]:rm[4]);

ssat.disasm = {
  buffer << "ssat" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmI(sat_imm+1) << ", "
         << DisasmRegister(rm) << DisasmShImm(sh?2:0,imm);
};

/*
 * end of ssat instruction
 *******************************************************************/

/*******************************************************************
 * ssat16 (Signed Saturate 16) instruction
 *  
 * SSAT16 saturates two signed 16-bit values to a selectable signed
 * range.  The Q flag is set if the operation saturates.
 */

op ssat16(cond[4]:0b01101010[8]:sat_imm[4]:rd[4]:/*sbo*/0b1111[4]:0b0011[4]:rm[4]);

ssat16.disasm = {
  buffer << "ssat16" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmI(sat_imm+1) << ", " << DisasmRegister(rm);
};

/*
 * end of ssat16 instruction
 *******************************************************************/

/*******************************************************************
 * usat (Unsigned Saturate) instruction
 *  
 * USAT saturates an optionally-shifted unsigned value to a selectable
 * unsigned range.  The Q flag is set if the operation saturates.
 */

op usat(cond[4]:0b0110111[7]:sat_imm[5]:rd[4]:imm[5]:sh[1]:0b01[2]:rm[4]);

usat.disasm = {
  buffer << "usat" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmI(sat_imm) << ", "
         << DisasmRegister(rm) << DisasmShImm(sh?2:0,imm);
};

/*
 * end of usat instruction
 *******************************************************************/

/*******************************************************************
 * usat16 (Unsigned Saturate 16) instruction
 *  
 * USAT16 saturates two unsigned 16-bit values to a selectable unsigned
 * range.  The Q flag is set if the operation saturates.
 */

op usat16(cond[4]:0b01101110[8]:sat_imm[4]:rd[4]:/*sbo*/0b1111[4]:0b0011[4]:rm[4]);

usat16.disasm = {
  buffer << "usat16" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmI(sat_imm) << ", " << DisasmRegister(rm);
};

/*
 * end of usat16 instruction
 *******************************************************************/

/*******************************************************************
 * sxtab (Signed Extend and Add Byte) instruction
 *
 * SXTAB extracts an 8-bit value from a register, sign-extends it to
 * 32 bits, adds the result to the value in another register, and
 * writes the final result to the destination register. You can
 * specify a rotation by 0, 8, 16, or 24 bits before extracting the
 * 8-bit value.
 */

op sxtab(cond[4]:0b01101010[8]:rn[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

sxtab.disasm = {
  buffer << "sxtab" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
         << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of sxtab instruction
 *******************************************************************/

/*******************************************************************
 * sxtb (Signed Extend Byte 16) instruction
 *  
 * SXTB extracts two 8-bit values from a register, sign-extends them
 * to 16 bits each, and writes the results to the destination
 * register. You can specify a rotation by 0, 8, 16, or 24 bits before
 * extracting the 8-bit values.
 */

op sxtb(cond[4]:0b01101010[8]:0b1111[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

sxtb.disasm = {
  buffer << "sxtb" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of sxtb instruction
 *******************************************************************/

/*******************************************************************
 * sxtah (Signed Extend and Add Halfword) instruction
 *  
 * SXTAH extracts a 16-bit value from a register, sign-extends it to
 * 32 bits, adds the result to a value from another register, and
 * writes the final result to the destination register. You can
 * specify a rotation by 0, 8, 16, or 24 bits before extracting the
 * 16-bit value.
 */

op sxtah(cond[4]:0b01101011[8]:rn[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

sxtah.disasm = {
  buffer << "sxtah" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
         << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of sxtah instruction
 *******************************************************************/

/*******************************************************************
 * sxth (Signed Extend Halfword) instruction
 */

op sxth(cond[4]:0b01101011[8]:0b1111[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

sxth.disasm = {
  buffer << "sxth" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of sxth instruction
 *******************************************************************/

/*******************************************************************
 * uxtab (Signed Extend and Add Byte) instruction
 *
 * UXTAB extracts an 8-bit value from a register, sign-extends it to
 * 32 bits, adds the result to the value in another register, and
 * writes the final result to the destination register. You can
 * specify a rotation by 0, 8, 16, or 24 bits before extracting the
 * 8-bit value.
 */

op uxtab(cond[4]:0b01101110[8]:rn[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

uxtab.disasm = {
  buffer << "uxtab" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
         << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of uxtab instruction
 *******************************************************************/

/*******************************************************************
 * uxtb (Signed Extend Byte 16) instruction
 *  
 * UXTB extracts two 8-bit values from a register, sign-extends them
 * to 16 bits each, and writes the results to the destination
 * register. You can specify a rotation by 0, 8, 16, or 24 bits before
 * extracting the 8-bit values.
 */

op uxtb(cond[4]:0b01101110[8]:0b1111[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

uxtb.disasm = {
  buffer << "uxtb" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of uxtb instruction
 *******************************************************************/

/*******************************************************************
 * uxtah (Signed Extend and Add Halfword) instruction
 *  
 * UXTAH extracts a 16-bit value from a register, sign-extends it to
 * 32 bits, adds the result to a value from another register, and
 * writes the final result to the destination register. You can
 * specify a rotation by 0, 8, 16, or 24 bits before extracting the
 * 16-bit value.
 */

op uxtah(cond[4]:0b01101111[8]:rn[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

uxtah.disasm = {
  buffer << "uxtah" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
         << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of uxtah instruction
 *******************************************************************/

/*******************************************************************
 * uxth (Signed Extend Halfword) instruction
 */

op uxth(cond[4]:0b01101111[8]:0b1111[4]:rd[4]:rotate[2]:/*sbz*/0b00[2]:0b0111[4]:rm[4]);

uxth.disasm = {
  buffer << "uxth" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rm) << DisasmShImm( rotate?3:0, (rotate<<3) );
};

/*
 * end of uxth instruction
 *******************************************************************/

/*******************************************************************
 * usad8 (Unsigned Sum of Absolute Differences) instruction
 *
 * USAD8 performs four unsigned 8-bit subtractions, and adds the
 * absolute values of the differences together.
 */

op usad8(cond[4]:0b01111000[8]:rd[4]:0b1111[4]:rm[4]:0b0001[4]:rn[4]);

usad8.disasm = {
  buffer << "usad8" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", " << DisasmRegister(rm);
};

/*
 * end of usad8 instruction
 *******************************************************************/

/*******************************************************************
 * usada8 (Unsigned Sum of Absolute Differences and Accumulate) instruction
 *
 */

op usada8(cond[4]:0b01111000[8]:rd[4]:ra[4]:rm[4]:0b0001[4]:rn[4]);

usada8.disasm = {
  buffer << "usada8" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn)
         << ", " << DisasmRegister(rm) << ", " << DisasmRegister(ra);
};

/*
 * end of usada8 instruction
 *******************************************************************/

/*******************************************************************
 * sbfx (Signed Bit Field Extract) instruction
 *
 * SBFX extracts any number of adjacent bits at any position from a
 * register, sign-extends them to 32 bits, and writes the result to
 * the destination register.
 */

op sbfx(cond[4]:0b01111[5]:0[1]:1[1]:widthm1[5]:rd[4]:lsb[5]:0b101[3]:rn[4]);

sbfx.disasm = {
  buffer << "sbfx" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn)
         << ", " << DisasmI(lsb) << ", " << DisasmI(widthm1+1);
};

/*
 * end of sbfx instruction
 *******************************************************************/

/*******************************************************************
 * bfi (Bit Field Insert) instruction
 * 
 * BFI copies any number of low order bits from a register into the
 * same number of adjacent bits at any position in the destination
 * register.
 */

op bfi(cond[4]:0b0111110[7]:msb[5]:rd[4]:lsb[5]:0b001[3]:rn[4]);

bfi.disasm = {
  if (lsb <= msb) {
    buffer << "bfi"  << DisasmCondition(cond) << '\t'
           << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
           << DisasmI(lsb) << ", " << DisasmI(msb-lsb+1);
  } else {
    buffer << "bfi"  << DisasmCondition(cond) << '\t'
           << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", "
           << "(invalid: " << lsb << ':' << msb << ")";
  }
};

/*
 * end of bfi instruction
 *******************************************************************/

/*******************************************************************
 * bfc (Bit Field Clear) instruction
 *
 * BFC clears any number of adjacent bits at any position in a
 * register, without affecting the other bits in the register.
 */

op bfc(cond[4]:0b0111110[7]:msb[5]:rd[4]:lsb[5]:0b001[3]:0b1111[4]);

bfc.disasm = {
  if (lsb <= msb) {
    buffer << "bfc"  << DisasmCondition(cond) << '\t'
           << DisasmRegister(rd) << ", " << DisasmI(lsb) << ", " << DisasmI(msb-lsb+1);
  } else {
    buffer << "bfc"  << DisasmCondition(cond) << '\t'
           << DisasmRegister(rd) << ", " << "(invalid: " << lsb << ':' << msb << ")";
  }
};

/*
 * end of bfc instruction
 *******************************************************************/

/*******************************************************************
 * ubfx (Unsigned Bit Field Extract) instruction
 *
 * UBFX extracts any number of adjacent bits at any position from a
 * register, zero-extends them to 32 bits, and writes the result to
 * the destination register.
 */

op ubfx(cond[4]:0b01111[5]:1[1]:1[1]:widthm1[5]:rd[4]:lsb[5]:0b101[3]:rn[4]);

ubfx.disasm = {
  buffer << "ubfx" << DisasmCondition(cond) << '\t'
         << DisasmRegister(rd) << ", " << DisasmRegister(rn)
         << ", " << DisasmI(lsb) << ", " << DisasmI(widthm1+1);
};

/*
 * end of ubfx instruction
 *******************************************************************/
