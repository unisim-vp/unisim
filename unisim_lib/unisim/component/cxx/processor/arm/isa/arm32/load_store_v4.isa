/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

         LOAD AND STORE INSTRUCTIONS

**********************************************/

{
#include <iostream>
}


/*******************************************************************
 * ldrh instruction
 */

{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrh_imm_post(cond[4]:0b000[3]:/*p*/0b0[1]:u[1]:/*w*/0b1[1]:/*i*/0b0[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1011[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrh_imm_offset(cond[4]:0b000[3]:0b1[1]:u[1]:0b1[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1011[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrh_imm_pre(cond[4]:0b000[3]:0b1[1]:u[1]:0b1[1]:0b1[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1011[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrh_reg_post(cond[4]:0b000[3]:0b0[1]:u[1]:0b0[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1011[4]:rm[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrh_reg_offset(cond[4]:0b000[3]:0b1[1]:u[1]:0b0[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1011[4]:rm[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrh_reg_pre(cond[4]:0b000[3]:0b1[1]:u[1]:0b0[1]:0b1[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1011[4]:rm[4])

ldrh_imm_post.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "h r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
}

ldrh_imm_offset.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "h r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
}

ldrh_imm_pre.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "h r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
}

ldrh_reg_post.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "h r" << rd << ", ";
  cpu.DisasmMLSReg_post(u, rn, rm, buffer);
}

ldrh_reg_offset.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "h r" << rd << ", ";
  cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
}

ldrh_reg_pre.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "h r" << rd << ", ";
  cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
}

ldrh_imm_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	address = rn_value; // address used is the contents of rn
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
	cpu.Read16toGPRAligned(address, rd);
}

ldrh_imm_offset.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSImmOffset(u, rn_value, immedH, immedL); 
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.Read16toGPRAligned(address, rd);
}

ldrh_imm_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSImmOffset(u, rn_value, immedH, immedL); // compute address
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, address); // update rn with the address
	cpu.Read16toGPRAligned(address, rd);
}

ldrh_reg_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = rn_value;
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, MLSReg(u, rn_value, rd_value, rm_value));
	cpu.Read16toGPRAligned(address, rd);
}

ldrh_reg_offset.execute = {
	typedef Operation<CONFIG> inherited;
	
	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSReg(u, rn_value, rd_value, rm_value);
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.Read16toGPRAligned(address, rd);
}

ldrh_reg_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSReg(u, rn_value, rd_value, rm_value);
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, address);
	cpu.Read16toGPRAligned(address, rd);
}

/*
 * end of ldrh instruction
 *******************************************************************/

/*******************************************************************
 * ldrsh instruction
 */

{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsh_imm_post(cond[4]:0b000[3]:/*p*/0b0[1]:u[1]:/*w*/0b1[1]:/*i*/0b0[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1111[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsh_imm_offset(cond[4]:0b000[3]:0b1[1]:u[1]:0b1[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1111[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsh_imm_pre(cond[4]:0b000[3]:0b1[1]:u[1]:0b1[1]:0b1[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1111[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsh_reg_post(cond[4]:0b000[3]:0b0[1]:u[1]:0b0[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1111[4]:rm[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsh_reg_offset(cond[4]:0b000[3]:0b1[1]:u[1]:0b0[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1111[4]:rm[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsh_reg_pre(cond[4]:0b000[3]:0b1[1]:u[1]:0b0[1]:0b1[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1111[4]:rm[4])

ldrsh_imm_post.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sh r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
}

ldrsh_imm_offset.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sh r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
}

ldrsh_imm_pre.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sh r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
}

ldrsh_reg_post.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sh r" << rd << ", ";
  cpu.DisasmMLSReg_post(u, rn, rm, buffer);
}

ldrsh_reg_offset.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sh r" << rd << ", ";
  cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
}

ldrsh_reg_pre.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sh r" << rd << ", ";
  cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
}

ldrsh_imm_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	
	if(!cpu.CheckCondition(cond)) return;
  
	address = rn_value; // address used is the contents of rn
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
	cpu.ReadS16toGPRAligned(address, rd);
}

ldrsh_imm_offset.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSImmOffset(u, rn_value, immedH, immedL); 
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.ReadS16toGPRAligned(address, rd);
}

ldrsh_imm_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSImmOffset(u, rn_value, immedH, immedL); // compute address
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, address); // update rn with the address
	cpu.ReadS16toGPRAligned(address, rd);
}

ldrsh_reg_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = rn_value;
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, MLSReg(u, rn_value, rd_value, rm_value));
	cpu.ReadS16toGPRAligned(address, rd);
}

ldrsh_reg_offset.execute = {
	typedef Operation<CONFIG> inherited;
	
	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
//	address = MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
	address = MLSReg(u, rn_value, rd_value, rm_value);
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.ReadS16toGPRAligned(address, rd);
}

ldrsh_reg_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSReg(u, rn_value, rd_value, rm_value);
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, address);
	cpu.ReadS16toGPRAligned(address, rd);
}

/*
 * end of ldrsh instruction
 *******************************************************************/

/*******************************************************************
 * ldrsb instruction
 */

{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsb_imm_post(cond[4]:0b000[3]:/*p*/0b0[1]:u[1]:/*w*/0b1[1]:/*i*/0b0[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1101[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsb_imm_offset(cond[4]:0b000[3]:0b1[1]:u[1]:0b1[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1101[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsb_imm_pre(cond[4]:0b000[3]:0b1[1]:u[1]:0b1[1]:0b1[1]:0b1[1]:rn[4]:rd[4]:immedH[4]:0b1101[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsb_reg_post(cond[4]:0b000[3]:0b0[1]:u[1]:0b0[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1101[4]:rm[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsb_reg_offset(cond[4]:0b000[3]:0b1[1]:u[1]:0b0[1]:0b0[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1101[4]:rm[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op ldrsb_reg_pre(cond[4]:0b000[3]:0b1[1]:u[1]:0b0[1]:0b1[1]:0b1[1]:rn[4]:rd[4]:sbz[4]:0b1101[4]:rm[4])

ldrsb_imm_post.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sb r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
}

ldrsb_imm_offset.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sb r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
}

ldrsb_imm_pre.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sb r" << rd << ", ";
  // MLS = Miscellaneous Load Store
  cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
}

ldrsb_reg_post.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sb r" << rd << ", ";
  cpu.DisasmMLSReg_post(u, rn, rm, buffer);
}

ldrsb_reg_offset.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sb r" << rd << ", ";
  cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
}

ldrsb_reg_pre.disasm = {
  buffer << "ldr";
  cpu.DisasmCondition(cond, buffer);
  buffer << "sb r" << rd << ", ";
  cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
}

ldrsb_imm_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	address = rn_value; // address used is the contents of rn
	cpu.SetGPR(rn, MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
	cpu.ReadS8toGPR(address, rd);
}

ldrsb_imm_offset.execute = {
	typedef Operation<CONFIG> inherited;
  
	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSImmOffset(u, rn_value, immedH, immedL); 
	cpu.ReadS8toGPR(address, rd);
}

ldrsb_imm_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSImmOffset(u, rn_value, immedH, immedL); // compute address
	cpu.SetGPR(rn, address); // update rn with the address
	cpu.ReadS8toGPR(address, rd);
}

ldrsb_reg_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = rn_value;
	cpu.SetGPR(rn, MLSReg(u, rn_value, rd_value, rm_value));
	cpu.ReadS8toGPR(address, rd);
}

ldrsb_reg_offset.execute = {
	typedef Operation<CONFIG> inherited;
	
	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSReg(u, rn_value, rd_value, rm_value);
	cpu.ReadS8toGPR(address, rd);
}

ldrsb_reg_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
	typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
  
	address = MLSReg(u, rn_value, rd_value, rm_value);
	cpu.SetGPR(rn, address);
	cpu.ReadS8toGPR(address, rd);
}

/*
 * end of ldrsb instruction
 *******************************************************************/

/*******************************************************************
 * strh instruction
 */

{	CONFIG::HAS_LOAD_STORE_V4 
}:op strh_imm_post(cond[4]:0b000[3]:/*p*/0b0[1]:u[1]:/*w*/0b1[1]:/*i*/0b0[1]:0b0[1]:rn[4]:rd[4]:immedH[4]:0b1011[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op strh_imm_offset(cond[4]:0b000[3]:0b1[1]:u[1]:0b1[1]:0b0[1]:0b0[1]:rn[4]:rd[4]:immedH[4]:0b1011[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op strh_imm_pre(cond[4]:0b000[3]:0b1[1]:u[1]:0b1[1]:0b1[1]:0b0[1]:rn[4]:rd[4]:immedH[4]:0b1011[4]:immedL[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op strh_reg_post(cond[4]:0b000[3]:0b0[1]:u[1]:0b0[1]:0b0[1]:0b0[1]:rn[4]:rd[4]:sbz[4]:0b1011[4]:rm[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op strh_reg_offset(cond[4]:0b000[3]:0b1[1]:u[1]:0b0[1]:0b0[1]:0b0[1]:rn[4]:rd[4]:sbz[4]:0b1011[4]:rm[4])
{	CONFIG::HAS_LOAD_STORE_V4 
}:op strh_reg_pre(cond[4]:0b000[3]:0b1[1]:u[1]:0b0[1]:0b1[1]:0b0[1]:rn[4]:rd[4]:sbz[4]:0b1011[4]:rm[4])

strh_imm_post.disasm = {
	buffer << "str";
	cpu.DisasmCondition(cond, buffer);
	buffer << "h r" << rd << ", ";
	// MLS = Miscellaneous Load Store
	cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
}

strh_imm_offset.disasm = {
	buffer << "str";
	cpu.DisasmCondition(cond, buffer);
	buffer << "h r" << rd << ", ";
	// MLS = Miscellaneous Load Store
	cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
}

strh_imm_pre.disasm = {
	buffer << "str";
	cpu.DisasmCondition(cond, buffer);
	buffer << "h r" << rd << ", ";
	// MLS = Miscellaneous Load Store
	cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
}

strh_reg_post.disasm = {
	buffer << "str";
	cpu.DisasmCondition(cond, buffer);
	buffer << "h r" << rd << ", ";
	cpu.DisasmMLSReg_post(u, rn, rm, buffer);
}

strh_reg_offset.disasm = {
	buffer << "str";
	cpu.DisasmCondition(cond, buffer);
	buffer << "h r" << rd << ", ";
	cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
}

strh_reg_pre.disasm = {
	buffer << "str";
	cpu.DisasmCondition(cond, buffer);
	buffer << "h r" << rd << ", ";
	cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
}

strh_imm_post.execute = {
	typename CONFIG::address_t address;
	uint16_t value16;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	address = cpu.GetGPR(rn); // address used is the contents of rn
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL)); // update rn
	value16 = cpu.GetGPR(rd) & 0x0FFFF;
	cpu.Write16(address, value16);
}

strh_imm_offset.execute = {
	typename CONFIG::address_t address;
	uint16_t value16;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	address = MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL); 
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	value16 = cpu.GetGPR(rd) & 0x0FFFF;
	cpu.Write16(address, value16);
}

strh_imm_pre.execute = {
	typename CONFIG::address_t address;
	uint16_t value16;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	address = MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL); // compute address
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, address); // update rn with the address
	value16 = cpu.GetGPR(rd) & 0x0FFFF;
	cpu.Write16(address, value16);
}

strh_reg_post.execute = {
	typename CONFIG::address_t address;
	uint16_t value16;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	address = cpu.GetGPR(rn);
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm)));
	value16 = cpu.GetGPR(rd) & 0x0FFFF;
	cpu.Write16(address, value16);
}

strh_reg_offset.execute = {
	typename CONFIG::address_t address;
	uint16_t value16;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	address = MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	value16 = cpu.GetGPR(rd) & 0x0FFFF;
	cpu.Write16(address, value16);
}

strh_reg_pre.execute = {
	typename CONFIG::address_t address;
	uint16_t value16;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	address = MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
	cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
	cpu.SetGPR(rn, address);
	value16 = cpu.GetGPR(rd) & 0x0FFFF;
  cpu.Write16(address, value16);
}

/*
 * end of strh instruction
 *******************************************************************/

group load_store_v4_rn_init(ldrh_imm_post, ldrh_imm_offset, ldrh_imm_pre, \
                            ldrh_reg_post, ldrh_reg_offset, ldrh_reg_pre, \
                            ldrsh_imm_post, ldrsh_imm_offset, ldrsh_imm_pre, \
                            ldrsh_reg_post, ldrsh_reg_offset, ldrsh_reg_pre, \
                            ldrsb_imm_post, ldrsb_imm_offset, ldrsb_imm_pre, \
                            ldrsb_reg_post, ldrsb_reg_offset, ldrsb_reg_pre)
load_store_v4_rn_init.initialize_rn_init = {
	typedef Operation<CONFIG> inherited;

	if(rn == 15) inherited::rn_init = 8;
	else inherited::rn_init = 0;
}

group load_store_v4_rm_init(ldrh_reg_post, ldrh_reg_offset, ldrh_reg_pre, \
                            ldrsh_reg_post, ldrsh_reg_offset, ldrsh_reg_pre, \
                            ldrsb_reg_post, ldrsb_reg_offset, ldrsb_reg_pre)
load_store_v4_rm_init.initialize_rm_init = {
	typedef Operation<CONFIG> inherited;
	
	if(rm == 15) inherited::rm_init = 8;
	else inherited::rm_init = 0;
}

group load_store_v4_rd_init(ldrh_reg_post, ldrh_reg_offset, ldrh_reg_pre, \
                            ldrsh_reg_post, ldrsh_reg_offset, ldrsh_reg_pre, \
                            ldrsb_reg_post, ldrsb_reg_offset, ldrsb_reg_pre)
load_store_v4_rd_init.initialize_rd_init = {
	typedef Operation<CONFIG> inherited;

	if(rd == 15) inherited::rd_init = 8;
	else inherited::rd_init = 0;
}
