/*
 *  Copyright (c) 2008,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

       ARMV5E DATA PROCESSING INSTRUCTIONS

**********************************************/

decl {
#include "unisim/util/arithmetic/arithmetic.hh"

using unisim::util::arithmetic::SignedSatAdd32;
using unisim::util::arithmetic::SignedSatSub32;

}

/*******************************************************************
 * qadd instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op qadd(cond[4]:0b00010000[8]:rn[4]:rd[4]:sbz[4]:0b0101[4]:rm[4])

qadd.disasm = {
	buffer << "qadd";
	buffer << DisasmCondition(cond);
	buffer << " r" << (unsigned int) rd;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rn;
}

qadd.execute = {
	uint8_t does_sat;
	uint32_t result;
	

	if(not CheckCondition(cpu, cond)) return;
	
	if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	SignedSatAdd32(result, does_sat, cpu.GetGPR(rn) , cpu.GetGPR(rm));
	cpu.SetCPSR_Q(does_sat == 1 ? true : false);
	cpu.SetGPR(rd, result);
}

/*
 * end of qadd instruction
 *******************************************************************/

/*******************************************************************
 * qsub instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op qsub(cond[4]:0b00010010[8]:rn[4]:rd[4]:sbz[4]:0b0101[4]:rm[4])

qsub.disasm = {
	buffer << "qsub";
	buffer << DisasmCondition(cond);
	buffer << " r" << (unsigned int) rd;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rn;
}

qsub.execute = {
	uint8_t does_sat;
	uint32_t result;
	

	if(not CheckCondition(cpu, cond)) return;
	
	if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , cpu.GetGPR(rn));
	cpu.SetCPSR_Q(does_sat == 1 ? true : false);
	cpu.SetGPR(rd, result);
}

/*
 * end of qsub instruction
 *******************************************************************/

/*******************************************************************
 * qdadd instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op qdadd(cond[4]:0b00010100[8]:rn[4]:rd[4]:sbz[4]:0b0101[4]:rm[4])

qdadd.disasm = {
	buffer << "qdadd";
	buffer << DisasmCondition(cond);
	buffer << " r" << (unsigned int) rd;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rn;
}

qdadd.execute = {
	uint8_t does_sat, does_sat_tmp;
	uint32_t result;
	

	if(not CheckCondition(cpu, cond)) return;
	
	if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
	SignedSatAdd32(result, does_sat, cpu.GetGPR(rm) , result);
	cpu.SetCPSR_Q(does_sat == 1 || does_sat_tmp == 1? true : false);
	cpu.SetGPR(rd, result);
}

/*
 * end of qdadd instruction
 *******************************************************************/

/*******************************************************************
 * qdsub instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMEMU
}:op qdsub(cond[4]:0b00010110[8]:rn[4]:rd[4]:sbz[4]:0b0101[4]:rm[4])

qdsub.disasm = {
	buffer << "qdsub";
	buffer << DisasmCondition(cond);
	buffer << " r" << (unsigned int) rd;
	buffer << ", r" << (unsigned int) rm;
	buffer << ", r" << (unsigned int) rn;
}

qdsub.execute = {
	uint8_t does_sat, does_sat_tmp;
	uint32_t result;
	

	if(not CheckCondition(cpu, cond)) return;
	
	if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
		// unpredictable behavior, we do nothing
		return;
	}
	
	SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
	SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , result);
	cpu.SetCPSR_Q(does_sat == 1 ? true : false);
	cpu.SetGPR(rd, result);
}

/*
 * end of qdsub instruction
 *******************************************************************/

