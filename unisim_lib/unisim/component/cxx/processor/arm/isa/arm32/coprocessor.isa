/*
 *  Copyright (c) 2007 - 2013,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

         COPROCESSOR INSTRUCTIONS

**********************************************/

/*******************************************************************
 * cdp instruction
 */

op cdp(cond[4]:0b1110[4]:op1[4]:crn[4]:crd[4]:cp_num[4]:op2[3]:0b0[1]:crm[4]);

cdp.disasm = {
  buffer << "cdp" << DisasmCondition(cond) << '\t' << std::dec << (unsigned int) cp_num << ", " << std::dec << (unsigned int) op1 << ", cr" << std::dec << (unsigned int) crd << ", cr" << std::dec << (unsigned int) crn << ", cr" << std::dec << (unsigned int) crm << ", " << std::dec << (unsigned int) op2;
};

cdp.execute = {
  if (not CheckCondition(cpu, cond)) return;
	
  cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
};

/*
 * end of cdp instruction
 *******************************************************************/

/*******************************************************************
 * ldc instruction
 */

op ldc(cond[4]:0b110[3]:p[1]:u[1]:d[1]:w[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:shl<2> offset[8]);
ldc.var imm : {int32_t} = {u?offset:-offset};

ldc.disasm = {
  buffer << "ldc" << DisasmCondition(cond, d?"l":"") << '\t'
         << (unsigned int) cp_num << ", cr" << (unsigned int) crd << ", ["
         << DisasmRegister(rn) << (p?"":"]")<< ", " << DisasmI(imm) << (p?(w?"]!":"]"):"");
};

ldc.execute = {
  if (not CheckCondition(cpu, cond)) return;
	
  uint32_t addr = cpu.GetGPR( rn ), oaddr = addr + imm;
  if (w) cpu.SetGPR( rn, oaddr );
  
  uint32_t address = p?oaddr:addr;
  while (cpu.CoprocessorLoad(cp_num, address)) { address += 4; }
};

op ldc_undefined(cond[4]:0b110[3]:0b0[1]:0b0[1]:0b0[1]:0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8]);

ldc_undefined.disasm = {
  buffer << "ldc" << DisasmCondition(cond) << '\t'
         << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", [" << DisasmRegister(rn) << "], {" << option << "}";
};

op ldc_unindexed(cond[4]:0b110[3]:0b0[1]:0b1[1]:d[1]:0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8]);

ldc_unindexed.disasm = {
  buffer << "ldc" << DisasmCondition(cond, d?"l":"") << '\t'
         << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", [" << DisasmRegister(rn) << "], {" << option << "}";
};

ldc_unindexed.execute = {
  if (not CheckCondition(cpu, cond)) return;
	
  uint32_t address = cpu.GetGPR(rn);
  while(cpu.CoprocessorLoad(cp_num, address, option)) { address += 4; }
};

/*
 * end of ldc instruction
 *******************************************************************/

/*******************************************************************
 * mcr instruction
 */

op mcr(cond[4]:0b1110[4]:op1[3]:0b0[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4]);

mcr.disasm = {
  buffer << "mcr" << DisasmCondition(cond) << '\t' << (unsigned int)cp_num << ", " << (unsigned int) op1 << ", " << DisasmRegister(rd) << ", cr" << (unsigned int)crn << ", cr" << (unsigned int)crm;
  if(op2 != 0) buffer << ", " << (unsigned int) op2;
};

mcr.execute = {
  if (not CheckCondition(cpu, cond)) return;

  cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
};

/*
 * end of mcr instruction
 *******************************************************************/

/*******************************************************************
 * mrc instruction
 */

op mrc(cond[4]:0b1110[4]:op1[3]:0b1[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4]);

mrc.disasm = {
  buffer << "mrc" << DisasmCondition(cond) << '\t' << (unsigned int)cp_num << ", " << (unsigned int) op1 << ", " << DisasmRegister(rd) << ", cr" << (unsigned int)crn << ", cr" << (unsigned int)crm;
  if(op2 != 0) buffer << ", " << (unsigned int) op2;
};

mrc.execute = {
  if (not CheckCondition(cpu, cond)) return;

  cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
};

/*
 * end of mrc instruction
 *******************************************************************/

/*******************************************************************
 * stc instruction
 */

op stc(cond[4]:0b110[3]:p[1]:u[1]:d[1]:w[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:shl<2> offset[8]);
stc.var imm : {int32_t} = {u?offset:-offset};

stc.disasm = {
  buffer << "stc" << DisasmCondition(cond, d?"l":"") << '\t'
         << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", [" 
         << DisasmRegister(rn) << (p?"":"]") << ", " << DisasmI(imm) << (p?(w?"]!":"]"):"");
};

stc.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  uint32_t addr = cpu.GetGPR( rn ), oaddr = addr + imm;
  if (w) cpu.SetGPR( rn, oaddr );
  
  uint32_t address = p?oaddr:addr;
  while(cpu.CoprocessorStore(cp_num, address)) { address += 4; }
};

op stc_undefined(cond[4]:0b110[3]:0b0[1]:0b0[1]:0b0[1]:0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8]);

stc_undefined.disasm = {
  buffer << "stc" << DisasmCondition(cond) << '\t'
         << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", [" << DisasmRegister(rn) << "], {" << option << "}";
};

op stc_unindexed(cond[4]:0b110[3]:0b0[1]:0b1[1]:d[1]:0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8]);

stc_unindexed.disasm = {
  buffer << "stc" << DisasmCondition(cond, d?"l":"") << '\t'
         << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", [" << DisasmRegister(rn) << "], {" << option << "}";
};

stc_unindexed.execute = {
  if (not CheckCondition(cpu, cond)) return;
	
  uint32_t address = cpu.GetGPR(rn);
  while(cpu.CoprocessorStore(cp_num, address, option)) { address += 4; }
};

/*
 * end of stc instruction
 *******************************************************************/

/*******************************************************************
 * cdp2 instruction
 */

{ ARCH::insns5T }: \
op cdp2(0b1111[4]:0b1110[4]:op1[4]:crn[4]:crd[4]:cp_num[4]:op2[3]:0b0[1]:crm[4]);

cdp2.disasm = {
  buffer << "cdp2\t" << std::dec << (unsigned int)cp_num << ", " << std::dec << (unsigned int) op1 << ", cr" << std::dec << (unsigned int)crd << ", cr" << std::dec << (unsigned int)crn << ", cr" << std::dec << (unsigned int)crm << ", " << std::dec << (unsigned int) op2;
};

cdp2.execute = {
  cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
};

/*
 * end of cdp2 instruction
 *******************************************************************/

/*******************************************************************
 * ldc2 instruction
 */

{ ARCH::insns5T }: \
op ldc2(0b1111[4]:0b110[3]:p[1]:u[1]:d[1]:w[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:shl<2> offset[8]);
ldc2.var imm : {int32_t} = {u?offset:-offset};

ldc2.disasm = {
  buffer << "ldc2" << (d?"l":"") << '\t'
         << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", ["
         << DisasmRegister(rn) << (p?"":"]")<< ", " << DisasmI(imm) << (p?(w?"]!":"]"):"");
};

ldc2.execute = {
  uint32_t addr = cpu.GetGPR( rn ), oaddr = addr + imm;
  if (w) cpu.SetGPR( rn, oaddr );
  
  uint32_t address = p?oaddr:addr;
  while(cpu.CoprocessorLoad(cp_num, address)) { address += 4; }
};

{ ARCH::insns5T }: \
op ldc2_undefined(0b1111[4]:0b110[3]:0b0[1]:0b0[1]:0b0[1]:0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8]);

ldc2_undefined.disasm = {
  buffer << "ldc2\t" << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", ["
         << DisasmRegister(rn) << "], {" << option << "}";
};

{ ARCH::insns5T }: \
op ldc2_unindexed(0b1111[4]:0b110[3]:0b0[1]:0b1[1]:d[1]:0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8]);

ldc2_unindexed.disasm = {
  buffer << "ldc2" << (d?"l":"") << '\t' << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", ["
         << DisasmRegister(rn) << "], {" << option << "}";
};

ldc2_unindexed.execute = {
  uint32_t address = cpu.GetGPR(rn);
  while(cpu.CoprocessorLoad(cp_num, address, option)) { address += 4; }
};

/*
 * end of ldc2 instruction
 *******************************************************************/

/*******************************************************************
 * mcr2 instruction
 */

{ ARCH::insns5T }: \
op mcr2(0b1111[4]:0b1110[4]:op1[3]:0b0[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4]);

mcr2.disasm = {
  buffer << "mcr2\t" << (unsigned int)cp_num << ", " << (unsigned int) op1 << ", " << DisasmRegister(rd) << ", cr" << (unsigned int)crn << ", cr" << (unsigned int)crm;
  if(op2 != 0) buffer << ", " << (unsigned int) op2;
};

mcr2.execute = {
  cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
};

/*
 * end of mcr2 instruction
 *******************************************************************/

/*******************************************************************
 * mrc2 instruction
 */

{ ARCH::insns5T }: \
op mrc2(0b1111[4]:0b1110[4]:op1[3]:0b1[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4]);

mrc2.disasm = {
  buffer << "mrc2\t" << (unsigned int)cp_num << ", " << (unsigned int) op1 << ", " << DisasmRegister(rd) << ", cr" << (unsigned int)crn << ", cr" << (unsigned int)crm;
  if(op2 != 0) buffer << ", " << (unsigned int) op2;
};

mrc2.execute = {
  cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
};

/*
 * end of mrc2 instruction
 *******************************************************************/

/*******************************************************************
 * stc2 instruction
 */

{ ARCH::insns5T }: \
op stc2(0b1111[4]:0b110[3]:p[1]:u[1]:d[1]:w[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:shl<2> offset[8]);
stc2.var imm : {int32_t} = {u?offset:-offset};

stc2.disasm = {
  buffer << "stc2" << (d?"l":"") << '\t' << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", ["
         << DisasmRegister(rn) << (p?"":"]") << ", " << DisasmI(imm) << (p?(w?"]!":"]"):"");
};

stc2.execute = {
  uint32_t addr = cpu.GetGPR( rn ), oaddr = addr + imm;
  if (w) cpu.SetGPR( rn, oaddr );
  
  uint32_t address = p?oaddr:addr;
  while (cpu.CoprocessorStore(cp_num, address)) { address += 4; }
};

{ ARCH::insns5T }: \
op stc2_undefined(0b1111[4]:0b110[3]:0b0[1]:0b0[1]:0b0[1]:0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8]);

stc2_undefined.disasm = {
  buffer << "stc2\t" << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", ["
         << DisasmRegister(rn) << "], {" << option << "}";
};

{ ARCH::insns5T }: \
op stc2_unindexed(0b1111[4]:0b110[3]:0b0[1]:0b1[1]:d[1]:0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8]);

stc2_unindexed.disasm = {
  buffer << "stc2" << (d?"l":"") << '\t' << (unsigned int)cp_num << ", cr" << (unsigned int)crd << ", ["
         << DisasmRegister(rn) << "], {" << option << "}";
};

stc2_unindexed.execute = {
  uint32_t address = cpu.GetGPR(rn);
  while(cpu.CoprocessorStore(cp_num, address, option)) { address += 4; }
};

/*
 * end of stc2 instruction
 *******************************************************************/

/*******************************************************************
 * mcrr instruction
 */

{ ARCH::insns5E }: \
op mcrr(cond[4]:0b11000100[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4]);

mcrr.disasm = {
  buffer << "mcrr" << DisasmCondition(cond) << '\t'
         << (unsigned int)cp_num << ", " << (unsigned int) op1 << ", "
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", cr" << (unsigned int)crm;
};

mcrr.execute = {
  if(not CheckCondition(cpu, cond)) return;

  cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
  cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
};

/*
 * end of mcrr instruction
 *******************************************************************/

/*******************************************************************
 * mrrc instruction
 */

{ ARCH::insns5E }: \
op mrrc(cond[4]:0b11000101[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4]);

mrrc.disasm = {
  buffer << "mrrc" << DisasmCondition(cond) << '\t'
         << (unsigned int)cp_num << ", " << (unsigned int) op1 << ", "
         << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", cr" << (unsigned int)crm;
};

mrrc.execute = {
  if(not CheckCondition(cpu, cond)) return;

  cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
  cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
};

/*
 * end of mrrc instruction
 *******************************************************************/
