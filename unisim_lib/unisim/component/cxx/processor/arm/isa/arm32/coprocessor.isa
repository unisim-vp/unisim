/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

         COPROCESSOR INSTRUCTIONS

**********************************************/

/*******************************************************************
 * cdp instruction
 */

op cdp_0xxx(0b0[1]:sub_cond[3]:0b1110[4]:op1[4]:crn[4]:crd[4]:cp_num[4]:op2[3]:0b0[1]:crm[4])
op cdp_10xx(0b10[2]:sub_cond[2]:0b1110[4]:op1[4]:crn[4]:crd[4]:cp_num[4]:op2[3]:0b0[1]:crm[4])
op cdp_110x(0b110[3]:sub_cond[1]:0b1110[4]:op1[4]:crn[4]:crd[4]:cp_num[4]:op2[3]:0b0[1]:crm[4])
op cdp_1110(0b1110[4]:0b1110[4]:op1[4]:crn[4]:crd[4]:cp_num[4]:op2[3]:0b0[1]:crm[4])
group cdp(cdp_0xxx, cdp_10xx, cdp_110x, cdp_1110)

cdp_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

cdp_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

cdp_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

cdp_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

cdp.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "cdp";
	DisasmCondition(inherited::cond_init, buffer);
	buffer << " " << dec << cp_num;
	buffer << ", " << dec << op1;
	buffer << ", cr" << dec << crd;
	buffer << ", cr" << dec << crn;
	buffer << ", cr" << dec << crm;
	buffer << ", " << dec << op2;
}

cdp.execute = {
	typedef Operation<CONFIG> inherited;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
}

/*
 * end of cdp instruction
 *******************************************************************/

/*******************************************************************
 * ldc instruction
 */

op ldc_offset_0xxx(0b0[1]:sub_cond[3]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_offset_10xx(0b10[2]:sub_cond[2]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_offset_110x(0b110[3]:sub_cond[1]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_offset_1110(0b1110[4]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])

ldc_offset_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

ldc_offset_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

ldc_offset_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

ldc_offset_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group ldc_offset(ldc_offset_0xxx, ldc_offset_10xx, ldc_offset_110x, ldc_offset_1110)

op ldc_pre_0xxx(0b0[1]:sub_cond[3]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_pre_10xx(0b10[2]:sub_cond[2]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_pre_110x(0b110[3]:sub_cond[1]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_pre_1110(0b1110[4]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])

ldc_pre_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

ldc_pre_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

ldc_pre_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

ldc_pre_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group ldc_pre(ldc_pre_0xxx, ldc_pre_10xx, ldc_pre_110x, ldc_pre_1110)

op ldc_post_0xxx(0b0[1]:sub_cond[3]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_post_10xx(0b10[2]:sub_cond[2]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_post_110x(0b110[3]:sub_cond[1]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op ldc_post_1110(0b1110[4]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])

ldc_post_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

ldc_post_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

ldc_post_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

ldc_post_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group ldc_post(ldc_post_0xxx, ldc_post_10xx, ldc_post_110x, ldc_post_1110)

op ldc_unindexed_0xxx(0b0[1]:sub_cond[3]:0b110[3]:/*p*/0b0[1]:/*u*/0b1[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8])
op ldc_unindexed_10xx(0b10[2]:sub_cond[2]:0b110[3]:/*p*/0b0[1]:/*u*/0b1[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8])
op ldc_unindexed_110x(0b110[3]:sub_cond[1]:0b110[3]:/*p*/0b0[1]:/*u*/0b1[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8])
op ldc_unindexed_1110(0b1110[4]:0b110[3]:/*p*/0b0[1]:/*u*/0b1[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8])

ldc_unindexed_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

ldc_unindexed_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

ldc_unindexed_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

ldc_unindexed_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group ldc_unindexed(ldc_unindexed_0xxx, ldc_unindexed_10xx, ldc_unindexed_110x, ldc_unindexed_1110)

ldc_offset.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "ldc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSImm_offset(u, rn, offset, buffer);
}

ldc_pre.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "ldc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSImm_pre(u, rn, offset, buffer);
}

ldc_post.disasm = {
	typedef Operation<CONFIG> inherited;
	
	buffer << "ldc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSImm_post(u, rn, offset, buffer);
}

ldc_unindexed.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "ldc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSUnindexed(rn, option, buffer);
}

ldc_offset.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	address = CLSOpDec(u, rn_value, offset);
	while(cpu.CoprocessorLoad(cp_num, address)) {
		address += 4;
	}
}

ldc_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	address = CLSOpDec(u, rn_value, offset);
	cpu.SetGPR(rn, address);
	while(cpu.CoprocessorLoad(cp_num, address)) {
		address += 4;
	}
}

ldc_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	address = rn_value;
	cpu.SetGPR(rn, CLSOpDec(u, rn_value, offset));
	while(cpu.CoprocessorLoad(cp_num, address)) {
		address += 4;
	}
}

ldc_unindexed.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	address = rn_value;
	while(cpu.CoprocessorLoad(cp_num, address, option)) {
		address += 4;
	}
}

/*
 * end of ldc instruction
 *******************************************************************/

/*******************************************************************
 * mcr instruction
 */

op mcr_0xxx(0b0[1]:sub_cond[3]:0b1110[4]:op1[3]:0b0[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])
op mcr_10xx(0b10[2]:sub_cond[2]:0b1110[4]:op1[3]:0b0[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])
op mcr_110x(0b110[3]:sub_cond[1]:0b1110[4]:op1[3]:0b0[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])
op mcr_1110(0b1110[4]:0b1110[4]:op1[3]:0b0[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])
group mcr(mcr_0xxx, mcr_10xx, mcr_110x, mcr_1110)

mcr_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

mcr_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

mcr_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

mcr_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

mcr.disasm = {
	typedef Operation<CONFIG> inherited;
	
	buffer << "mcr";
	DisasmCondition(inherited::cond_init, buffer);
	buffer << " " << cp_num;
	buffer << ", " << op1;
	buffer << ", r" << rd;
	buffer << ", cr" << crn;
	buffer << ", cr" << crm;
	if(op2 != 0) buffer << ", " << op2;
}

mcr.execute = {
	typedef Operation<CONFIG> inherited;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;

	cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
}

/*
 * end of mcr instruction
 *******************************************************************/

/*******************************************************************
 * mrc instruction
 */

op mrc_0xxx(0b0[1]:sub_cond[3]:0b1110[4]:op1[3]:0b1[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])
op mrc_10xx(0b10[2]:sub_cond[2]:0b1110[4]:op1[3]:0b1[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])
op mrc_110x(0b110[3]:sub_cond[1]:0b1110[4]:op1[3]:0b1[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])
op mrc_1110(0b1110[4]:0b1110[4]:op1[3]:0b1[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])
group mrc(mrc_0xxx, mrc_10xx, mrc_110x, mrc_1110)

mrc_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

mrc_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

mrc_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

mrc_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

mrc.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "mrc";
	DisasmCondition(inherited::cond_init, buffer);
	buffer << " " << cp_num;
	buffer << ", " << op1;
	buffer << ", r" << rd;
	buffer << ", cr" << crn;
	buffer << ", cr" << crm;
	if(op2 != 0) buffer << ", " << op2;
}

mrc.execute = {
	typedef Operation<CONFIG> inherited;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;

	cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
}

/*
 * end of mrc instruction
 *******************************************************************/

/*******************************************************************
 * stc instruction
 */

op stc_offset_0xxx(0b0[1]:sub_cond[3]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_offset_10xx(0b10[2]:sub_cond[2]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_offset_110x(0b110[3]:sub_cond[1]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_offset_1110(0b1110[4]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])

stc_offset_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

stc_offset_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

stc_offset_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

stc_offset_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;
	
	inherited::cond_init = 14;
}

group stc_offset(stc_offset_0xxx, stc_offset_10xx, stc_offset_110x, stc_offset_1110)

op stc_pre_0xxx(0b0[1]:sub_cond[3]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_pre_10xx(0b10[2]:sub_cond[2]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_pre_110x(0b110[3]:sub_cond[1]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_pre_1110(0b1110[4]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])

stc_pre_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

stc_pre_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

stc_pre_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

stc_pre_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;
	
	inherited::cond_init = 14;
}

group stc_pre(stc_pre_0xxx, stc_pre_10xx, stc_pre_110x, stc_pre_1110)

op stc_post_0xxx(0b0[1]:sub_cond[3]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_post_10xx(0b10[2]:sub_cond[2]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_post_110x(0b110[3]:sub_cond[1]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
op stc_post_1110(0b1110[4]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])

stc_post_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

stc_post_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

stc_post_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;
	
	inherited::cond_init = 12 + sub_cond;
}

stc_post_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group stc_post(stc_post_0xxx, stc_post_10xx, stc_post_110x, stc_post_1110)

op stc_unindexed_0xxx(0b0[1]:sub_cond[3]:0b110[3]:/*p*/0b0[1]:/*u*/0b1[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8])
op stc_unindexed_10xx(0b10[2]:sub_cond[2]:0b110[3]:/*p*/0b0[1]:/*u*/0b1[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8])
op stc_unindexed_110x(0b110[3]:sub_cond[1]:0b110[3]:/*p*/0b0[1]:/*u*/0b1[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8])
op stc_unindexed_1110(0b1110[4]:0b110[3]:/*p*/0b0[1]:/*u*/0b1[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8])

stc_unindexed_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

stc_unindexed_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

stc_unindexed_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

stc_unindexed_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group stc_unindexed(stc_unindexed_0xxx, stc_unindexed_10xx, stc_unindexed_110x, stc_unindexed_1110)

stc_offset.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "stc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSImm_offset(u, rn, offset, buffer);
}	

stc_pre.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "stc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSImm_pre(u, rn, offset, buffer);
}

stc_post.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "stc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSImm_post(u, rn, offset, buffer);
}

stc_unindexed.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "stc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSUnindexed(rn, option, buffer);
}

stc_offset.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	address = CLSOpDec(u, rn_value, offset);
	while(cpu.CoprocessorStore(cp_num, address)) {
		address += 4;
	}
}	

stc_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	address = CLSOpDec(u, rn_value, offset);
	cpu.SetGPR(rn, address);
	while(cpu.CoprocessorStore(cp_num, address)) {
		address += 4;
	}
}

stc_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	address = rn_value;
	cpu.SetGPR(rn, CLSOpDec(u, rn_value, offset));
	while(cpu.CoprocessorStore(cp_num, address)) {
		address += 4;
	}
}

stc_unindexed.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;
	
	address = rn_value;
	while(cpu.CoprocessorStore(cp_num, address, option)) {
		address += 4;
	}
}

/*
 * end of stc instruction
 *******************************************************************/

group coprocessor_rn_init(ldc_offset_0xxx, ldc_offset_10xx, ldc_offset_110x, ldc_offset_1110, \
                          ldc_unindexed_0xxx, ldc_unindexed_10xx, ldc_unindexed_110x, ldc_unindexed_1110, \
                          stc_offset_0xxx, stc_offset_10xx, stc_offset_110x, stc_offset_1110, \
                          stc_unindexed_0xxx, stc_unindexed_10xx, stc_unindexed_110x, stc_unindexed_1110)
coprocessor_rn_init.initialize_rn_init = {
	typedef Operation<CONFIG> inherited;

	if(rn == 15) inherited::rn_init = 8;
	else inherited::rn_init = 0;
}

/*******************************************************************
 * cdp2 instruction
 */

{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_OPS
}:op cdp2(0b1111[4]:0b1110[4]:op1[4]:crn[4]:crd[4]:cp_num[4]:op2[3]:0b0[1]:crm[4])

cdp2.disasm = {
	buffer << "cdp2";
	buffer << " " << dec << cp_num;
	buffer << ", " << dec << op1;
	buffer << ", cr" << dec << crd;
	buffer << ", cr" << dec << crn;
	buffer << ", cr" << dec << crm;
	buffer << ", " << dec << op2;
}

cdp2.execute = {
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
}

/*
 * end of cdp2 instruction
 *******************************************************************/

/*******************************************************************
 * ldc2 instruction
 */

{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
}:op ldc2_offset(0b1111[4]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
}:op ldc2_pre(0b1111[4]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
}:op ldc2_post(0b1111[4]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
}:op ldc2_unindexed(0b1111[4]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b1[1]:rn[4]:crd[4]:cp_num[4]:option[8])

ldc2_offset.disasm = {
  buffer << "ldc";
  if(n == 1) buffer << "l";
  buffer << " " << cp_num;
  buffer << ", cr" << crd;
  buffer << ", ";
  DisasmCLSImm_offset(u, rn, offset, buffer);
}

ldc2_pre.disasm = {
  buffer << "ldc";
  if(n == 1) buffer << "l";
  buffer << " " << cp_num;
  buffer << ", cr" << crd;
  buffer << ", ";
  DisasmCLSImm_pre(u, rn, offset, buffer);
}

ldc2_post.disasm = {
  buffer << "ldc";
  if(n == 1) buffer << "l";
  buffer << " " << cp_num;
  buffer << ", cr" << crd;
  buffer << ", ";
  DisasmCLSImm_post(u, rn, offset, buffer);
}

ldc2_unindexed.disasm = {
	typedef Operation<CONFIG> inherited;
	
	buffer << "ldc";
	DisasmCondition(inherited::cond_init, buffer);
	if(n == 1) buffer << "l";
	buffer << " " << cp_num;
	buffer << ", cr" << crd;
	buffer << ", ";
	DisasmCLSUnindexed(rn, option, buffer);
}

ldc2_offset.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	address = CLSOpDec(u, rn_value, offset);
	while(cpu.CoprocessorLoad(cp_num, address)) {
		address += 4;
	}
}

ldc2_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	address = CLSOpDec(u, rn_value, offset);
	cpu.SetGPR(rn, address);
	while(cpu.CoprocessorLoad(cp_num, address)) {
		address += 4;
	}
}

ldc2_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	address = rn_value;
	cpu.SetGPR(rn, CLSOpDec(u, rn_value, offset));
	while(cpu.CoprocessorLoad(cp_num, address)) {
		address += 4;
	}
}

ldc2_unindexed.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	address = rn_value;
	while(cpu.CoprocessorLoad(cp_num, address, option)) {
		address += 4;
	}
}

/*
 * end of ldc2 instruction
 *******************************************************************/

/*******************************************************************
 * mcr2 instruction
 */

{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
}:op mcr2(0b1111[4]:0b1110[4]:op1[3]:0b0[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])

mcr2.disasm = {
  buffer << "mcr2";
  buffer << " " << cp_num;
  buffer << ", " << op1;
  buffer << ", r" << rd;
  buffer << ", cr" << crn;
  buffer << ", cr" << crm;
  if(op2 != 0) buffer << ", " << op2;
}

mcr2.execute = {
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
}

/*
 * end of mcr2 instruction
 *******************************************************************/

/*******************************************************************
 * mrc2 instruction
 */

{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
}:op mrc2(0b1111[4]:0b1110[4]:op1[3]:0b1[1]:crn[4]:rd[4]:cp_num[4]:op2[3]:0b1[1]:crm[4])

mrc2.disasm = {
  buffer << "mrc2";
  buffer << " " << cp_num;
  buffer << ", " << op1;
  buffer << ", r" << rd;
  buffer << ", cr" << crn;
  buffer << ", cr" << crm;
  if(op2 != 0) buffer << ", " << op2;
}

mrc2.execute = {
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
}

/*
 * end of mrc2 instruction
 *******************************************************************/

/*******************************************************************
 * stc2 instruction
 */

{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
}:op stc2_offset(0b1111[4]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
}:op stc2_pre(0b1111[4]:0b110[3]:/*p*/0b1[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
}:op stc2_post(0b1111[4]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b1[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:offset[8])
{ CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
}:op stc2_unindexed(0b1111[4]:0b110[3]:/*p*/0b0[1]:/*u*/u[1]:/*n*/n[1]:/*w*/0b0[1]:0b0[1]:rn[4]:crd[4]:cp_num[4]:option[8])

stc2_offset.disasm = {
  buffer << "stc";
  if(n == 1) buffer << "l";
  buffer << " " << cp_num;
  buffer << ", cr" << crd;
  buffer << ", ";
  DisasmCLSImm_offset(u, rn, offset, buffer);
}

stc2_pre.disasm = {
  buffer << "stc";
  if(n == 1) buffer << "l";
  buffer << " " << cp_num;
  buffer << ", cr" << crd;
  buffer << ", ";
  DisasmCLSImm_pre(u, rn, offset, buffer);
}

stc2_post.disasm = {
  buffer << "stc";
  if(n == 1) buffer << "l";
  buffer << " " << cp_num;
  buffer << ", cr" << crd;
  buffer << ", ";
  DisasmCLSImm_post(u, rn, offset, buffer);
}

stc2_unindexed.disasm = {
  buffer << "stc";
  if(n == 1) buffer << "l";
  buffer << " " << cp_num;
  buffer << ", cr" << crd;
  buffer << ", ";
  DisasmCLSUnindexed(rn, option, buffer);
}

stc2_offset.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	address = CLSOpDec(u, rn_value, offset);
	while(cpu.CoprocessorStore(cp_num, address)) {
		address += 4;
	}
}	

stc2_pre.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	address = CLSOpDec(u, rn_value, offset);
	cpu.SetGPR(rn, address);
	while(cpu.CoprocessorStore(cp_num, address)) {
		address += 4;
	}
}

stc2_post.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	address = rn_value;
	cpu.SetGPR(rn, CLSOpDec(u, rn_value, offset));
	while(cpu.CoprocessorStore(cp_num, address)) {
		address += 4;
	}
}

stc2_unindexed.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::address_t address;
	typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	address = rn_value;
	while(cpu.CoprocessorStore(cp_num, address, option)) {
		address += 4;
	}
}
/*
 * end of stc2 instruction
 *******************************************************************/

group coprocessor_v5_rn_init(ldc2_offset, ldc2_unindexed, stc2_offset, stc2_unindexed)
coprocessor_v5_rn_init.initialize_rn_init = {
	typedef Operation<CONFIG> inherited;

	if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
	else inherited::rn_init = 0;
}
