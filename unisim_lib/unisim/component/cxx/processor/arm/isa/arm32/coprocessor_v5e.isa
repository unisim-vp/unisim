/*
 *  Copyright (c) 2008,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

         COPROCESSOR INSTRUCTIONS

**********************************************/

/*******************************************************************
 * mcrr instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMV7 ||
  STATE::MODEL == ARMEMU
}:op mcrr(cond[4]:0b11000100[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])

mcrr.disasm = {
	buffer << "mcrr" << DisasmCondition(cond) << " " << (unsigned int) cp_num << ", " << (unsigned int) op1 << ", " << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", cr" << (unsigned int) crm;
}

mcrr.execute = {
	if(not CheckCondition(cpu, cond)) return;

	cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
	cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
}

/*
 * end of mcrr instruction
 *******************************************************************/

/*******************************************************************
 * mrrc instruction
 */

{ STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMV7 ||
  STATE::MODEL == ARMEMU
}:op mrrc(cond[4]:0b11000101[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])

mrrc.disasm = {
	buffer << "mrrc" << DisasmCondition(cond) << " " << (unsigned int) cp_num << ", " << (unsigned int) op1 << ", " << DisasmRegister(rd) << ", " << DisasmRegister(rn) << ", cr" << (unsigned int) crm;
}

mrrc.execute = {
	if(not CheckCondition(cpu, cond)) return;

	cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
	cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
}

/*
 * end of mrrc instruction
 *******************************************************************/
