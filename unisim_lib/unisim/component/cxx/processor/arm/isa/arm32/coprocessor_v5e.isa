/*
 *  Copyright (c) 2008,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

         COPROCESSOR INSTRUCTIONS

**********************************************/

/*******************************************************************
 * mcrr instruction
 */

{	CONFIG::HAS_COPROCESSOR_V5E
}:op mcrr_0xxx(0b0[1]:sub_cond[3]:0b11000100[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])
{	CONFIG::HAS_COPROCESSOR_V5E
}:op mcrr_10xx(0b10[2]:sub_cond[2]:0b11000100[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])
{	CONFIG::HAS_COPROCESSOR_V5E
}:op mcrr_110x(0b110[3]:sub_cond[1]:0b11000100[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])
{	CONFIG::HAS_COPROCESSOR_V5E
}:op mcrr_1110(0b1110[4]:0b11000100[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])

mcrr_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

mcrr_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

mcrr_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;
	
	inherited::cond_init = 12 + sub_cond;
}

mcrr_1110.initialize_condition = {
		typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group mcrr(mcrr_0xxx, mcrr_10xx, mcrr_110x, mcrr_1110)

mcrr.disasm = {
	typedef Operation<CONFIG> inherited;
	
	buffer << "mcrr";
	DisasmCondition(inherited::cond_init, buffer);
	buffer << " " << cp_num;
	buffer << ", " << op1;
	buffer << ", r" << rd;
	buffer << ", r" << rn;
	buffer << ", cr" << crm;
}

mcrr.execute = {
	typedef Operation<CONFIG> inherited;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;

	cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
	cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
}

/*
 * end of mcrr instruction
 *******************************************************************/

/*******************************************************************
 * mrrc instruction
 */

{	CONFIG::HAS_COPROCESSOR_V5E
}:op mrrc_0xxx(0b0[1]:sub_cond[3]:0b11000101[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])
{	CONFIG::HAS_COPROCESSOR_V5E
}:op mrrc_10xx(0b10[2]:sub_cond[2]:0b11000101[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])
{	CONFIG::HAS_COPROCESSOR_V5E
}:op mrrc_110x(0b110[3]:sub_cond[1]:0b11000101[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])
{	CONFIG::HAS_COPROCESSOR_V5E
}:op mrrc_1110(0b1110[4]:0b11000101[8]:rn[4]:rd[4]:cp_num[4]:op1[4]:crm[4])

mrrc_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

mrrc_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

mrrc_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;
	
	inherited::cond_init = 12 + sub_cond;
}

mrrc_1110.initialize_condition = {
		typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group mrrc(mrrc_0xxx, mrrc_10xx, mrrc_110x, mrrc_1110)

mrrc.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "mrrc";
	DisasmCondition(inherited::cond_init, buffer);
	buffer << " " << cp_num;
	buffer << ", " << op1;
	buffer << ", r" << rd;
	buffer << ", r" << rn;
	buffer << ", cr" << crm;
}

mrrc.execute = {
	typedef Operation<CONFIG> inherited;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(inherited::cond_init)) return;

	cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
	cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
}

/*
 * end of mrrc instruction
 *******************************************************************/
