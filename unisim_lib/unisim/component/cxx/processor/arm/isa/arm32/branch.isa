/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

        BRANCH INSTRUCTIONS

**********************************************/

/*******************************************************************
 * b (branch) instruction
 * op b(cond[4]:0b1010[4]:sext<32> imm[24])
 */

op b_0xxx(0b0[1]:sub_cond[3]:0b1010[4]:sext<32> imm[24])
op b_10xx(0b10[2]:sub_cond[2]:0b1010[4]:sext<32> imm[24])
op b_110x(0b110[3]:sub_cond[1]:0b1010[4]:sext<32> imm[24])
op b_1110(0b1110[4]:0b1010[4]:sext<32> imm[24])

b_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

b_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

b_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

b_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group b(b_0xxx, b_10xx, b_110x, b_1110)

b.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "b";
	DisasmCondition(inherited::cond_init, buffer);
	buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
}

b.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::reg_t new_PC;

	if(!cpu.CheckCondition(inherited::cond_init)) {
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		return;
	}
	
	new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
	cpu.SetGPR(cpu.PC_reg, new_PC);
}

/*
 * end of b (branch) instruction
 *******************************************************************/

/*******************************************************************
 * bl (branch & link) instruction
 * op bl(cond[4]:0b1011[4]:sext<32> imm[24])
 */

op bl_0xxx(0b0[1]:sub_cond[3]:0b1011[4]:sext<32> imm[24])
op bl_10xx(0b10[2]:sub_cond[2]:0b1011[4]:sext<32> imm[24])
op bl_110x(0b110[3]:sub_cond[1]:0b1011[4]:sext<32> imm[24])
op bl_1110(0b1110[4]:0b1011[4]:sext<32> imm[24])

bl_0xxx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = sub_cond;
}

bl_10xx.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 8 + sub_cond;
}

bl_110x.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 12 + sub_cond;
}

bl_1110.initialize_condition = {
	typedef Operation<CONFIG> inherited;

	inherited::cond_init = 14;
}

group bl(bl_0xxx, bl_10xx, bl_110x, bl_1110)

bl.disasm = {
	typedef Operation<CONFIG> inherited;

	buffer << "bl";
	DisasmCondition(inherited::cond_init, buffer);
	buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
}

bl.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::reg_t new_PC;

	if(!cpu.CheckCondition(inherited::cond_init)) {
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		return;
	}

	cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

	new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
	cpu.SetGPR(cpu.PC_reg, new_PC);
}

/*
 * end of bl (branch & link) instruction
 *******************************************************************/

/*******************************************************************
 * bx (branch and exchange) instruction
 * this instruction is only availabe for the following architectures
 * 	CONFIG::ARMV4T,
 *  CONFIG::ARMV4TXM,
 *  CONFIG::ARMV5,
 *	CONFIG::ARMV5XM,
 *	CONFIG::ARMV5T,
 *	CONFIG::ARMV5TXM,
 *	CONFIG::ARMV5TE,
 *	CONFIG::ARMV5TEXP
 */

{ CONFIG::HAS_INSN_BX
}:op bx(cond[4]:0b00010010[8]:sbo1[4]:sbo2[4]:sbo3[4]:0b0001[4]:rm[4])

bx.disasm = {
	buffer << "bx";
	DisasmCondition(cond, buffer);
	buffer << " r" << rm;
}

bx.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::reg_t new_PC;
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

	if(!cpu.CheckCondition(cond)) {
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		return;
	}
  
	cpu.SetCPSR_T((rm_value & 0x01) == 1);
	new_PC = rm_value & 0xFFFFFFFE;
	cpu.SetGPR(cpu.PC_reg, new_PC);
}

bx.initialize_rm_init = {
	typedef Operation<CONFIG> inherited;

	if(rm == 15) inherited::rm_init = 8;
	else inherited::rm_init = 0;
}

/*
 * end of bx (branch and exchange) instruction
 *******************************************************************/

/*******************************************************************
 * blx (1) (branch with link and exchange version 1) instruction
 * this instruction is only availabe for the following architectures
 *  CONFIG::ARMV5,
 *	CONFIG::ARMV5XM,
 *	CONFIG::ARMV5T,
 *	CONFIG::ARMV5TXM,
 *	CONFIG::ARMV5TE,
 *	CONFIG::ARMV5TEXP
 */

{ CONFIG::HAS_INSN_BLX
}:op blx_1(0b1111101[7]:h[1] :sext<32> imm[24])

blx_1.disasm = {
	buffer << "blx 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8 << dec;
}

blx_1.execute = {
	typename CONFIG::reg_t new_PC;

	cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
	cpu.SetCPSR_T(true);
	new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8;
	cpu.SetGPR(cpu.PC_reg, new_PC);
}

/*
 * end of blx (1) (branch with link and exchange version 1) instruction
 *******************************************************************/


/*******************************************************************
 * blx (2) (branch with link and exchange version 2) instruction
 * this instruction is only availabe for the following architectures
 *  CONFIG::ARMV5,
 *	CONFIG::ARMV5XM,
 *	CONFIG::ARMV5T,
 *	CONFIG::ARMV5TXM,
 *	CONFIG::ARMV5TE,
 *	CONFIG::ARMV5TEXP
 */

{ CONFIG::HAS_INSN_BLX
}:op blx_2(cond[4]:0b00010010[8]:sbo1[4]:sbo2[4]:sbo3[4]:0b0011[4]:rm[4])

blx_2.disasm = {
	buffer << "blx";
	DisasmCondition(cond, buffer);
	buffer << " r" << rm;
}

blx_2.execute = {
	typedef Operation<CONFIG> inherited;

	typename CONFIG::reg_t new_PC;
	typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

	if(!cpu.CheckCondition(cond)) {
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		return;
	}

	cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
	cpu.SetCPSR_T((rm_value & 0x01) == 1);
	new_PC = rm_value & 0xFFFFFFFE;
	cpu.SetGPR(cpu.PC_reg, new_PC);
}

blx_2.initialize_rm_init = {
	typedef Operation<CONFIG> inherited;

	if(rm == 15) inherited::rm_init = 8;
	else inherited::rm_init = 0;
}

/*
 * end of blx (2) (branch with link and exchange version 2) instruction
 *******************************************************************/
