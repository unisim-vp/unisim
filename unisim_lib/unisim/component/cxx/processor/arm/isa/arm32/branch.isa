/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */

/**********************************************

        BRANCH INSTRUCTIONS

**********************************************/

/*******************************************************************
 * b (branch) instruction
 */

op b(cond[4]:0b1010[4]:shl<2> sext<32> imm[24]);

b.disasm = {
  buffer << "b" << DisasmCondition(cond) << "\t" << std::hex << ((this->GetAddr() + 8 + imm) & -4) << std::dec;
};

b.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  cpu.Branch( cpu.GetGPR(cpu.PC_reg) + imm );
};

/*
 * end of b (branch) instruction
 *******************************************************************/

/*******************************************************************
 * bl (branch & link) instruction
 */

op bl(cond[4]:0b1011[4]:shl<2> sext<32> imm[24]);

bl.disasm = {
  buffer << "bl" << DisasmCondition(cond) << "\t" << std::hex << (this->GetAddr() + 8 + imm) << std::dec;
};

bl.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  cpu.SetGPR( cpu.LR_reg, cpu.GetNPC() );
  cpu.Branch( cpu.GetGPR(cpu.PC_reg) + imm );
};

/*
 * end of bl (branch & link) instruction
 *******************************************************************/

/*******************************************************************
 * bx (branch and exchange) instruction
 * this instruction is only availabe for the following architectures
 * 	ARMV4T,
 *  ARMV4TXM,
 *  ARMV5 (ARMEMU),
 *	ARMV5XM,
 *	ARMV5T,
 *	ARMV5TXM,
 *	ARMV5TE,
 *	ARMV5TEXP
 */

{ STATE::MODEL == ARMV4T ||
  STATE::MODEL == ARMV5T ||
  STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMV7 ||
  STATE::MODEL == ARMEMU
}:op bx(cond[4]:0b00010010[8]:/*sbo*/0xf[4]:/*sbo*/0xf[4]:/*sbo*/0xf[4]:0b0001[4]:rm[4]);

bx.disasm = {
  buffer << "bx" << DisasmCondition(cond) << "\t" << DisasmRegister(rm);
};

bx.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  cpu.BranchExchange( cpu.GetGPR(rm) );
};

/*
 * end of bx (branch and exchange) instruction
 *******************************************************************/

/*******************************************************************
 * bxj (Branch and Exchange Jazelle) instruction
 * 
 * This instruction attempts to change to Jazelle state. If the
 * attempt fails, it branches to an address and instruction set
 * specified by a register as though it were a BX instruction.
 */
op bxj(cond[4]:0b00010010[8]:0b1111[4]:0b1111[4]:0b1111[4]:0b0010[4]:rm[4]);

bxj.disasm = {
  buffer << "bxj" << DisasmCondition(cond) << '\t' << DisasmRegister(rm);
};

/*
 * end of bx (branch and exchange) instruction
 *******************************************************************/

/*******************************************************************
 * blx (1) (branch with link and exchange version 1) instruction
 * this instruction is only availabe for the following architectures
 *  ARMV5 (ARMEMU),
 *	ARMV5XM,
 *	ARMV5T,
 *	ARMV5TXM,
 *	ARMV5TE,
 *	ARMV5TEXP
 */

{ STATE::MODEL == ARMV5T ||
  STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMV7 ||
  STATE::MODEL == ARMEMU
}:op blx_1(0b1111101[7]:shl<1> im0[1]:shl<2> sext<32> im1[24]);
blx_1.var imm : {uint32_t} = {im1|im0};

blx_1.disasm = {
  buffer << "blx\t" << std::hex << ((this->GetAddr() + 8 + imm) & -2) << std::dec;
};

blx_1.execute = {
  cpu.SetGPR( cpu.LR_reg, cpu.GetNPC() );
  cpu.BranchExchange( (cpu.GetGPR(cpu.PC_reg) + imm) | 1 );
};

/*
 * end of blx (1) (branch with link and exchange version 1) instruction
 *******************************************************************/


/*******************************************************************
 * blx (2) (branch with link and exchange version 2) instruction
 * this instruction is only availabe for the following architectures
 *  ARMV5 (ARMEMU),
 *	ARMV5XM,
 *	ARMV5T,
 *	ARMV5TXM,
 *	ARMV5TE,
 *	ARMV5TEXP
 */

{ STATE::MODEL == ARMV5T ||
  STATE::MODEL == ARMV5TE ||
  STATE::MODEL == ARMV5TEJ ||
  STATE::MODEL == ARMV5TEXP ||
  STATE::MODEL == ARMV6 ||
  STATE::MODEL == ARMV7 ||
  STATE::MODEL == ARMEMU
}:op blx_2(cond[4]:0b00010010[8]:/*sbo*/0xf[4]:/*sbo*/0xf[4]:/*sbo*/0xf[4]:0b0011[4]:rm[4]);

blx_2.disasm = {
  buffer << "blx" << DisasmCondition(cond) << "\t" << DisasmRegister(rm);
};

blx_2.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  uint32_t rm_value = cpu.GetGPR(rm);
  cpu.SetGPR( cpu.LR_reg, cpu.GetNPC() );
  cpu.BranchExchange( rm_value );
};

/*
 * end of blx (2) (branch with link and exchange version 2) instruction
 *******************************************************************/
