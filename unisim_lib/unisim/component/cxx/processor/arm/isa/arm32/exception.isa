/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */

/**********************************************

      EXCEPTION-GENERATING INSTRUCTIONS

**********************************************/

/*******************************************************************
 * swi instruction
 * NOTE: this instruction is used to make the system calls
 */

op swi(cond[4]:0b1111[4]:immed[24])

swi.disasm = {
	buffer << "swi";
	DisasmCondition(cond, buffer);
	buffer << " #" << dec << (unsigned int) immed;
}

swi.execute = {
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if (!cpu.CheckCondition(cond)) return;

	// we are executing on full system mode
	cpu.MarkVirtualExceptionVector(
		unisim::component::cxx::processor::arm::exception::SWI);
}

/*
 * end of swi instruction
 *******************************************************************/

/*******************************************************************
 * bkpt instruction
 */

op bkpt(0b1110[4]:0b00010010[8]:himmed[12]:0b0111[4]:limmed[4])

bkpt.disasm = {
	uint32_t immed;
	
	immed = limmed + ((uint32_t)himmed << 4);
	buffer << "bkpt";
	buffer << " #" << dec << (unsigned int) immed;
}

bkpt.execute = {
	uint32_t immed;
	
	immed = limmed + ((uint32_t)himmed << 4);
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	// we are executing on full system mode
	cpu.MarkVirtualExceptionVector(
		unisim::component::cxx::processor::arm::exception::PREFETCH_ABORT);
}

/*
 * end of bkpt instruction
 *******************************************************************/

