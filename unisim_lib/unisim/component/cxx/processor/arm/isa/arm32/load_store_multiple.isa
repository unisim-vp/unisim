/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

     LOAD AND STORE MULTIPLE INSTRUCTIONS

**********************************************/

/*******************************************************************
 * ldm_1 instruction
 */

op ldm_1_ia(cond[4]:0b100[3]:0b0[1]:0b1[1]:0b0[1]:w[1]:0b1[1]:rn[4]:reg_list[16])
op ldm_1_ib(cond[4]:0b100[3]:0b1[1]:0b1[1]:0b0[1]:w[1]:0b1[1]:rn[4]:reg_list[16])
op ldm_1_da(cond[4]:0b100[3]:0b0[1]:0b0[1]:0b0[1]:w[1]:0b1[1]:rn[4]:reg_list[16])
op ldm_1_db(cond[4]:0b100[3]:0b1[1]:0b0[1]:0b0[1]:w[1]:0b1[1]:rn[4]:reg_list[16])

group ldm_1(ldm_1_ia, ldm_1_ib, ldm_1_da, ldm_1_db)

ldm_1_ia.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "ia";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
  buffer << " (1)";
}

ldm_1_ib.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "ib";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
  buffer << " (1)";
}

ldm_1_da.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "da";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
  buffer << " (1)";
}

ldm_1_db.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "db";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
  buffer << " (1)";
}

ldm_1_ia.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	
	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMia(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	/*  check PC register */
	if((reg_list & 0x08000) == 0x08000) {
		cpu.Read32toPC(cur_address);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val);
}

ldm_1_ib.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMib(rn_value, reg_list,
		       			&start_address, &end_address,
		       			&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	/*  check PC register */
	if((reg_list & 0x08000) == 0x08000) {
		cpu.Read32toPC(cur_address);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val);
}

ldm_1_da.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMda(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
	
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	/*  check PC register */
	if((reg_list & 0x08000) == 0x08000) {
		cpu.Read32toPC(cur_address);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val);
}

ldm_1_db.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMdb(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	/*  check PC register */
	if((reg_list & 0x08000) == 0x08000) {
		cpu.Read32toPC(cur_address);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val);
}

/*
 * end of ldm_1 instruction
 *******************************************************************/

/*******************************************************************
 * ldm_2 instruction
 */

op ldm_2_ia(cond[4]:0b100[3]:0b0[1]:0b1[1]:0b1[1]:0b0[1]:0b1[1]:rn[4]:0b0[1]:reg_list[15])
op ldm_2_ib(cond[4]:0b100[3]:0b1[1]:0b1[1]:0b1[1]:0b0[1]:0b1[1]:rn[4]:0b0[1]:reg_list[15])
op ldm_2_da(cond[4]:0b100[3]:0b0[1]:0b0[1]:0b1[1]:0b0[1]:0b1[1]:rn[4]:0b0[1]:reg_list[15])
op ldm_2_db(cond[4]:0b100[3]:0b1[1]:0b0[1]:0b1[1]:0b0[1]:0b1[1]:rn[4]:0b0[1]:reg_list[15])

group ldm_2(ldm_2_ia, ldm_2_ib, ldm_2_da, ldm_2_db)

ldm_2_ia.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "ia";
  buffer << " r" << (unsigned int) rn;
  buffer << ", {";
  for(unsigned int i = 0; i < 15; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
  buffer << " (2)";
}

ldm_2_ib.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "ib";
  buffer << " r" << (unsigned int) rn;
  buffer << ", {";
  for(unsigned int i = 0; i < 15; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
  buffer << " (2)";
}

ldm_2_da.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "da";
  buffer << " r" << (unsigned int) rn;
  buffer << ", {";
  for(unsigned int i = 0; i < 15; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
  buffer << " (2)";
}

ldm_2_db.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "db";
  buffer << " r" << (unsigned int) rn;
  buffer << ", {";
  for(unsigned int i = 0; i < 15; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
  buffer << " (2)";
}

ldm_2_ia.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMia(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toUserGPR(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

ldm_2_ib.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMib(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toUserGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

ldm_2_da.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	
	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMda(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toUserGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

ldm_2_db.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMdb(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toUserGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

/*
 * end of ldm_2 instruction
 *******************************************************************/

/*******************************************************************
 * ldm_3 instruction
 */

op ldm_3_ia(cond[4]:0b100[3]:0b0[1]:0b1[1]:0b1[1]:w[1]:0b1[1]:rn[4]:0b1[1]:reg_list[15])
op ldm_3_ib(cond[4]:0b100[3]:0b1[1]:0b1[1]:0b1[1]:w[1]:0b1[1]:rn[4]:0b1[1]:reg_list[15])
op ldm_3_da(cond[4]:0b100[3]:0b0[1]:0b0[1]:0b1[1]:w[1]:0b1[1]:rn[4]:0b1[1]:reg_list[15])
op ldm_3_db(cond[4]:0b100[3]:0b1[1]:0b0[1]:0b1[1]:w[1]:0b1[1]:rn[4]:0b1[1]:reg_list[15])

group ldm_3 (ldm_3_ia, ldm_3_ib, ldm_3_da, ldm_3_db)

ldm_3_ia.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "ia";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 15; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << ", r15}^";
  buffer << " (3)";
}

ldm_3_ib.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "ib";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 15; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << ", r15}^";
  buffer << " (3)";
}

ldm_3_da.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "da";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 15; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << ", r15}^";
  buffer << " (3)";
}

ldm_3_db.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "ldm";
  DisasmCondition(cond, buffer);
  buffer << "db";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 15; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << ", r15}^";
  buffer << " (3)";
}

ldm_3_ia.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMia(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val + 4); // we need to add 4 bytes for the pc saving

	cpu.MoveSPSRtoCPSR();

	cpu.Read32toPC(cur_address);

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

ldm_3_ib.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;

	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMib(rn_value, reg_list,
			&start_address, &end_address,
			&rn_new_val);

	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}

	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val + 4);

	cpu.MoveSPSRtoCPSR();

	cpu.Read32toPC(cur_address);

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

ldm_3_da.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	num_regs = LSMda(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
	
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val - 4);

	cpu.MoveSPSRtoCPSR();

	cpu.Read32toPC(cur_address);

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

ldm_3_db.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	
	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMdb(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			cpu.Read32toGPRAligned(cur_address, i);
			cur_address += 4;
		}
		mask = mask << 1;
	}
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val - 4);

	cpu.MoveSPSRtoCPSR();

	cpu.Read32toPC(cur_address);

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

// ldm_3.nextpc = {
//   if(cond_res) {
//     /* nothing to do */
//   } else {
//     cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
//   }
// }

/*
 * end of ldm_3 instruction
 *******************************************************************/

/*******************************************************************
 * stm_1 instruction
 */

op stm_1_ia(cond[4]:0b100[3]:0b0[1]:0b1[1]:0b0[1]:w[1]:0b0[1]:rn[4]:reg_list[16])
op stm_1_ib(cond[4]:0b100[3]:0b1[1]:0b1[1]:0b0[1]:w[1]:0b0[1]:rn[4]:reg_list[16])
op stm_1_da(cond[4]:0b100[3]:0b0[1]:0b0[1]:0b0[1]:w[1]:0b0[1]:rn[4]:reg_list[16])
op stm_1_db(cond[4]:0b100[3]:0b1[1]:0b0[1]:0b0[1]:w[1]:0b0[1]:rn[4]:reg_list[16])

group stm_1(stm_1_ia, stm_1_ib, stm_1_da, stm_1_db)

stm_1_ia.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "stm";
  DisasmCondition(cond, buffer);
  buffer << "ia";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
}

stm_1_ib.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "stm";
  DisasmCondition(cond, buffer);
  buffer << "ib";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
}

stm_1_da.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "stm";
  DisasmCondition(cond, buffer);
  buffer << "da";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
}

stm_1_db.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "stm";
  DisasmCondition(cond, buffer);
  buffer << "db";
  buffer << " r" << (unsigned int) rn << ((w == 1) ? "!" : "");
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}";
}

stm_1_ia.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
	uint32_t value = 0;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMia(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(i);
			cpu.Write32(cur_address, value);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	if((reg_list & mask) == mask) {
		value = cpu.GetGPR(cpu.PC_reg) + 8;
		cpu.Write32(cur_address, value);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val);
}

stm_1_ib.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
	uint32_t value = 0;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	
	if(!cpu.CheckCondition(cond)) return;
	
	num_regs = LSMib(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(i);
			cpu.Write32(cur_address, value);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	if((reg_list & mask) == mask) {
		value = cpu.GetGPR(cpu.PC_reg) + 8;
		cpu.Write32(cur_address, value);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val);
}

stm_1_da.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
	uint32_t value = 0;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	
	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMda(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(i);
			cpu.Write32(cur_address, value);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	if((reg_list & mask) == mask) {
		value = cpu.GetGPR(cpu.PC_reg) + 8;
		cpu.Write32(cur_address, value);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val);
}

stm_1_db.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
	uint32_t value = 0;
	
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMdb(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(i);
			cpu.Write32(cur_address, value);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	if((reg_list & mask) == mask) {
		value = cpu.GetGPR(cpu.PC_reg) + 8;
		cpu.Write32(cur_address, value);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
  
	/* update rn */
	if(w)
		cpu.SetGPR(rn, rn_new_val);
}

/*
 * end of stm_1 instruction
 *******************************************************************/

/*******************************************************************
 * stm_2 instruction
 */

op stm_2_ia(cond[4]:0b100[3]:0b0[1]:0b1[1]:0b1[1]:0b0[1]:0b0[1]:rn[4]:reg_list[16])
op stm_2_ib(cond[4]:0b100[3]:0b1[1]:0b1[1]:0b1[1]:0b0[1]:0b0[1]:rn[4]:reg_list[16])
op stm_2_da(cond[4]:0b100[3]:0b0[1]:0b0[1]:0b1[1]:0b0[1]:0b0[1]:rn[4]:reg_list[16])
op stm_2_db(cond[4]:0b100[3]:0b1[1]:0b0[1]:0b1[1]:0b0[1]:0b0[1]:rn[4]:reg_list[16])

group stm_2(stm_2_ia, stm_2_ib, stm_2_da, stm_2_db)

stm_2_ia.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "stm";
  DisasmCondition(cond, buffer);
  buffer << "ia";
  buffer << " r" << (unsigned int) rn;
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}^";
}

stm_2_ib.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "stm";
  DisasmCondition(cond, buffer);
  buffer << "ib";
  buffer << " r" << (unsigned int) rn;
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}^";
}

stm_2_da.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "stm";
  DisasmCondition(cond, buffer);
  buffer << "da";
  buffer << " r" << (unsigned int) rn;
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}^";
}

stm_2_db.disasm = {
  unsigned int mask = 1;
  bool prev = false;

  buffer << "stm";
  DisasmCondition(cond, buffer);
  buffer << "db";
  buffer << " r" << (unsigned int) rn;
  buffer << ", {";
  for(unsigned int i = 0; i < 16; i++) {
    if(i > 0) {
      mask = mask << 1;
    }
    if((reg_list & mask) == mask) {
      if(prev) buffer << ", ";
      else prev = true;
      buffer << "r" << i;
    }
  }
  buffer << "}^";
}

stm_2_ia.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
	uint32_t value = 0;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	
	if(!cpu.CheckCondition(cond)) return;
	
	num_regs = LSMia(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(i, cpu.GetCPSR_Mode());
			cpu.Write32(cur_address, value);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	if((reg_list & mask) == mask) {
		value = cpu.GetGPR(cpu.PC_reg) + 8;
		cpu.Write32(cur_address, value);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

stm_2_ib.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
	uint32_t value = 0;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMib(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(i, cpu.GetCPSR_Mode());
			cpu.Write32(cur_address, value);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	if((reg_list & mask) == mask) {
		value = cpu.GetGPR(cpu.PC_reg) + 8;
		cpu.Write32(cur_address, value);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

stm_2_da.execute = {
	typedef Operation<STATE> inherited;

	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
	uint32_t value = 0;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;

	num_regs = LSMda(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(i, cpu.GetCPSR_Mode());
			cpu.Write32(cur_address, value);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	if((reg_list & mask) == mask) {
		value = cpu.GetGPR(cpu.PC_reg) + 8;
		cpu.Write32(cur_address, value);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

stm_2_db.execute = {
	typedef Operation<STATE> inherited;
	
	uint32_t cur_address;
	uint32_t start_address;
	uint32_t end_address;
	uint32_t num_regs = 0;
	uint32_t rn_new_val = 0;
	uint32_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
	unsigned int mask = 1;
	uint32_t value = 0;
  
	cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

	if(!cpu.CheckCondition(cond)) return;
	
	num_regs = LSMdb(rn_value, reg_list,
						&start_address, &end_address,
						&rn_new_val);
  
	cur_address = start_address;
	for(unsigned int i = 0; i < 15; i++) {
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(i, cpu.GetCPSR_Mode());
			cpu.Write32(cur_address, value);
			cur_address += 4;
		}
		mask = mask << 1;
	}
	if((reg_list & mask) == mask) {
		value = cpu.GetGPR(cpu.PC_reg) + 8;
		cpu.Write32(cur_address, value);
	}

	/* TODO:
	 * cur_address should be checked to be the same as end_address + 4 */
}

/*
 * end of stm_2 instruction
 *******************************************************************/

group load_store_multiple_rn_init(ldm_1_ia, ldm_1_ib, ldm_1_da, ldm_1_db, \
                                  ldm_2_ia, ldm_2_ib, ldm_2_da, ldm_2_db, \
                                  ldm_3_ia, ldm_3_ib, ldm_3_da, ldm_3_db, \
                                  stm_1_ia, stm_1_ib, stm_1_da, stm_1_db, \
                                  stm_2_ia, stm_2_ib, stm_2_da, stm_2_db)
load_store_multiple_rn_init.initialize_rn_init = {
	typedef Operation<STATE> inherited;

	if(rn == STATE::PC_reg) inherited::rn_init = 8;
	else inherited::rn_init = 0;
}
