/*
 *  Copyright (c) 2007-2013,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

      STATUS REGISTER ACCESS INSTRUCTIONS

**********************************************/

/*******************************************************************
 * mrs instruction
 */
op mrs(cond[4]:0b00010[5]:r[1]:0b0[2]:0b1111[4]:rd[4]:0b0[12])

  mrs.disasm = {
  buffer << "mrs" << DisasmCondition(cond) << " " << DisasmRegister(rd) << ", ";
  if(r) buffer << "spsr";
  else buffer << "cpsr";
};

mrs.execute = {
  uint32_t run_mode;
	
	
  if(not CheckCondition(cpu, cond)) return;
	
  /* if rd is the pc register the behavior is unpredictable,
   *   we just return */
  if(rd == cpu.PC_reg)
    {
      return;
    }

  run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
  if (r)
    {
      /* check current running mode, if in user or system mode then the behaviour is
       *   unpredictable, so we will do a return */
      if((run_mode == cpu.USER_MODE) or (run_mode == cpu.SYSTEM_MODE))
        {
          // stringstream str;
          // this->disasm(cpu, str);

          // cpu.logger << DebugWarning
          //            << "trying to access SPSR while running in "
          //            << ((run_mode == cpu.USER_MODE)?"user":"system")
          //            << " mode with the following instruction: "
          //            << endl;
          // cpu.logger << str.str() << endl
          //            << "Location: " << __FUNCTION__
          //            << ":" << __FILE__
          //            << ":" << __LINE__
          //            << EndDebugWarning;
				
          return;
        }
      cpu.SetGPR(rd, cpu.GetSPSR());
    }
  else
    {
      cpu.SetGPR(rd, cpu.GetCPSR());
    }
};

/*
 * end of mrs instruction
 *******************************************************************/

/*******************************************************************
 * msr instruction
 */

op msr_imm(cond[4]:0b00110[5]:r[1]:0b10[2]:mask[4]:0b1111[4]:shl<1> imr[4]:imb[8]);
msr_imm.var imm : {uint32_t} = {DecodeRotImm( imr, imb )};

msr_imm.disasm = {
  buffer << "msr" << DisasmCondition(cond) << "\t" << (r ? "spsr_" : "cpsr_") << DisasmPSRMask(mask) << ", " << imm;
};

msr_imm.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  ComputeMoveToPSR( cpu, imm, mask, r );
};

op msr_reg(cond[4]:0b00010[5]:r[1]:0b10[2]:mask[4]:0b1111[4]:0b0[4]:0b0[4]:rm[4]);

msr_reg.disasm = {
  buffer << "msr" << DisasmCondition(cond) << "\t" << (r ? "spsr_" : "cpsr_" ) << DisasmPSRMask(mask) << ", " << DisasmRegister(rm);
};

msr_reg.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  ComputeMoveToPSR( cpu, cpu.GetGPR(rm), mask, r );
};

/*
 * end of msr instruction
 *******************************************************************/
