/*
 *  Copyright (c) 2007-2013,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr), Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

      STATUS REGISTER ACCESS INSTRUCTIONS

**********************************************/

/*******************************************************************
 * mrs instruction
 */

op mrs( cond[4]: 0b00010[5]: shl <6> sr2[1]: 0b00[2]: sr0[4]: rd[4]: 0b00[2]: shl <4> sr1[2]: 0b00000000[8] );
mrs.var sr : {uint8_t} = {sr2|sr1|sr0};
mrs.var reject : {Reject} = {(rd == 15)};

mrs.disasm = {
  buffer << "mrs" << DisasmCondition(cond) << '\t' << DisasmRegister(rd) << ", " << DisasmSpecReg(sr);
};

mrs.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  switch (sr) {
  case 15: cpu.SetGPR(rd, cpu.CPSR().bits()); break;
  case 79: cpu.SetGPR(rd, cpu.SPSR().bits()); break;
  default: cpu.UnpredictableInsnBehaviour(); break;
  }
};

/*
 * end of mrs instruction
 *******************************************************************/

/*******************************************************************
 * msr instruction
 */

op msr_reg( cond[4]: 0b00010[5]: shl <6> sr2[1]: 0b10[2]: sr0[4]: 0b1111[4]: 0b00[2]: shl <4> sr1[2]: 0b0000[4]: rn[4] );
msr_reg.var sr : {uint8_t} = {sr2|sr1|sr0};

msr_reg.disasm = {
  buffer << "msr" << DisasmCondition(cond) << '\t' << DisasmSpecReg(sr) << ", " << DisasmRegister(rn);
};

op msr_reg_psr( cond[4]: 0b00010[5]: r[1]: 0b10[2]: mask[4]: 0b1111[4]: 0b00[2]: 0b00[2]: 0b0000[4]: rn[4] );

msr_reg_psr.disasm = {
  buffer << "msr" << DisasmCondition(cond) << '\t' << DisasmPSRMask(r,mask) << ", " << DisasmRegister(rn);
};

msr_reg_psr.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  ComputeMoveToPSR( cpu, cpu.GetGPR(rn), mask, r );
};

op msr_imm_psr( cond[4]: 0b00110[5]: r[1]: 0b10[2]: mask[4]: 0b1111[4]: shl<1> imr[4]: imb[8] );
msr_imm_psr.var imm : {uint32_t} = {unisim::util::arithmetic::RotateRight( uint32_t( imb ), imr )};

msr_imm_psr.disasm = {
  buffer << "msr" << DisasmCondition(cond) << '\t' << DisasmPSRMask(r,mask) << ", #"
         << std::hex << std::showbase << imm << std::noshowbase << std::dec;
};

msr_imm_psr.execute = {
  if (not CheckCondition(cpu, cond)) return;
  
  ComputeMoveToPSR( cpu, imm, mask, r );
};

/*
 * end of msr instruction
 *******************************************************************/
