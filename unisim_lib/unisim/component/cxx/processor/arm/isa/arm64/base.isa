op adc_www( 0b00011010000[11] : rm[5] : 0b000000[6] : rn[5] : rd[5] );
adc_www.var format : {char const*} = {"base,1458"};

adc_www.disasm = {
  sink << "adc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op adc_xxx( 0b10011010000[11] : rm[5] : 0b000000[6] : rn[5] : rd[5] );
adc_xxx.var format : {char const*} = {"base,1612"};

adc_xxx.disasm = {
  sink << "adc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op adcs_www( 0b00111010000[11] : rm[5] : 0b000000[6] : rn[5] : rd[5] );
adcs_www.var format : {char const*} = {"base,1459"};

adcs_www.disasm = {
  sink << "adcs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op adcs_xxx( 0b10111010000[11] : rm[5] : 0b000000[6] : rn[5] : rd[5] );
adcs_xxx.var format : {char const*} = {"base,1613"};

adcs_xxx.disasm = {
  sink << "adcs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op add_wasr( 0b00001011100[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
add_wasr.var format : {char const*} = {"base,170"};

add_wasr.disasm = {
  sink << "add\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

add_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op add_wlsl( 0b00001011000[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
add_wlsl.var format : {char const*} = {"base,182"};

add_wlsl.disasm = {
  sink << "add\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op add_wlsr( 0b00001011010[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
add_wlsr.var format : {char const*} = {"base,194"};

add_wlsr.disasm = {
  sink << "add\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

add_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op add_wsxtb( 0b00001011001[11] : rm[5] : 0b100[3] : imm[3] : rn[5] : rd[5] );
add_wsxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,375"};

add_wsxtb.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
};

op add_wsxth( 0b00001011001[11] : rm[5] : 0b101[3] : imm[3] : rn[5] : rd[5] );
add_wsxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,379"};

add_wsxth.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
};

op add_wsxtw( 0b00001011001[11] : rm[5] : 0b110[3] : imm[3] : rn[5] : rd[5] );
add_wsxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,383"};

add_wsxtw.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
};

op add_wsxtx( 0b00001011001[11] : rm[5] : 0b111[3] : imm[3] : rn[5] : rd[5] );
add_wsxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,387"};

add_wsxtx.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
};

op add_wuxtb( 0b00001011001[11] : rm[5] : 0b000[3] : imm[3] : rn[5] : rd[5] );
add_wuxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,391"};

add_wuxtb.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
};

op add_wuxth( 0b00001011001[11] : rm[5] : 0b001[3] : imm[3] : rn[5] : rd[5] );
add_wuxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,395"};

add_wuxth.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
};

op add_wuxtw( 0b00001011001[11] : rm[5] : 0b010[3] : imm[3] : rn[5] : rd[5] );
add_wuxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,399"};

add_wuxtw.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
};

op add_wuxtx( 0b00001011001[11] : rm[5] : 0b011[3] : imm[3] : rn[5] : rd[5] );
add_wuxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,403"};

add_wuxtx.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
};

op add_xasr( 0b10001011100[11] : rm[5] : imm[6] : rn[5] : rd[5] );
add_xasr.var format : {char const*} = {"base,110"};

add_xasr.disasm = {
  sink << "add\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

add_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op add_xlsl( 0b10001011000[11] : rm[5] : imm[6] : rn[5] : rd[5] );
add_xlsl.var format : {char const*} = {"base,122"};

add_xlsl.disasm = {
  sink << "add\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op add_xlsr( 0b10001011010[11] : rm[5] : imm[6] : rn[5] : rd[5] );
add_xlsr.var format : {char const*} = {"base,134"};

add_xlsr.disasm = {
  sink << "add\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

add_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op add_xsxtb( 0b10001011001[11] : rm[5] : 0b100[3] : imm[3] : rn[5] : rd[5] );
add_xsxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,407"};

add_xsxtb.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
};

op add_xsxth( 0b10001011001[11] : rm[5] : 0b101[3] : imm[3] : rn[5] : rd[5] );
add_xsxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,411"};

add_xsxth.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
};

op add_xsxtw( 0b10001011001[11] : rm[5] : 0b110[3] : imm[3] : rn[5] : rd[5] );
add_xsxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,415"};

add_xsxtw.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
};

op add_xsxtx( 0b10001011001[11] : rm[5] : 0b111[3] : imm[3] : rn[5] : rd[5] );
add_xsxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,431"};

add_xsxtx.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
};

op add_xuxtb( 0b10001011001[11] : rm[5] : 0b000[3] : imm[3] : rn[5] : rd[5] );
add_xuxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,419"};

add_xuxtb.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
};

op add_xuxth( 0b10001011001[11] : rm[5] : 0b001[3] : imm[3] : rn[5] : rd[5] );
add_xuxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,423"};

add_xuxth.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
};

op add_xuxtw( 0b10001011001[11] : rm[5] : 0b010[3] : imm[3] : rn[5] : rd[5] );
add_xuxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,427"};

add_xuxtw.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
};

op add_xuxtx( 0b10001011001[11] : rm[5] : 0b011[3] : imm[3] : rn[5] : rd[5] );
add_xuxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,438"};

add_xuxtx.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
};

op adds_wasr( 0b00101011100[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
adds_wasr.var format : {char const*} = {"base,180"};

adds_wasr.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

adds_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op adds_wlsl( 0b00101011000[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
adds_wlsl.var format : {char const*} = {"base,183"};

adds_wlsl.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op adds_wlsr( 0b00101011010[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
adds_wlsr.var format : {char const*} = {"base,204"};

adds_wlsr.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

adds_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + (op2 >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op adds_wsxtb( 0b00101011001[11] : rm[5] : 0b100[3] : imm[3] : rn[5] : rd[5] );
adds_wsxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,376"};

adds_wsxtb.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
};

op adds_wsxth( 0b00101011001[11] : rm[5] : 0b101[3] : imm[3] : rn[5] : rd[5] );
adds_wsxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,380"};

adds_wsxth.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
};

op adds_wsxtw( 0b00101011001[11] : rm[5] : 0b110[3] : imm[3] : rn[5] : rd[5] );
adds_wsxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,384"};

adds_wsxtw.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
};

op adds_wsxtx( 0b00101011001[11] : rm[5] : 0b111[3] : imm[3] : rn[5] : rd[5] );
adds_wsxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,388"};

adds_wsxtx.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
};

op adds_wuxtb( 0b00101011001[11] : rm[5] : 0b000[3] : imm[3] : rn[5] : rd[5] );
adds_wuxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,392"};

adds_wuxtb.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
};

op adds_wuxth( 0b00101011001[11] : rm[5] : 0b001[3] : imm[3] : rn[5] : rd[5] );
adds_wuxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,396"};

adds_wuxth.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
};

op adds_wuxtw( 0b00101011001[11] : rm[5] : 0b010[3] : imm[3] : rn[5] : rd[5] );
adds_wuxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,400"};

adds_wuxtw.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
};

op adds_wuxtx( 0b00101011001[11] : rm[5] : 0b011[3] : imm[3] : rn[5] : rd[5] );
adds_wuxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,404"};

adds_wuxtx.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
};

op adds_xasr( 0b10101011100[11] : rm[5] : imm[6] : rn[5] : rd[5] );
adds_xasr.var format : {char const*} = {"base,120"};

adds_xasr.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

adds_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

/*******************************************************************
 * ADD (immediate)
 *
 * Add (immediate): Rd = Rn + shift(imm)
 */

op add_wi( 0b000100010[9] : shl12[1] : imm0[12] : rn[5] : rd[5] );
add_wi.var imm : {uint32_t} = {shl12 ? (imm0 << 12) : imm0}, format : {char const*} = {"base,24"};

add_wi.disasm = {
  sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
};

add_wi.execute = {
  typedef typename ARCH::U32 U32;
  
  U32 op1(cpu.GetGSR(rn)), op2(imm), res = op1 + op2;
  cpu.SetGSR( rd, res );
};

op add_xi( 0b100100010[9] : shl12[1] : imm0[12] : rn[5] : rd[5] );
add_xi.var imm : {uint32_t} = {shl12 ? (imm0 << 12) : imm0}, format : {char const*} = {"base,33"};

add_xi.disasm = {
  sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
};

add_xi.execute = {
  typedef typename ARCH::U64 U64;
  
  U64 op1(cpu.GetGSR(rn)), op2(imm), res = op1 + op2;
  cpu.SetGSR( rd, res );
};

/*
 * end of ADD (immediate)
 *******************************************************************/

/*******************************************************************
 * ADDS (immediate)
 *
 * Add (immediate), setting the condition flags: Rd = Rn + shift(imm)
 */

op adds_wi( 0b001100010[9] : shl12[1] : imm0[12] : rn[5] : rd[5] );
adds_wi.var imm : {uint32_t} = {shl12 ? (imm0 << 12) : imm0}, format : {char const*} = {"base,23"};

adds_wi.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
  else
    sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
};

adds_wi.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  
  U32 op1(cpu.GetGSR(rn)), op2(imm), res = op1 + op2;
  cpu.SetGSR( rd, res );
  cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 > -op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
};

op adds_xi( 0b101100010[9] : shl12[1] : imm0[12] : rn[5] : rd[5] );
adds_xi.var imm : {uint32_t} = {shl12 ? (imm0 << 12) : imm0}, format : {char const*} = {"base,32"};

adds_xi.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
};

adds_xi.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  
  U64 op1(cpu.GetGSR(rn)), op2(imm), res = op1 + op2;
  cpu.SetGSR( rd, res );
  cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 > -op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
};

/*
 * end of ADDS (immediate)
 *******************************************************************/

op adds_xlsl( 0b10101011000[11] : rm[5] : imm[6] : rn[5] : rd[5] );
adds_xlsl.var format : {char const*} = {"base,128"};

adds_xlsl.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op adds_xlsr( 0b10101011010[11] : rm[5] : imm[6] : rn[5] : rd[5] );
adds_xlsr.var format : {char const*} = {"base,144"};

adds_xlsr.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

adds_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + (op2 >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op adds_xsxtb( 0b10101011001[11] : rm[5] : 0b100[3] : imm[3] : rn[5] : rd[5] );
adds_xsxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,408"};

adds_xsxtb.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
};

op adds_xsxth( 0b10101011001[11] : rm[5] : 0b101[3] : imm[3] : rn[5] : rd[5] );
adds_xsxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,412"};

adds_xsxth.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
};

op adds_xsxtw( 0b10101011001[11] : rm[5] : 0b110[3] : imm[3] : rn[5] : rd[5] );
adds_xsxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,416"};

adds_xsxtw.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
};

op adds_xsxtx( 0b10101011001[11] : rm[5] : 0b111[3] : imm[3] : rn[5] : rd[5] );
adds_xsxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,432"};

adds_xsxtx.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
};

op adds_xuxtb( 0b10101011001[11] : rm[5] : 0b000[3] : imm[3] : rn[5] : rd[5] );
adds_xuxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,420"};

adds_xuxtb.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
};

op adds_xuxth( 0b10101011001[11] : rm[5] : 0b001[3] : imm[3] : rn[5] : rd[5] );
adds_xuxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,424"};

adds_xuxth.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
};

op adds_xuxtw( 0b10101011001[11] : rm[5] : 0b010[3] : imm[3] : rn[5] : rd[5] );
adds_xuxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,428"};

adds_xuxtw.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
};

op adds_xuxtx( 0b10101011001[11] : rm[5] : 0b011[3] : imm[3] : rn[5] : rd[5] );
adds_xuxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,436"};

adds_xuxtx.disasm = {
  if (rd == 31)
    sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
  else
    sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
};

/*******************************************************************
 * ADR
 *
 * Address of label at a PC-relative offset
 */

op adr( 0b0[1] : imm0[2] : 0b10000[5] : sext imm1[19] : rd[5] );
adr.var imm : {uint64_t} = {(int64_t(imm1)<<2)|imm0}, format : {char const*} = {"base,2"};

adr.disasm = {
  sink << "adr\t" << DisasmGZXR(rd) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

adr.execute = {
  typedef typename ARCH::U64 U64;
  cpu.SetGZR(rd, cpu.GetPC() + U64(imm));
};

/*
 * end of ADR
 *******************************************************************/

/*******************************************************************
 * ADRP
 *
 * Address of 4KB page at a PC-relative offset
 */

op adrp( 0b1[1] : shl<12> imm0[2] : 0b10000[5] : sext imm1[19] : rd[5] );
adrp.var imm : {uint64_t} = {(int64_t(imm1)<<14)|imm0}, format : {char const*} = {"base,1"};

adrp.disasm = {
  sink << "adrp\t" << DisasmGZXR(rd) << ", 0x" << std::hex << ((this->GetAddr()+imm)&(-1ll<<12));
};

adrp.execute = {
  typedef typename ARCH::U64 U64;
  cpu.SetGZR(rd, (cpu.GetPC() + U64(imm)) & U64(-1ll<<12));
};

/*
 * end of ADRP
 *******************************************************************/

op and_wasr( 0b00001010100[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
and_wasr.var format : {char const*} = {"base,171"};

and_wasr.disasm = {
  sink << "and\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

and_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op and_wi( 0b0001001000[10] : immr[6] : imms[6] : rn[5] : rd[5] );
and_wi.var imm : {uint32_t} = {DecodeBitMasks(0,imms,immr).wmask}, format : {char const*} = {"base,71"};

and_wi.disasm = {
  sink << "and\t" << DisasmGSWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
};

op and_wlsl( 0b00001010000[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
and_wlsl.var format : {char const*} = {"base,187"};

and_wlsl.disasm = {
  sink << "and\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op and_wlsr( 0b00001010010[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
and_wlsr.var format : {char const*} = {"base,195"};

and_wlsr.disasm = {
  sink << "and\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

and_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op and_wror( 0b00001010110[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
and_wror.var format : {char const*} = {"base,206"};

and_wror.disasm = {
  sink << "and\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
};

op and_xasr( 0b10001010100[11] : rm[5] : imm[6] : rn[5] : rd[5] );
and_xasr.var format : {char const*} = {"base,111"};

and_xasr.disasm = {
  sink << "and\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

and_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op and_xi( 0b100100100[9] : n[1] : immr[6] : imms[6] : rn[5] : rd[5] );
and_xi.var imm : {uint64_t} = {DecodeBitMasks(n,imms,immr).wmask}, format : {char const*} = {"base,26"};

and_xi.disasm = {
  sink << "and\t" << DisasmGSXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
};

op and_xlsl( 0b10001010000[11] : rm[5] : imm[6] : rn[5] : rd[5] );
and_xlsl.var format : {char const*} = {"base,123"};

and_xlsl.disasm = {
  sink << "and\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op and_xlsr( 0b10001010010[11] : rm[5] : imm[6] : rn[5] : rd[5] );
and_xlsr.var format : {char const*} = {"base,135"};

and_xlsr.disasm = {
  sink << "and\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

and_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op and_xror( 0b10001010110[11] : rm[5] : imm[6] : rn[5] : rd[5] );
and_xror.var format : {char const*} = {"base,146"};

and_xror.disasm = {
  sink << "and\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
};

op ands_wasr( 0b01101010100[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
ands_wasr.var format : {char const*} = {"base,181"};

ands_wasr.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

ands_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op ands_wi( 0b0111001000[10] : immr[6] : imms[6] : rn[5] : rd[5] );
ands_wi.var imm : {uint32_t} = {DecodeBitMasks(0,imms,immr).wmask}, format : {char const*} = {"base,73"};

ands_wi.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
  else
    sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
};

op ands_wlsl( 0b01101010000[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
ands_wlsl.var format : {char const*} = {"base,184"};

ands_wlsl.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op ands_wlsr( 0b01101010010[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
ands_wlsr.var format : {char const*} = {"base,205"};

ands_wlsr.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

ands_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & (op2 >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op ands_wror( 0b01101010110[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
ands_wror.var format : {char const*} = {"base,213"};

ands_wror.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
  else
    sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
};

op ands_xasr( 0b11101010100[11] : rm[5] : imm[6] : rn[5] : rd[5] );
ands_xasr.var format : {char const*} = {"base,121"};

ands_xasr.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

ands_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op ands_xi( 0b111100100[9] : n[1] : immr[6] : imms[6] : rn[5] : rd[5] );
ands_xi.var imm : {uint64_t} = {DecodeBitMasks(n,imms,immr).wmask}, format : {char const*} = {"base,29"};

ands_xi.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
  else
    sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
};

op ands_xlsl( 0b11101010000[11] : rm[5] : imm[6] : rn[5] : rd[5] );
ands_xlsl.var format : {char const*} = {"base,130"};

ands_xlsl.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op ands_xlsr( 0b11101010010[11] : rm[5] : imm[6] : rn[5] : rd[5] );
ands_xlsr.var format : {char const*} = {"base,145"};

ands_xlsr.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

ands_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & (op2 >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op ands_xror( 0b11101010110[11] : rm[5] : imm[6] : rn[5] : rd[5] );
ands_xror.var format : {char const*} = {"base,153"};

ands_xror.disasm = {
  if (rd == 31)
    sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
  else
    sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
};

op asr_www( 0b00011010110[11] : rm[5] : 0b001010[6] : rn[5] : rd[5] );
asr_www.var format : {char const*} = {"base,1460"};

asr_www.disasm = {
  sink << "asr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op asr_xxx( 0b10011010110[11] : rm[5] : 0b001010[6] : rn[5] : rd[5] );
asr_xxx.var format : {char const*} = {"base,1614"};

asr_xxx.disasm = {
  sink << "asr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op at_s12e0r( 0b110101010000110001111000110[27] : rt[5] );
at_s12e0r.var format : {char const*} = {"base,2910"};

at_s12e0r.disasm = {
  sink << "at\ts12e0r, " << DisasmGZXR(rt);
};

op at_s12e0w( 0b110101010000110001111000111[27] : rt[5] );
at_s12e0w.var format : {char const*} = {"base,2911"};

at_s12e0w.disasm = {
  sink << "at\ts12e0w, " << DisasmGZXR(rt);
};

op at_s12e1r( 0b110101010000110001111000100[27] : rt[5] );
at_s12e1r.var format : {char const*} = {"base,2912"};

at_s12e1r.disasm = {
  sink << "at\ts12e1r, " << DisasmGZXR(rt);
};

op at_s12e1w( 0b110101010000110001111000101[27] : rt[5] );
at_s12e1w.var format : {char const*} = {"base,2913"};

at_s12e1w.disasm = {
  sink << "at\ts12e1w, " << DisasmGZXR(rt);
};

op at_s1e0r( 0b110101010000100001111000010[27] : rt[5] );
at_s1e0r.var format : {char const*} = {"base,2914"};

at_s1e0r.disasm = {
  sink << "at\ts1e0r, " << DisasmGZXR(rt);
};

op at_s1e0w( 0b110101010000100001111000011[27] : rt[5] );
at_s1e0w.var format : {char const*} = {"base,2915"};

at_s1e0w.disasm = {
  sink << "at\ts1e0w, " << DisasmGZXR(rt);
};

op at_s1e1r( 0b110101010000100001111000000[27] : rt[5] );
at_s1e1r.var format : {char const*} = {"base,2916"};

at_s1e1r.disasm = {
  sink << "at\ts1e1r, " << DisasmGZXR(rt);
};

op at_s1e1w( 0b110101010000100001111000001[27] : rt[5] );
at_s1e1w.var format : {char const*} = {"base,2917"};

at_s1e1w.disasm = {
  sink << "at\ts1e1w, " << DisasmGZXR(rt);
};

op at_s1e2r( 0b110101010000110001111000000[27] : rt[5] );
at_s1e2r.var format : {char const*} = {"base,2918"};

at_s1e2r.disasm = {
  sink << "at\ts1e2r, " << DisasmGZXR(rt);
};

op at_s1e2w( 0b110101010000110001111000001[27] : rt[5] );
at_s1e2w.var format : {char const*} = {"base,2919"};

at_s1e2w.disasm = {
  sink << "at\ts1e2w, " << DisasmGZXR(rt);
};

op at_s1e3r( 0b110101010000111001111000000[27] : rt[5] );
at_s1e3r.var format : {char const*} = {"base,2920"};

at_s1e3r.disasm = {
  sink << "at\ts1e3r, " << DisasmGZXR(rt);
};

op at_s1e3w( 0b110101010000111001111000001[27] : rt[5] );
at_s1e3w.var format : {char const*} = {"base,2921"};

at_s1e3w.disasm = {
  sink << "at\ts1e3w, " << DisasmGZXR(rt);
};

/*******************************************************************
 * B
 *
 * Branch unconditionally to a label at a PC-relative offset, with a
 * hint that this is not a subroutine call or return
 */

op b( 0b000101[6] : shl<2> sext imm[26] );
b.var format : {char const*} = {"base,3"};

b.disasm = {
  sink << "b\t0x" << std::hex << (this->GetAddr()+imm);
};

b.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
};

/*
 * end of B
 *******************************************************************/

op b_cond( 0b01010100[8] : shl<2> sext imm[19] : 0b0[1] : cond[4] );
b_cond.var format : {char const*} = {"base,20"};

b_cond.disasm = {
  sink << "b." << DisasmCond(cond) << "\t0x" << std::hex << (this->GetAddr()+imm);
};

op bfm_w( 0b00110011000[11] : immr[5] : 0b0[1] : imms[5] : rn[5] : rd[5] );
bfm_w.var format : {char const*} = {"base,162"};

bfm_w.disasm = {
  if (imms < immr)
    sink << "bfi\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(-immr&31) << ", " << DisasmI(imms+1);
  else
    sink << "bfxil\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
};

op bfm_x( 0b1011001101[10] : immr[6] : imms[6] : rn[5] : rd[5] );
bfm_x.var format : {char const*} = {"base,90"};

bfm_x.disasm = {
  if (imms < immr)
    sink << "bfi\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(-immr&63) << ", " << DisasmI(imms+1);
  else
    sink << "bfxil\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
};

op bic_wasr( 0b00001010101[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
bic_wasr.var format : {char const*} = {"base,172"};

bic_wasr.disasm = {
  sink << "bic\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

bic_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & ~U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op bic_wlsl( 0b00001010001[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
bic_wlsl.var format : {char const*} = {"base,188"};

bic_wlsl.disasm = {
  sink << "bic\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op bic_wlsr( 0b00001010011[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
bic_wlsr.var format : {char const*} = {"base,196"};

bic_wlsr.disasm = {
  sink << "bic\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

bic_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & ~(op2 >> imm);
  cpu.SetGZR(rd, res);
};

op bic_wror( 0b00001010111[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
bic_wror.var format : {char const*} = {"base,207"};

bic_wror.disasm = {
  sink << "bic\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
};

op bic_xasr( 0b10001010101[11] : rm[5] : imm[6] : rn[5] : rd[5] );
bic_xasr.var format : {char const*} = {"base,112"};

bic_xasr.disasm = {
  sink << "bic\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

bic_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & ~U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op bic_xlsl( 0b10001010001[11] : rm[5] : imm[6] : rn[5] : rd[5] );
bic_xlsl.var format : {char const*} = {"base,124"};

bic_xlsl.disasm = {
  sink << "bic\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op bic_xlsr( 0b10001010011[11] : rm[5] : imm[6] : rn[5] : rd[5] );
bic_xlsr.var format : {char const*} = {"base,136"};

bic_xlsr.disasm = {
  sink << "bic\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

bic_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & ~(op2 >> imm);
  cpu.SetGZR(rd, res);
};

op bic_xror( 0b10001010111[11] : rm[5] : imm[6] : rn[5] : rd[5] );
bic_xror.var format : {char const*} = {"base,147"};

bic_xror.disasm = {
  sink << "bic\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
};

op bics_wasr( 0b01101010101[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
bics_wasr.var format : {char const*} = {"base,173"};

bics_wasr.disasm = {
  sink << "bics\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

bics_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & ~U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op bics_wlsl( 0b01101010001[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
bics_wlsl.var format : {char const*} = {"base,189"};

bics_wlsl.disasm = {
  sink << "bics\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op bics_wlsr( 0b01101010011[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
bics_wlsr.var format : {char const*} = {"base,197"};

bics_wlsr.disasm = {
  sink << "bics\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

bics_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & ~(op2 >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op bics_wror( 0b01101010111[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
bics_wror.var format : {char const*} = {"base,208"};

bics_wror.disasm = {
  sink << "bics\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
};

op bics_xasr( 0b11101010101[11] : rm[5] : imm[6] : rn[5] : rd[5] );
bics_xasr.var format : {char const*} = {"base,113"};

bics_xasr.disasm = {
  sink << "bics\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

bics_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & ~U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op bics_xlsl( 0b11101010001[11] : rm[5] : imm[6] : rn[5] : rd[5] );
bics_xlsl.var format : {char const*} = {"base,125"};

bics_xlsl.disasm = {
  sink << "bics\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op bics_xlsr( 0b11101010011[11] : rm[5] : imm[6] : rn[5] : rd[5] );
bics_xlsr.var format : {char const*} = {"base,137"};

bics_xlsr.disasm = {
  sink << "bics\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

bics_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 & ~(op2 >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op bics_xror( 0b11101010111[11] : rm[5] : imm[6] : rn[5] : rd[5] );
bics_xror.var format : {char const*} = {"base,148"};

bics_xror.disasm = {
  sink << "bics\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
};

/*******************************************************************
 * BL
 *
 * Branch with link, calls a subroutine at a PC-relative offset, setting register X30 to PC + 4
 */

op bl( 0b100101[6] : shl<2> sext imm[26] );
bl.var format : {char const*} = {"base,4"};

bl.disasm = {
  sink << "bl\t0x" << std::hex << (this->GetAddr()+int64_t(imm));
};

bl.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 target_addr( cpu.GetPC() + U64(S64(imm)) );
  U64 return_addr( cpu.GetNPC() );
  cpu.SetGSR(30, return_addr);
  cpu.BranchTo( target_addr, ARCH::B_CALL );
};

/*
 * end of BL
 *******************************************************************/

/*******************************************************************
 * BLR
 *
 * Branch with link to register, calls a subroutine at an address in a register, setting register X30 to PC + 4
 */

op blr( 0b1101011000111111000000[22] : rn[5] : 0b00000[5] );
blr.var format : {char const*} = {"base,2886"};

blr.disasm = {
  sink << "blr\t" << DisasmGZXR(rn);
};

blr.execute = {
  typedef typename ARCH::U64 U64;
  U64 target_addr( cpu.GetGZR(rn) );
  U64 return_addr( cpu.GetNPC() );
  cpu.SetGSR(30, return_addr);
  cpu.BranchTo( target_addr, ARCH::B_CALL );
};

/*
 * end of BLR
 *******************************************************************/

/*******************************************************************
 * BR
 *
 * Branch to register, branches unconditionally to an address in a register, with a hint that this is not a subroutine return
 */

op br( 0b1101011000011111000000[22] : rn[5] : 0b00000[5] );
br.var format : {char const*} = {"base,2887"};

br.disasm = {
  sink << "br\t" << DisasmGZXR(rn);
};

br.execute = {
  typedef typename ARCH::U64 U64;
  U64 target_addr( cpu.GetGZR(rn) );
  cpu.BranchTo( target_addr, ARCH::B_JMP );
};

/*
 * end of BR
 *******************************************************************/

op brk( 0b11010100001[11] : imm[16] : 0b00000[5] );
brk.var format : {char const*} = {"base,573"};

brk.disasm = {
  sink << "brk\t" << DisasmI(imm,16);
};

op cas_w( 0b10001000101[11] : rs[5] : 0b011111[6] : rn[5] : rt[5] );
cas_w.var format : {char const*} = {"base,1476"};

cas_w.disasm = {
  sink << "cas\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op cas_x( 0b11001000101[11] : rs[5] : 0b011111[6] : rn[5] : rt[5] );
cas_x.var format : {char const*} = {"base,1621"};

cas_x.disasm = {
  sink << "cas\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casa_w( 0b10001000111[11] : rs[5] : 0b011111[6] : rn[5] : rt[5] );
casa_w.var format : {char const*} = {"base,1477"};

casa_w.disasm = {
  sink << "casa\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casa_x( 0b11001000111[11] : rs[5] : 0b011111[6] : rn[5] : rt[5] );
casa_x.var format : {char const*} = {"base,1622"};

casa_x.disasm = {
  sink << "casa\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casab_w( 0b00001000111[11] : rs[5] : 0b011111[6] : rn[5] : rt[5] );
casab_w.var format : {char const*} = {"base,1478"};

casab_w.disasm = {
  sink << "casab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casah_w( 0b01001000111[11] : rs[5] : 0b011111[6] : rn[5] : rt[5] );
casah_w.var format : {char const*} = {"base,1479"};

casah_w.disasm = {
  sink << "casah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casal_w( 0b10001000111[11] : rs[5] : 0b111111[6] : rn[5] : rt[5] );
casal_w.var format : {char const*} = {"base,1480"};

casal_w.disasm = {
  sink << "casal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casal_x( 0b11001000111[11] : rs[5] : 0b111111[6] : rn[5] : rt[5] );
casal_x.var format : {char const*} = {"base,1623"};

casal_x.disasm = {
  sink << "casal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casalb_w( 0b00001000111[11] : rs[5] : 0b111111[6] : rn[5] : rt[5] );
casalb_w.var format : {char const*} = {"base,1481"};

casalb_w.disasm = {
  sink << "casalb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casalh_w( 0b01001000111[11] : rs[5] : 0b111111[6] : rn[5] : rt[5] );
casalh_w.var format : {char const*} = {"base,1482"};

casalh_w.disasm = {
  sink << "casalh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casb_w( 0b00001000101[11] : rs[5] : 0b011111[6] : rn[5] : rt[5] );
casb_w.var format : {char const*} = {"base,1483"};

casb_w.disasm = {
  sink << "casb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op cash_w( 0b01001000101[11] : rs[5] : 0b011111[6] : rn[5] : rt[5] );
cash_w.var format : {char const*} = {"base,1484"};

cash_w.disasm = {
  sink << "cash\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casl_w( 0b10001000101[11] : rs[5] : 0b111111[6] : rn[5] : rt[5] );
casl_w.var format : {char const*} = {"base,1485"};

casl_w.disasm = {
  sink << "casl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casl_x( 0b11001000101[11] : rs[5] : 0b111111[6] : rn[5] : rt[5] );
casl_x.var format : {char const*} = {"base,1624"};

casl_x.disasm = {
  sink << "casl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op caslb_w( 0b00001000101[11] : rs[5] : 0b111111[6] : rn[5] : rt[5] );
caslb_w.var format : {char const*} = {"base,1486"};

caslb_w.disasm = {
  sink << "caslb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op caslh_w( 0b01001000101[11] : rs[5] : 0b111111[6] : rn[5] : rt[5] );
caslh_w.var format : {char const*} = {"base,1487"};

caslh_w.disasm = {
  sink << "caslh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op casp_w( 0b00001000001[11] : shl<1> rs[4] : 0b0011111[7] : rn[5] : shl<1> rt[4] : 0b0[1] );
casp_w.var format : {char const*} = {"base,1915"};

casp_w.disasm = {
  sink << "casp\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rs|1) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
};

op casp_x( 0b01001000001[11] : shl<1> rs[4] : 0b0011111[7] : rn[5] : shl<1> rt[4] : 0b0[1] );
casp_x.var format : {char const*} = {"base,1919"};

casp_x.disasm = {
  sink << "casp\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rs|1) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
};

op caspa_w( 0b00001000011[11] : shl<1> rs[4] : 0b0011111[7] : rn[5] : shl<1> rt[4] : 0b0[1] );
caspa_w.var format : {char const*} = {"base,1916"};

caspa_w.disasm = {
  sink << "caspa\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rs|1) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
};

op caspa_x( 0b01001000011[11] : shl<1> rs[4] : 0b0011111[7] : rn[5] : shl<1> rt[4] : 0b0[1] );
caspa_x.var format : {char const*} = {"base,1920"};

caspa_x.disasm = {
  sink << "caspa\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rs|1) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
};

op caspal_w( 0b00001000011[11] : shl<1> rs[4] : 0b0111111[7] : rn[5] : shl<1> rt[4] : 0b0[1] );
caspal_w.var format : {char const*} = {"base,1917"};

caspal_w.disasm = {
  sink << "caspal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rs|1) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
};

op caspal_x( 0b01001000011[11] : shl<1> rs[4] : 0b0111111[7] : rn[5] : shl<1> rt[4] : 0b0[1] );
caspal_x.var format : {char const*} = {"base,1921"};

caspal_x.disasm = {
  sink << "caspal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rs|1) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
};

op caspl_w( 0b00001000001[11] : shl<1> rs[4] : 0b0111111[7] : rn[5] : shl<1> rt[4] : 0b0[1] );
caspl_w.var format : {char const*} = {"base,1918"};

caspl_w.disasm = {
  sink << "caspl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rs|1) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
};

op caspl_x( 0b01001000001[11] : shl<1> rs[4] : 0b0111111[7] : rn[5] : shl<1> rt[4] : 0b0[1] );
caspl_x.var format : {char const*} = {"base,1922"};

caspl_x.disasm = {
  sink << "caspl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rs|1) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
};

/*******************************************************************
 * CBNZ
 *
 * Compare and branch if nonzero to a label at a PC-relative offset,
 * without affecting the condition flags, and with a hint that this is
 * not a subroutine call or return
 */

op cbnz_wlit( 0b00110101[8] : shl<2> sext imm[19] : rt[5] );
cbnz_wlit.var format : {char const*} = {"base,12"};

cbnz_wlit.disasm = {
  sink << "cbnz\t" << DisasmGZWR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

cbnz_wlit.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U32 op1( cpu.GetGZR(rt) );
  
  if (cpu.Cond( op1 != U32(0) ))
    cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
};

op cbnz_xlit( 0b10110101[8] : shl<2> sext imm[19] : rt[5] );
cbnz_xlit.var format : {char const*} = {"base,15"};

cbnz_xlit.disasm = {
  sink << "cbnz\t" << DisasmGZXR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

cbnz_xlit.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rt) );
  
  if (cpu.Cond( op1 != U64(0) ))
    cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
};

/*
 * end of CBNZ
 *******************************************************************/

/*******************************************************************
 * CBZ
 *
 * Compare and branch if zero to a label at a PC-relative offset,
 * without affecting the condition flags, and with a hint that this is
 * not a subroutine call or return
 */

op cbz_wlit( 0b00110100[8] : shl<2> sext imm[19] : rt[5] );
cbz_wlit.var format : {char const*} = {"base,13"};

cbz_wlit.disasm = {
  sink << "cbz\t" << DisasmGZWR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

cbz_wlit.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U32 op1( cpu.GetGZR(rt) );
  
  if (cpu.Cond( op1 == U32(0) ))
    cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
};

op cbz_xlit( 0b10110100[8] : shl<2> sext imm[19] : rt[5] );
cbz_xlit.var format : {char const*} = {"base,16"};

cbz_xlit.disasm = {
  sink << "cbz\t" << DisasmGZXR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

cbz_xlit.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rt) );
  
  if (cpu.Cond( op1 == U64(0) ))
    cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
};

/*
 * end of CBZ
 *******************************************************************/

op ccmn_w( 0b00111010010[11] : rm[5] : cond[4] : 0b00[2] : rn[5] : 0b0[1] : nzcv[4] );
ccmn_w.var format : {char const*} = {"base,368"};

ccmn_w.disasm = {
  sink << "ccmn\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmI(nzcv,16) << ", " << DisasmCond(cond);
};

op ccmn_wi( 0b00111010010[11] : imm[5] : cond[4] : 0b10[2] : rn[5] : 0b0[1] : nzcv[4] );
ccmn_wi.var format : {char const*} = {"base,366"};

ccmn_wi.disasm = {
  sink << "ccmn\t" << DisasmGZWR(rn) << ", " << DisasmI(imm,16) << ", " << DisasmI(nzcv,16) << ", " << DisasmCond(cond);
};

op ccmn_x( 0b10111010010[11] : rm[5] : cond[4] : 0b00[2] : rn[5] : 0b0[1] : nzcv[4] );
ccmn_x.var format : {char const*} = {"base,372"};

ccmn_x.disasm = {
  sink << "ccmn\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmI(nzcv,16) << ", " << DisasmCond(cond);
};

op ccmn_xi( 0b10111010010[11] : imm[5] : cond[4] : 0b10[2] : rn[5] : 0b0[1] : nzcv[4] );
ccmn_xi.var format : {char const*} = {"base,370"};

ccmn_xi.disasm = {
  sink << "ccmn\t" << DisasmGZXR(rn) << ", " << DisasmI(imm,16) << ", " << DisasmI(nzcv,16) << ", " << DisasmCond(cond);
};

op ccmp_w( 0b01111010010[11] : rm[5] : cond[4] : 0b00[2] : rn[5] : 0b0[1] : nzcv[4] );
ccmp_w.var format : {char const*} = {"base,369"};

ccmp_w.disasm = {
  sink << "ccmp\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmI(nzcv,16) << ", " << DisasmCond(cond);
};

op ccmp_wi( 0b01111010010[11] : imm[5] : cond[4] : 0b10[2] : rn[5] : 0b0[1] : nzcv[4] );
ccmp_wi.var format : {char const*} = {"base,367"};

ccmp_wi.disasm = {
  sink << "ccmp\t" << DisasmGZWR(rn) << ", " << DisasmI(imm,16) << ", " << DisasmI(nzcv,16) << ", " << DisasmCond(cond);
};

op ccmp_x( 0b11111010010[11] : rm[5] : cond[4] : 0b00[2] : rn[5] : 0b0[1] : nzcv[4] );
ccmp_x.var format : {char const*} = {"base,373"};

ccmp_x.disasm = {
  sink << "ccmp\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmI(nzcv,16) << ", " << DisasmCond(cond);
};

op ccmp_xi( 0b11111010010[11] : imm[5] : cond[4] : 0b10[2] : rn[5] : 0b0[1] : nzcv[4] );
ccmp_xi.var format : {char const*} = {"base,371"};

ccmp_xi.disasm = {
  sink << "ccmp\t" << DisasmGZXR(rn) << ", " << DisasmI(imm,16) << ", " << DisasmI(nzcv,16) << ", " << DisasmCond(cond);
};

op clrex( 0b11010101000000110011[20] : imm[4] : 0b01011111[8] );
clrex.var format : {char const*} = {"base,2942"};

clrex.disasm = {
  sink << "clrex\t" << DisasmI(imm,16);
};

op cls_w( 0b0101101011000000000101[22] : rn[5] : rd[5] );
cls_w.var format : {char const*} = {"base,2615"};

cls_w.disasm = {
  sink << "cls\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
};

op cls_x( 0b1101101011000000000101[22] : rn[5] : rd[5] );
cls_x.var format : {char const*} = {"base,2655"};

cls_x.disasm = {
  sink << "cls\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
};

op clz_w( 0b0101101011000000000100[22] : rn[5] : rd[5] );
clz_w.var format : {char const*} = {"base,2616"};

clz_w.disasm = {
  sink << "clz\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
};

op clz_x( 0b1101101011000000000100[22] : rn[5] : rd[5] );
clz_x.var format : {char const*} = {"base,2654"};

clz_x.disasm = {
  sink << "clz\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
};

op crc32b_www( 0b00011010110[11] : rm[5] : 0b010000[6] : rn[5] : rd[5] );
crc32b_www.var format : {char const*} = {"base,1461"};

crc32b_www.disasm = {
  sink << "crc32b\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op crc32cb_www( 0b00011010110[11] : rm[5] : 0b010100[6] : rn[5] : rd[5] );
crc32cb_www.var format : {char const*} = {"base,1462"};

crc32cb_www.disasm = {
  sink << "crc32cb\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op crc32ch_www( 0b00011010110[11] : rm[5] : 0b010101[6] : rn[5] : rd[5] );
crc32ch_www.var format : {char const*} = {"base,1463"};

crc32ch_www.disasm = {
  sink << "crc32ch\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op crc32cw_www( 0b00011010110[11] : rm[5] : 0b010110[6] : rn[5] : rd[5] );
crc32cw_www.var format : {char const*} = {"base,1464"};

crc32cw_www.disasm = {
  sink << "crc32cw\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op crc32cx_wwx( 0b10011010110[11] : rm[5] : 0b010111[6] : rn[5] : rd[5] );
crc32cx_wwx.var format : {char const*} = {"base,1474"};

crc32cx_wwx.disasm = {
  sink << "crc32cx\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZXR(rm);
};

op crc32h_www( 0b00011010110[11] : rm[5] : 0b010001[6] : rn[5] : rd[5] );
crc32h_www.var format : {char const*} = {"base,1465"};

crc32h_www.disasm = {
  sink << "crc32h\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op crc32w_www( 0b00011010110[11] : rm[5] : 0b010010[6] : rn[5] : rd[5] );
crc32w_www.var format : {char const*} = {"base,1466"};

crc32w_www.disasm = {
  sink << "crc32w\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op crc32x_wwx( 0b10011010110[11] : rm[5] : 0b010011[6] : rn[5] : rd[5] );
crc32x_wwx.var format : {char const*} = {"base,1475"};

crc32x_wwx.disasm = {
  sink << "crc32x\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZXR(rm);
};

op csel_w( 0b00011010100[11] : rm[5] : cond[4] : 0b00[2] : rn[5] : rd[5] );
csel_w.var format : {char const*} = {"base,291"};

csel_w.disasm = {
  sink << "csel\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmCond(cond);
};

op csel_x( 0b10011010100[11] : rm[5] : cond[4] : 0b00[2] : rn[5] : rd[5] );
csel_x.var format : {char const*} = {"base,327"};

csel_x.disasm = {
  sink << "csel\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmCond(cond);
};

op csinc_w( 0b00011010100[11] : rm[5] : cond[4] : 0b01[2] : rn[5] : rd[5] );
csinc_w.var format : {char const*} = {"base,292"};

csinc_w.disasm = {
  if ((rn == rm) and (cond < 0b1110))
    if (rn != 31)
      sink << "cinc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmCond(cond^1);
    else
      sink << "cset\t" << DisasmGZWR(rd) << ", " << DisasmCond(cond^1);
  else
    sink << "csinc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmCond(cond);
};

op csinc_x( 0b10011010100[11] : rm[5] : cond[4] : 0b01[2] : rn[5] : rd[5] );
csinc_x.var format : {char const*} = {"base,328"};

csinc_x.disasm = {
  if ((rn == rm) and (cond < 0b1110))
    if (rn != 31)
      sink << "cinc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmCond(cond^1);
    else
      sink << "cset\t" << DisasmGZXR(rd) << ", " << DisasmCond(cond^1);
  else
    sink << "csinc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmCond(cond);
};

op csinv_w( 0b01011010100[11] : rm[5] : cond[4] : 0b00[2] : rn[5] : rd[5] );
csinv_w.var format : {char const*} = {"base,293"};

csinv_w.disasm = {
  if ((rn == rm) and (cond < 0b1110))
    if (rn != 31)
      sink << "cinv\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmCond(cond^1);
    else
      sink << "csetm\t" << DisasmGZWR(rd) << ", " << DisasmCond(cond^1);
  else
    sink << "csinv\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmCond(cond);
};

op csinv_x( 0b11011010100[11] : rm[5] : cond[4] : 0b00[2] : rn[5] : rd[5] );
csinv_x.var format : {char const*} = {"base,329"};

csinv_x.disasm = {
  if ((rn == rm) and (cond < 0b1110))
    if (rn != 31)
      sink << "cinv\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmCond(cond^1);
    else
      sink << "csetm\t" << DisasmGZXR(rd) << ", " << DisasmCond(cond^1);
  else
    sink << "csinv\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmCond(cond);
};

op csneg_w( 0b01011010100[11] : rm[5] : cond[4] : 0b01[2] : rn[5] : rd[5] );
csneg_w.var format : {char const*} = {"base,294"};

csneg_w.disasm = {
  if ((rn == rm) and (cond < 0b1110))
    sink << "cneg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmCond(cond^1);
  else
    sink << "csneg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmCond(cond);
};

op csneg_x( 0b11011010100[11] : rm[5] : cond[4] : 0b01[2] : rn[5] : rd[5] );
csneg_x.var format : {char const*} = {"base,330"};

csneg_x.disasm = {
  if ((rn == rm) and (cond < 0b1110))
    sink << "cneg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmCond(cond^1);
  else
    sink << "csneg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmCond(cond);
};

op dc_cisw( 0b110101010000100001111110010[27] : rt[5] );
dc_cisw.var format : {char const*} = {"base,2897"};

dc_cisw.disasm = {
  sink << "dc\tcisw, " << DisasmGZXR(rt);
};

op dc_civac( 0b110101010000101101111110001[27] : rt[5] );
dc_civac.var format : {char const*} = {"base,2898"};

dc_civac.disasm = {
  sink << "dc\tcivac, " << DisasmGZXR(rt);
};

op dc_csw( 0b110101010000100001111010010[27] : rt[5] );
dc_csw.var format : {char const*} = {"base,2899"};

dc_csw.disasm = {
  sink << "dc\tcsw, " << DisasmGZXR(rt);
};

op dc_cvac( 0b110101010000101101111010001[27] : rt[5] );
dc_cvac.var format : {char const*} = {"base,2900"};

dc_cvac.disasm = {
  sink << "dc\tcvac, " << DisasmGZXR(rt);
};

op dc_cvau( 0b110101010000101101111011001[27] : rt[5] );
dc_cvau.var format : {char const*} = {"base,2901"};

dc_cvau.disasm = {
  sink << "dc\tcvau, " << DisasmGZXR(rt);
};

op dc_isw( 0b110101010000100001110110010[27] : rt[5] );
dc_isw.var format : {char const*} = {"base,2908"};

dc_isw.disasm = {
  sink << "dc\tisw, " << DisasmGZXR(rt);
};

op dc_ivac( 0b110101010000100001110110001[27] : rt[5] );
dc_ivac.var format : {char const*} = {"base,2909"};

dc_ivac.disasm = {
  sink << "dc\tivac, " << DisasmGZXR(rt);
};

op dcps1( 0b11010100101[11] : imm[16] : 0b00001[5] );
dcps1.var format : {char const*} = {"base,578"};

dcps1.disasm = {
  sink << "dcps1\t" << DisasmI(imm,16);
};

op dcps2( 0b11010100101[11] : imm[16] : 0b00010[5] );
dcps2.var format : {char const*} = {"base,579"};

dcps2.disasm = {
  sink << "dcps2\t" << DisasmI(imm,16);
};

op dcps3( 0b11010100101[11] : imm[16] : 0b00011[5] );
dcps3.var format : {char const*} = {"base,580"};

dcps3.disasm = {
  sink << "dcps3\t" << DisasmI(imm,16);
};

op dmb( 0b11010101000000110011[20] : imm[4] : 0b10111111[8] );
dmb.var format : {char const*} = {"base,2943"};

dmb.disasm = {
  sink << "dmb\t" << DisasmBarrierOption(imm);
};

op drps( 0b11010110101111110000001111100000[32] );
drps.var format : {char const*} = {"base,2946"};

drps.disasm = {
  sink << "drps";
};

op dsb( 0b11010101000000110011[20] : imm[4] : 0b10011111[8] );
dsb.var format : {char const*} = {"base,2944"};

dsb.disasm = {
  sink << "dsb\t" << DisasmBarrierOption(imm);
};

op eon_wasr( 0b01001010101[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
eon_wasr.var format : {char const*} = {"base,174"};

eon_wasr.disasm = {
  sink << "eon\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

eon_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 ^ ~U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op eon_wlsl( 0b01001010001[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
eon_wlsl.var format : {char const*} = {"base,190"};

eon_wlsl.disasm = {
  sink << "eon\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op eon_wlsr( 0b01001010011[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
eon_wlsr.var format : {char const*} = {"base,198"};

eon_wlsr.disasm = {
  sink << "eon\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

eon_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 ^ ~(op2 >> imm);
  cpu.SetGZR(rd, res);
};

op eon_wror( 0b01001010111[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
eon_wror.var format : {char const*} = {"base,209"};

eon_wror.disasm = {
  sink << "eon\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
};

op eon_xasr( 0b11001010101[11] : rm[5] : imm[6] : rn[5] : rd[5] );
eon_xasr.var format : {char const*} = {"base,114"};

eon_xasr.disasm = {
  sink << "eon\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

eon_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 ^ ~U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op eon_xlsl( 0b11001010001[11] : rm[5] : imm[6] : rn[5] : rd[5] );
eon_xlsl.var format : {char const*} = {"base,126"};

eon_xlsl.disasm = {
  sink << "eon\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op eon_xlsr( 0b11001010011[11] : rm[5] : imm[6] : rn[5] : rd[5] );
eon_xlsr.var format : {char const*} = {"base,138"};

eon_xlsr.disasm = {
  sink << "eon\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

eon_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 ^ ~(op2 >> imm);
  cpu.SetGZR(rd, res);
};

op eon_xror( 0b11001010111[11] : rm[5] : imm[6] : rn[5] : rd[5] );
eon_xror.var format : {char const*} = {"base,149"};

eon_xror.disasm = {
  sink << "eon\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
};

op eor_wasr( 0b01001010100[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
eor_wasr.var format : {char const*} = {"base,175"};

eor_wasr.disasm = {
  sink << "eor\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

eor_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 ^ U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op eor_wi( 0b0101001000[10] : immr[6] : imms[6] : rn[5] : rd[5] );
eor_wi.var imm : {uint32_t} = {DecodeBitMasks(0,imms,immr).wmask}, format : {char const*} = {"base,72"};

eor_wi.disasm = {
  sink << "eor\t" << DisasmGSWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
};

op eor_wlsl( 0b01001010000[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
eor_wlsl.var format : {char const*} = {"base,191"};

eor_wlsl.disasm = {
  sink << "eor\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op eor_wlsr( 0b01001010010[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
eor_wlsr.var format : {char const*} = {"base,199"};

eor_wlsr.disasm = {
  sink << "eor\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

eor_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 ^ (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op eor_wror( 0b01001010110[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
eor_wror.var format : {char const*} = {"base,210"};

eor_wror.disasm = {
  sink << "eor\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
};

op eor_xasr( 0b11001010100[11] : rm[5] : imm[6] : rn[5] : rd[5] );
eor_xasr.var format : {char const*} = {"base,115"};

eor_xasr.disasm = {
  sink << "eor\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

eor_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 ^ U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op eor_xi( 0b110100100[9] : n[1] : immr[6] : imms[6] : rn[5] : rd[5] );
eor_xi.var imm : {uint64_t} = {DecodeBitMasks(n,imms,immr).wmask}, format : {char const*} = {"base,27"};

eor_xi.disasm = {
  sink << "eor\t" << DisasmGSXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
};

op eor_xlsl( 0b11001010000[11] : rm[5] : imm[6] : rn[5] : rd[5] );
eor_xlsl.var format : {char const*} = {"base,127"};

eor_xlsl.disasm = {
  sink << "eor\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op eor_xlsr( 0b11001010010[11] : rm[5] : imm[6] : rn[5] : rd[5] );
eor_xlsr.var format : {char const*} = {"base,139"};

eor_xlsr.disasm = {
  sink << "eor\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

eor_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 ^ (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op eor_xror( 0b11001010110[11] : rm[5] : imm[6] : rn[5] : rd[5] );
eor_xror.var format : {char const*} = {"base,150"};

eor_xror.disasm = {
  sink << "eor\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
};

op eret( 0b11010110100111110000001111100000[32] );
eret.var format : {char const*} = {"base,2947"};

eret.disasm = {
  sink << "eret";
};

op extr_w( 0b00010011100[11] : rm[5] : 0b0[1] : imms[5] : rn[5] : rd[5] );
extr_w.var format : {char const*} = {"base,165"};

extr_w.disasm = {
  if (rn == rm)
    sink << "ror\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imms);
  else
    sink << "extr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmI(imms);
};

op extr_x( 0b10010011110[11] : rm[5] : imms[6] : rn[5] : rd[5] );
extr_x.var format : {char const*} = {"base,109"};

extr_x.disasm = {
  if (rn == rm)
    sink << "ror\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imms);
  else
    sink << "extr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmI(imms);
};

op hint( 0b11010101000000110010[20] : imm[7] : 0b11111[5] );
hint.var format : {char const*} = {"base,2885"};

hint.disasm = {
  sink << "hint\t" << DisasmI(imm,16);;
};

op hlt( 0b11010100010[11] : imm[16] : 0b00000[5] );
hlt.var format : {char const*} = {"base,574"};

hlt.disasm = {
  sink << "hlt\t" << DisasmI(imm,16);
};

op hvc( 0b11010100000[11] : imm[16] : 0b00010[5] );
hvc.var format : {char const*} = {"base,575"};

hvc.disasm = {
  sink << "hvc\t" << DisasmI(imm,16);
};

op ic_iallu( 0b110101010000100001110101000[27] : ?[5] );
ic_iallu.var format : {char const*} = {"base,2902"};

ic_iallu.disasm = {
  sink << "ic\tiallu";
};

op ic_ialluis( 0b110101010000100001110001000[27] : ?[5] );
ic_ialluis.var format : {char const*} = {"base,2903"};

ic_ialluis.disasm = {
  sink << "ic\tialluis";
};

op ic_ivau( 0b11010101000010110111010100111111[32] );
ic_ivau.var format : {char const*} = {"base,2954"};

ic_ivau.disasm = {
  sink << "ic\tivau";
};

op isb( 0b11010101000000110011[20] : imm[4] : 0b11011111[8] );
isb.var format : {char const*} = {"base,2945"};

isb.disasm = {
  sink << "isb\t" << DisasmI(imm,16);
};

op ldadd_w( 0b10111000001[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldadd_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1548"};

ldadd_w.disasm = {
  sink << "ldadd\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldadd_x( 0b11111000001[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldadd_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1645"};

ldadd_x.disasm = {
  sink << "ldadd\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldadda_w( 0b10111000101[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldadda_w.var format : {char const*} = {"base,1488"};

ldadda_w.disasm = {
  sink << "ldadda\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldadda_x( 0b11111000101[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldadda_x.var format : {char const*} = {"base,1625"};

ldadda_x.disasm = {
  sink << "ldadda\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddab_w( 0b00111000101[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddab_w.var format : {char const*} = {"base,1489"};

ldaddab_w.disasm = {
  sink << "ldaddab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddah_w( 0b01111000101[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddah_w.var format : {char const*} = {"base,1490"};

ldaddah_w.disasm = {
  sink << "ldaddah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddal_w( 0b10111000111[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddal_w.var format : {char const*} = {"base,1491"};

ldaddal_w.disasm = {
  sink << "ldaddal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddal_x( 0b11111000111[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddal_x.var format : {char const*} = {"base,1626"};

ldaddal_x.disasm = {
  sink << "ldaddal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddalb_w( 0b00111000111[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddalb_w.var format : {char const*} = {"base,1492"};

ldaddalb_w.disasm = {
  sink << "ldaddalb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddalh_w( 0b01111000111[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddalh_w.var format : {char const*} = {"base,1493"};

ldaddalh_w.disasm = {
  sink << "ldaddalh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddb_w( 0b00111000001[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1549"};

ldaddb_w.disasm = {
  sink << "ldaddb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddh_w( 0b01111000001[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1550"};

ldaddh_w.disasm = {
  sink << "ldaddh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddl_w( 0b10111000011[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddl_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1551"};

ldaddl_w.disasm = {
  sink << "ldaddl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddl_x( 0b11111000011[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddl_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1646"};

ldaddl_x.disasm = {
  sink << "ldaddl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddlb_w( 0b00111000011[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddlb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1552"};

ldaddlb_w.disasm = {
  sink << "ldaddlb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaddlh_w( 0b01111000011[11] : rs[5] : 0b000000[6] : rn[5] : rt[5] );
ldaddlh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1553"};

ldaddlh_w.disasm = {
  sink << "ldaddlh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldar_w( 0b1000100011011111111111[22] : rn[5] : rt[5] );
ldar_w.var format : {char const*} = {"base,2622"};

ldar_w.disasm = {
  sink << "ldar\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldar_x( 0b1100100011011111111111[22] : rn[5] : rt[5] );
ldar_x.var format : {char const*} = {"base,2656"};

ldar_x.disasm = {
  sink << "ldar\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldarb_w( 0b0000100011011111111111[22] : rn[5] : rt[5] );
ldarb_w.var format : {char const*} = {"base,2623"};

ldarb_w.disasm = {
  sink << "ldarb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldarh_w( 0b0100100011011111111111[22] : rn[5] : rt[5] );
ldarh_w.var format : {char const*} = {"base,2624"};

ldarh_w.disasm = {
  sink << "ldarh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaxp_w( 0b10001000011[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
ldaxp_w.var format : {char const*} = {"base,220"};

ldaxp_w.disasm = {
  sink << "ldaxp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaxp_x( 0b11001000011[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
ldaxp_x.var format : {char const*} = {"base,243"};

ldaxp_x.disasm = {
  sink << "ldaxp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaxr_wx( 0b10001000010[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
ldaxr_wx.var format : {char const*} = {"base,226"};

ldaxr_wx.disasm = {
  sink << "ldaxr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaxr_x( 0b11001000010[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
ldaxr_x.var format : {char const*} = {"base,245"};

ldaxr_x.disasm = {
  sink << "ldaxr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaxrb_wx( 0b00001000010[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
ldaxrb_wx.var format : {char const*} = {"base,227"};

ldaxrb_wx.disasm = {
  sink << "ldaxrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldaxrh_wx( 0b01001000010[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
ldaxrh_wx.var format : {char const*} = {"base,228"};

ldaxrh_wx.disasm = {
  sink << "ldaxrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclr_w( 0b10111000001[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclr_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1554"};

ldclr_w.disasm = {
  sink << "ldclr\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclr_x( 0b11111000001[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclr_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1647"};

ldclr_x.disasm = {
  sink << "ldclr\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclra_w( 0b10111000101[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclra_w.var format : {char const*} = {"base,1494"};

ldclra_w.disasm = {
  sink << "ldclra\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclra_x( 0b11111000101[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclra_x.var format : {char const*} = {"base,1627"};

ldclra_x.disasm = {
  sink << "ldclra\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclrab_w( 0b00111000101[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclrab_w.var format : {char const*} = {"base,1495"};

ldclrab_w.disasm = {
  sink << "ldclrab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclrah_w( 0b01111000101[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclrah_w.var format : {char const*} = {"base,1496"};

ldclrah_w.disasm = {
  sink << "ldclrah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclral_w( 0b10111000111[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclral_w.var format : {char const*} = {"base,1497"};

ldclral_w.disasm = {
  sink << "ldclral\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclral_x( 0b11111000111[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclral_x.var format : {char const*} = {"base,1628"};

ldclral_x.disasm = {
  sink << "ldclral\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclralb_w( 0b00111000111[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclralb_w.var format : {char const*} = {"base,1498"};

ldclralb_w.disasm = {
  sink << "ldclralb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclralh_w( 0b01111000111[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclralh_w.var format : {char const*} = {"base,1499"};

ldclralh_w.disasm = {
  sink << "ldclralh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclrb_w( 0b00111000001[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclrb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1555"};

ldclrb_w.disasm = {
  sink << "ldclrb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclrh_w( 0b01111000001[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclrh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1556"};

ldclrh_w.disasm = {
  sink << "ldclrh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclrl_w( 0b10111000011[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclrl_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1557"};

ldclrl_w.disasm = {
  sink << "ldclrl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclrl_x( 0b11111000011[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclrl_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1648"};

ldclrl_x.disasm = {
  sink << "ldclrl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclrlb_w( 0b00111000011[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclrlb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1558"};

ldclrlb_w.disasm = {
  sink << "ldclrlb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldclrlh_w( 0b01111000011[11] : rs[5] : 0b000100[6] : rn[5] : rt[5] );
ldclrlh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1559"};

ldclrlh_w.disasm = {
  sink << "ldclrlh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeor_w( 0b10111000001[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeor_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1560"};

ldeor_w.disasm = {
  sink << "ldeor\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeor_x( 0b11111000001[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeor_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1649"};

ldeor_x.disasm = {
  sink << "ldeor\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeora_w( 0b10111000101[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeora_w.var format : {char const*} = {"base,1500"};

ldeora_w.disasm = {
  sink << "ldeora\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeora_x( 0b11111000101[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeora_x.var format : {char const*} = {"base,1629"};

ldeora_x.disasm = {
  sink << "ldeora\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeorab_w( 0b00111000101[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeorab_w.var format : {char const*} = {"base,1501"};

ldeorab_w.disasm = {
  sink << "ldeorab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeorah_w( 0b01111000101[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeorah_w.var format : {char const*} = {"base,1502"};

ldeorah_w.disasm = {
  sink << "ldeorah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeoral_w( 0b10111000111[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeoral_w.var format : {char const*} = {"base,1503"};

ldeoral_w.disasm = {
  sink << "ldeoral\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeoral_x( 0b11111000111[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeoral_x.var format : {char const*} = {"base,1630"};

ldeoral_x.disasm = {
  sink << "ldeoral\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeoralb_w( 0b00111000111[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeoralb_w.var format : {char const*} = {"base,1504"};

ldeoralb_w.disasm = {
  sink << "ldeoralb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeoralh_w( 0b01111000111[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeoralh_w.var format : {char const*} = {"base,1505"};

ldeoralh_w.disasm = {
  sink << "ldeoralh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeorb_w( 0b00111000001[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeorb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1561"};

ldeorb_w.disasm = {
  sink << "ldeorb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeorh_w( 0b01111000001[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeorh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1562"};

ldeorh_w.disasm = {
  sink << "ldeorh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeorl_w( 0b10111000011[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeorl_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1563"};

ldeorl_w.disasm = {
  sink << "ldeorl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeorl_x( 0b11111000011[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeorl_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1650"};

ldeorl_x.disasm = {
  sink << "ldeorl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeorlb_w( 0b00111000011[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeorlb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1564"};

ldeorlb_w.disasm = {
  sink << "ldeorlb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldeorlh_w( 0b01111000011[11] : rs[5] : 0b001000[6] : rn[5] : rt[5] );
ldeorlh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1565"};

ldeorlh_w.disasm = {
  sink << "ldeorlh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldnp_wo( 0b0010100001[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldnp_wo.var format : {char const*} = {"base,74"};

ldnp_wo.disasm = {
  sink << "ldnp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldnp_xo( 0b1010100001[10] : shl<3> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldnp_xo.var format : {char const*} = {"base,93"};

ldnp_xo.disasm = {
  sink << "ldnp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldp_wo( 0b0010100101[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldp_wo.var format : {char const*} = {"base,75"};

ldp_wo.disasm = {
  sink << "ldp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldp_wop( 0b0010100111[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldp_wop.var format : {char const*} = {"base,78"};

ldp_wop.disasm = {
  sink << "ldp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

op ldp_wpo( 0b0010100011[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldp_wpo.var format : {char const*} = {"base,80"};

ldp_wpo.disasm = {
  sink << "ldp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

op ldp_xo( 0b1010100101[10] : shl<3> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldp_xo.var format : {char const*} = {"base,94"};

ldp_xo.disasm = {
  sink << "ldp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldp_xop( 0b1010100111[10] : shl<3> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldp_xop.var format : {char const*} = {"base,98"};

ldp_xop.disasm = {
  sink << "ldp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

op ldp_xpo( 0b1010100011[10] : shl<3> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldp_xpo.var format : {char const*} = {"base,101"};

ldp_xpo.disasm = {
  sink << "ldp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

op ldpsw_xo( 0b0110100101[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldpsw_xo.var format : {char const*} = {"base,95"};

ldpsw_xo.disasm = {
  sink << "ldpsw\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldpsw_xop( 0b0110100111[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldpsw_xop.var format : {char const*} = {"base,99"};

ldpsw_xop.disasm = {
  sink << "ldpsw\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

op ldpsw_xpo( 0b0110100011[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
ldpsw_xpo.var format : {char const*} = {"base,102"};

ldpsw_xpo.disasm = {
  sink << "ldpsw\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

/*******************************************************************
 * LDR (immediate)
 *
 * Load register (immediate offset)
 */

op ldr_wsopost( 0b10111000010[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldr_wsopost.var format : {char const*} = {"base,319"};

ldr_wsopost.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldr_wsopost.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  U32 data( cpu.MemRead32(addr) );
  cpu.SetGZR(rt, data);
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldr_xsopost( 0b11111000010[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldr_xsopost.var format : {char const*} = {"base,346"};

ldr_xsopost.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldr_xsopost.execute = {
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  U64 data( cpu.MemRead64(addr) );
  cpu.SetGZR(rt, data);
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldr_wsopre( 0b10111000010[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldr_wsopre.var format : {char const*} = {"base,311"};

ldr_wsopre.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldr_wsopre.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U32 data( cpu.MemRead32(addr) );
  cpu.SetGZR(rt, data);
  cpu.SetGSR(rn, addr);
};

op ldr_xsopre( 0b11111000010[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldr_xsopre.var format : {char const*} = {"base,341"};

ldr_xsopre.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldr_xsopre.execute = {
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U64 data( cpu.MemRead64(addr) );
  cpu.SetGZR(rt, data);
  cpu.SetGSR(rn, addr);
};

op ldr_wuo( 0b1011100101[10] : shl<2> imm[12] : rn[5] : rt[5] );
ldr_wuo.var format : {char const*} = {"base,82"};

ldr_wuo.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldr_wuo.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U32 data( cpu.MemRead32(addr) );
  cpu.SetGZR(rt, data);
};

op ldr_xuo( 0b1111100101[10] : shl<3> imm[12] : rn[5] : rt[5] );
ldr_xuo.var format : {char const*} = {"base,104"};

ldr_xuo.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldr_xuo.execute = {
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U64 data( cpu.MemRead64(addr) );
  cpu.SetGZR(rt, data);
};

/*
 * end of LDR (immediate)
 *******************************************************************/

/*******************************************************************
 * LDR (literal)
 *
 * Load register (PC-relative literal)
 */

op ldr_wlit( 0b00011000[8] : shl<2> sext imm[19] : rt[5] );
ldr_wlit.var format : {char const*} = {"base,14"};

ldr_wlit.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

ldr_wlit.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 addr( cpu.GetPC() + U64(S64(imm)) );
  U32 data( cpu.MemRead32(addr) );
  cpu.SetGZR(rt, data);
};

op ldr_xlit( 0b01011000[8] : shl<2> sext imm[19] : rt[5] );
ldr_xlit.var format : {char const*} = {"base,17"};

ldr_xlit.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

ldr_xlit.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 addr( cpu.GetPC() + U64(S64(imm)) );
  U64 data( cpu.MemRead64(addr) );
  cpu.SetGZR(rt, data);
};

/*
 * end of LDR (literal)
 *******************************************************************/

op ldr_wxws( 0b10111000011[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldr_wxws.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,615"};

ldr_wxws.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldr_wxwu( 0b10111000011[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldr_wxwu.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,623"};

ldr_wxwu.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldr_wxxu( 0b10111000011[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldr_wxxu.var format : {char const*} = {"base,1596"}, shift : {uint8_t} = {s*2};

ldr_wxxu.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldr_wxxs( 0b10111000011[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldr_wxxs.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,631"};

ldr_wxxs.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op ldr_xxws( 0b11111000011[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldr_xxws.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,639"};

ldr_xxws.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldr_xxwu( 0b11111000011[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldr_xxwu.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,644"};

ldr_xxwu.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldr_xxxu( 0b11111000011[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldr_xxxu.var format : {char const*} = {"base,1661"}, shift : {uint8_t} = {s*3};

ldr_xxxu.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldr_xxxs( 0b11111000011[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldr_xxxs.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,649"};

ldr_xxxs.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

/*******************************************************************
 * LDRB (immediate)
 *
 * Load register byte (immediate offset)
 */

op ldrb_wsopost( 0b00111000010[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldrb_wsopost.var format : {char const*} = {"base,320"};

ldrb_wsopost.disasm = {
  sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldrb_wsopost.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  U8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, data);
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldrb_wsopre( 0b00111000010[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldrb_wsopre.var format : {char const*} = {"base,312"};

ldrb_wsopre.disasm = {
  sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldrb_wsopre.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, data);
  cpu.SetGSR(rn, addr);
};

op ldrb_wuo( 0b0011100101[10] : imm[12] : rn[5] : rt[5] );
ldrb_wuo.var format : {char const*} = {"base,83"};

ldrb_wuo.disasm = {
  sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldrb_wuo.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, data);
};

/*
 * end of LDRB (immediate)
 *******************************************************************/

op ldrb_wxws( 0b00111000011[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrb_wxws.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,616"};

ldrb_wxws.disasm = {
  sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrb_wxwu( 0b00111000011[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrb_wxwu.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,624"};

ldrb_wxwu.disasm = {
  sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrb_wxxu( 0b00111000011[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrb_wxxu.var format : {char const*} = {"base,1597"}, shift : {uint8_t} = {s*0};

ldrb_wxxu.disasm = {
  sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldrb_wxxs( 0b00111000011[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrb_wxxs.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,632"};

ldrb_wxxs.disasm = {
  sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

/*******************************************************************
 * LDRH (immediate)
 *
 * Load register halfword (immediate offset)
 */

op ldrh_wsopost( 0b01111000010[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldrh_wsopost.var format : {char const*} = {"base,321"};

ldrh_wsopost.disasm = {
  sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldrh_wsopost.execute = {
  typedef typename ARCH::U16 U16;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  U16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, data);
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldrh_wsopre( 0b01111000010[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldrh_wsopre.var format : {char const*} = {"base,313"};

ldrh_wsopre.disasm = {
  sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldrh_wsopre.execute = {
  typedef typename ARCH::U16 U16;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, data);
  cpu.SetGSR(rn, addr);
};

op ldrh_wuo( 0b0111100101[10] : shl<1> imm[12] : rn[5] : rt[5] );
ldrh_wuo.var format : {char const*} = {"base,84"};

ldrh_wuo.disasm = {
  sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldrh_wuo.execute = {
  typedef typename ARCH::U16 U16;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, data);
};

/*
 * end of LDRH (immediate)
 *******************************************************************/

op ldrh_wxws( 0b01111000011[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrh_wxws.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,617"};

ldrh_wxws.disasm = {
  sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrh_wxwu( 0b01111000011[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrh_wxwu.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,625"};

ldrh_wxwu.disasm = {
  sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrh_wxxu( 0b01111000011[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrh_wxxu.var format : {char const*} = {"base,1598"}, shift : {uint8_t} = {s*1};

ldrh_wxxu.disasm = {
  sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldrh_wxxs( 0b01111000011[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrh_wxxs.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,633"};

ldrh_wxxs.disasm = {
  sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

/*******************************************************************
 * LDRSB (immediate)
 *
 * Load register signed byte (immediate offset)
 */

op ldrsb_wsopost( 0b00111000110[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldrsb_wsopost.var format : {char const*} = {"base,322"};

ldrsb_wsopost.disasm = {
  sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldrsb_wsopost.execute = {
  typedef typename ARCH::S8  S8;
  typedef typename ARCH::S32 S32;
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  S8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, U32(S32(data)));
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldrsb_xsopost( 0b00111000100[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldrsb_xsopost.var format : {char const*} = {"base,347"};

ldrsb_xsopost.disasm = {
  sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldrsb_xsopost.execute = {
  typedef typename ARCH::S8  S8;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  S8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldrsb_wsopre( 0b00111000110[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldrsb_wsopre.var format : {char const*} = {"base,314"};

ldrsb_wsopre.disasm = {
  sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldrsb_wsopre.execute = {
  typedef typename ARCH::S8  S8;
  typedef typename ARCH::S32 S32;
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, U32(S32(data)));
  cpu.SetGSR(rn, addr);
};

op ldrsb_xsopre( 0b00111000100[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldrsb_xsopre.var format : {char const*} = {"base,342"};

ldrsb_xsopre.disasm = {
  sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldrsb_xsopre.execute = {
  typedef typename ARCH::S8  S8;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
  cpu.SetGSR(rn, addr);
};

op ldrsb_wuo( 0b0011100111[10] : imm[12] : rn[5] : rt[5] );
ldrsb_wuo.var format : {char const*} = {"base,85"};

ldrsb_wuo.disasm = {
  sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldrsb_wuo.execute = {
  typedef typename ARCH::S8  S8;
  typedef typename ARCH::S32 S32;
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, U32(S32(data)));
};

op ldrsb_xuo( 0b0011100110[10] : imm[12] : rn[5] : rt[5] );
ldrsb_xuo.var format : {char const*} = {"base,105"};

ldrsb_xuo.disasm = {
  sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldrsb_xuo.execute = {
  typedef typename ARCH::S8  S8;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S8 data( cpu.MemRead8(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
};

/*
 * end of LDRSB (immediate)
 *******************************************************************/

op ldrsb_wxws( 0b00111000111[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsb_wxws.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,618"};

ldrsb_wxws.disasm = {
  sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsb_wxwu( 0b00111000111[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsb_wxwu.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,626"};

ldrsb_wxwu.disasm = {
  sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsb_wxxu( 0b00111000111[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsb_wxxu.var format : {char const*} = {"base,1599"}, shift : {uint8_t} = {s*0};

ldrsb_wxxu.disasm = {
  sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldrsb_wxxs( 0b00111000111[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsb_wxxs.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,634"};

ldrsb_wxxs.disasm = {
  sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op ldrsb_xxws( 0b00111000101[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsb_xxws.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,640"};

ldrsb_xxws.disasm = {
  sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsb_xxwu( 0b00111000101[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsb_xxwu.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,645"};

ldrsb_xxwu.disasm = {
  sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsb_xxxu( 0b00111000101[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsb_xxxu.var format : {char const*} = {"base,1662"}, shift : {uint8_t} = {s*0};

ldrsb_xxxu.disasm = {
  sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldrsb_xxxs( 0b00111000101[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsb_xxxs.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,650"};

ldrsb_xxxs.disasm = {
  sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

/*******************************************************************
 * LDRSH (immediate)
 *
 * Load register signed halfword (immediate offset)
 */

op ldrsh_wsopost( 0b01111000110[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldrsh_wsopost.var format : {char const*} = {"base,323"};

ldrsh_wsopost.disasm = {
  sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldrsh_wsopost.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::S32 S32;
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  S16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, U32(S32(data)));
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldrsh_xsopost( 0b01111000100[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldrsh_xsopost.var format : {char const*} = {"base,348"};

ldrsh_xsopost.disasm = {
  sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldrsh_xsopost.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  S16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldrsh_wsopre( 0b01111000110[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldrsh_wsopre.var format : {char const*} = {"base,315"};

ldrsh_wsopre.disasm = {
  sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldrsh_wsopre.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::S32 S32;
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, U32(S32(data)));
  cpu.SetGSR(rn, addr);
};

op ldrsh_xsopre( 0b01111000100[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldrsh_xsopre.var format : {char const*} = {"base,343"};

ldrsh_xsopre.disasm = {
  sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldrsh_xsopre.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
  cpu.SetGSR(rn, addr);
};

op ldrsh_wuo( 0b0111100111[10] : shl<1> imm[12] : rn[5] : rt[5] );
ldrsh_wuo.var format : {char const*} = {"base,86"};

ldrsh_wuo.disasm = {
  sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldrsh_wuo.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::S32 S32;
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, U32(S32(data)));
};

op ldrsh_xuo( 0b0111100110[10] : shl<1> imm[12] : rn[5] : rt[5] );
ldrsh_xuo.var format : {char const*} = {"base,106"};

ldrsh_xuo.disasm = {
  sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldrsh_xuo.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S16 data( cpu.MemRead16(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
};

/*
 * end of LDRSH (immediate)
 *******************************************************************/

op ldrsh_wxws( 0b01111000111[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsh_wxws.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,619"};

ldrsh_wxws.disasm = {
  sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsh_wxwu( 0b01111000111[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsh_wxwu.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,627"};

ldrsh_wxwu.disasm = {
  sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsh_wxxu( 0b01111000111[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsh_wxxu.var format : {char const*} = {"base,1600"}, shift : {uint8_t} = {s*1};

ldrsh_wxxu.disasm = {
  sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldrsh_wxxs( 0b01111000111[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsh_wxxs.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,635"};

ldrsh_wxxs.disasm = {
  sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op ldrsh_xxws( 0b01111000101[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsh_xxws.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,641"};

ldrsh_xxws.disasm = {
  sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsh_xxwu( 0b01111000101[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsh_xxwu.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,646"};

ldrsh_xxwu.disasm = {
  sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsh_xxxu( 0b01111000101[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsh_xxxu.var format : {char const*} = {"base,1663"}, shift : {uint8_t} = {s*1};

ldrsh_xxxu.disasm = {
  sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldrsh_xxxs( 0b01111000101[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsh_xxxs.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,651"};

ldrsh_xxxs.disasm = {
  sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op ldrsw_xlit( 0b10011000[8] : shl<2> sext imm[19] : rt[5] );
ldrsw_xlit.var format : {char const*} = {"base,18"};

ldrsw_xlit.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

/*******************************************************************
 * LDRSW (immediate)
 *
 * Load register signed halfword (immediate offset)
 */

op ldrsw_xsopost( 0b10111000100[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
ldrsw_xsopost.var format : {char const*} = {"base,349"};

ldrsw_xsopost.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

ldrsw_xsopost.execute = {
  typedef typename ARCH::S32  S32;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  S32 data( cpu.MemRead32(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
  cpu.SetGSR(rn, addr + U64(imm) );
};

op ldrsw_xsopre( 0b10111000100[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
ldrsw_xsopre.var format : {char const*} = {"base,344"};

ldrsw_xsopre.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

ldrsw_xsopre.execute = {
  typedef typename ARCH::S32  S32;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S32 data( cpu.MemRead32(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
  cpu.SetGSR(rn, addr);
};

op ldrsw_xuo( 0b1011100110[10] : shl<2> imm[12] : rn[5] : rt[5] );
ldrsw_xuo.var format : {char const*} = {"base,107"};

ldrsw_xuo.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

ldrsw_xuo.execute = {
  typedef typename ARCH::S32  S32;
  typedef typename ARCH::S64 S64;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  S32 data( cpu.MemRead32(addr) );
  cpu.SetGZR(rt, U64(S64(data)));
};

/*
 * end of LDRSW (immediate)
 *******************************************************************/

op ldrsw_xxws( 0b10111000101[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsw_xxws.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,642"};

ldrsw_xxws.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsw_xxwu( 0b10111000101[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsw_xxwu.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,647"};

ldrsw_xxwu.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op ldrsw_xxxu( 0b10111000101[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsw_xxxu.var format : {char const*} = {"base,1664"}, shift : {uint8_t} = {s*2};

ldrsw_xxxu.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op ldrsw_xxxs( 0b10111000101[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
ldrsw_xxxs.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,652"};

ldrsw_xxxs.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op ldset_w( 0b10111000001[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldset_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1566"};

ldset_w.disasm = {
  sink << "ldset\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldset_x( 0b11111000001[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldset_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1651"};

ldset_x.disasm = {
  sink << "ldset\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldseta_w( 0b10111000101[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldseta_w.var format : {char const*} = {"base,1506"};

ldseta_w.disasm = {
  sink << "ldseta\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldseta_x( 0b11111000101[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldseta_x.var format : {char const*} = {"base,1631"};

ldseta_x.disasm = {
  sink << "ldseta\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetab_w( 0b00111000101[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetab_w.var format : {char const*} = {"base,1507"};

ldsetab_w.disasm = {
  sink << "ldsetab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetah_w( 0b01111000101[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetah_w.var format : {char const*} = {"base,1508"};

ldsetah_w.disasm = {
  sink << "ldsetah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetal_w( 0b10111000111[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetal_w.var format : {char const*} = {"base,1509"};

ldsetal_w.disasm = {
  sink << "ldsetal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetal_x( 0b11111000111[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetal_x.var format : {char const*} = {"base,1632"};

ldsetal_x.disasm = {
  sink << "ldsetal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetalb_w( 0b00111000111[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetalb_w.var format : {char const*} = {"base,1510"};

ldsetalb_w.disasm = {
  sink << "ldsetalb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetalh_w( 0b01111000111[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetalh_w.var format : {char const*} = {"base,1511"};

ldsetalh_w.disasm = {
  sink << "ldsetalh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetb_w( 0b00111000001[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1567"};

ldsetb_w.disasm = {
  sink << "ldsetb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldseth_w( 0b01111000001[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldseth_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1568"};

ldseth_w.disasm = {
  sink << "ldseth\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetl_w( 0b10111000011[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetl_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1569"};

ldsetl_w.disasm = {
  sink << "ldsetl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetl_x( 0b11111000011[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetl_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1652"};

ldsetl_x.disasm = {
  sink << "ldsetl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetlb_w( 0b00111000011[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetlb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1570"};

ldsetlb_w.disasm = {
  sink << "ldsetlb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsetlh_w( 0b01111000011[11] : rs[5] : 0b001100[6] : rn[5] : rt[5] );
ldsetlh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1571"};

ldsetlh_w.disasm = {
  sink << "ldsetlh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmax_w( 0b10111000001[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmax_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1572"};

ldsmax_w.disasm = {
  sink << "ldsmax\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmax_x( 0b11111000001[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmax_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1653"};

ldsmax_x.disasm = {
  sink << "ldsmax\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxa_w( 0b10111000101[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxa_w.var format : {char const*} = {"base,1512"};

ldsmaxa_w.disasm = {
  sink << "ldsmaxa\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxa_x( 0b11111000101[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxa_x.var format : {char const*} = {"base,1633"};

ldsmaxa_x.disasm = {
  sink << "ldsmaxa\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxab_w( 0b00111000101[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxab_w.var format : {char const*} = {"base,1513"};

ldsmaxab_w.disasm = {
  sink << "ldsmaxab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxah_w( 0b01111000101[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxah_w.var format : {char const*} = {"base,1514"};

ldsmaxah_w.disasm = {
  sink << "ldsmaxah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxal_w( 0b10111000111[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxal_w.var format : {char const*} = {"base,1515"};

ldsmaxal_w.disasm = {
  sink << "ldsmaxal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxal_x( 0b11111000111[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxal_x.var format : {char const*} = {"base,1634"};

ldsmaxal_x.disasm = {
  sink << "ldsmaxal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxalb_w( 0b00111000111[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxalb_w.var format : {char const*} = {"base,1516"};

ldsmaxalb_w.disasm = {
  sink << "ldsmaxalb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxalh_w( 0b01111000111[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxalh_w.var format : {char const*} = {"base,1517"};

ldsmaxalh_w.disasm = {
  sink << "ldsmaxalh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxb_w( 0b00111000001[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1573"};

ldsmaxb_w.disasm = {
  sink << "ldsmaxb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxh_w( 0b01111000001[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1574"};

ldsmaxh_w.disasm = {
  sink << "ldsmaxh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxl_w( 0b10111000011[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxl_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1575"};

ldsmaxl_w.disasm = {
  sink << "ldsmaxl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxl_x( 0b11111000011[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxl_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1654"};

ldsmaxl_x.disasm = {
  sink << "ldsmaxl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxlb_w( 0b00111000011[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxlb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1576"};

ldsmaxlb_w.disasm = {
  sink << "ldsmaxlb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmaxlh_w( 0b01111000011[11] : rs[5] : 0b010000[6] : rn[5] : rt[5] );
ldsmaxlh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1577"};

ldsmaxlh_w.disasm = {
  sink << "ldsmaxlh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmin_w( 0b10111000001[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsmin_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1578"};

ldsmin_w.disasm = {
  sink << "ldsmin\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmin_x( 0b11111000001[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsmin_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1655"};

ldsmin_x.disasm = {
  sink << "ldsmin\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmina_w( 0b10111000101[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsmina_w.var format : {char const*} = {"base,1518"};

ldsmina_w.disasm = {
  sink << "ldsmina\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsmina_x( 0b11111000101[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsmina_x.var format : {char const*} = {"base,1635"};

ldsmina_x.disasm = {
  sink << "ldsmina\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminab_w( 0b00111000101[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminab_w.var format : {char const*} = {"base,1519"};

ldsminab_w.disasm = {
  sink << "ldsminab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminah_w( 0b01111000101[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminah_w.var format : {char const*} = {"base,1520"};

ldsminah_w.disasm = {
  sink << "ldsminah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminal_w( 0b10111000111[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminal_w.var format : {char const*} = {"base,1521"};

ldsminal_w.disasm = {
  sink << "ldsminal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminal_x( 0b11111000111[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminal_x.var format : {char const*} = {"base,1636"};

ldsminal_x.disasm = {
  sink << "ldsminal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminalb_w( 0b00111000111[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminalb_w.var format : {char const*} = {"base,1522"};

ldsminalb_w.disasm = {
  sink << "ldsminalb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminalh_w( 0b01111000111[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminalh_w.var format : {char const*} = {"base,1523"};

ldsminalh_w.disasm = {
  sink << "ldsminalh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminb_w( 0b00111000001[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1579"};

ldsminb_w.disasm = {
  sink << "ldsminb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminh_w( 0b01111000001[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1580"};

ldsminh_w.disasm = {
  sink << "ldsminh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminl_w( 0b10111000011[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminl_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1581"};

ldsminl_w.disasm = {
  sink << "ldsminl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminl_x( 0b11111000011[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminl_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1656"};

ldsminl_x.disasm = {
  sink << "ldsminl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminlb_w( 0b00111000011[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminlb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1582"};

ldsminlb_w.disasm = {
  sink << "ldsminlb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldsminlh_w( 0b01111000011[11] : rs[5] : 0b010100[6] : rn[5] : rt[5] );
ldsminlh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1583"};

ldsminlh_w.disasm = {
  sink << "ldsminlh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldtr_wbo( 0b10111000010[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtr_wbo.var format : {char const*} = {"base,297"};

ldtr_wbo.disasm = {
  sink << "ldtr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldtr_xbo( 0b11111000010[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtr_xbo.var format : {char const*} = {"base,334"};

ldtr_xbo.disasm = {
  sink << "ldtr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldtrb_wbo( 0b00111000010[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtrb_wbo.var format : {char const*} = {"base,298"};

ldtrb_wbo.disasm = {
  sink << "ldtrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldtrh_wbo( 0b01111000010[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtrh_wbo.var format : {char const*} = {"base,299"};

ldtrh_wbo.disasm = {
  sink << "ldtrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldtrsb_wbo( 0b00111000110[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtrsb_wbo.var format : {char const*} = {"base,300"};

ldtrsb_wbo.disasm = {
  sink << "ldtrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldtrsb_xbo( 0b00111000100[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtrsb_xbo.var format : {char const*} = {"base,335"};

ldtrsb_xbo.disasm = {
  sink << "ldtrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldtrsh_wbo( 0b01111000110[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtrsh_wbo.var format : {char const*} = {"base,301"};

ldtrsh_wbo.disasm = {
  sink << "ldtrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldtrsh_xbo( 0b01111000100[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtrsh_xbo.var format : {char const*} = {"base,336"};

ldtrsh_xbo.disasm = {
  sink << "ldtrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldtrsw_xbo( 0b10111000100[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
ldtrsw_xbo.var format : {char const*} = {"base,337"};

ldtrsw_xbo.disasm = {
  sink << "ldtrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldumax_w( 0b10111000001[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumax_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1584"};

ldumax_w.disasm = {
  sink << "ldumax\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumax_x( 0b11111000001[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumax_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1657"};

ldumax_x.disasm = {
  sink << "ldumax\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxa_w( 0b10111000101[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxa_w.var format : {char const*} = {"base,1524"};

ldumaxa_w.disasm = {
  sink << "ldumaxa\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxa_x( 0b11111000101[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxa_x.var format : {char const*} = {"base,1637"};

ldumaxa_x.disasm = {
  sink << "ldumaxa\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxab_w( 0b00111000101[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxab_w.var format : {char const*} = {"base,1525"};

ldumaxab_w.disasm = {
  sink << "ldumaxab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxah_w( 0b01111000101[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxah_w.var format : {char const*} = {"base,1526"};

ldumaxah_w.disasm = {
  sink << "ldumaxah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxal_w( 0b10111000111[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxal_w.var format : {char const*} = {"base,1527"};

ldumaxal_w.disasm = {
  sink << "ldumaxal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxal_x( 0b11111000111[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxal_x.var format : {char const*} = {"base,1638"};

ldumaxal_x.disasm = {
  sink << "ldumaxal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxalb_w( 0b00111000111[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxalb_w.var format : {char const*} = {"base,1528"};

ldumaxalb_w.disasm = {
  sink << "ldumaxalb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxalh_w( 0b01111000111[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxalh_w.var format : {char const*} = {"base,1529"};

ldumaxalh_w.disasm = {
  sink << "ldumaxalh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxb_w( 0b00111000001[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1585"};

ldumaxb_w.disasm = {
  sink << "ldumaxb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxh_w( 0b01111000001[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1586"};

ldumaxh_w.disasm = {
  sink << "ldumaxh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxl_w( 0b10111000011[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxl_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1587"};

ldumaxl_w.disasm = {
  sink << "ldumaxl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxl_x( 0b11111000011[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxl_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1658"};

ldumaxl_x.disasm = {
  sink << "ldumaxl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxlb_w( 0b00111000011[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxlb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1588"};

ldumaxlb_w.disasm = {
  sink << "ldumaxlb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumaxlh_w( 0b01111000011[11] : rs[5] : 0b011000[6] : rn[5] : rt[5] );
ldumaxlh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1589"};

ldumaxlh_w.disasm = {
  sink << "ldumaxlh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumin_w( 0b10111000001[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
ldumin_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1590"};

ldumin_w.disasm = {
  sink << "ldumin\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumin_x( 0b11111000001[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
ldumin_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1659"};

ldumin_x.disasm = {
  sink << "ldumin\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumina_w( 0b10111000101[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
ldumina_w.var format : {char const*} = {"base,1530"};

ldumina_w.disasm = {
  sink << "ldumina\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldumina_x( 0b11111000101[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
ldumina_x.var format : {char const*} = {"base,1639"};

ldumina_x.disasm = {
  sink << "ldumina\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminab_w( 0b00111000101[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminab_w.var format : {char const*} = {"base,1531"};

lduminab_w.disasm = {
  sink << "lduminab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminah_w( 0b01111000101[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminah_w.var format : {char const*} = {"base,1532"};

lduminah_w.disasm = {
  sink << "lduminah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminal_w( 0b10111000111[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminal_w.var format : {char const*} = {"base,1533"};

lduminal_w.disasm = {
  sink << "lduminal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminal_x( 0b11111000111[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminal_x.var format : {char const*} = {"base,1640"};

lduminal_x.disasm = {
  sink << "lduminal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminalb_w( 0b00111000111[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminalb_w.var format : {char const*} = {"base,1534"};

lduminalb_w.disasm = {
  sink << "lduminalb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminalh_w( 0b01111000111[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminalh_w.var format : {char const*} = {"base,1535"};

lduminalh_w.disasm = {
  sink << "lduminalh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminb_w( 0b00111000001[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1591"};

lduminb_w.disasm = {
  sink << "lduminb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminh_w( 0b01111000001[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1592"};

lduminh_w.disasm = {
  sink << "lduminh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminl_w( 0b10111000011[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminl_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1593"};

lduminl_w.disasm = {
  sink << "lduminl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminl_x( 0b11111000011[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminl_x.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1660"};

lduminl_x.disasm = {
  sink << "lduminl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminlb_w( 0b00111000011[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminlb_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1594"};

lduminlb_w.disasm = {
  sink << "lduminlb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lduminlh_w( 0b01111000011[11] : rs[5] : 0b011100[6] : rn[5] : rt[5] );
lduminlh_w.var reject : {Reject} = {rt==31}, format : {char const*} = {"base,1595"};

lduminlh_w.disasm = {
  sink << "lduminlh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldur_wbo( 0b10111000010[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldur_wbo.var format : {char const*} = {"base,295"};

ldur_wbo.disasm = {
  sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldur_xbo( 0b11111000010[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldur_xbo.var format : {char const*} = {"base,332"};

ldur_xbo.disasm = {
  sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldurb_wbo( 0b00111000010[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldurb_wbo.var format : {char const*} = {"base,305"};

ldurb_wbo.disasm = {
  sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldurh_wbo( 0b01111000010[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldurh_wbo.var format : {char const*} = {"base,308"};

ldurh_wbo.disasm = {
  sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldursb_wbo( 0b00111000110[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldursb_wbo.var format : {char const*} = {"base,306"};

ldursb_wbo.disasm = {
  sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldursb_xbo( 0b00111000100[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldursb_xbo.var format : {char const*} = {"base,339"};

ldursb_xbo.disasm = {
  sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldursh_wbo( 0b01111000110[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldursh_wbo.var format : {char const*} = {"base,309"};

ldursh_wbo.disasm = {
  sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldursh_xbo( 0b01111000100[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldursh_xbo.var format : {char const*} = {"base,340"};

ldursh_xbo.disasm = {
  sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldursw_xbo( 0b10111000100[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
ldursw_xbo.var format : {char const*} = {"base,331"};

ldursw_xbo.disasm = {
  sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op ldxp_w( 0b10001000011[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
ldxp_w.var format : {char const*} = {"base,221"};

ldxp_w.disasm = {
  sink << "ldxp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]";
};

op ldxp_x( 0b11001000011[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
ldxp_x.var format : {char const*} = {"base,244"};

ldxp_x.disasm = {
  sink << "ldxp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]";
};

op ldxr_wx( 0b10001000010[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
ldxr_wx.var format : {char const*} = {"base,229"};

ldxr_wx.disasm = {
  sink << "ldxr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldxr_x( 0b11001000010[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
ldxr_x.var format : {char const*} = {"base,246"};

ldxr_x.disasm = {
  sink << "ldxr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldxrb_wx( 0b00001000010[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
ldxrb_wx.var format : {char const*} = {"base,230"};

ldxrb_wx.disasm = {
  sink << "ldxrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op ldxrh_wx( 0b01001000010[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
ldxrh_wx.var format : {char const*} = {"base,231"};

ldxrh_wx.disasm = {
  sink << "ldxrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op lsl_www( 0b00011010110[11] : rm[5] : 0b001000[6] : rn[5] : rd[5] );
lsl_www.var format : {char const*} = {"base,1467"};

lsl_www.disasm = {
  sink << "lsl\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op lsl_xxx( 0b10011010110[11] : rm[5] : 0b001000[6] : rn[5] : rd[5] );
lsl_xxx.var format : {char const*} = {"base,1615"};

lsl_xxx.disasm = {
  sink << "lsl\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op lsr_www( 0b00011010110[11] : rm[5] : 0b001001[6] : rn[5] : rd[5] );
lsr_www.var format : {char const*} = {"base,1468"};

lsr_www.disasm = {
  sink << "lsr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op lsr_xxx( 0b10011010110[11] : rm[5] : 0b001001[6] : rn[5] : rd[5] );
lsr_xxx.var format : {char const*} = {"base,1616"};

lsr_xxx.disasm = {
  sink << "lsr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op madd_w( 0b00011011000[11] : rm[5] : 0b0[1] : ra[5] : rn[5] : rd[5] );
madd_w.var format : {char const*} = {"base,166"};

madd_w.disasm = {
  if (ra == 31)
    sink << "mul\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
  else
    sink << "madd\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZWR(ra);
};

op madd_x( 0b10011011000[11] : rm[5] : 0b0[1] : ra[5] : rn[5] : rd[5] );
madd_x.var format : {char const*} = {"base,241"};

madd_x.disasm = {
  if (ra == 31)
    sink << "mul\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
  else
    sink << "madd\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmGZXR(ra);
};

op mov_wi( 0b0[1] : sext n[1] : 0b01001010[8] : shl<4> shift[1] : imm0[16] : rd[5] );
mov_wi.var imm : {uint32_t} = {(uint32_t(imm0) << shift)^~int32_t(n)}, format : {char const*} = {"base,19"};

mov_wi.disasm = {
  sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmI(imm,16);
};

mov_wi.execute = {
  cpu.SetGZR( rd, typename ARCH::U64(imm) );
};

op mov_xi( 0b1[1] : sext n[1] : 0b0100101[7] : shl<4> shift[2] : imm0[16] : rd[5] );
mov_xi.var imm : {uint64_t} = {(uint64_t(imm0) << shift)^~int64_t(n)}, format : {char const*} = {"base,7"};

mov_xi.disasm = {
  sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmI(imm,16);
};

mov_xi.execute = {
  cpu.SetGZR( rd, typename ARCH::U64(imm) );
};

op movk_w( 0b0111001010[10] : shl<4> shift[1] : imm[16] : rd[5] );
movk_w.var format : {char const*} = {"base,69"};

movk_w.disasm = {
  sink << "movk\t" << DisasmGZWR(rd) << ", " << DisasmI(imm,16) << DisasmINZ(", lsl ",shift);
};

op movk_x( 0b111100101[9] : shl<4> shift[2] : imm[16] : rd[5] );
movk_x.var format : {char const*} = {"base,25"};

movk_x.disasm = {
  sink << "movk\t" << DisasmGZXR(rd) << ", " << DisasmI(imm,16) << DisasmINZ(", lsl ",shift);
};

op mrs_reg( 0b110101010011[12] : sysreg[15] : rt[5] );
mrs_reg.var format : {char const*} = {"base,249"};

mrs_reg.disasm = {
  sink << "mrs\t" << DisasmGZXR(rt) << ", " << DisasmI(sysreg,16);
};

op msr_imm( 0b1101010100000[13] : ?[3] : 0b0100[4] : imm[4] : ?[8] );
msr_imm.var format : {char const*} = {"base,1794"};

msr_imm.disasm = {
  sink << "msr\t<pstatefield>" << DisasmI(imm);
};

op msr_reg( 0b110101010001[12] : sysreg[15] : rt[5] );
msr_reg.var format : {char const*} = {"base,248"};

msr_reg.disasm = {
  sink << "msr\t" << DisasmI(sysreg,16) << ", " << DisasmGZXR(rt);
};

op msub_w( 0b00011011000[11] : rm[5] : 0b1[1] : ra[5] : rn[5] : rd[5] );
msub_w.var format : {char const*} = {"base,167"};

msub_w.disasm = {
  if (ra == 31)
    sink << "mneg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
  else
    sink << "msub\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZWR(ra);
};

op msub_x( 0b10011011000[11] : rm[5] : 0b1[1] : ra[5] : rn[5] : rd[5] );
msub_x.var format : {char const*} = {"base,242"};

msub_x.disasm = {
  if (ra == 31)
    sink << "mneg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
  else
    sink << "msub\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmGZXR(ra);
};

op nop( 0b11010101000000110010000000011111[32] );
nop.var format : {char const*} = {"base,2948"};

nop.disasm = {
  sink << "nop";
};

op orn_wlsl( 0b00101010001[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
orn_wlsl.var format : {char const*} = {"base,185"};

orn_wlsl.disasm = {
  if (rn == 31)
    sink << "mvn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "orn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op orn_wlsr( 0b00101010011[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
orn_wlsr.var format : {char const*} = {"base,200"};

orn_wlsr.disasm = {
  if (rn == 31)
    sink << "mvn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "orn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

orn_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | ~(op2 >> imm);
  cpu.SetGZR(rd, res);
};

op orn_wasr( 0b00101010101[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
orn_wasr.var format : {char const*} = {"base,176"};

orn_wasr.disasm = {
  if (rn == 31)
    sink << "mvn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "orn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

orn_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | ~U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op orn_wror( 0b00101010111[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
orn_wror.var format : {char const*} = {"base,211"};

orn_wror.disasm = {
  if (rn == 31)
    sink << "mvn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
  else
    sink << "orn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
};

op orn_xlsl( 0b10101010001[11] : rm[5] : imm[6] : rn[5] : rd[5] );
orn_xlsl.var format : {char const*} = {"base,131"};

orn_xlsl.disasm = {
  if (rn == 31)
    sink << "mvn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "orn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op orn_xlsr( 0b10101010011[11] : rm[5] : imm[6] : rn[5] : rd[5] );
orn_xlsr.var format : {char const*} = {"base,140"};

orn_xlsr.disasm = {
  if (rn == 31)
    sink << "mvn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "orn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

orn_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | ~(op2 >> imm);
  cpu.SetGZR(rd, res);
};

op orn_xasr( 0b10101010101[11] : rm[5] : imm[6] : rn[5] : rd[5] );
orn_xasr.var format : {char const*} = {"base,116"};

orn_xasr.disasm = {
  if (rn == 31)
    sink << "mvn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "orn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

orn_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | ~U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op orn_xror( 0b10101010111[11] : rm[5] : imm[6] : rn[5] : rd[5] );
orn_xror.var format : {char const*} = {"base,151"};

orn_xror.disasm = {
  if (rn == 31)
    sink << "mvn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
  else
    sink << "orn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
};

op orr_wi( 0b0011001000[10] : immr[6] : imms[6] : rn[5] : rd[5] );
orr_wi.var imm : {uint32_t} = {DecodeBitMasks(0,imms,immr).wmask}, format : {char const*} = {"base,70"};

orr_wi.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGSWR(rd) << ", " << DisasmI(imm,16);
  else
    sink << "orr\t" << DisasmGSWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
};

/*******************************************************************
 * ORR (shifted register)
 *
 * Bitwise inclusive OR (shifted register): Rd = Rn OR shift(Rm, amount)
 */

op orr_wlsl( 0b00101010000[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
orr_wlsl.var format : {char const*} = {"base,193"};

orr_wlsl.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "orr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

orr_wlsl.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | (op2 << imm);
  cpu.SetGZR(rd, res);
};

op orr_xlsl( 0b10101010000[11] : rm[5] : imm[6] : rn[5] : rd[5] );
orr_xlsl.var format : {char const*} = {"base,132"};

orr_xlsl.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "orr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

orr_xlsl.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | (op2 << imm);
  cpu.SetGZR(rd, res);
};

op orr_wlsr( 0b00101010010[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
orr_wlsr.var format : {char const*} = {"base,203"};

orr_wlsr.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "orr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

orr_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op orr_xlsr( 0b10101010010[11] : rm[5] : imm[6] : rn[5] : rd[5] );
orr_xlsr.var format : {char const*} = {"base,143"};

orr_xlsr.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "orr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

orr_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op orr_wasr( 0b00101010100[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
orr_wasr.var format : {char const*} = {"base,179"};

orr_wasr.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "orr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

orr_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op orr_xasr( 0b10101010100[11] : rm[5] : imm[6] : rn[5] : rd[5] );
orr_xasr.var format : {char const*} = {"base,119"};

orr_xasr.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "orr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

orr_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op orr_wror( 0b00101010110[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
orr_wror.var format : {char const*} = {"base,212"};

orr_wror.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
  else
    sink << "orr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
};

orr_wror.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | RotateRight( op2, imm );
  cpu.SetGZR(rd, res);
};

op orr_xror( 0b10101010110[11] : rm[5] : imm[6] : rn[5] : rd[5] );
orr_xror.var format : {char const*} = {"base,152"};

orr_xror.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
  else
    sink << "orr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
};

orr_xror.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 | RotateRight( op2, imm );
  cpu.SetGZR(rd, res);
};

/*
 * end of ORR (shifted register)
 *******************************************************************/

op orr_xi( 0b101100100[9] : n[1] : immr[6] : imms[6] : rn[5] : rd[5] );
orr_xi.var imm : {uint64_t} = {DecodeBitMasks(n,imms,immr).wmask}, format : {char const*} = {"base,28"};

orr_xi.disasm = {
  if (rn == 31)
    sink << "mov\t" << DisasmGSXR(rd) << ", " << DisasmI(imm,16);
  else
    sink << "orr\t" << DisasmGSXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
};

op prfm_lit( 0b11011000[8] : shl<2> sext imm[19] : rt[5] );
prfm_lit.var format : {char const*} = {"base,8"};

prfm_lit.disasm = {
  sink << "prfm\t" << DisasmI(rt,16) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

op prfm_xi( 0b1111100110[10] : shl<3> imm[12] : rn[5] : rt[5] );
prfm_xi.var format : {char const*} = {"base,34"};

prfm_xi.disasm = {
  sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op prfm_xws( 0b11111000101[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
prfm_xws.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,581"};

prfm_xws.disasm = {
  sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op prfm_xwu( 0b11111000101[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
prfm_xwu.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,582"};

prfm_xwu.disasm = {
  sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op prfm_xxl( 0b11111000101[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
prfm_xxl.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,583"};

prfm_xxl.disasm = {
  sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op prfm_xxs( 0b11111000101[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
prfm_xxs.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,584"};

prfm_xxs.disasm = {
  sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op prfum( 0b11111000100[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
prfum.var format : {char const*} = {"base,258"};

prfum.disasm = {
  sink << "prfum\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op rbit_w( 0b0101101011000000000000[22] : rn[5] : rd[5] );
rbit_w.var format : {char const*} = {"base,2617"};

rbit_w.disasm = {
  sink << "rbit\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
};

op ret( 0b1101011001011111000000[22] : rn[5] : 0b00000[5] );
ret.var format : {char const*} = {"base,2888"};

ret.disasm = {
  if (rn == 30)
    sink << "ret";
  else
    sink << "ret\t" << DisasmGZXR(rn);
};

op rev16_w( 0b0101101011000000000001[22] : rn[5] : rd[5] );
rev16_w.var format : {char const*} = {"base,2619"};

rev16_w.disasm = {
  sink << "rev16\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
};

op rev16_x( 0b1101101011000000000001[22] : rn[5] : rd[5] );
rev16_x.var format : {char const*} = {"base,2651"};

rev16_x.disasm = {
  sink << "rev16\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
};

op rev32_x( 0b1101101011000000000010[22] : rn[5] : rd[5] );
rev32_x.var format : {char const*} = {"base,2652"};

rev32_x.disasm = {
  sink << "rev32\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
};

op rev_w( 0b0101101011000000000010[22] : rn[5] : rd[5] );
rev_w.var format : {char const*} = {"base,2618"};

rev_w.disasm = {
  sink << "rev\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
};

op rev_x( 0b1101101011000000000011[22] : rn[5] : rd[5] );
rev_x.var format : {char const*} = {"base,2653"};

rev_x.disasm = {
  sink << "rev\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
};

op ror_www( 0b00011010110[11] : rm[5] : 0b001011[6] : rn[5] : rd[5] );
ror_www.var format : {char const*} = {"base,1469"};

ror_www.disasm = {
  sink << "ror\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op ror_xxx( 0b10011010110[11] : rm[5] : 0b001011[6] : rn[5] : rd[5] );
ror_xxx.var format : {char const*} = {"base,1617"};

ror_xxx.disasm = {
  sink << "ror\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op sbc_www( 0b01011010000[11] : rm[5] : 0b000000[6] : rn[5] : rd[5] );
sbc_www.var format : {char const*} = {"base,1472"};

sbc_www.disasm = {
  if (rn == 31)
    sink << "ngc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm);
  else
    sink << "sbc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op sbc_xxx( 0b11011010000[11] : rm[5] : 0b000000[6] : rn[5] : rd[5] );
sbc_xxx.var format : {char const*} = {"base,1620"};

sbc_xxx.disasm = {
  if (rn == 31)
    sink << "ngc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm);
  else
    sink << "sbc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op sbcs_www( 0b01111010000[11] : rm[5] : 0b000000[6] : rn[5] : rd[5] );
sbcs_www.var format : {char const*} = {"base,1473"};

sbcs_www.disasm = {
  if (rn == 31)
    sink << "ngcs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm);
  else
    sink << "sbcs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op sbcs_xxx( 0b11111010000[11] : rm[5] : 0b000000[6] : rn[5] : rd[5] );
sbcs_xxx.var format : {char const*} = {"base,1619"};

sbcs_xxx.disasm = {
  if (rn == 31)
    sink << "ngcs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm);
  else
    sink << "sbcs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op sbfm_w( 0b00010011000[11] : immr[5] : 0b0[1] : imms[5] : rn[5] : rd[5] );
sbfm_w.var format : {char const*} = {"base,163"};

sbfm_w.disasm = {
  if (imms == 0b11111)
    sink << "asr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr);
  else if (imms < immr)
    sink << "sbfiz\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(-immr&31) << ", " << DisasmI(imms+1);
  else if ((immr == 0) and (imms == 0b00111))
    sink << "sxtb\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
  else if ((immr == 0) and (imms == 0b01111))
    sink << "sxth\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
  else
    sink << "sbfx\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
};

op sbfm_x( 0b1001001101[10] : immr[6] : imms[6] : rn[5] : rd[5] );
sbfm_x.var format : {char const*} = {"base,91"};

sbfm_x.disasm = {
  if (imms == 0b111111)
    sink << "asr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr);
  else if (imms < immr)
    sink << "sbfiz\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(-immr&63) << ", " << DisasmI(imms+1);
  else if ((immr == 0) and (imms == 0b000111))
    sink << "sxtb\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
  else if ((immr == 0) and (imms == 0b001111))
    sink << "sxth\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
  else if ((immr == 0) and (imms == 0b011111))
    sink << "sxtw\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
  else
    sink << "sbfx\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
};

op sdiv_www( 0b00011010110[11] : rm[5] : 0b000011[6] : rn[5] : rd[5] );
sdiv_www.var format : {char const*} = {"base,1470"};

sdiv_www.disasm = {
  sink << "sdiv\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op sev( 0b11010101000000110010000010011111[32] );
sev.var format : {char const*} = {"base,2949"};

sev.disasm = {
  sink << "sev";
};

op sevl( 0b11010101000000110010000010111111[32] );
sevl.var format : {char const*} = {"base,2950"};

sevl.disasm = {
  sink << "sevl";
};

op smaddl_xw( 0b10011011001[11] : rm[5] : 0b0[1] : ra[5] : rn[5] : rd[5] );
smaddl_xw.var format : {char const*} = {"base,235"};

smaddl_xw.disasm = {
  if (ra == 31)
    sink << "smull\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
  else
    sink << "smaddl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZXR(ra);
};

op smc( 0b11010100000[11] : imm[16] : 0b00011[5] );
smc.var format : {char const*} = {"base,576"};

smc.disasm = {
  sink << "smc\t" << DisasmI(imm,16);
};

op smsubl_xw( 0b10011011001[11] : rm[5] : 0b1[1] : ra[5] : rn[5] : rd[5] );
smsubl_xw.var format : {char const*} = {"base,236"};

smsubl_xw.disasm = {
  if (ra == 31)
    sink << "smnegl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
  else
    sink << "smsubl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZXR(ra);
};

op smulh( 0b10011011010[11] : rm[5] : 0b0[1] : ra[5] : rn[5] : rd[5] );
smulh.var format : {char const*} = {"base,239"};

smulh.disasm = {
  sink << "smulh\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op stadd_w( 0b10111000001[11] : rt[5] : 0b000000[6] : rn[5] : 0b11111[5] );
stadd_w.var format : {char const*} = {"base,2097"};

stadd_w.disasm = {
  sink << "stadd\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stadd_x( 0b11111000001[11] : rt[5] : 0b000000[6] : rn[5] : 0b11111[5] );
stadd_x.var format : {char const*} = {"base,2145"};

stadd_x.disasm = {
  sink << "stadd\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op staddb_w( 0b00111000001[11] : rt[5] : 0b000000[6] : rn[5] : 0b11111[5] );
staddb_w.var format : {char const*} = {"base,2098"};

staddb_w.disasm = {
  sink << "staddb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op staddh_w( 0b01111000001[11] : rt[5] : 0b000000[6] : rn[5] : 0b11111[5] );
staddh_w.var format : {char const*} = {"base,2099"};

staddh_w.disasm = {
  sink << "staddh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op staddl_w( 0b10111000011[11] : rt[5] : 0b000000[6] : rn[5] : 0b11111[5] );
staddl_w.var format : {char const*} = {"base,2100"};

staddl_w.disasm = {
  sink << "staddl\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op staddl_x( 0b11111000011[11] : rt[5] : 0b000000[6] : rn[5] : 0b11111[5] );
staddl_x.var format : {char const*} = {"base,2146"};

staddl_x.disasm = {
  sink << "staddl\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op staddlb_w( 0b00111000011[11] : rt[5] : 0b000000[6] : rn[5] : 0b11111[5] );
staddlb_w.var format : {char const*} = {"base,2101"};

staddlb_w.disasm = {
  sink << "staddlb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op staddlh_w( 0b01111000011[11] : rt[5] : 0b000000[6] : rn[5] : 0b11111[5] );
staddlh_w.var format : {char const*} = {"base,2102"};

staddlh_w.disasm = {
  sink << "staddlh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stclr_w( 0b10111000001[11] : rt[5] : 0b000100[6] : rn[5] : 0b11111[5] );
stclr_w.var format : {char const*} = {"base,2103"};

stclr_w.disasm = {
  sink << "stclr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stclr_x( 0b11111000001[11] : rt[5] : 0b000100[6] : rn[5] : 0b11111[5] );
stclr_x.var format : {char const*} = {"base,2147"};

stclr_x.disasm = {
  sink << "stclr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stclrb_w( 0b00111000001[11] : rt[5] : 0b000100[6] : rn[5] : 0b11111[5] );
stclrb_w.var format : {char const*} = {"base,2104"};

stclrb_w.disasm = {
  sink << "stclrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stclrh_w( 0b01111000001[11] : rt[5] : 0b000100[6] : rn[5] : 0b11111[5] );
stclrh_w.var format : {char const*} = {"base,2105"};

stclrh_w.disasm = {
  sink << "stclrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stclrl_w( 0b10111000011[11] : rt[5] : 0b000100[6] : rn[5] : 0b11111[5] );
stclrl_w.var format : {char const*} = {"base,2106"};

stclrl_w.disasm = {
  sink << "stclrl\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stclrl_x( 0b11111000011[11] : rt[5] : 0b000100[6] : rn[5] : 0b11111[5] );
stclrl_x.var format : {char const*} = {"base,2148"};

stclrl_x.disasm = {
  sink << "stclrl\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stclrlb_w( 0b00111000011[11] : rt[5] : 0b000100[6] : rn[5] : 0b11111[5] );
stclrlb_w.var format : {char const*} = {"base,2107"};

stclrlb_w.disasm = {
  sink << "stclrlb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stclrlh_w( 0b01111000011[11] : rt[5] : 0b000100[6] : rn[5] : 0b11111[5] );
stclrlh_w.var format : {char const*} = {"base,2108"};

stclrlh_w.disasm = {
  sink << "stclrlh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op steor_w( 0b10111000001[11] : rt[5] : 0b001000[6] : rn[5] : 0b11111[5] );
steor_w.var format : {char const*} = {"base,2109"};

steor_w.disasm = {
  sink << "steor\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op steor_x( 0b11111000001[11] : rt[5] : 0b001000[6] : rn[5] : 0b11111[5] );
steor_x.var format : {char const*} = {"base,2149"};

steor_x.disasm = {
  sink << "steor\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op steorb_w( 0b00111000001[11] : rt[5] : 0b001000[6] : rn[5] : 0b11111[5] );
steorb_w.var format : {char const*} = {"base,2110"};

steorb_w.disasm = {
  sink << "steorb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op steorh_w( 0b01111000001[11] : rt[5] : 0b001000[6] : rn[5] : 0b11111[5] );
steorh_w.var format : {char const*} = {"base,2111"};

steorh_w.disasm = {
  sink << "steorh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op steorl_w( 0b10111000011[11] : rt[5] : 0b001000[6] : rn[5] : 0b11111[5] );
steorl_w.var format : {char const*} = {"base,2112"};

steorl_w.disasm = {
  sink << "steorl\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op steorl_x( 0b11111000011[11] : rt[5] : 0b001000[6] : rn[5] : 0b11111[5] );
steorl_x.var format : {char const*} = {"base,2150"};

steorl_x.disasm = {
  sink << "steorl\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op steorlb_w( 0b00111000011[11] : rt[5] : 0b001000[6] : rn[5] : 0b11111[5] );
steorlb_w.var format : {char const*} = {"base,2113"};

steorlb_w.disasm = {
  sink << "steorlb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op steorlh_w( 0b01111000011[11] : rt[5] : 0b001000[6] : rn[5] : 0b11111[5] );
steorlh_w.var format : {char const*} = {"base,2114"};

steorlh_w.disasm = {
  sink << "steorlh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stlr_wx( 0b10001000100[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlr_wx.var format : {char const*} = {"base,232"};

stlr_wx.disasm = {
  sink << "stlr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stlr_x( 0b11001000100[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlr_x.var format : {char const*} = {"base,247"};

stlr_x.disasm = {
  sink << "stlr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stlrb_wx( 0b00001000100[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlrb_wx.var format : {char const*} = {"base,233"};

stlrb_wx.disasm = {
  sink << "stlrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stlrh_wx( 0b01001000100[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlrh_wx.var format : {char const*} = {"base,234"};

stlrh_wx.disasm = {
  sink << "stlrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stlxp_w( 0b10001000001[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlxp_w.var format : {char const*} = {"base,168"};

stlxp_w.disasm = {
  sink << "stlxp\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]";
};

op stlxp_x( 0b11001000001[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlxp_x.var format : {char const*} = {"base,222"};

stlxp_x.disasm = {
  sink << "stlxp\t" << DisasmGZWR(rs) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]";
};

op stlxr_w( 0b10001000000[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlxr_w.var format : {char const*} = {"base,214"};

stlxr_w.disasm = {
  sink << "stlxr\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stlxr_x( 0b11001000000[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlxr_x.var format : {char const*} = {"base,224"};

stlxr_x.disasm = {
  sink << "stlxr\t" << DisasmGZWR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stlxrb_w( 0b00001000000[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlxrb_w.var format : {char const*} = {"base,215"};

stlxrb_w.disasm = {
  sink << "stlxrb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stlxrh_w( 0b01001000000[11] : rs[5] : 0b1[1] : rt2[5] : rn[5] : rt[5] );
stlxrh_w.var format : {char const*} = {"base,216"};

stlxrh_w.disasm = {
  sink << "stlxrh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stnp_wo( 0b0010100000[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
stnp_wo.var format : {char const*} = {"base,76"};

stnp_wo.disasm = {
  sink << "stnp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op stnp_xo( 0b1010100000[10] : shl<3> sext imm[7] : rt2[5] : rn[5] : rt[5] );
stnp_xo.var format : {char const*} = {"base,96"};

stnp_xo.disasm = {
  sink << "stnp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

/*******************************************************************
 * STP
 * 
 * Store pair of registers
 */

op stp_wo( 0b0010100100[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
stp_wo.var format : {char const*} = {"base,77"};

stp_wo.disasm = {
  sink << "stp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

stp_wo.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 addr( cpu.GetGSR(rn) + U64(S64(imm)) );
  U32 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
  cpu.MemWrite32( addr + U64(0), data0 );
  cpu.MemWrite32( addr + U64(4), data1 );
};

op stp_xo( 0b1010100100[10] : shl<3> sext imm[7] : rt2[5] : rn[5] : rt[5] );
stp_xo.var format : {char const*} = {"base,97"};

stp_xo.disasm = {
  sink << "stp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

stp_xo.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 addr( cpu.GetGSR(rn) + U64(S64(imm)) );
  U64 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
  cpu.MemWrite64( addr + U64(0), data0 );
  cpu.MemWrite64( addr + U64(8), data1 );
};

op stp_wop( 0b0010100110[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
stp_wop.var format : {char const*} = {"base,79"};

stp_wop.disasm = {
  sink << "stp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

stp_wop.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 addr( cpu.GetGSR(rn) + U64(S64(imm)) );
  U32 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
  cpu.MemWrite32( addr + U64(0), data0 );
  cpu.MemWrite32( addr + U64(4), data1 );
  cpu.SetGSR(rn, addr);
};

op stp_xop( 0b1010100110[10] : shl<3> sext imm[7] : rt2[5] : rn[5] : rt[5] );
stp_xop.var format : {char const*} = {"base,100"};

stp_xop.disasm = {
  sink << "stp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

stp_xop.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 addr( cpu.GetGSR(rn) + U64(S64(imm)) );
  U64 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
  cpu.MemWrite64( addr + U64(0), data0 );
  cpu.MemWrite64( addr + U64(8), data1 );
  cpu.SetGSR(rn, addr);
};

op stp_wpo( 0b0010100010[10] : shl<2> sext imm[7] : rt2[5] : rn[5] : rt[5] );
stp_wpo.var format : {char const*} = {"base,81"};

stp_wpo.disasm = {
  sink << "stp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

stp_wpo.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 addr( cpu.GetGSR(rn) );
  U32 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
  cpu.MemWrite32( addr + U64(0), data0 );
  cpu.MemWrite32( addr + U64(4), data1 );
  cpu.SetGSR(rn, addr + U64(S64(imm)));
};

op stp_xpo( 0b1010100010[10] : shl<3> sext imm[7] : rt2[5] : rn[5] : rt[5] );
stp_xpo.var format : {char const*} = {"base,103"};

stp_xpo.disasm = {
  sink << "stp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

stp_xpo.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 addr( cpu.GetGSR(rn) );
  U64 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
  cpu.MemWrite64( addr + U64(0), data0 );
  cpu.MemWrite64( addr + U64(8), data1 );
  cpu.SetGSR(rn, addr + U64(S64(imm)));
};

/*
 * end of STP
 *******************************************************************/

/*******************************************************************
 * STR (immediate)
 *
 * Store register (immediate offset)
 */

op str_wsopost( 0b10111000000[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
str_wsopost.var format : {char const*} = {"base,324"};

str_wsopost.disasm = {
  sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

str_wsopost.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  U32 data( cpu.GetGZR(rt) );
  cpu.MemWrite32(addr, data);
  cpu.SetGSR(rn, addr + U64(imm) );
};

op str_xsopost( 0b11111000000[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
str_xsopost.var format : {char const*} = {"base,350"};

str_xsopost.disasm = {
  sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

str_xsopost.execute = {
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) );
  U64 data( cpu.GetGZR(rt) );
  cpu.MemWrite64(addr, data);
  cpu.SetGSR(rn, addr + U64(imm) );
};

op str_wsopre( 0b10111000000[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
str_wsopre.var format : {char const*} = {"base,316"};

str_wsopre.disasm = {
  sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

str_wsopre.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U32 data( cpu.GetGZR(rt) );
  cpu.MemWrite32(addr, data);
  cpu.SetGSR(rn, addr);
};

op str_xsopre( 0b11111000000[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
str_xsopre.var format : {char const*} = {"base,345"};

str_xsopre.disasm = {
  sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

str_xsopre.execute = {
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U64 data( cpu.GetGZR(rt) );
  cpu.MemWrite64(addr, data);
  cpu.SetGSR(rn, addr);
};

op str_wuo( 0b1011100100[10] : shl<2> imm[12] : rn[5] : rt[5] );
str_wuo.var format : {char const*} = {"base,87"};

str_wuo.disasm = {
  sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

str_wuo.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U32 data( cpu.GetGZR(rt) );
  cpu.MemWrite32(addr, data);
};

op str_xuo( 0b1111100100[10] : shl<3> imm[12] : rn[5] : rt[5] );
str_xuo.var format : {char const*} = {"base,108"};

str_xuo.disasm = {
  sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

str_xuo.execute = {
  typedef typename ARCH::U64 U64;
  U64 addr( cpu.GetGSR(rn) + U64(imm) );
  U64 data( cpu.GetGZR(rt) );
  cpu.MemWrite64(addr, data);
};

/*
 * end of LDR (immediate)
 *******************************************************************/

op str_wxws( 0b10111000001[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
str_wxws.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,620"};

str_wxws.disasm = {
  sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op str_wxwu( 0b10111000001[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
str_wxwu.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,628"};

str_wxwu.disasm = {
  sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op str_wxxu( 0b10111000001[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
str_wxxu.var format : {char const*} = {"base,1601"}, shift : {uint8_t} = {s*2};

str_wxxu.disasm = {
  sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op str_wxxs( 0b10111000001[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
str_wxxs.var shift : {uint8_t} = {s*2}, format : {char const*} = {"base,636"};

str_wxxs.disasm = {
  sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op str_xxws( 0b11111000001[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
str_xxws.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,643"};

str_xxws.disasm = {
  sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op str_xxwu( 0b11111000001[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
str_xxwu.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,648"};

str_xxwu.disasm = {
  sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op str_xxxu( 0b11111000001[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
str_xxxu.var format : {char const*} = {"base,1665"}, shift : {uint8_t} = {s*3};

str_xxxu.disasm = {
  sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op str_xxxs( 0b11111000001[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
str_xxxs.var shift : {uint8_t} = {s*3}, format : {char const*} = {"base,653"};

str_xxxs.disasm = {
  sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op strb_wsopost( 0b00111000000[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
strb_wsopost.var format : {char const*} = {"base,325"};

strb_wsopost.disasm = {
  sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

op strb_wsopre( 0b00111000000[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
strb_wsopre.var format : {char const*} = {"base,317"};

strb_wsopre.disasm = {
  sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

op strb_wuo( 0b0011100100[10] : imm[12] : rn[5] : rt[5] );
strb_wuo.var format : {char const*} = {"base,88"};

strb_wuo.disasm = {
  sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op strb_wxws( 0b00111000001[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
strb_wxws.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,621"};

strb_wxws.disasm = {
  sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op strb_wxwu( 0b00111000001[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
strb_wxwu.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,629"};

strb_wxwu.disasm = {
  sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op strb_wxxu( 0b00111000001[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
strb_wxxu.var format : {char const*} = {"base,1602"}, shift : {uint8_t} = {s*0};

strb_wxxu.disasm = {
  sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op strb_wxxs( 0b00111000001[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
strb_wxxs.var shift : {uint8_t} = {s*0}, format : {char const*} = {"base,637"};

strb_wxxs.disasm = {
  sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op strh_wsopost( 0b01111000000[11] : sext imm[9] : 0b01[2] : rn[5] : rt[5] );
strh_wsopost.var format : {char const*} = {"base,326"};

strh_wsopost.disasm = {
  sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]," << DisasmI(imm);
};

op strh_wsopre( 0b01111000000[11] : sext imm[9] : 0b11[2] : rn[5] : rt[5] );
strh_wsopre.var format : {char const*} = {"base,318"};

strh_wsopre.disasm = {
  sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]!";
};

op strh_wuo( 0b0111100100[10] : shl<1> imm[12] : rn[5] : rt[5] );
strh_wuo.var format : {char const*} = {"base,89"};

strh_wuo.disasm = {
  sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op strh_wxws( 0b01111000001[11] : rm[5] : 0b110[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
strh_wxws.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,622"};

strh_wxws.disasm = {
  sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
};

op strh_wxwu( 0b01111000001[11] : rm[5] : 0b010[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
strh_wxwu.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,630"};

strh_wxwu.disasm = {
  sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
};

op strh_wxxu( 0b01111000001[11] : rm[5] : 0b011[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
strh_wxxu.var format : {char const*} = {"base,1603"}, shift : {uint8_t} = {s*1};

strh_wxxu.disasm = {
  sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
};

op strh_wxxs( 0b01111000001[11] : rm[5] : 0b111[3] : s[1] : 0b10[2] : rn[5] : rt[5] );
strh_wxxs.var shift : {uint8_t} = {s*1}, format : {char const*} = {"base,638"};

strh_wxxs.disasm = {
  sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
};

op stset_w( 0b10111000001[11] : rt[5] : 0b001100[6] : rn[5] : 0b11111[5] );
stset_w.var format : {char const*} = {"base,2115"};

stset_w.disasm = {
  sink << "stset\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stset_x( 0b11111000001[11] : rt[5] : 0b001100[6] : rn[5] : 0b11111[5] );
stset_x.var format : {char const*} = {"base,2151"};

stset_x.disasm = {
  sink << "stset\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsetb_w( 0b00111000001[11] : rt[5] : 0b001100[6] : rn[5] : 0b11111[5] );
stsetb_w.var format : {char const*} = {"base,2116"};

stsetb_w.disasm = {
  sink << "stsetb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stseth_w( 0b01111000001[11] : rt[5] : 0b001100[6] : rn[5] : 0b11111[5] );
stseth_w.var format : {char const*} = {"base,2117"};

stseth_w.disasm = {
  sink << "stseth\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsetl_w( 0b10111000011[11] : rt[5] : 0b001100[6] : rn[5] : 0b11111[5] );
stsetl_w.var format : {char const*} = {"base,2118"};

stsetl_w.disasm = {
  sink << "stsetl\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsetl_x( 0b11111000011[11] : rt[5] : 0b001100[6] : rn[5] : 0b11111[5] );
stsetl_x.var format : {char const*} = {"base,2152"};

stsetl_x.disasm = {
  sink << "stsetl\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsetlb_w( 0b00111000011[11] : rt[5] : 0b001100[6] : rn[5] : 0b11111[5] );
stsetlb_w.var format : {char const*} = {"base,2119"};

stsetlb_w.disasm = {
  sink << "stsetlb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsetlh_w( 0b01111000011[11] : rt[5] : 0b001100[6] : rn[5] : 0b11111[5] );
stsetlh_w.var format : {char const*} = {"base,2120"};

stsetlh_w.disasm = {
  sink << "stsetlh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmax_w( 0b10111000001[11] : rt[5] : 0b010000[6] : rn[5] : 0b11111[5] );
stsmax_w.var format : {char const*} = {"base,2121"};

stsmax_w.disasm = {
  sink << "stsmax\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmax_x( 0b11111000001[11] : rt[5] : 0b010000[6] : rn[5] : 0b11111[5] );
stsmax_x.var format : {char const*} = {"base,2153"};

stsmax_x.disasm = {
  sink << "stsmax\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmaxb_w( 0b00111000001[11] : rt[5] : 0b010000[6] : rn[5] : 0b11111[5] );
stsmaxb_w.var format : {char const*} = {"base,2122"};

stsmaxb_w.disasm = {
  sink << "stsmaxb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmaxh_w( 0b01111000001[11] : rt[5] : 0b010000[6] : rn[5] : 0b11111[5] );
stsmaxh_w.var format : {char const*} = {"base,2123"};

stsmaxh_w.disasm = {
  sink << "stsmaxh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmaxl_w( 0b10111000011[11] : rt[5] : 0b010000[6] : rn[5] : 0b11111[5] );
stsmaxl_w.var format : {char const*} = {"base,2124"};

stsmaxl_w.disasm = {
  sink << "stsmaxl\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmaxl_x( 0b11111000011[11] : rt[5] : 0b010000[6] : rn[5] : 0b11111[5] );
stsmaxl_x.var format : {char const*} = {"base,2154"};

stsmaxl_x.disasm = {
  sink << "stsmaxl\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmaxlb_w( 0b00111000011[11] : rt[5] : 0b010000[6] : rn[5] : 0b11111[5] );
stsmaxlb_w.var format : {char const*} = {"base,2125"};

stsmaxlb_w.disasm = {
  sink << "stsmaxlb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmaxlh_w( 0b01111000011[11] : rt[5] : 0b010000[6] : rn[5] : 0b11111[5] );
stsmaxlh_w.var format : {char const*} = {"base,2126"};

stsmaxlh_w.disasm = {
  sink << "stsmaxlh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmin_w( 0b10111000001[11] : rt[5] : 0b010100[6] : rn[5] : 0b11111[5] );
stsmin_w.var format : {char const*} = {"base,2127"};

stsmin_w.disasm = {
  sink << "stsmin\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsmin_x( 0b11111000001[11] : rt[5] : 0b010100[6] : rn[5] : 0b11111[5] );
stsmin_x.var format : {char const*} = {"base,2155"};

stsmin_x.disasm = {
  sink << "stsmin\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsminb_w( 0b00111000001[11] : rt[5] : 0b010100[6] : rn[5] : 0b11111[5] );
stsminb_w.var format : {char const*} = {"base,2128"};

stsminb_w.disasm = {
  sink << "stsminb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsminh_w( 0b01111000001[11] : rt[5] : 0b010100[6] : rn[5] : 0b11111[5] );
stsminh_w.var format : {char const*} = {"base,2129"};

stsminh_w.disasm = {
  sink << "stsminh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsminl_w( 0b10111000011[11] : rt[5] : 0b010100[6] : rn[5] : 0b11111[5] );
stsminl_w.var format : {char const*} = {"base,2130"};

stsminl_w.disasm = {
  sink << "stsminl\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsminl_x( 0b11111000011[11] : rt[5] : 0b010100[6] : rn[5] : 0b11111[5] );
stsminl_x.var format : {char const*} = {"base,2156"};

stsminl_x.disasm = {
  sink << "stsminl\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsminlb_w( 0b00111000011[11] : rt[5] : 0b010100[6] : rn[5] : 0b11111[5] );
stsminlb_w.var format : {char const*} = {"base,2131"};

stsminlb_w.disasm = {
  sink << "stsminlb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stsminlh_w( 0b01111000011[11] : rt[5] : 0b010100[6] : rn[5] : 0b11111[5] );
stsminlh_w.var format : {char const*} = {"base,2132"};

stsminlh_w.disasm = {
  sink << "stsminlh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op sttr_wbo( 0b10111000000[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
sttr_wbo.var format : {char const*} = {"base,302"};

sttr_wbo.disasm = {
  sink << "sttr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op sttr_xbo( 0b11111000000[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
sttr_xbo.var format : {char const*} = {"base,338"};

sttr_xbo.disasm = {
  sink << "sttr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op sttrb_wbo( 0b00111000000[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
sttrb_wbo.var format : {char const*} = {"base,303"};

sttrb_wbo.disasm = {
  sink << "sttrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op sttrh_wbo( 0b01111000000[11] : sext imm[9] : 0b10[2] : rn[5] : rt[5] );
sttrh_wbo.var format : {char const*} = {"base,304"};

sttrh_wbo.disasm = {
  sink << "sttrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op stumax_w( 0b10111000001[11] : rt[5] : 0b011000[6] : rn[5] : 0b11111[5] );
stumax_w.var format : {char const*} = {"base,2133"};

stumax_w.disasm = {
  sink << "stumax\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumax_x( 0b11111000001[11] : rt[5] : 0b011000[6] : rn[5] : 0b11111[5] );
stumax_x.var format : {char const*} = {"base,2157"};

stumax_x.disasm = {
  sink << "stumax\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumaxb_w( 0b00111000001[11] : rt[5] : 0b011000[6] : rn[5] : 0b11111[5] );
stumaxb_w.var format : {char const*} = {"base,2134"};

stumaxb_w.disasm = {
  sink << "stumaxb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumaxh_w( 0b01111000001[11] : rt[5] : 0b011000[6] : rn[5] : 0b11111[5] );
stumaxh_w.var format : {char const*} = {"base,2135"};

stumaxh_w.disasm = {
  sink << "stumaxh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumaxl_w( 0b10111000011[11] : rt[5] : 0b011000[6] : rn[5] : 0b11111[5] );
stumaxl_w.var format : {char const*} = {"base,2136"};

stumaxl_w.disasm = {
  sink << "stumaxl\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumaxl_x( 0b11111000011[11] : rt[5] : 0b011000[6] : rn[5] : 0b11111[5] );
stumaxl_x.var format : {char const*} = {"base,2158"};

stumaxl_x.disasm = {
  sink << "stumaxl\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumaxlb_w( 0b00111000011[11] : rt[5] : 0b011000[6] : rn[5] : 0b11111[5] );
stumaxlb_w.var format : {char const*} = {"base,2137"};

stumaxlb_w.disasm = {
  sink << "stumaxlb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumaxlh_w( 0b01111000011[11] : rt[5] : 0b011000[6] : rn[5] : 0b11111[5] );
stumaxlh_w.var format : {char const*} = {"base,2138"};

stumaxlh_w.disasm = {
  sink << "stumaxlh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumin_w( 0b10111000001[11] : rt[5] : 0b011100[6] : rn[5] : 0b11111[5] );
stumin_w.var format : {char const*} = {"base,2139"};

stumin_w.disasm = {
  sink << "stumin\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stumin_x( 0b11111000001[11] : rt[5] : 0b011100[6] : rn[5] : 0b11111[5] );
stumin_x.var format : {char const*} = {"base,2159"};

stumin_x.disasm = {
  sink << "stumin\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stuminb_w( 0b00111000001[11] : rt[5] : 0b011100[6] : rn[5] : 0b11111[5] );
stuminb_w.var format : {char const*} = {"base,2140"};

stuminb_w.disasm = {
  sink << "stuminb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stuminh_w( 0b01111000001[11] : rt[5] : 0b011100[6] : rn[5] : 0b11111[5] );
stuminh_w.var format : {char const*} = {"base,2141"};

stuminh_w.disasm = {
  sink << "stuminh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stuminl_w( 0b10111000011[11] : rt[5] : 0b011100[6] : rn[5] : 0b11111[5] );
stuminl_w.var format : {char const*} = {"base,2142"};

stuminl_w.disasm = {
  sink << "stuminl\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stuminl_x( 0b11111000011[11] : rt[5] : 0b011100[6] : rn[5] : 0b11111[5] );
stuminl_x.var format : {char const*} = {"base,2160"};

stuminl_x.disasm = {
  sink << "stuminl\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stuminlb_w( 0b00111000011[11] : rt[5] : 0b011100[6] : rn[5] : 0b11111[5] );
stuminlb_w.var format : {char const*} = {"base,2143"};

stuminlb_w.disasm = {
  sink << "stuminlb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stuminlh_w( 0b01111000011[11] : rt[5] : 0b011100[6] : rn[5] : 0b11111[5] );
stuminlh_w.var format : {char const*} = {"base,2144"};

stuminlh_w.disasm = {
  sink << "stuminlh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stur_wbo( 0b10111000000[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
stur_wbo.var format : {char const*} = {"base,296"};

stur_wbo.disasm = {
  sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op stur_xbo( 0b11111000000[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
stur_xbo.var format : {char const*} = {"base,333"};

stur_xbo.disasm = {
  sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op sturb_wbo( 0b00111000000[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
sturb_wbo.var format : {char const*} = {"base,307"};

sturb_wbo.disasm = {
  sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op sturh_wbo( 0b01111000000[11] : sext imm[9] : 0b00[2] : rn[5] : rt[5] );
sturh_wbo.var format : {char const*} = {"base,310"};

sturh_wbo.disasm = {
  sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
};

op stxp_w( 0b10001000001[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
stxp_w.var format : {char const*} = {"base,169"};

stxp_w.disasm = {
  sink << "stxp\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]";
};

op stxp_x( 0b11001000001[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
stxp_x.var format : {char const*} = {"base,223"};

stxp_x.disasm = {
  sink << "stxp\t" << DisasmGZWR(rs) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]";
};

op stxr_w( 0b10001000000[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
stxr_w.var format : {char const*} = {"base,217"};

stxr_w.disasm = {
  sink << "stxr\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stxr_x( 0b11001000000[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
stxr_x.var format : {char const*} = {"base,225"};

stxr_x.disasm = {
  sink << "stxr\t" << DisasmGZWR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stxrb_w( 0b00001000000[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
stxrb_w.var format : {char const*} = {"base,218"};

stxrb_w.disasm = {
  sink << "stxrb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op stxrh_w( 0b01001000000[11] : rs[5] : 0b0[1] : rt2[5] : rn[5] : rt[5] );
stxrh_w.var format : {char const*} = {"base,219"};

stxrh_w.disasm = {
  sink << "stxrh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op sub_wasr( 0b01001011100[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
sub_wasr.var format : {char const*} = {"base,177"};

sub_wasr.disasm = {
  if (rn == 31)
    sink << "neg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "sub\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

sub_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op sub_wi( 0b010100010[9] : shl12[1] : imm0[12] : rn[5] : rd[5] );
sub_wi.var imm : {uint32_t} = {shl12 ? (imm0 << 12) : imm0}, format : {char const*} = {"base,21"};

sub_wi.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
};

op sub_wlsl( 0b01001011000[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
sub_wlsl.var format : {char const*} = {"base,186"};

sub_wlsl.disasm = {
  if (rn == 31)
    sink << "neg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "sub\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op sub_wlsr( 0b01001011010[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
sub_wlsr.var format : {char const*} = {"base,201"};

sub_wlsr.disasm = {
  if (rn == 31)
    sink << "neg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "sub\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

sub_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op sub_wsxtb( 0b01001011001[11] : rm[5] : 0b100[3] : imm[3] : rn[5] : rd[5] );
sub_wsxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,377"};

sub_wsxtb.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
};

op sub_wsxth( 0b01001011001[11] : rm[5] : 0b101[3] : imm[3] : rn[5] : rd[5] );
sub_wsxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,381"};

sub_wsxth.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
};

op sub_wsxtw( 0b01001011001[11] : rm[5] : 0b110[3] : imm[3] : rn[5] : rd[5] );
sub_wsxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,385"};

sub_wsxtw.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
};

op sub_wsxtx( 0b01001011001[11] : rm[5] : 0b111[3] : imm[3] : rn[5] : rd[5] );
sub_wsxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,389"};

sub_wsxtx.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
};

op sub_wuxtb( 0b01001011001[11] : rm[5] : 0b000[3] : imm[3] : rn[5] : rd[5] );
sub_wuxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,393"};

sub_wuxtb.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
};

op sub_wuxth( 0b01001011001[11] : rm[5] : 0b001[3] : imm[3] : rn[5] : rd[5] );
sub_wuxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,397"};

sub_wuxth.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
};

op sub_wuxtw( 0b01001011001[11] : rm[5] : 0b010[3] : imm[3] : rn[5] : rd[5] );
sub_wuxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,402"};

sub_wuxtw.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
};

op sub_wuxtx( 0b01001011001[11] : rm[5] : 0b011[3] : imm[3] : rn[5] : rd[5] );
sub_wuxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,405"};

sub_wuxtx.disasm = {
  sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
};

op sub_xasr( 0b11001011100[11] : rm[5] : imm[6] : rn[5] : rd[5] );
sub_xasr.var format : {char const*} = {"base,117"};

sub_xasr.disasm = {
  if (rn == 31)
    sink << "neg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "sub\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

sub_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
};

op sub_xi( 0b110100010[9] : shl12[1] : imm0[12] : rn[5] : rd[5] );
sub_xi.var imm : {uint32_t} = {shl12 ? (imm0 << 12) : imm0}, format : {char const*} = {"base,30"};

sub_xi.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
};

op sub_xlsl( 0b11001011000[11] : rm[5] : imm[6] : rn[5] : rd[5] );
sub_xlsl.var format : {char const*} = {"base,129"};

sub_xlsl.disasm = {
  if (rn == 31)
    sink << "neg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "sub\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op sub_xlsr( 0b11001011010[11] : rm[5] : imm[6] : rn[5] : rd[5] );
sub_xlsr.var format : {char const*} = {"base,141"};

sub_xlsr.disasm = {
  if (rn == 31)
    sink << "neg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "sub\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

sub_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - (op2 >> imm);
  cpu.SetGZR(rd, res);
};

op sub_xsxtb( 0b11001011001[11] : rm[5] : 0b100[3] : imm[3] : rn[5] : rd[5] );
sub_xsxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,409"};

sub_xsxtb.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
};

op sub_xsxth( 0b11001011001[11] : rm[5] : 0b101[3] : imm[3] : rn[5] : rd[5] );
sub_xsxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,413"};

sub_xsxth.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
};

op sub_xsxtw( 0b11001011001[11] : rm[5] : 0b110[3] : imm[3] : rn[5] : rd[5] );
sub_xsxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,417"};

sub_xsxtw.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
};

op sub_xsxtx( 0b11001011001[11] : rm[5] : 0b111[3] : imm[3] : rn[5] : rd[5] );
sub_xsxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,433"};

sub_xsxtx.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
};

op sub_xuxtb( 0b11001011001[11] : rm[5] : 0b000[3] : imm[3] : rn[5] : rd[5] );
sub_xuxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,421"};

sub_xuxtb.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
};

op sub_xuxth( 0b11001011001[11] : rm[5] : 0b001[3] : imm[3] : rn[5] : rd[5] );
sub_xuxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,425"};

sub_xuxth.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
};

op sub_xuxtw( 0b11001011001[11] : rm[5] : 0b010[3] : imm[3] : rn[5] : rd[5] );
sub_xuxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,429"};

sub_xuxtw.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
};

op sub_xuxtx( 0b11001011001[11] : rm[5] : 0b011[3] : imm[3] : rn[5] : rd[5] );
sub_xuxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,435"};

sub_xuxtx.disasm = {
  sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
};

op subs_wi( 0b011100010[9] : shl12[1] : imm0[12] : rn[5] : rd[5] );
subs_wi.var imm : {uint32_t} = {shl12 ? (imm0 << 12) : imm0}, format : {char const*} = {"base,22"};

subs_wi.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
};

op subs_xi( 0b111100010[9] : shl12[1] : imm0[12] : rn[5] : rd[5] );
subs_xi.var imm : {uint32_t} = {shl12 ? (imm0 << 12) : imm0}, format : {char const*} = {"base,31"};

subs_xi.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
};

op subs_wlsl( 0b01101011000[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
subs_wlsl.var format : {char const*} = {"base,192"};

subs_wlsl.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
  else if (rn == 31)
    sink << "negs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
};

op subs_wlsr( 0b01101011010[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
subs_wlsr.var format : {char const*} = {"base,202"};

subs_wlsr.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
  else if (rn == 31)
    sink << "negs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
};

subs_wlsr.execute = {
  typedef typename ARCH::U32 U32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - (op2 >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op subs_wasr( 0b01101011100[11] : rm[5] : 0b0[1] : imm[5] : rn[5] : rd[5] );
subs_wasr.var format : {char const*} = {"base,178"};

subs_wasr.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
  else if (rn == 31)
    sink << "negs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
};

subs_wasr.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::S32 S32;
  U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - U32(S32(op2) >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op subs_wuxtb( 0b01101011001[11] : rm[5] : 0b000[3] : imm[3] : rn[5] : rd[5] );
subs_wuxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,394"};

subs_wuxtb.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
};

op subs_wuxth( 0b01101011001[11] : rm[5] : 0b001[3] : imm[3] : rn[5] : rd[5] );
subs_wuxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,398"};

subs_wuxth.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
};

op subs_wuxtw( 0b01101011001[11] : rm[5] : 0b010[3] : imm[3] : rn[5] : rd[5] );
subs_wuxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,401"};

subs_wuxtw.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
};

op subs_wuxtx( 0b01101011001[11] : rm[5] : 0b011[3] : imm[3] : rn[5] : rd[5] );
subs_wuxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,406"};

subs_wuxtx.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
};

op subs_wsxtb( 0b01101011001[11] : rm[5] : 0b100[3] : imm[3] : rn[5] : rd[5] );
subs_wsxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,378"};

subs_wsxtb.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
};

op subs_wsxth( 0b01101011001[11] : rm[5] : 0b101[3] : imm[3] : rn[5] : rd[5] );
subs_wsxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,382"};

subs_wsxth.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
};

op subs_wsxtw( 0b01101011001[11] : rm[5] : 0b110[3] : imm[3] : rn[5] : rd[5] );
subs_wsxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,386"};

subs_wsxtw.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
};

op subs_wsxtx( 0b01101011001[11] : rm[5] : 0b111[3] : imm[3] : rn[5] : rd[5] );
subs_wsxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,390"};

subs_wsxtx.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
};

op subs_xlsl( 0b11101011000[11] : rm[5] : imm[6] : rn[5] : rd[5] );
subs_xlsl.var format : {char const*} = {"base,133"};

subs_xlsl.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
  else if (rn == 31)
    sink << "negs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
};

op subs_xlsr( 0b11101011010[11] : rm[5] : imm[6] : rn[5] : rd[5] );
subs_xlsr.var format : {char const*} = {"base,142"};

subs_xlsr.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
  else if (rn == 31)
    sink << "negs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
};

subs_xlsr.execute = {
  typedef typename ARCH::U64 U64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - (op2 >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op subs_xasr( 0b11101011100[11] : rm[5] : imm[6] : rn[5] : rd[5] );
subs_xasr.var format : {char const*} = {"base,118"};

subs_xasr.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
  else if (rn == 31)
    sink << "negs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
};

subs_xasr.execute = {
  typedef typename ARCH::U64 U64;
  typedef typename ARCH::S64 S64;
  U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - U64(S64(op2) >> imm);
  cpu.SetGZR(rd, res);
  // XXX: set status flags
};

op subs_xuxtb( 0b11101011001[11] : rm[5] : 0b000[3] : imm[3] : rn[5] : rd[5] );
subs_xuxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,422"};

subs_xuxtb.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
};

op subs_xuxth( 0b11101011001[11] : rm[5] : 0b001[3] : imm[3] : rn[5] : rd[5] );
subs_xuxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,426"};

subs_xuxth.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
};

op subs_xuxtw( 0b11101011001[11] : rm[5] : 0b010[3] : imm[3] : rn[5] : rd[5] );
subs_xuxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,430"};

subs_xuxtw.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
};

op subs_xuxtx( 0b11101011001[11] : rm[5] : 0b011[3] : imm[3] : rn[5] : rd[5] );
subs_xuxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,437"};

subs_xuxtx.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
};

op subs_xsxtb( 0b11101011001[11] : rm[5] : 0b100[3] : imm[3] : rn[5] : rd[5] );
subs_xsxtb.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,410"};

subs_xsxtb.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
};

op subs_xsxth( 0b11101011001[11] : rm[5] : 0b101[3] : imm[3] : rn[5] : rd[5] );
subs_xsxth.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,414"};

subs_xsxth.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
};

op subs_xsxtw( 0b11101011001[11] : rm[5] : 0b110[3] : imm[3] : rn[5] : rd[5] );
subs_xsxtw.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,418"};

subs_xsxtw.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
};

op subs_xsxtx( 0b11101011001[11] : rm[5] : 0b111[3] : imm[3] : rn[5] : rd[5] );
subs_xsxtx.var reject : {Reject} = {imm >= 5}, format : {char const*} = {"base,434"};

subs_xsxtx.disasm = {
  if (rd == 31)
    sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
  else
    sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
};

op svc( 0b11010100000[11] : imm[16] : 0b00001[5] );
svc.var format : {char const*} = {"base,577"};

svc.disasm = {
  sink << "svc\t" << DisasmI(imm,16);
};

op swp_w( 0b10111000001[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swp_w.var format : {char const*} = {"base,1536"};

swp_w.disasm = {
  sink << "swp\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swp_x( 0b11111000001[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swp_x.var format : {char const*} = {"base,1641"};

swp_x.disasm = {
  sink << "swp\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpa_w( 0b10111000101[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpa_w.var format : {char const*} = {"base,1537"};

swpa_w.disasm = {
  sink << "swpa\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpa_x( 0b11111000101[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpa_x.var format : {char const*} = {"base,1642"};

swpa_x.disasm = {
  sink << "swpa\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpab_w( 0b00111000101[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpab_w.var format : {char const*} = {"base,1538"};

swpab_w.disasm = {
  sink << "swpab\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpah_w( 0b01111000101[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpah_w.var format : {char const*} = {"base,1539"};

swpah_w.disasm = {
  sink << "swpah\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpal_w( 0b10111000111[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpal_w.var format : {char const*} = {"base,1540"};

swpal_w.disasm = {
  sink << "swpal\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpal_x( 0b11111000111[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpal_x.var format : {char const*} = {"base,1643"};

swpal_x.disasm = {
  sink << "swpal\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpalb_w( 0b00111000111[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpalb_w.var format : {char const*} = {"base,1541"};

swpalb_w.disasm = {
  sink << "swpalb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpalh_w( 0b01111000111[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpalh_w.var format : {char const*} = {"base,1542"};

swpalh_w.disasm = {
  sink << "swpalh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpb_w( 0b00111000001[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpb_w.var format : {char const*} = {"base,1543"};

swpb_w.disasm = {
  sink << "swpb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swph_w( 0b01111000001[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swph_w.var format : {char const*} = {"base,1544"};

swph_w.disasm = {
  sink << "swph\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpl_w( 0b10111000011[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpl_w.var format : {char const*} = {"base,1545"};

swpl_w.disasm = {
  sink << "swpl\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swpl_x( 0b11111000011[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swpl_x.var format : {char const*} = {"base,1644"};

swpl_x.disasm = {
  sink << "swpl\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swplb_w( 0b00111000011[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swplb_w.var format : {char const*} = {"base,1546"};

swplb_w.disasm = {
  sink << "swplb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op swplh_w( 0b01111000011[11] : rs[5] : 0b100000[6] : rn[5] : rt[5] );
swplh_w.var format : {char const*} = {"base,1547"};

swplh_w.disasm = {
  sink << "swplh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
};

op sxtb( 0b1001001101000000000111[22] : rn[5] : rd[5] );
sxtb.var format : {char const*} = {"base,2648"};

sxtb.disasm = {
  sink << "sxtb\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn);
};

op sxth( 0b1001001101000000001111[22] : rn[5] : rd[5] );
sxth.var format : {char const*} = {"base,2649"};

sxth.disasm = {
  sink << "sxth\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn);
};

op sxtw( 0b1001001101000000011111[22] : rn[5] : rd[5] );
sxtw.var format : {char const*} = {"base,2650"};

sxtw.disasm = {
  sink << "sxtw\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn);
};

op sys( 0b1101010100001[13] : op1[3] : crn[4] : crm[4] : op2[3] : rt[5] );
sys.var format : {char const*} = {"base,352"};

sys.disasm = {
  sink << "sys\t" << DisasmI(op1) << ", " << DisasmC(crn) << ", " << DisasmC(crm) << ", " << DisasmI(op2) << ", " << DisasmGZXR(rt);
};

op sysl( 0b1101010100101[13] : op1[3] : crn[4] : crm[4] : op2[3] : rt[5] );
sysl.var format : {char const*} = {"base,353"};

sysl.disasm = {
  sink << "sysl\t" << DisasmGZXR(rt) << ", " << DisasmI(op1) << ", " << DisasmC(crn) << ", " << DisasmC(crm) << ", " << DisasmI(op2);
};

op tbnz( shl<5> pos1[1] : 0b0110111[7] : pos0[5] : shl<2> sext imm[14] : rt[5] );
tbnz.var pos : {unsigned} = {pos1|pos0}, format : {char const*} = {"base,5"};

tbnz.disasm = {
  if (not pos1)
    sink << "tbnz\t" << DisasmGZWR(rt) << ", " << DisasmI(pos) << ", 0x" << std::hex << (this->GetAddr()+imm);
  else
    sink << "tbnz\t" << DisasmGZXR(rt) << ", " << DisasmI(pos) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

op tbz( shl<5> pos1[1] : 0b0110110[7] : pos0[5] : shl<2> sext imm[14] : rt[5] );
tbz.var pos : {unsigned} = {pos1|pos0}, format : {char const*} = {"base,6"};

tbz.disasm = {
  if (not pos1)
    sink << "tbz\t" << DisasmGZWR(rt) << ", " << DisasmI(pos) << ", 0x" << std::hex << (this->GetAddr()+imm);
  else
    sink << "tbz\t" << DisasmGZXR(rt) << ", " << DisasmI(pos) << ", 0x" << std::hex << (this->GetAddr()+imm);
};

op tlbi_alle1( 0b110101010000110010000111100[27] : ?[5] );
tlbi_alle1.var format : {char const*} = {"base,2889"};

tlbi_alle1.disasm = {
  sink << "tlbi\talle1";
};

op tlbi_alle1is( 0b110101010000110010000011100[27] : ?[5] );
tlbi_alle1is.var format : {char const*} = {"base,2890"};

tlbi_alle1is.disasm = {
  sink << "tlbi\talle1is";
};

op tlbi_alle2( 0b110101010000110010000111000[27] : ?[5] );
tlbi_alle2.var format : {char const*} = {"base,2891"};

tlbi_alle2.disasm = {
  sink << "tlbi\talle2";
};

op tlbi_alle2is( 0b110101010000110010000011000[27] : ?[5] );
tlbi_alle2is.var format : {char const*} = {"base,2892"};

tlbi_alle2is.disasm = {
  sink << "tlbi\talle2is";
};

op tlbi_alle3( 0b110101010000111010000111000[27] : ?[5] );
tlbi_alle3.var format : {char const*} = {"base,2893"};

tlbi_alle3.disasm = {
  sink << "tlbi\talle3";
};

op tlbi_alle3is( 0b110101010000111010000011000[27] : ?[5] );
tlbi_alle3is.var format : {char const*} = {"base,2894"};

tlbi_alle3is.disasm = {
  sink << "tlbi\talle3is";
};

op tlbi_aside1( 0b110101010000100010000111010[27] : rt[5] );
tlbi_aside1.var format : {char const*} = {"base,2895"};

tlbi_aside1.disasm = {
  sink << "tlbi\taside1, " << DisasmGZXR(rt);
};

op tlbi_aside1is( 0b110101010000100010000011010[27] : rt[5] );
tlbi_aside1is.var format : {char const*} = {"base,2896"};

tlbi_aside1is.disasm = {
  sink << "tlbi\taside1is, " << DisasmGZXR(rt);
};

op tlbi_ipas2e1( 0b110101010000110010000100001[27] : rt[5] );
tlbi_ipas2e1.var format : {char const*} = {"base,2904"};

tlbi_ipas2e1.disasm = {
  sink << "tlbi\tipas2e1, " << DisasmGZXR(rt);
};

op tlbi_ipas2e1is( 0b110101010000110010000000001[27] : rt[5] );
tlbi_ipas2e1is.var format : {char const*} = {"base,2905"};

tlbi_ipas2e1is.disasm = {
  sink << "tlbi\tipas2e1is, " << DisasmGZXR(rt);
};

op tlbi_ipas2le1( 0b110101010000110010000100101[27] : rt[5] );
tlbi_ipas2le1.var format : {char const*} = {"base,2906"};

tlbi_ipas2le1.disasm = {
  sink << "tlbi\tipas2le1, " << DisasmGZXR(rt);
};

op tlbi_ipas2le1is( 0b110101010000110010000000101[27] : rt[5] );
tlbi_ipas2le1is.var format : {char const*} = {"base,2907"};

tlbi_ipas2le1is.disasm = {
  sink << "tlbi\tipas2le1is, " << DisasmGZXR(rt);
};

op tlbi_vaae1( 0b110101010000100010000111011[27] : rt[5] );
tlbi_vaae1.var format : {char const*} = {"base,2922"};

tlbi_vaae1.disasm = {
  sink << "tlbi\tvaae1, " << DisasmGZXR(rt);
};

op tlbi_vaae1is( 0b110101010000100010000011011[27] : rt[5] );
tlbi_vaae1is.var format : {char const*} = {"base,2923"};

tlbi_vaae1is.disasm = {
  sink << "tlbi\tvaae1is, " << DisasmGZXR(rt);
};

op tlbi_vaale1( 0b110101010000100010000111111[27] : rt[5] );
tlbi_vaale1.var format : {char const*} = {"base,2924"};

tlbi_vaale1.disasm = {
  sink << "tlbi\tvaale1, " << DisasmGZXR(rt);
};

op tlbi_vaale1is( 0b110101010000100010000011111[27] : rt[5] );
tlbi_vaale1is.var format : {char const*} = {"base,2925"};

tlbi_vaale1is.disasm = {
  sink << "tlbi\tvaale1is, " << DisasmGZXR(rt);
};

op tlbi_vae1( 0b110101010000100010000111001[27] : rt[5] );
tlbi_vae1.var format : {char const*} = {"base,2926"};

tlbi_vae1.disasm = {
  sink << "tlbi\tvae1, " << DisasmGZXR(rt);
};

op tlbi_vae1is( 0b110101010000100010000011001[27] : rt[5] );
tlbi_vae1is.var format : {char const*} = {"base,2927"};

tlbi_vae1is.disasm = {
  sink << "tlbi\tvae1is, " << DisasmGZXR(rt);
};

op tlbi_vae2( 0b110101010000110010000111001[27] : rt[5] );
tlbi_vae2.var format : {char const*} = {"base,2928"};

tlbi_vae2.disasm = {
  sink << "tlbi\tvae2, " << DisasmGZXR(rt);
};

op tlbi_vae2is( 0b110101010000110010000011001[27] : rt[5] );
tlbi_vae2is.var format : {char const*} = {"base,2929"};

tlbi_vae2is.disasm = {
  sink << "tlbi\tvae2is, " << DisasmGZXR(rt);
};

op tlbi_vae3( 0b110101010000111010000111001[27] : rt[5] );
tlbi_vae3.var format : {char const*} = {"base,2930"};

tlbi_vae3.disasm = {
  sink << "tlbi\tvae3, " << DisasmGZXR(rt);
};

op tlbi_vae3is( 0b110101010000111010000011001[27] : rt[5] );
tlbi_vae3is.var format : {char const*} = {"base,2931"};

tlbi_vae3is.disasm = {
  sink << "tlbi\tvae3is, " << DisasmGZXR(rt);
};

op tlbi_vale1( 0b110101010000100010000111101[27] : rt[5] );
tlbi_vale1.var format : {char const*} = {"base,2932"};

tlbi_vale1.disasm = {
  sink << "tlbi\tvale1, " << DisasmGZXR(rt);
};

op tlbi_vale1is( 0b110101010000100010000011101[27] : rt[5] );
tlbi_vale1is.var format : {char const*} = {"base,2933"};

tlbi_vale1is.disasm = {
  sink << "tlbi\tvale1is, " << DisasmGZXR(rt);
};

op tlbi_vale2( 0b110101010000110010000111101[27] : rt[5] );
tlbi_vale2.var format : {char const*} = {"base,2934"};

tlbi_vale2.disasm = {
  sink << "tlbi\tvale2, " << DisasmGZXR(rt);
};

op tlbi_vale2is( 0b110101010000110010000011101[27] : rt[5] );
tlbi_vale2is.var format : {char const*} = {"base,2935"};

tlbi_vale2is.disasm = {
  sink << "tlbi\tvale2is, " << DisasmGZXR(rt);
};

op tlbi_vale3( 0b110101010000111010000111101[27] : rt[5] );
tlbi_vale3.var format : {char const*} = {"base,2936"};

tlbi_vale3.disasm = {
  sink << "tlbi\tvale3, " << DisasmGZXR(rt);
};

op tlbi_vale3is( 0b110101010000111010000011101[27] : rt[5] );
tlbi_vale3is.var format : {char const*} = {"base,2937"};

tlbi_vale3is.disasm = {
  sink << "tlbi\tvale3is, " << DisasmGZXR(rt);
};

op tlbi_vmalle1( 0b110101010000100010000111000[27] : ?[5] );
tlbi_vmalle1.var format : {char const*} = {"base,2938"};

tlbi_vmalle1.disasm = {
  sink << "tlbi\tvmalle1";
};

op tlbi_vmalle1is( 0b110101010000100010000011000[27] : ?[5] );
tlbi_vmalle1is.var format : {char const*} = {"base,2939"};

tlbi_vmalle1is.disasm = {
  sink << "tlbi\tvmalle1is";
};

op tlbi_vmalls12e1( 0b110101010000110010000111110[27] : ?[5] );
tlbi_vmalls12e1.var format : {char const*} = {"base,2940"};

tlbi_vmalls12e1.disasm = {
  sink << "tlbi\tvmalls12e1";
};

op tlbi_vmalls12e1is( 0b110101010000110010000011110[27] : ?[5] );
tlbi_vmalls12e1is.var format : {char const*} = {"base,2941"};

tlbi_vmalls12e1is.disasm = {
  sink << "tlbi\tvmalls12e1is";
};

op ubfm_w( 0b01010011000[11] : immr[5] : 0b0[1] : imms[5] : rn[5] : rd[5] );
ubfm_w.var format : {char const*} = {"base,164"};

ubfm_w.disasm = {
  if (imms == 0b11111)
    sink << "lsr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr);
  else if (immr == (imms+1))
    sink << "lsl\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(31-imms);
  else if (imms < immr)
    sink << "ubfiz\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(-immr&31) << ", " << DisasmI(imms+1);
  else if ((immr == 0) and (imms == 0b111))
    sink << "uxtb\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
  else if ((immr == 0) and (imms == 0b1111))
    sink << "uxth\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
  else
    sink << "ubfx\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
};

op ubfm_x( 0b1101001101[10] : immr[6] : imms[6] : rn[5] : rd[5] );
ubfm_x.var format : {char const*} = {"base,92"};

ubfm_x.disasm = {
  if (imms == 0b111111)
    sink << "lsr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr);
  else if (immr == (imms+1))
    sink << "lsl\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(63-imms);
  else if (imms < immr)
    sink << "ubfiz\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(-immr&63) << ", " << DisasmI(imms+1);
  // else if ((immr == 0) and (imms == 0b111))
  //   sink << "uxtb\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
  // else if ((immr == 0) and (imms == 0b1111))
  //   sink << "uxth\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
  else
    sink << "ubfx\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
};

op udiv_www( 0b00011010110[11] : rm[5] : 0b000010[6] : rn[5] : rd[5] );
udiv_www.var format : {char const*} = {"base,1471"};

udiv_www.disasm = {
  sink << "udiv\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
};

op udiv_xxx( 0b10011010110[11] : rm[5] : 0b000010[6] : rn[5] : rd[5] );
udiv_xxx.var format : {char const*} = {"base,1618"};

udiv_xxx.disasm = {
  sink << "udiv\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op umaddl_xw( 0b10011011101[11] : rm[5] : 0b0[1] : ra[5] : rn[5] : rd[5] );
umaddl_xw.var format : {char const*} = {"base,237"};

umaddl_xw.disasm = {
  if (ra == 31)
    sink << "umull\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
  else
    sink << "umaddl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZXR(ra);
};

op umsubl_xw( 0b10011011101[11] : rm[5] : 0b1[1] : ra[5] : rn[5] : rd[5] );
umsubl_xw.var format : {char const*} = {"base,238"};

umsubl_xw.disasm = {
  if (ra == 31)
    sink << "umnegl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
  else
    sink << "umsubl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZXR(ra);
};

op umulh( 0b10011011110[11] : rm[5] : 0b0[1] : ra[5] : rn[5] : rd[5] );
umulh.var format : {char const*} = {"base,240"};

umulh.disasm = {
  sink << "umulh\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
};

op uxtb_w( 0b0101001100000000000111[22] : rn[5] : rd[5] );
uxtb_w.var format : {char const*} = {"base,2620"};

uxtb_w.disasm = {
  sink << "uxtb\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
};

op uxth_w( 0b0101001100000000001111[22] : rn[5] : rd[5] );
uxth_w.var format : {char const*} = {"base,2621"};

uxth_w.disasm = {
  sink << "uxth\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
};

op wfe( 0b11010101000000110010000001011111[32] );
wfe.var format : {char const*} = {"base,2951"};

wfe.disasm = {
  sink << "wfe";
};

op wfi( 0b11010101000000110010000001111111[32] );
wfi.var format : {char const*} = {"base,2952"};

wfi.disasm = {
  sink << "wfi";
};

op yield( 0b11010101000000110010000000111111[32] );
yield.var format : {char const*} = {"base,2953"};

yield.disasm = {
  sink << "yield";
};

