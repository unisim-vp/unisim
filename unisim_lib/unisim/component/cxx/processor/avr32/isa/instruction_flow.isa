//-----------------------------------------------------------------------------

//                           BRANCH INSTRUCTIONS

//------------------------------------------------------------------------------

// BR_COND3 - branch if condition satisfied

op br_cond3(0b110[3]:0b0[1]:disp[8]:0b0[1]:cond3[3])

br_cond3.disasm={

	os << "br_cond3 " << disp << endl;
}

// BR_COND4

op br_cond4(0b111[3]:disp_20_17[4]:0b0100[4]:disp_16[1]:cond4[4]:><:disp_15_0[16])

br_cond4.var disp : {uint32_t}={(disp_20_17<<17)|(disp_16<<16)|disp_15_0}

br_cond4.disasm={

	os << "br_cond4 " << disp << endl;
}


// RJMP - relative jump

op rjmp(0b110[3]:0b0[1]:disp_7_0[8]:0b1[1]:0b0[1]:disp_9_8[2])

rjmp.var disp :{uint16_t}={(disp_9_8<<8)|disp_7_0}

rjmp.disasm={

	os << "rjmp " << cpu.getPC() << "[" << disp << "]" << endl;
}

//------------------------------------------------------------------------------

//                           CALL INSTRUCTIONS

//------------------------------------------------------------------------------


//ACALL - application call

op acall(0b1101[4]:disp8[8]:0b000[3]:0b0[1])

acall.disasm={

	os << "acall " << disp8 << endl;
}

// ICALL - indirect call from subroutine

op icall(0b010[3]:0b1110[4]:0b10001[5]:rd[4])

icall.disasm={

	os << "icall " << rd << endl;
}

//MCALL - subroutine call

op mcall(0b111[3]:0b100000001[9]:rp[4]:><:disp16[16])

mcall.disasm={

	os << "mcall " << rp << "[" << disp16 << "]" << endl;
}

//RCALL - relative subroutine call

op rcall_a(0b110[3]:0b0[1]:disp_7_0[8]:0b1[1]:0b1[1]:disp_9_8[2])

rcall_a.var disp :{uint16_t} ={ (disp_9_8 << 8 )| disp_7_0}

rcall_a.disasm={

	os << "rcall_a " << cpu.getPC() << "[" << disp << "]" << endl;
}

op rcall_b(0b111[3]:disp_20_17[4]:0b0101[4]:disp_16[1]:0b0000[4]:><:disp_15_0[16])

rcall_b.var disp :{uint32_t} = {(disp_20_17 << 17)|(disp_16 << 16)|disp_15_0 }

rcall_b.disasm={

	os << "rcall_b " << cpu.getPC() << "[" << disp << "]" << endl;
}

//SCALL - supervisor call

op scall(0b1101011[7]:0b10011[5]:0b0011[4])

scall.disasm={

	os << "scall "<< endl;
}

//SSCALL - secure state call

op sscall(0b1101011[7]:0b10101[5]:0b0011[4])

sscall.disasm={

	os << "sscall "<< endl;
}

