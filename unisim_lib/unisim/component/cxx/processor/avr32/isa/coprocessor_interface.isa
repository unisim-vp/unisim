//---------------------------------------------------------------------------------------

//               COPROCESSOR INTERFACES

//---------------------------------------------------------------------------------------


// COP - coprocessor operation

op cop(0b111[3]:0b00[2]:op_6_5[2]:0b11010[5]:op_4_1[4]:><:cp[3]:op_0[1]:cRd[4]:cRx[4]:cRy[4])

cop.var _op :{uint8_t} = {(op_6_5<<5) | (op_4_1 << 4) | op_0}

cop.disasm={

	os << "cop " << cp << "," << cRd << "," << cRx << "," << cRy << "," << _op << endl;
}
                   

// LDC_D Load coprocessor

op ldc_d_a(0b111[3]:0b0100[4]:0b11010[5]:rp[4]:><:cp[3]:0b1[1]:cRd_3_1[3]:0b0[1]:disp8[8])

ldc_d_a.disasm={
	os << "ldc_d_a " << cp << "," << cRd_3_1 << "," << rp << "[" << disp8 << "]" << endl;
}

op ldc_d_b(0b111[3]:0b0111[4]:0b11010[5]:rp[4]:><:cp[3]:0b0[1]:cRd_3_1[3]:0b0[1]:0b0101[4]:0b0000[4])

ldc_d_b.disasm={
	os << "ldc_d_b " << cp << "," << cRd_3_1 << "," << "--" << rp << endl;
}


op ldc_d_c(0b111[3]:0b0111[4]:0b11010[5]:rb[4]:><:cp[3]:0b1[1]:cRd_3_1[3]:0b0[1]:0b01[2]:sa[2]:ri[4])
 //erreur dans le manuel rp au lieu de rb

ldc_d_c.disasm={
	os << "ldc_d_c " << cp << "," << cRd_3_1 << "," << rb << "[" << ri << "<<" << sa << "]" << endl;
}

//LDC0_D - load compressor 0

op ldc0_d(0b111[3]:0b1001[4]:0b11010[5]:rp[4]:><:disp_11_8[4]:cRd_3_1[3]:0b0[1]:disp_7_0[8])

ldc0_d.var disp:{uint16_t}={(disp_11_8 << 8) | disp_7_0}

ldc0_d.disasm={
	os << "ldc0_d " << cRd_3_1 << "," << rp << "[" << disp << "]" << endl;
}

// LDC_W

op ldc_w_a(0b111[3]:0b0100[4]:0b11010[5]:rp[4]:><:cp[3]:0b0[1]:cRd[4]:k8[8])

ldc_w_a.disasm={
	os << "ldc_w_a " << cp << "," << cRd << "," << rp << "[" << k8 << "]" << endl;
}

// erreur dans la doc disp au lieu de k8

op ldc_w_b(0b111[3]:0b0111[4]:0b11010[5]:rp[4]:><:cp[3]:0b0[1]:cRd[4]:0b0100[4]:0b0000[4])

ldc_w_b.disasm={
	os << "ldc_w_b " << cp << "," << cRd << "," << "--" << rp << endl;
}


op ldc_w_c(0b111[3]:0b0111[4]:0b11010[5]:rp[4]:><:cp[3]:0b1[1]:crd[4]:0b00[2]:sa[2]:ri[4])

ldc_w_c.disasm={
	os << "ldc_w_c " << cp << "," << crd << "," << rp << "[" << ri << "<<" << sa << "]" << endl;
}

// rp au lieu de rd

// LDC0_W

op ldc0_w(0b111[3]:0b1000[4]:0b11010[5]:rp[4]:><:disp_11_8[4]:cRd[4]:disp_7_0[8])

ldc0_w.var disp:{uint16_t}={(disp_11_8 << 8) | disp_7_0}

ldc0_w.disasm={
	os << "ldc0_w " << cRd << "," << rp << "[" << disp << "]" << endl;
}

//LDCM_D/W - load coprocessor multiple register

op ldcm_d(0b111[3]:0b0110[4]:0b11010[5]:rp[4]:><:cp[3]:postinc[1]:0b0100[4]:CPD8[8])

ldcm_d.disasm={

	os << "ldcm_d " << cp << "," << rp << "{++}," << CPD8 << endl;
	
}

op ldcm_w_a(0b111[3]:0b0110[4]:0b11010[5]:rp[4]:><:cp[3]:postinc[1]:0b0001[4]:CPH8[8])

ldcm_w_a.disasm={

	os << "ldcm_w_a " << cp << "," << rp << "{++}," << CPH8 << endl;
	
}

op ldcm_w_b(0b111[3]:0b0110[4]:0b11010[5]:rp[4]:><:cp[3]:postinc[1]:0b0000[4]:CPL8[8])

ldcm_w_b.disasm={

	os << "ldcm_w_b " << cp << "," << rp << "{++}," << CPL8 << endl;
	
}

// MVCR_D/W - move coprocessor register to register file

op mvcr_d(0b111[3]:0b0111[4]:0b11010[5]:rd[3]:0b0[1]:><:cp[3]:0b0[1]:crs[3]:0b0[1]:0b00010000[8])

mvcr_d.disasm={
	os << "mvcr_d " << cp << "," << rd << "," << crs << endl;
}

op mvcr_w(0b111[3]:0b0111[4]:0b11010[5]:rd[4]:><:cp[3]:0b0[1]:crs[4]:0b00000000[8])

mvcr_w.disasm={
	os << "mvcr_w " << cp << "," << rd << "," << crs << endl;
}

// MVRC_D/W move register file register to coprocessor register

op mvrc_d(0b111[3]:0b0111[4]:0b11010[5]:rs[3]:0b0[1]:><:cp[3]:0b0[1]:crd[3]:0b0[1]:0b00110000[8])

mvrc_d.disasm={

	os << "mvrc_d " << cp << "," << crd << "," << rs << endl;
}

op mvrc_w(0b111[3]:0b0111[4]:0b11010[5]:rs[4]:><:cp[3]:0b0[1]:crd[4]:0b00100000[8])

mvrc_w.disasm={

	os << "mvrc_w " << cp << "," << crd << "," << rs << endl;
}


// STC_D

op stc_d_a(0b111[3]:0b0101[4]:0b11010[5]:rp[4]:><:cp[3]:0b1[1]:cRd_3_1[3]:0b0[1]:disp8[8])

stc_d_a.disasm={
	os << "stc_d_a " << cp << "," << rp << "[" << disp8 << "]" << "," << cRd_3_1 << endl;
}

op stc_d_b(0b111[3]:0b0111[4]:0b11010[5]:rp[4]:><:cp[3]:0b0[1]:cRd_3_1[3]:0b0[1]:0b0111[4]:0b0000[4])

stc_d_b.disasm={
	os << "stc_d_b " << cp << "," << rp << "++," << cRd_3_1  << endl;
}


op stc_d_c(0b111[3]:0b0111[4]:0b11010[5]:rb[4]:><:cp[3]:0b1[1]:cRd_3_1[3]:0b0[1]:0b11[2]:sa[2]:ri[4])
 

stc_d_c.disasm={
	os << "stc_d_c " << cp << "," << rb << "[" << ri << "<<" << sa << "]," << cRd_3_1 << endl;
}


// STC0_D - store coprocessor 0 register

op stc0_d(0b111[3]:0b1011[4]:0b11010[5]:rp[4]:><:disp_11_8[4]:cRs[3]:0b0[1]:disp_7_0[8])

stc0_d.var disp:{uint16_t}={(disp_11_8 << 8) | disp_7_0}

stc0_d.disasm={
	os << "stc0_d " << rp << "[" << disp << "]," << cRs << endl;
}


// STC_W - store word

op stc_w_a(0b111[3]:0b0101[4]:0b11010[5]:rp[4]:><:cp[3]:0b0[1]:cRs[4]:disp8[8])

stc_w_a.disasm={
	os << "stc_w_a " << cp << "," << rp << "[" << disp8 << "]," << cRs <<  endl;
}

op stc_w_b(0b111[3]:0b0111[4]:0b11010[5]:rp[4]:><:cp[3]:0b0[1]:cRs[4]:0b0110[4]:0b0000[4])

stc_w_b.disasm={
	os << "stc_w_b " << cp << "," << rp << "++," << cRs << endl;
}

op stc_w_c(0b111[3]:0b0111[4]:0b11010[5]:rb[4]:><:cp[3]:0b1[1]:cRs[4]:0b10[2]:sa[2]:ri[4])

stc_w_c.disasm={
	os <<  "stc_w_c " << cp << ","  << rb << "[" << ri << "<<" << sa << "]," << cRs << endl;
}


//STCO_W

op stc0_w(0b111[3]:0b1010[4]:0b11010[5]:rp[4]:><:disp_11_8[4]:cRs[4]:disp_7_0[8])

stc0_w.var disp:{uint16_t}={(disp_11_8 << 8) | disp_7_0}

stc0_w.disasm={
	os << "stc0_w " << rp << "[" << disp << "]," << cRs  << endl;
}


// STCM_D/W - store coprocessor multiple registers

op stcm_d(0b111[3]:0b0110[4]:0b11010[5]:rp[4]:><:cp[3]:predec[1]:0b0101[4]:CPD8[8])

stcm_d.disasm={

	os << "stcm_d " << cp << ",{--}" << rp << "," << CPD8 << endl;
	
}

op stcm_w_a(0b111[3]:0b0110[4]:0b11010[5]:rp[4]:><:cp[3]:preinc[1]:0b0011[4]:CPH8[8])

stcm_w_a.disasm={

	os << "stcm_w_a " << cp << ",{--}" << rp << "," << CPH8 << endl;
}

op stcm_w_b(0b111[3]:0b0110[4]:0b11010[5]:rp[4]:><:cp[3]:preinc[1]:0b0010[4]:CPL8[8]) 

stcm_w_b.disasm={

	os << "stcm_w_b " << cp << ",{--}" << rp << "," << CPL8 << endl;
	
}

//----------------------------------------------------------------------------------------

//         INSTRUCTION TO AID JAVA EXECUTION 

//----------------------------------------------------------------------------------------


// INCJOSP

op incjosp(0b110[3]:0b101101[6]:imm[3]:0b0011[4])

incjosp.disasm={
	os << "incjosp " << imm << endl;
}

// POPJC - pop java context from frame

op popjc(0b1101011[7]:0b10001[5]:0b0011[4])

popjc.disasm={

	os << "popjc " << endl;
}

// PUSHJC - push java context to frame

op pushjc(0b1101011[7]:0b10010[5]:0b0011[4])

pushjc.disasm={

	os << "pushjc " << endl;
}

// RETJ - return from java trap

op retj(0b1101011[7]:0b00011[5]:0b0011[4])

retj.disasm={

	os << "retj " << endl;
}
