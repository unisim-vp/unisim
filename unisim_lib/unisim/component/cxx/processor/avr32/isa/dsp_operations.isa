// ADDHH_W - add halfwords into word

op addhh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b1110[4]:0b00[2]:x[1]:y[1]:rd[4])

// MACHH_D - multiply halfwords and accumulate in doubleword

op machh_d(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b0101[4]:0b10[2]:x[1]:y[1]:rd[4])

machh_d.disasm={

	os << "machh_d " << rd << "," << rx << ":<" << part << ">," << ry <<":<" << part << ">" << endl;
}

// MACHH_W - multiply halfwords and accumulate in word

op machh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b0100[4]:0b10[2]:x[1]:y[1]:rd[4])

machh_w.disasm={

	os << "machh_w " << rd << "," << rx << ":<" << part << ">," << ry <<":<" << part << ">" << endl;
}


//MACWH_D - multiply word with halfword and accumulate in doubleword

op macwh_d(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b1100[4]:0b100[3]:y[1]:rd[4])

macwh_d.disasm={

	os << "macwh_d " << rd << "," << rx << "," << ry <<":<" << part << ">" << endl;
}

//MULHH_W multiply halfword with halfword

op mulhh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b00000111[8]:0b10[2]:x[1]:y[1]:rd[4])

//multiply word with halfword

op mulwh_d(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b1101[4]:0b100[3]:y[1]:rd[4])

// multiply halword with negative halfword

op mulnhh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b00000001[8]:0b10[2]:x[1]:y[1]:rd[4])

//multiply word with negative halfword

op mulnwh_d(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b0010[4]:0b100[3]:y[1]:rd[4])

//SATADD_H - saturated add of halfwords

op satadd_h(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b00101100[8]:rd[4])

satadd_h.disasm={

	os << "satadd_h " << rd << "," << rx << "," << ry << endl;
}

//SATADD_W - saturated add of words

op satadd_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b00001100[8]:rd[4])

satadd_w.disasm={

	os << "satadd_w " << rd << "," << rx << "," << ry << endl;
}

//SATSUB_H - saturate subtract of halfwords

op satsub_h(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b00111100[8]:rd[4])

satsub_h.disasm={

	os << "satsub_h " << rd << "," << rx << "," << ry << endl;
}

//SATSUB_W_A saturate subtract of words

op satsub_w_a(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b00011100[8]:rd[4])

satsub_w_a.disasm={

	os << "satsub_w_a " << rd << "," << rx << "," << ry << endl;
}

//SATSUB_W_B

op satsub_w_b(0b111[3]:rs[4]:0b01101[5]:rd[4]:><:imm16[16])

satsub_w_b.disasm={

	os << "satsub_w_b " << rd << "," << rs << "," << imm16 << endl;
}

//SATRNDS - saturate with rounding signed

op satrnds(0b111[3]:0b1001[4]:0b11011[5]:rd[4]:><:0b0000[4]:0b00[2]:bp5[5]:sa5[5])

satrnds.disasm={
	os << "satrnds " << rd  << ">>" << sa5 << "," << bp5 << endl; 
}

//SATRNDU - saturate with rounding unsigned

op satrndu(0b111[3]:0b1001[4]:0b11011[5]:rd[4]:><:0b0000[4]:0b01[2]:bp5[5]:sa5[5])

satrndu.disasm={
	os << "satrndu " << rd << ">>" << sa5 << "," << bp5 << endl; 
}


//SATS - saturate signed

op sats(0b111[3]:0b1000[4]:0b11011[5]:rd[4]:><:0b0000[4]:0b00[2]:bp5[5]:sa5[5])

sats.disasm={
	os << "sats " << rd << ">>" << sa5 << "," << bp5 << endl; 
}


//SATU - saturate unsigned

op satu(0b111[3]:0b1000[4]:0b11011[5]:rd[4]:><:0b0000[4]:0b01[2]:bp5[5]:sa5[5])

satu.disasm={

	os << "satu " << rd << ">>" << sa5 << "," << bp5 << endl; 
}

//SUBHH_W - subtract halfwords into word

op subhh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b111100[6]:x[1]:y[1]:rd[4])

//multiply halfword with saturation into halfword

op mulsathh_h(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b1000[4]:0b10[2]:x[1]:y[1]:rd[4])

//multiply halfword with saturation into word

op mulsathh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b1001[4]:0b10[2]:x[1]:y[1]:rd[4])

//multiply halfwords with saturation and rounding into halfword

op mulsatrndhh_h(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b1010[4]:0b10[2]:x[1]:y[1]:rd[4])

//multiply word ans halfwords with saturation and rounding into word

op mulsatrndwh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b1011[4]:0b100[3]:y[1]:rd[4])

//multiply word and halfword with saturation into word

op mulsatwh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b1110[4]:0b100[3]:y[1]:rd[4])

//multiply accumulate halfwords with saturation into word

op macsathh_w(0b111[3]:rx[4]:0b00000[5]:ry[4]:><:0b0000[4]:0b0110[4]:0b10[2]:x[1]:y[1]:rd[4])

macsathh_w.disasm={

	os << "macsathh_w " << rd << "," << rx << ":<" << part << ">," << ry <<":<" << part << ">" << endl;
}


