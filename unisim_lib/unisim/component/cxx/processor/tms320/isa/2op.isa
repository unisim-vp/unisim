/*
 *  Copyright (c) 2009,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 *          Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* List of 2 operands operations:
 * - ABSF         absolute value of a floating-point number
 * - ABSI         absolute value of an integer
 * - ADDC         add integers with carry
 * - ADDF         add floating-point values
 * - ADDI         add integers
 * - AND          bitwise-logical AND
 * - ANDN         bitwise-logical AND with complement
 * - ASH          arithmetic shift
 * - CMPF         compare floating-point values
 * - CMPI         compare integers
 * - FIX          convert floating-point value to integer
 * - FLOAT        convert integer to floating-point value
 * - LSH          logical shift
 * - MPYF         multiply floating-point values
 * - MPYI         multiply integers
 * - NEGB         negate integer with borrow
 * - NEGF         negate floating-point value
 * - NEGI         negate integer
 * - NORM         normalize floating-point value
 * - NOT          bitwise-logical complement
 * - OR           bitwise-logical OR
 * - RND          round floating-point value
 * - ROL          rotate left
 * - ROLC         rotate left through carry
 * - ROR          rotate right
 * - RORC         rotate right through carry
 * - SUBB         subtract integers with borrow
 * - SUBC         subtract integers conditionally
 * - SUBF         subtract floating-point values
 * - SUBI         subtract integer
 * - SUBRB        subtract reverse integer with borrow
 * - SUBRF        subtract reverse floating-point value
 * - SUBRI        subtract reverse integer
 * - TSTB         test bit fields
 * - XOR          bitwise-exclusive OR
 */

/**********************************************************
 * ABSF (absolute value of a floating-point number)
 * op ABSF(0b000[3]:0b000000[6]:g[2]:dst[5]:src[16])
 */
 
op ABSF_reg  (0b000[3]:0b000000[6]:0b00[2]:dst[5]:0[11]:src[5])
op ABSF_dir  (0b000[3]:0b000000[6]:0b01[2]:dst[5]:direct[16])
op ABSF_indir(0b000[3]:0b000000[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op ABSF_imm  (0b000[3]:0b000000[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of ABSF (absolute value of a floating-point number)
 **********************************************************/

/**********************************************************
 * ABSI (absolute value of an integer)
 * op ABSI(0b000[3]:0b000001[6]:g[2]:dst[5]:src[16])
 */
 
op ABSI_reg  (0b000[3]:0b000001[6]:0b00[2]:dst[5]:0[11]:src[5])
op ABSI_dir  (0b000[3]:0b000001[6]:0b01[2]:dst[5]:direct[16])
op ABSI_indir(0b000[3]:0b000001[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op ABSI_imm  (0b000[3]:0b000001[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of ABSI (absolute value of an integer)
 **********************************************************/

/**********************************************************
 * ADDC (add integers with carry)
 * op ADDC(0b000[3]:0b000010[6]:g[2]:dst[5]:src[16])
 */

op ADDC_reg  (0b000[3]:0b000010[6]:0b00[2]:dst[5]:0[11]:src[5])
op ADDC_dir  (0b000[3]:0b000010[6]:0b01[2]:dst[5]:direct[16])
op ADDC_indir(0b000[3]:0b000010[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op ADDC_imm  (0b000[3]:0b000010[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of ADDC (add integers with carry)
 **********************************************************/

/**********************************************************
 * ADDF (add floating-point values)
 * op ADDF(0b000[3]:0b000011[6]:g[2]:dst[5]:src[16])
 */

op ADDF_reg  (0b000[3]:0b000011[6]:0b00[2]:dst[5]:0[11]:src[5])
op ADDF_dir  (0b000[3]:0b000011[6]:0b01[2]:dst[5]:direct[16])
op ADDF_indir(0b000[3]:0b000011[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op ADDF_imm  (0b000[3]:0b000011[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of ADDF (add floating-point values)
 **********************************************************/

/**********************************************************
 * ADDI (add integers)
 * op ADDI(0b000[3]:0b000100[6]:g[2]:dst[5]:src[16])
 */

op ADDI_reg  (0b000[3]:0b000100[6]:0b00[2]:dst[5]:0[11]:src[5])
op ADDI_dir  (0b000[3]:0b000100[6]:0b01[2]:dst[5]:direct[16])
op ADDI_indir(0b000[3]:0b000100[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op ADDI_imm  (0b000[3]:0b000100[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of ADDI (add integers)
 **********************************************************/

/**********************************************************
 * AND (bitwise-logical AND)
 * op AND(0b000[3]:0b000101[6]:g[2]:dst[5]:src[16])
 */

op AND_reg  (0b000[3]:0b000101[6]:0b00[2]:dst[5]:0[11]:src[5])
op AND_dir  (0b000[3]:0b000101[6]:0b01[2]:dst[5]:direct[16])
op AND_indir(0b000[3]:0b000101[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op AND_imm  (0b000[3]:0b000101[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of AND (bitwise-logical AND)
 **********************************************************/

/**********************************************************
 * ANDN (bitwise-logical AND with complement)
 * op ANDN(0b000[3]:0b000110[6]:g[2]:dst[5]:src[16])
 */

op ANDN_reg  (0b000[3]:0b000110[6]:0b00[2]:dst[5]:0[11]:src[5])
op ANDN_dir  (0b000[3]:0b000110[6]:0b01[2]:dst[5]:direct[16])
op ANDN_indir(0b000[3]:0b000110[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op ANDN_imm  (0b000[3]:0b000110[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of ANDN (bitwise-logical AND with complement)
 **********************************************************/

/**********************************************************
 * ASH (arithmetic shift)
 * op ASH(0b000[3]:0b000111[6]:g[2]:dst[5]:count[16])
 */

op ASH_reg  (0b000[3]:0b000111[6]:0b00[2]:dst[5]:0[11]:src[5])
op ASH_dir  (0b000[3]:0b000111[6]:0b01[2]:dst[5]:direct[16])
op ASH_indir(0b000[3]:0b000111[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op ASH_imm  (0b000[3]:0b000111[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of ASH (arithmetic shift)
 **********************************************************/

/**********************************************************
 * CMPF (compare floating-point values)
 * op CMPF(0b000[3]:0b001000[6]:g[2]:dst[5]:src[16])
 */

op CMPF_reg  (0b000[3]:0b001000[6]:0b00[2]:dst[5]:0[11]:src[5])
op CMPF_dir  (0b000[3]:0b001000[6]:0b01[2]:dst[5]:direct[16])
op CMPF_indir(0b000[3]:0b001000[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op CMPF_imm  (0b000[3]:0b001000[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of CMPF (compare floating-point values)
 **********************************************************/

/**********************************************************
 * CMPI (compare integers)
 * op CMPI(0b000[3]:0b001001[6]:g[2]:dst[5]:src[16])
 */

op CMPI_reg  (0b000[3]:0b001001[6]:0b00[2]:dst[5]:0[11]:src[5])
op CMPI_dir  (0b000[3]:0b001001[6]:0b01[2]:dst[5]:direct[16])
op CMPI_indir(0b000[3]:0b001001[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op CMPI_imm  (0b000[3]:0b001001[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of CMPI (compare integers)
 **********************************************************/

/**********************************************************
 * FIX (convert floating-point value to integer)
 * op FIX(0b000[3]:0b001010[6]:g[2]:dst[5]:src[16])
 */

op FIX_reg  (0b000[3]:0b001010[6]:0b00[2]:dst[5]:0[11]:src[5])
op FIX_dir  (0b000[3]:0b001010[6]:0b01[2]:dst[5]:direct[16])
op FIX_indir(0b000[3]:0b001010[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op FIX_imm  (0b000[3]:0b001010[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of FIX (convert floating-point value to integer)
 **********************************************************/

/**********************************************************
 * FLOAT (convert integer to floating-point value)
 * op FLOAT(0b000[3]:0b001011[6]:g[2]:dst[5]:src[16])
 */

op FLOAT_reg  (0b000[3]:0b001011[6]:0b00[2]:dst[5]:0[11]:src[5])
op FLOAT_dir  (0b000[3]:0b001011[6]:0b01[2]:dst[5]:direct[16])
op FLOAT_indir(0b000[3]:0b001011[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op FLOAT_imm  (0b000[3]:0b001011[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of FLOAT (convert integer to floating-point value)
 **********************************************************/

/**********************************************************
 * LSH (logical shift)
 * op LSH(0b000[3]:0b010011[6]:g[2]:dst[5]:count[16])
 */

op LSH_reg  (0b000[3]:0b010011[6]:0b00[2]:dst[5]:0[11]:src[5])
op LSH_dir  (0b000[3]:0b010011[6]:0b01[2]:dst[5]:direct[16])
op LSH_indir(0b000[3]:0b010011[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op LSH_imm  (0b000[3]:0b010011[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of LSH (logical shift)
 **********************************************************/

/**********************************************************
 * MPYF (multiply floating-point values)
 * op MPYF(0b000[3]:0b010100[6]:g[2]:dst[5]:src[16])
 */

op MPYF_reg  (0b000[3]:0b010100[6]:0b00[2]:dst[5]:0[11]:src[5])
op MPYF_dir  (0b000[3]:0b010100[6]:0b01[2]:dst[5]:direct[16])
op MPYF_indir(0b000[3]:0b010100[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op MPYF_imm  (0b000[3]:0b010100[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of MPYF (multiply floating-point values)
 **********************************************************/

/**********************************************************
 * MPYI (multiply integers)
 * op MPYI(0b000[3]:0b010101[6]:g[2]:dst[5]:src[16])
 */

op MPYI_reg  (0b000[3]:0b010101[6]:0b00[2]:dst[5]:0[11]:src[5])
op MPYI_dir  (0b000[3]:0b010101[6]:0b01[2]:dst[5]:direct[16])
op MPYI_indir(0b000[3]:0b010101[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op MPYI_imm  (0b000[3]:0b010101[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of MPYI (multiply integers)
 **********************************************************/

/**********************************************************
 * NEGB (negate integer with borrow)
 * op NEGB(0b000[3]:0b010110[6]:g[2]:dst[5]:src[16])
 */

op NEGB_reg  (0b000[3]:0b010110[6]:0b00[2]:dst[5]:0[11]:src[5])
op NEGB_dir  (0b000[3]:0b010110[6]:0b01[2]:dst[5]:direct[16])
op NEGB_indir(0b000[3]:0b010110[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op NEGB_imm  (0b000[3]:0b010110[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of NEGB (negate integer with borrow)
 **********************************************************/

/**********************************************************
 * NEGF (negate floating-point value)
 * op NEGF(0b000[3]:0b010111[6]:g[2]:dst[5]:src[16])
 */

op NEGF_reg  (0b000[3]:0b010111[6]:0b00[2]:dst[5]:0[11]:src[5])
op NEGF_dir  (0b000[3]:0b010111[6]:0b01[2]:dst[5]:direct[16])
op NEGF_indir(0b000[3]:0b010111[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op NEGF_imm  (0b000[3]:0b010111[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of NEGF (negate floating-point value)
 **********************************************************/

/**********************************************************
 * NEGI (negate integer)
 * op NEGI(0b000[3]:0b011000[6]:g[2]:dst[5]:src[16])
 */

op NEGI_reg  (0b000[3]:0b011000[6]:0b00[2]:dst[5]:0[11]:src[5])
op NEGI_dir  (0b000[3]:0b011000[6]:0b01[2]:dst[5]:direct[16])
op NEGI_indir(0b000[3]:0b011000[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op NEGI_imm  (0b000[3]:0b011000[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of NEGI (negate integer)
 **********************************************************/

/**********************************************************
 * NORM (normalize floating-point value)
 * op NORM(0b000[3]:0b011010[6]:g[2]:dst[5]:src[16])
 */

op NORM_reg  (0b000[3]:0b011010[6]:0b00[2]:dst[5]:0[11]:src[5])
op NORM_dir  (0b000[3]:0b011010[6]:0b01[2]:dst[5]:direct[16])
op NORM_indir(0b000[3]:0b011010[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op NORM_imm  (0b000[3]:0b011010[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of NORM (normalize floating-point value)
 **********************************************************/

/**********************************************************
 * NOT (bitwise-logical complement)
 * op NOT(0b000[3]:0b011011[6]:g[2]:dst[5]:src[16])
 */

op NOT_reg  (0b000[3]:0b011011[6]:0b00[2]:dst[5]:0[11]:src[5])
op NOT_dir  (0b000[3]:0b011011[6]:0b01[2]:dst[5]:direct[16])
op NOT_indir(0b000[3]:0b011011[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op NOT_imm  (0b000[3]:0b011011[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of NOT (bitwise-logical complement)
 **********************************************************/

/**********************************************************
 * OR (bitwise-logical OR)
 * op OR(0b000[3]:0b100000[6]:g[2]:dst[5]:src[16])
 */

op OR_reg  (0b000[3]:0b100000[6]:0b00[2]:dst[5]:0[11]:src[5])
op OR_dir  (0b000[3]:0b100000[6]:0b01[2]:dst[5]:direct[16])
op OR_indir(0b000[3]:0b100000[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op OR_imm  (0b000[3]:0b100000[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of OR (bitwise-logical OR)
 **********************************************************/

/**********************************************************
 * RND (round floating-point value)
 * op RND(0b000[3]:0b100010[6]:g[2]:dst[5]:src[16])
 */

op RND_reg  (0b000[3]:0b100010[6]:0b00[2]:dst[5]:0[11]:src[5])
op RND_dir  (0b000[3]:0b100010[6]:0b01[2]:dst[5]:direct[16])
op RND_indir(0b000[3]:0b100010[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op RND_imm  (0b000[3]:0b100010[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of RND (round floating-point value)
 **********************************************************/

/**********************************************************
 * ROL (rotate left)
 * op ROL(0b000[3]:0b100011[6]:0b11[2]:dst[5]:0b0000000000000001[16])
 */

op ROL(0b000[3]:0b100011[6]:0b11[2]:dst[5]:0b0000000000000001[16])

/* end of ROL (rotate left)
 **********************************************************/

/**********************************************************
 * ROLC (rotate left through carry)
 * op ROLC(0b000[3]:0b100100[6]:0b11[2]:dst[5]:0b0000000000000001[16])
 */

op ROLC(0b000[3]:0b100100[6]:0b11[2]:dst[5]:0b0000000000000001[16])

/* end of ROLC (rotate left through carry)
 **********************************************************/

/**********************************************************
 * ROR (rotate right)
 * op ROR(0b000[3]:0b100101[6]:0b11[2]:dst[5]:0b1111111111111111[16])
 */

op ROR(0b000[3]:0b100101[6]:0b11[2]:dst[5]:0b1111111111111111[16])

/* end of ROR (rotate right)
 **********************************************************/

/**********************************************************
 * RORC (rotate right through carry)
 * op RORC(0b000[3]:0b100110[6]:0b11[2]:dst[5]:0b1111111111111111[16])
 */

op RORC(0b000[3]:0b100110[6]:0b11[2]:dst[5]:0b1111111111111111[16])

/* end of RORC (rotate right through carry)
 **********************************************************/

/**********************************************************
 * SUBB (subtract integers with borrow)
 * op SUBB(0b000[3]:0b101101[6]:g[2]:dst[5]:src[16])
 */

op SUBB_reg  (0b000[3]:0b101101[6]:0b00[2]:dst[5]:0[11]:src[5])
op SUBB_dir  (0b000[3]:0b101101[6]:0b01[2]:dst[5]:direct[16])
op SUBB_indir(0b000[3]:0b101101[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op SUBB_imm  (0b000[3]:0b101101[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of SUBB (subtract integers with borrow)
 **********************************************************/

/**********************************************************
 * SUBC (subtract integers conditionally)
 * op SUBC(0b000[3]:0b101110[6]:g[2]:dst[5]:src[16])
 */

op SUBC_reg  (0b000[3]:0b101110[6]:0b00[2]:dst[5]:0[11]:src[5])
op SUBC_dir  (0b000[3]:0b101110[6]:0b01[2]:dst[5]:direct[16])
op SUBC_indir(0b000[3]:0b101110[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op SUBC_imm  (0b000[3]:0b101110[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of SUBC (subtract integers conditionally)
 **********************************************************/

/**********************************************************
 * SUBF (subtract floating-point values)
 * op SUBF(0b000[3]:0b101111[6]:g[2]:dst[5]:src[16])
 */

op SUBF_reg  (0b000[3]:0b101111[6]:0b00[2]:dst[5]:0[11]:src[5])
op SUBF_dir  (0b000[3]:0b101111[6]:0b01[2]:dst[5]:direct[16])
op SUBF_indir(0b000[3]:0b101111[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op SUBF_imm  (0b000[3]:0b101111[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of SUBF (subtract floating-point values)
 **********************************************************/

/**********************************************************
 * SUBI (subtract integer)
 * op SUBI(0b000[3]:0b110000[6]:g[2]:dst[5]:src[16])
 */

op SUBI_reg  (0b000[3]:0b110000[6]:0b00[2]:dst[5]:0[11]:src[5])
op SUBI_dir  (0b000[3]:0b110000[6]:0b01[2]:dst[5]:direct[16])
op SUBI_indir(0b000[3]:0b110000[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op SUBI_imm  (0b000[3]:0b110000[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of SUBI (subtract integer)
 **********************************************************/

/**********************************************************
 * SUBRB (subtract reverse integer with borrow)
 * op SUBRB(0b000[3]:0b110001[6]:g[2]:dst[5]:src[16])
 */

op SUBRB_reg  (0b000[3]:0b110001[6]:0b00[2]:dst[5]:0[11]:src[5])
op SUBRB_dir  (0b000[3]:0b110001[6]:0b01[2]:dst[5]:direct[16])
op SUBRB_indir(0b000[3]:0b110001[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op SUBRB_imm  (0b000[3]:0b110001[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of SUBRB (subtract reverse integer with borrow)
 **********************************************************/

/**********************************************************
 * SUBRF (subtract reverse floating-point value)
 * op SUBRF(0b000[3]:0b110010[6]:g[2]:dst[5]:src[16])
 */

op SUBRF_reg  (0b000[3]:0b110010[6]:0b00[2]:dst[5]:0[11]:src[5])
op SUBRF_dir  (0b000[3]:0b110010[6]:0b01[2]:dst[5]:direct[16])
op SUBRF_indir(0b000[3]:0b110010[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op SUBRF_imm  (0b000[3]:0b110010[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of SUBRF (subtract reverse floating-point value)
 **********************************************************/

/**********************************************************
 * SUBRI (subtract reverse integer)
 * op SUBRI(0b000[3]:0b110011[6]:g[2]:dst[5]:src[16])
 */

op SUBRI_reg  (0b000[3]:0b110011[6]:0b00[2]:dst[5]:0[11]:src[5])
op SUBRI_dir  (0b000[3]:0b110011[6]:0b01[2]:dst[5]:direct[16])
op SUBRI_indir(0b000[3]:0b110011[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op SUBRI_imm  (0b000[3]:0b110011[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of SUBRI (subtract reverse integer)
 **********************************************************/

/**********************************************************
 * TSTB (test bit fields)
 * op TSTB(0b000[3]:0b110100[6]:g[2]:dst[5]:src[16])
 */

op TSTB_reg  (0b000[3]:0b110100[6]:0b00[2]:dst[5]:0[11]:src[5])
op TSTB_dir  (0b000[3]:0b110100[6]:0b01[2]:dst[5]:direct[16])
op TSTB_indir(0b000[3]:0b110100[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op TSTB_imm  (0b000[3]:0b110100[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of TSTB (test bit fields)
 **********************************************************/

/**********************************************************
 * XOR (bitwise-exclusive OR)
 * op XOR(0b000[3]:0b110101[6]:g[2]:dst[5]:src[16])
 */

op XOR_reg  (0b000[3]:0b110101[6]:0b00[2]:dst[5]:0[11]:src[5])
op XOR_dir  (0b000[3]:0b110101[6]:0b01[2]:dst[5]:direct[16])
op XOR_indir(0b000[3]:0b110101[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op XOR_imm  (0b000[3]:0b110101[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of XOR (bitwise-exclusive OR)
 **********************************************************/
