/*
 *  Copyright (c) 2009,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 *          Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* List of parallel operations:
 * - FLOAT || STF		convert integer to floating-point value and store floating-point value
 * - LDF || STF			load floating-point value and store floating-point value
 * - LDI || STI			load integer and store integer
 * - LSH3 || STI		logical shift and store integer
 * - MPYF3 || STF       multiply floating-point values and store floating-point value
 * - MPYI3 || STI		multiply integer and store integer
 * - NEGF || STF		negate floating-point value and store floating-point value
 * - NEGI || STI		negate integer and store integer
 * - NOT || STI			complement value and store integer
 * - OR3 || STI			bitwise-logical OR value and store integer
 * - STF || STF			store floating-point values
 * - STI || STI			sotre integers
 * - SUBF3 || STF		subtract floating-point value and store floating-point value
 * - SUBI3 || STI		subtract integer and store integer
 * - XOR3 || STI		bitwise-exclusive OR values and store integer
 * - LDF || LDF			load floating-point value
 * - LDI || LDI			load integer
 * - MPYF3 || ADDF3		multiply and add floating-point value
 * - MPYF3 || SUBF3		multiply and subtract floating-point value
 * - MPYI3 || ADDI3		multiply and add integer
 * - MPYI3 || SUBI3		multiply and subtract integer
 */

/**********************************************************
 * FLOAT || STF (convert integer to floating-point value and store floating-point value)
 * op FLOAT_STF(0b11[2]:0b01011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
 */

op FLOAT_STF    (0b11[2]:0b01011[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op FLOAT_STF_ext(0b11[2]:0b01011[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of FLOAT || STF (convert integer to floating-point value and store floating-point value)
 **********************************************************/

/**********************************************************
 * LDF || STF (load floating-point value and store floating-point value)
 * op LDF_STF(0b11[2]:0b01100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
 */

op LDF_STF    (0b11[2]:0b01100[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op LDF_STF_ext(0b11[2]:0b01100[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of LDF || STF (load floating-point value and store floating-point value)
 **********************************************************/

/**********************************************************
 * LDI || STI (load integer and store integer)
 * op LDI_STI(0b11[2]:0b01101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
 */

op LDI_STI    (0b11[2]:0b01101[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op LDI_STI_ext(0b11[2]:0b01101[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of LDI || STI (load integer and store integer)
 **********************************************************/

/**********************************************************
 * LSH3 || STI (logical shift and store integer)
 * op LSH3_STI(0b11[2]:0b01110[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
 */

op LSH3_STI    (0b11[2]:0b01110[5]:dst1[3]:count[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op LSH3_STI_ext(0b11[2]:0b01110[5]:dst1[3]:count[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of LSH3 || STI (logical shift and store integer)
 **********************************************************/

/**********************************************************
 * MPYF3 || STF (multiply floating-point values and store floating-point value)
 * op MPYF3_STF(0b11[2]:0b01111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
 */

op MPYF3_STF    (0b11[2]:0b01111[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op MPYF3_STF_ext(0b11[2]:0b01111[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of MPYF3 || STF (multiply floating-point values and store floating-point value)
 **********************************************************/

/**********************************************************
 * MPYI3 || STI (multiply integer and store integer)
 * op MPYI3_STI(0b11[2]:0b10000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
 */

op MPYI3_STI    (0b11[2]:0b10000[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op MPYI3_STI_ext(0b11[2]:0b10000[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of MPYI3 || STI (multiply integer and store integer)
 **********************************************************/

/**********************************************************
 * NEGF || STF (negate floating-point value and store floating-point value)
 * op NEGF_STF(0b11[2]:0b10001[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
 */

op NEGF_STF    (0b11[2]:0b10001[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op NEGF_STF_ext(0b11[2]:0b10001[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of NEGF || STF (negate floating-point value and store floating-point value)
 **********************************************************/

/**********************************************************
 * NEGI || STI (negate integer and store integer)
 * op NEGI_STI(0b11[2]:0b10010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
 */

op NEGI_STI    (0b11[2]:0b10010[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op NEGI_STI_ext(0b11[2]:0b10010[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of NEGI || STI (negate integer and store integer)
 **********************************************************/

/**********************************************************
 * NOT || STI (complement value and store integer)
 * op NOT_STI(0b11[2]:0b10011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
 */

op NOT_STI    (0b11[2]:0b10011[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op NOT_STI_ext(0b11[2]:0b10011[5]:dst1[3]:0b000[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of NOT || STI (complement value and store integer)
 **********************************************************/

/**********************************************************
 * OR3 || STI (bitwise-logical OR value and store integer)
 * op OR3_STI(0b11[2]:0b10100[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
 */

op OR3_STI    (0b11[2]:0b10100[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op OR3_STI_ext(0b11[2]:0b10100[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of OR3 || STI (bitwise-logical OR value and store integer)
 **********************************************************/

/**********************************************************
 * STF || STF (store floating-point values)
 * op STF_STF(0b11[2]:0b00000[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
 */

op STF_STF    (0b11[2]:0b00000[5]:src2[3]:0b000[3]:src1[3]:d1_mod[5]:d1_ar[3]:d2_mod[5]:d2_ar[3])
op STF_STF_ext(0b11[2]:0b00000[5]:src2[3]:0b000[3]:src1[3]:d1_mod[5]:d1_ar[3]:0b111[3]:dst2[5])

/* end of STF || STF (store floating-point values)
 **********************************************************/

/**********************************************************
 * STI || STI (sotre integers)
 * op STI_STI(0b11[2]:0b00001[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
 */

op STI_STI    (0b11[2]:0b00001[5]:src2[3]:0b000[3]:src1[3]:d1_mod[5]:d1_ar[3]:d2_mod[5]:d2_ar[3])
op STI_STI_ext(0b11[2]:0b00001[5]:src2[3]:0b000[3]:src1[3]:d1_mod[5]:d1_ar[3]:0b111[3]:dst2[5])

/* end of STI || STI (sotre integers)
 **********************************************************/

/**********************************************************
 * SUBF3 || STF (subtract floating-point value and store floating-point value)
 * op SUBF3_STF(0b11[2]:0b10101[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
 */

op SUBF3_STF    (0b11[2]:0b10101[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op SUBF3_STF_ext(0b11[2]:0b10101[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of SUBF3 || STF (subtract floating-point value and store floating-point value)
 **********************************************************/

/**********************************************************
 * SUBI3 || STI (subtract integer and store integer)
 * op SUBI3_STI(0b11[2]:0b10110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
 */

op SUBI3_STI    (0b11[2]:0b10110[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op SUBI3_STI_ext(0b11[2]:0b10110[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of SUBI3 || STI (subtract integer and store integer)
 **********************************************************/

/**********************************************************
 * XOR3 || STI (bitwise-exclusive OR values and store integer)
 * op XOR3_STI(0b11[2]:0b10111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
 */

op XOR3_STI    (0b11[2]:0b10111[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:s2_mod[5]:s2_ar[3])
op XOR3_STI_ext(0b11[2]:0b10111[5]:dst1[3]:src1[3]:src3[3]:d2_mod[5]:d2_ar[3]:0b111[3]:src2[5])

/* end of XOR3 || STI (bitwise-exclusive OR values and store integer)
 **********************************************************/

/**********************************************************
 * LDF || LDF (load floating-point value)
 * op LDF_LDF(0b11[2]:0b00010[5]:dst1[3]:dst2[3]:0b000[3]:src1[8]:src2[8])
 */

op LDF_LDF    (0b11[2]:0b00010[5]:dst1[3]:dst2[3]:0b000[3]:s1_mod[5]:s1_ar[3]:s2_mod[5]:s2_ar[3])
op LDF_LDF_ext(0b11[2]:0b00010[5]:dst1[3]:dst2[3]:0b000[3]:s1_mod[5]:s1_ar[3]:0b111[3]:src2[5])

/* end of LDF || LDF (load floating-point value)
 **********************************************************/

/**********************************************************
 * LDI || LDI (load integer)
 * op LDI_LDI(0b11[2]:0b00011[5]:dst1[3]:dst2[3]:0b000[3]:src1[8]:src2[8])
 */

op LDI_LDI    (0b11[2]:0b00011[5]:dst1[3]:dst2[3]:0b000[3]:s1_mod[5]:s1_ar[3]:s2_mod[5]:s2_ar[3])
op LDI_LDI_ext(0b11[2]:0b00011[5]:dst1[3]:dst2[3]:0b000[3]:s1_mod[5]:s1_ar[3]:0b111[3]:src2[5])

/* end of LDI || LDI (load integer)
 **********************************************************/

/**********************************************************
 * MPYF3 || ADDF3 (multiply and add floating-point value)
 * op MPYF3_ADDF3(0b10[2]:0b0000[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
 */

op MPYF3_ADDF3    (0b10[2]:0b0000[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:s3_mod[5]:s3_ar[3]:s4_mod[5]:s4_ar[3])
op MPYF3_ADDF3_ext(0b10[2]:0b0000[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:0b111[3]:src3[5]:0b111[3]:src4[5])

/* end of MPYF3 || ADDF3 (multiply and add floating-point value)
 **********************************************************/

/**********************************************************
 * MPYF3 || SUBF3 (multiply and subtract floating-point value)
 * op MPYF3_SUBF3(0b10[2]:0b0001[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
 */

op MPYF3_SUBF3    (0b10[2]:0b0001[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:s3_mod[5]:s3_ar[3]:s4_mod[5]:s4_ar[3])
op MPYF3_SUBF3_ext(0b10[2]:0b0001[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:0b111[3]:src3[5]:0b111[3]:src4[5])

/* end of MPYF3 || SUBF3 (multiply and subtract floating-point value)
 **********************************************************/

/**********************************************************
 * MPYI3 || ADDI3 (multiply and add integer)
 * op MPYI3_ADDI3(0b10[2]:0b0010[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
 */

op MPYI3_ADDI3    (0b10[2]:0b0010[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:s3_mod[5]:s3_ar[3]:s4_mod[5]:s4_ar[3])
op MPYI3_ADDI3_ext(0b10[2]:0b0010[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:0b111[3]:src3[5]:0b111[3]:src4[5])

/* end of MPYI3 || ADDI3 (multiply and add integer)
 **********************************************************/

/**********************************************************
 * MPYI3 || SUBI3 (multiply and subtract integer)
 * op MPYI3_SUBI3(0b10[2]:0b0011[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
 */

op MPYI3_SUBI3    (0b10[2]:0b0011[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:s3_mod[5]:s3_ar[3]:s4_mod[5]:s4_ar[3])
op MPYI3_SUBI3_ext(0b10[2]:0b0011[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:0b111[3]:src3[5]:0b111[3]:src4[5])

/* end of MPYI3 || SUBI3 (multiply and subtract integer)
 **********************************************************/
