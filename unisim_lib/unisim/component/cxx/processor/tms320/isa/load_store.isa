/*
 *  Copyright (c) 2009,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 *          Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* List of load/store operations:
 * - LDE          load floating-point exponent
 * - LDF          load floating-point value
 * - LDFcond      load floating-point value conditionally
 * - LDI          load integer
 * - LDIcond      load integer conditionally
 * - LDM          load floating-point mantissa
 * - LDP          load data page pointer
 * - POP          pop integer from stack
 * - POPF         pop floating-point value from stack
 * - PUSH         push integer on stack
 * - PUSHF        push floating-point value on stack
 * - STF          store floating-point value
 * - STI          store integer
 */
 
/************************************************
 * LDE (load floating-point exponent)
 * op LDE(0b000[3]:0b001101[6]:g[2]:dst[5]:src[16])
 */

op LDE_reg  (0b000[3]:0b001101[6]:0b00[2]:dst[5]:0[11]:src[5])
op LDE_dir  (0b000[3]:0b001101[6]:0b01[2]:dst[5]:direct[16])
op LDE_indir(0b000[3]:0b001101[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op LDE_imm  (0b000[3]:0b001101[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of LDE (load floating-point exponent)
 *************************************************/
 
/************************************************
 * LDF (load floating-point value)
 * op LDF(0b000[3]:0b001110[6]:g[2]:dst[5]:ext<32> src[16])
 */
 
op LDF_reg  (0b000[3]:0b001110[6]:0b00[2]:dst[5]:0[11]:src[5])
op LDF_dir  (0b000[3]:0b001110[6]:0b01[2]:dst[5]:direct[16])
op LDF_indir(0b000[3]:0b001110[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op LDF_imm  (0b000[3]:0b001110[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of LDF (load floating-point value)
 *************************************************/

/************************************************
 * LDFcond (load floating-point value conditionally)
 * op LDFcond(0b0100[4]:cond[4]:g[2]:dst[5]:ext<32> src[16])
 */

op LDFcond_reg  (0b0100[4]:cond[5]:0b00[2]:dst[5]:0[11]:src[5])
op LDFcond_dir  (0b0100[4]:cond[5]:0b01[2]:dst[5]:direct[16])
op LDFcond_indir(0b0100[4]:cond[5]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op LDFcond_imm  (0b0100[4]:cond[5]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of LDFcond (load floating-point value conditionally)
 *************************************************/

/*************************************************
 * LDI (load integer)
 * op LDI(0b000[3]:0b010000[6]:g[2]:dst[5]:ext<32> src[16])
 */

op LDI_reg  (0b000[3]:0b010000[6]:0b00[2]:dst[5]:0[11]:src[5])
op LDI_dir  (0b000[3]:0b010000[6]:0b01[2]:dst[5]:direct[16])
op LDI_indir(0b000[3]:0b010000[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op LDI_imm  (0b000[3]:0b010000[6]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of LDI (load integer)
 *************************************************/

/*************************************************
 * LDIcond (load integer conditionally)
 * op LDIcond(0b0101[4]:cond[4]:g[2]:dst[5]:src[16])
 */
 
op LDIcond_reg  (0b0101[4]:cond[5]:0b00[2]:dst[5]:0[11]:src[5])
op LDIcond_dir  (0b0101[4]:cond[5]:0b01[2]:dst[5]:direct[16])
op LDIcond_indir(0b0101[4]:cond[5]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op LDIcond_imm  (0b0101[4]:cond[5]:0b11[2]:dst[5]:sext<32> imm[16])

/* end of LDIcond (load integer conditionally)
 *************************************************/

/*************************************************
 * LDM (load floating-point mantissa)
 * op LDM(0b000[3]:0b010010[6]:g[2]:dst[5]:src[16])
 */
 
op LDM_reg  (0b000[3]:0b010010[6]:0b00[2]:dst[5]:0[11]:src[5])
op LDM_dir  (0b000[3]:0b010010[6]:0b01[2]:dst[5]:direct[16])
op LDM_indir(0b000[3]:0b010010[6]:0b10[2]:dst[5]:mod[4]:ar[4]:disp[8])
op LDM_imm  (0b000[3]:0b010010[6]:0b11[2]:dst[5]:0[4]:imm[12])

/* end of LDM (load floating-point mantissa)
 *************************************************/

/*************************************************
 * LDP (load data page pointer)
 * op LDP(0b000[3]:0b010000[6]:0b11[2]:0b10000[5]:0b00000000[8]:src[8])
 */

op LDP(0b000[3]:0b010000[6]:0b11[2]:0b10000[5]:0b00000000[8]:src[8])

/* end of LDP (load data page pointer)
 *************************************************/

/*************************************************
 * POP (pop integer from stack)
 * op POP(0b000[3]:0b011100[6]:0b01[2]:dst[5]:0[16])
 */

op POP(0b000[3]:0b011100[6]:0b01[2]:dst[5]:0[16])

/* end of POP (pop integer from stack)
 *************************************************/

/*************************************************
 * POPF (pop floating-point value from stack)
 * op POPF(0b000[3]:0b011101[6]:0b01[2]:dst[5]:0[16])
 */

op POPF(0b000[3]:0b011101[6]:0b01[2]:dst[5]:0[16])

/* end of POPF (pop floating-point value from stack)
 *************************************************/

/*************************************************
 * PUSH (push integer on stack)
 * op PUSH(0b000[3]:0b011110[6]:0b01[2]:src[5]:0[16])
 */

op PUSH(0b000[3]:0b011110[6]:0b01[2]:src[5]:0[16])

/* end of POPF (pop floating-point value from stack)
 *************************************************/

/*************************************************
 * PUSHF (push floating-point value on stack)
 * op PUSHF(0b000[3]:0b011111[6]:0b01[2]:src[5]:0[16])
 */

op PUSHF(0b000[3]:0b011111[6]:0b01[2]:src[5]:0[16])

/* end of PUSHF (push floating-point value on stack)
 *************************************************/

/*************************************************
 * STF (store floating-point value)
 * op STF(0b000[3]:0b101000[6]:g[2]:src[5]:dst[16])
 */

op STF_dir  (0b000[3]:0b101000[6]:0b01[2]:src[5]:direct[16])
op STF_indir(0b000[3]:0b101000[6]:0b10[2]:src[5]:mod[4]:ar[4]:disp[8])

/* end of STF (store floating-point value)
 *************************************************/

/*************************************************
 * STI (store integer)
 * op STI(0b000[3]:0b101010[6]:g[2]:src[5]:dst[16])
 */
 
op STI_dir  (0b000[3]:0b101010[6]:0b01[2]:src[5]:direct[16])
op STI_indir(0b000[3]:0b101010[6]:0b10[2]:src[5]:mod[4]:ar[4]:disp[8])

/* end of STI (store integer)
 *************************************************/
