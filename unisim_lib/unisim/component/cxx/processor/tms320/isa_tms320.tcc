#include "isa_tms320.hh"
#include <cassert>
#line 70 "isa/tms320.isa"

/* code to be included at the beginning of the implementation of the library */
#include <iostream>
#include <string>
#include "unisim/component/cxx/processor/tms320/exception.hh"

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace tms320 {

					using std::ostream;
					using std::hex;
					using std::dec;
					using std::endl;
					using std::string;

					static const char *REG_NAME[] = {
						"R0",  "R1",  "R2",  "R3",  "R4",  "R5",  "R6",  "R7",
						"AR0", "AR1", "AR2", "AR3", "AR4", "AR5", "AR6", "AR7",
						"DP", "IR0", "IR1",  "BK",  "SP",  "ST",  "IE",  "IF",
						"IOF",  "RS",  "RE",  "RC",    0,     0,     0,     0
					};

					static const char *COND_NAME[] = {
						"U",    // 00000
						"LO",   // 00001
						"LS",   // 00010
						"HI",   // 00011
						"HS",   // 00100
						"EQ",   // 00101
						"NE",   // 00110
						"LT",   // 00111
						"LE",   // 01000
						"GT",   // 01001
						"GE",   // 01010
						0,      // 01011
						"NV",   // 01100
						"V",    // 01101
						"NUF",  // 01110
						"UF",   // 01111
						"NLV",  // 10000
						"LV",   // 10001
						"NLUF", // 10010
						"LUF",  // 10011
						"ZUF",  // 10100
						0,      // 10101
						0,      // 10110
						0,      // 10111
						0,      // 11000
						0,      // 11001
						0,      // 11010
						0,      // 11011
						0,      // 11100
						0,      // 11101
						0,      // 11110
						0       // 11111
					};

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::SignedSatAdd32;
					using unisim::util::arithmetic::Sub32;
					using unisim::util::arithmetic::SignedSatSub32;
					using unisim::util::arithmetic::RotateLeft;
					using unisim::util::arithmetic::RotateRight;
					using unisim::util::arithmetic::ShiftLeft;
					using unisim::util::arithmetic::ShiftRight;
					using unisim::util::arithmetic::ShiftArithmeticRight;
					using unisim::util::arithmetic::SignExtend;

				} // end of namespace tms320
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 82 "isa_tms320.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace tms320 { namespace isa { namespace tms320 {
template <
#line 45 "isa/tms320.isa"
class
#line 87 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106 "isa_tms320.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 128 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 137 "isa_tms320.tcc"
>::~Operation()
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 155 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 159 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 167 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 174 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 181 "isa_tms320.tcc"
)
{
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		return false;
	}
#line 188 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 203 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 207 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 215 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 219 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 222 "isa_tms320.tcc"
)
{
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		throw UnknownOpcodeException<CONFIG, DEBUG>(this);
	}
#line 229 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 244 "isa_tms320.tcc"
>
class OpLDE_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 253 "isa_tms320.tcc"
>
{
public:
	OpLDE_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 263 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 267 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 270 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 274 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 277 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 357 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 361 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 364 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 382 "isa_tms320.tcc"
>
class OpLDE_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 391 "isa_tms320.tcc"
>
{
public:
	OpLDE_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 401 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 405 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 408 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 412 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 415 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 495 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 499 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 502 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 520 "isa_tms320.tcc"
>
class OpLDE_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 529 "isa_tms320.tcc"
>
{
public:
	OpLDE_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 541 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 545 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 548 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 552 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 555 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 635 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 639 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 642 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 660 "isa_tms320.tcc"
>
class OpLDE_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 669 "isa_tms320.tcc"
>
{
public:
	OpLDE_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 679 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 686 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 773 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 777 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 798 "isa_tms320.tcc"
>
class OpLDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 807 "isa_tms320.tcc"
>
{
public:
	OpLDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 817 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 821 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 824 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 831 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 911 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 915 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 918 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 936 "isa_tms320.tcc"
>
class OpLDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 945 "isa_tms320.tcc"
>
{
public:
	OpLDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 955 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 959 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 962 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 966 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 969 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1049 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1053 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1056 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1074 "isa_tms320.tcc"
>
class OpLDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1083 "isa_tms320.tcc"
>
{
public:
	OpLDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1095 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1099 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1102 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1106 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1109 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1189 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1193 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1196 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1214 "isa_tms320.tcc"
>
class OpLDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1223 "isa_tms320.tcc"
>
{
public:
	OpLDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1233 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1237 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1240 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1244 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1247 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1327 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1331 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1334 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1352 "isa_tms320.tcc"
>
class OpLDFcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1361 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1491 "isa_tms320.tcc"
>
class OpLDFcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1500 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1511 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1515 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1518 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1522 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1525 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1605 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1609 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1612 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1630 "isa_tms320.tcc"
>
class OpLDFcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1639 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1652 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1656 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1659 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1663 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1666 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1746 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1750 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1753 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1771 "isa_tms320.tcc"
>
class OpLDFcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1780 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1791 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1795 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1798 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1802 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1805 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1885 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1889 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1892 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1910 "isa_tms320.tcc"
>
class OpLDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1919 "isa_tms320.tcc"
>
{
public:
	OpLDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1929 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1933 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1936 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1940 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1943 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2023 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2027 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2030 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2048 "isa_tms320.tcc"
>
class OpLDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2057 "isa_tms320.tcc"
>
{
public:
	OpLDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2067 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2071 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2074 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2078 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2081 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2161 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2165 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2168 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2186 "isa_tms320.tcc"
>
class OpLDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2195 "isa_tms320.tcc"
>
{
public:
	OpLDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2207 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2211 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2214 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2218 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2221 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2301 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2305 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2308 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2326 "isa_tms320.tcc"
>
class OpLDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2335 "isa_tms320.tcc"
>
{
public:
	OpLDI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2345 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2349 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2352 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2356 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2359 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2439 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2443 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2446 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2464 "isa_tms320.tcc"
>
class OpLDIcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2473 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2484 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2488 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2491 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2495 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2498 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2578 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2582 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2603 "isa_tms320.tcc"
>
class OpLDIcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2612 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2623 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2627 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2630 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2634 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2637 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2717 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2721 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2724 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2742 "isa_tms320.tcc"
>
class OpLDIcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2751 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2764 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2768 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2771 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2775 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2778 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2858 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2862 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2865 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2883 "isa_tms320.tcc"
>
class OpLDIcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2892 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2903 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2907 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2910 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2914 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2917 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2997 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3001 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3004 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3022 "isa_tms320.tcc"
>
class OpLDM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3031 "isa_tms320.tcc"
>
{
public:
	OpLDM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3041 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3045 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3048 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3052 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3055 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3135 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3139 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3142 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3160 "isa_tms320.tcc"
>
class OpLDM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3169 "isa_tms320.tcc"
>
{
public:
	OpLDM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3179 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3183 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3186 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3190 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3193 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3273 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3277 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3280 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3298 "isa_tms320.tcc"
>
class OpLDM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3307 "isa_tms320.tcc"
>
{
public:
	OpLDM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3319 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3326 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3330 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3333 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3413 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3417 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3420 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3438 "isa_tms320.tcc"
>
class OpLDM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3447 "isa_tms320.tcc"
>
{
public:
	OpLDM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3457 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3461 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3464 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3468 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3471 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3551 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3555 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3558 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3576 "isa_tms320.tcc"
>
class OpLDP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3585 "isa_tms320.tcc"
>
{
public:
	OpLDP(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3594 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3598 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3601 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3605 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3608 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3688 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3692 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3695 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3713 "isa_tms320.tcc"
>
class OpPOP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3722 "isa_tms320.tcc"
>
{
public:
	OpPOP(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3731 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3735 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3738 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3742 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3745 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3825 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3829 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3832 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3850 "isa_tms320.tcc"
>
class OpPOPF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3859 "isa_tms320.tcc"
>
{
public:
	OpPOPF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3868 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3872 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3875 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3879 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3882 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3962 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3966 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3969 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3987 "isa_tms320.tcc"
>
class OpPUSH : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3996 "isa_tms320.tcc"
>
{
public:
	OpPUSH(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4005 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4009 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4012 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4016 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4019 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4099 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4103 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4106 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4124 "isa_tms320.tcc"
>
class OpPUSHF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4133 "isa_tms320.tcc"
>
{
public:
	OpPUSHF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4142 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4149 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4153 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4156 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4236 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4240 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4243 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4261 "isa_tms320.tcc"
>
class OpSTF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4270 "isa_tms320.tcc"
>
{
public:
	OpSTF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4280 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4284 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4287 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4291 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4294 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4374 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4378 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4381 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4399 "isa_tms320.tcc"
>
class OpSTF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4408 "isa_tms320.tcc"
>
{
public:
	OpSTF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4420 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4424 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4427 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4431 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4434 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4514 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4518 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4521 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4539 "isa_tms320.tcc"
>
class OpSTI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4548 "isa_tms320.tcc"
>
{
public:
	OpSTI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4558 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4562 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4565 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4569 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4572 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4652 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4656 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4659 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4677 "isa_tms320.tcc"
>
class OpSTI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4686 "isa_tms320.tcc"
>
{
public:
	OpSTI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4698 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4702 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4705 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4709 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4712 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4792 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4796 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4799 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4817 "isa_tms320.tcc"
>
class OpABSF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4826 "isa_tms320.tcc"
>
{
public:
	OpABSF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4836 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4840 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4843 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4847 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4850 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4930 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4934 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4937 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4955 "isa_tms320.tcc"
>
class OpABSF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4964 "isa_tms320.tcc"
>
{
public:
	OpABSF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4974 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4978 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4981 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4985 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4988 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5068 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5072 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5075 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5093 "isa_tms320.tcc"
>
class OpABSF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5102 "isa_tms320.tcc"
>
{
public:
	OpABSF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5114 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5121 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5125 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5128 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5208 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5212 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5215 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5233 "isa_tms320.tcc"
>
class OpABSF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5242 "isa_tms320.tcc"
>
{
public:
	OpABSF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5252 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5259 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5266 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5346 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5350 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5371 "isa_tms320.tcc"
>
class OpABSI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5380 "isa_tms320.tcc"
>
{
public:
	OpABSI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5390 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5397 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5404 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5484 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5488 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5509 "isa_tms320.tcc"
>
class OpABSI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5518 "isa_tms320.tcc"
>
{
public:
	OpABSI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5528 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5535 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5539 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5542 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5622 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5626 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5629 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5647 "isa_tms320.tcc"
>
class OpABSI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5656 "isa_tms320.tcc"
>
{
public:
	OpABSI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5668 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5672 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5675 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5679 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5682 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5762 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5766 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5769 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5787 "isa_tms320.tcc"
>
class OpABSI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5796 "isa_tms320.tcc"
>
{
public:
	OpABSI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5806 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5810 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5813 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5817 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5820 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5900 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5904 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5907 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5925 "isa_tms320.tcc"
>
class OpADDC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5934 "isa_tms320.tcc"
>
{
public:
	OpADDC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5944 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5948 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5951 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5955 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5958 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6038 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6042 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6045 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6063 "isa_tms320.tcc"
>
class OpADDC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6072 "isa_tms320.tcc"
>
{
public:
	OpADDC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6082 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6086 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6089 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6093 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6096 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6176 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6180 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6183 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6201 "isa_tms320.tcc"
>
class OpADDC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6210 "isa_tms320.tcc"
>
{
public:
	OpADDC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6222 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6226 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6229 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6233 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6236 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6316 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6320 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6323 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6341 "isa_tms320.tcc"
>
class OpADDC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6350 "isa_tms320.tcc"
>
{
public:
	OpADDC_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6360 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6364 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6367 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6371 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6374 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6454 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6458 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6461 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6479 "isa_tms320.tcc"
>
class OpADDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6488 "isa_tms320.tcc"
>
{
public:
	OpADDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6498 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6502 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6505 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6509 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6512 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6592 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6596 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6599 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6617 "isa_tms320.tcc"
>
class OpADDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6626 "isa_tms320.tcc"
>
{
public:
	OpADDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6636 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6640 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6643 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6647 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6650 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6730 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6734 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6737 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6755 "isa_tms320.tcc"
>
class OpADDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6764 "isa_tms320.tcc"
>
{
public:
	OpADDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6776 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6780 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6783 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6787 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6790 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6870 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6874 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6877 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6895 "isa_tms320.tcc"
>
class OpADDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6904 "isa_tms320.tcc"
>
{
public:
	OpADDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6914 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6918 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6921 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6925 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6928 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7008 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7012 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7015 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7033 "isa_tms320.tcc"
>
class OpADDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7042 "isa_tms320.tcc"
>
{
public:
	OpADDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7052 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7056 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7059 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7063 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7066 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7146 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7150 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7153 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7171 "isa_tms320.tcc"
>
class OpADDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7180 "isa_tms320.tcc"
>
{
public:
	OpADDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7190 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7194 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7197 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7201 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7204 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7284 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7288 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7291 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7309 "isa_tms320.tcc"
>
class OpADDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7318 "isa_tms320.tcc"
>
{
public:
	OpADDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7330 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7334 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7337 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7341 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7344 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7424 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7428 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7431 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7449 "isa_tms320.tcc"
>
class OpADDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7458 "isa_tms320.tcc"
>
{
public:
	OpADDI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7468 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7472 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7475 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7479 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7482 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7562 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7566 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7569 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7587 "isa_tms320.tcc"
>
class OpAND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7596 "isa_tms320.tcc"
>
{
public:
	OpAND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7606 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7610 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7613 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7617 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7620 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7700 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7704 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7707 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7725 "isa_tms320.tcc"
>
class OpAND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7734 "isa_tms320.tcc"
>
{
public:
	OpAND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7744 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7748 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7751 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7755 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7758 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7838 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7842 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7845 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7863 "isa_tms320.tcc"
>
class OpAND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7872 "isa_tms320.tcc"
>
{
public:
	OpAND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7884 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7888 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7891 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7895 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7898 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7978 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7982 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7985 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8003 "isa_tms320.tcc"
>
class OpAND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8012 "isa_tms320.tcc"
>
{
public:
	OpAND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8022 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8026 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8029 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8036 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8116 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8120 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8123 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8141 "isa_tms320.tcc"
>
class OpANDN_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8150 "isa_tms320.tcc"
>
{
public:
	OpANDN_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8160 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8164 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8167 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8174 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8254 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8258 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8261 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8279 "isa_tms320.tcc"
>
class OpANDN_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8288 "isa_tms320.tcc"
>
{
public:
	OpANDN_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8298 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8302 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8305 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8309 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8312 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8392 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8396 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8399 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8417 "isa_tms320.tcc"
>
class OpANDN_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8426 "isa_tms320.tcc"
>
{
public:
	OpANDN_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8438 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8442 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8445 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8449 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8452 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8532 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8536 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8539 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8557 "isa_tms320.tcc"
>
class OpANDN_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8566 "isa_tms320.tcc"
>
{
public:
	OpANDN_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8576 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8580 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8583 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8587 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8590 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8670 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8674 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8677 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8695 "isa_tms320.tcc"
>
class OpASH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8704 "isa_tms320.tcc"
>
{
public:
	OpASH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8714 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8718 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8721 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8725 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8728 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8808 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8812 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8815 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8833 "isa_tms320.tcc"
>
class OpASH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8842 "isa_tms320.tcc"
>
{
public:
	OpASH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8852 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8856 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8859 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8863 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8866 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8946 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8950 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8953 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8971 "isa_tms320.tcc"
>
class OpASH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8980 "isa_tms320.tcc"
>
{
public:
	OpASH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8992 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8996 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8999 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9003 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9006 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9086 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9090 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9093 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9111 "isa_tms320.tcc"
>
class OpASH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9120 "isa_tms320.tcc"
>
{
public:
	OpASH_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9130 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9134 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9137 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9141 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9144 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9224 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9228 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9231 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9249 "isa_tms320.tcc"
>
class OpCMPF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9258 "isa_tms320.tcc"
>
{
public:
	OpCMPF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9268 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9272 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9275 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9279 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9282 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9362 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9366 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9369 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9387 "isa_tms320.tcc"
>
class OpCMPF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9396 "isa_tms320.tcc"
>
{
public:
	OpCMPF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9406 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9410 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9413 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9417 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9420 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9500 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9504 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9507 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9525 "isa_tms320.tcc"
>
class OpCMPF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9534 "isa_tms320.tcc"
>
{
public:
	OpCMPF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9546 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9550 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9553 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9557 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9560 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9640 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9644 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9647 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9665 "isa_tms320.tcc"
>
class OpCMPF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9674 "isa_tms320.tcc"
>
{
public:
	OpCMPF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9684 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9688 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9691 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9695 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9698 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9778 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9782 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9785 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9803 "isa_tms320.tcc"
>
class OpCMPI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9812 "isa_tms320.tcc"
>
{
public:
	OpCMPI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9822 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9826 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9829 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9833 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9836 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9916 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9920 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9923 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9941 "isa_tms320.tcc"
>
class OpCMPI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9950 "isa_tms320.tcc"
>
{
public:
	OpCMPI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9960 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9964 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9967 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9971 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9974 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10054 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10058 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10061 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10079 "isa_tms320.tcc"
>
class OpCMPI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10088 "isa_tms320.tcc"
>
{
public:
	OpCMPI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10219 "isa_tms320.tcc"
>
class OpCMPI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10228 "isa_tms320.tcc"
>
{
public:
	OpCMPI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10238 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10242 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10245 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10249 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10252 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10332 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10336 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10339 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10357 "isa_tms320.tcc"
>
class OpFIX_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10366 "isa_tms320.tcc"
>
{
public:
	OpFIX_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10376 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10380 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10383 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10387 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10390 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10470 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10474 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10477 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10495 "isa_tms320.tcc"
>
class OpFIX_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10504 "isa_tms320.tcc"
>
{
public:
	OpFIX_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10514 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10521 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10528 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10608 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10612 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10615 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10633 "isa_tms320.tcc"
>
class OpFIX_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10642 "isa_tms320.tcc"
>
{
public:
	OpFIX_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10654 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10661 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10665 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10668 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10748 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10752 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10755 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10773 "isa_tms320.tcc"
>
class OpFIX_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10782 "isa_tms320.tcc"
>
{
public:
	OpFIX_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10792 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10796 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10799 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10803 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10806 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10886 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10890 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10893 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10911 "isa_tms320.tcc"
>
class OpFLOAT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10920 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10930 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10934 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10937 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10941 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10944 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11024 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11028 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11031 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11049 "isa_tms320.tcc"
>
class OpFLOAT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11058 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11068 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11072 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11075 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11079 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11082 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11162 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11166 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11169 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11187 "isa_tms320.tcc"
>
class OpFLOAT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11196 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11208 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11215 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11219 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11222 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11302 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11306 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11309 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11327 "isa_tms320.tcc"
>
class OpFLOAT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11336 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11346 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11350 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11353 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11357 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11360 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11440 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11444 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11447 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11465 "isa_tms320.tcc"
>
class OpLSH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11474 "isa_tms320.tcc"
>
{
public:
	OpLSH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11484 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11488 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11491 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11495 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11498 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11578 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11582 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11603 "isa_tms320.tcc"
>
class OpLSH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11612 "isa_tms320.tcc"
>
{
public:
	OpLSH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11622 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11626 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11629 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11633 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11636 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11716 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11720 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11723 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11741 "isa_tms320.tcc"
>
class OpLSH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11750 "isa_tms320.tcc"
>
{
public:
	OpLSH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11762 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11766 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11769 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11773 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11776 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11856 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11860 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11863 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11881 "isa_tms320.tcc"
>
class OpLSH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11890 "isa_tms320.tcc"
>
{
public:
	OpLSH_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11900 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11904 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11907 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11911 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11914 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11994 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11998 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12001 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12019 "isa_tms320.tcc"
>
class OpMPYF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12028 "isa_tms320.tcc"
>
{
public:
	OpMPYF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12038 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12042 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12045 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12049 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12052 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12132 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12136 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12139 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12157 "isa_tms320.tcc"
>
class OpMPYF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12166 "isa_tms320.tcc"
>
{
public:
	OpMPYF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12176 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12180 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12183 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12187 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12190 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12270 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12274 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12277 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12295 "isa_tms320.tcc"
>
class OpMPYF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12304 "isa_tms320.tcc"
>
{
public:
	OpMPYF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12316 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12320 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12323 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12327 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12330 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12410 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12414 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12417 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12435 "isa_tms320.tcc"
>
class OpMPYF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12444 "isa_tms320.tcc"
>
{
public:
	OpMPYF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12454 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12458 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12461 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12465 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12468 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12548 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12552 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12555 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12573 "isa_tms320.tcc"
>
class OpMPYI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12582 "isa_tms320.tcc"
>
{
public:
	OpMPYI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12592 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12596 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12599 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12603 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12606 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12686 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12690 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12693 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12711 "isa_tms320.tcc"
>
class OpMPYI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12720 "isa_tms320.tcc"
>
{
public:
	OpMPYI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12730 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12734 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12737 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12741 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12744 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12824 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12828 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12831 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12849 "isa_tms320.tcc"
>
class OpMPYI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12858 "isa_tms320.tcc"
>
{
public:
	OpMPYI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12870 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12874 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12877 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12881 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12884 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12964 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12968 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12971 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12989 "isa_tms320.tcc"
>
class OpMPYI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12998 "isa_tms320.tcc"
>
{
public:
	OpMPYI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13008 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13012 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13015 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13019 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13022 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13102 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13106 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13109 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13127 "isa_tms320.tcc"
>
class OpNEGB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13136 "isa_tms320.tcc"
>
{
public:
	OpNEGB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13146 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13150 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13153 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13157 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13160 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13240 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13244 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13247 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13265 "isa_tms320.tcc"
>
class OpNEGB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13274 "isa_tms320.tcc"
>
{
public:
	OpNEGB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13284 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13288 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13291 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13295 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13298 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13378 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13382 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13385 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13403 "isa_tms320.tcc"
>
class OpNEGB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13412 "isa_tms320.tcc"
>
{
public:
	OpNEGB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13424 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13428 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13431 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13435 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13438 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13518 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13522 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13525 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13543 "isa_tms320.tcc"
>
class OpNEGB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13552 "isa_tms320.tcc"
>
{
public:
	OpNEGB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13562 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13566 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13569 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13573 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13576 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13656 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13660 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13663 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13681 "isa_tms320.tcc"
>
class OpNEGF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13690 "isa_tms320.tcc"
>
{
public:
	OpNEGF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13700 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13704 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13707 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13711 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13714 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13794 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13798 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13801 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13819 "isa_tms320.tcc"
>
class OpNEGF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13828 "isa_tms320.tcc"
>
{
public:
	OpNEGF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13838 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13845 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13849 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13852 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13932 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13936 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13939 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13957 "isa_tms320.tcc"
>
class OpNEGF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13966 "isa_tms320.tcc"
>
{
public:
	OpNEGF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13978 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13982 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13985 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13989 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13992 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14072 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14076 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14079 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14097 "isa_tms320.tcc"
>
class OpNEGF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14106 "isa_tms320.tcc"
>
{
public:
	OpNEGF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14116 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14120 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14123 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14127 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14130 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14210 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14214 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14217 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14235 "isa_tms320.tcc"
>
class OpNEGI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14244 "isa_tms320.tcc"
>
{
public:
	OpNEGI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14254 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14258 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14261 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14265 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14268 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14348 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14352 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14355 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14373 "isa_tms320.tcc"
>
class OpNEGI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14382 "isa_tms320.tcc"
>
{
public:
	OpNEGI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14392 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14396 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14399 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14403 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14406 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14486 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14490 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14493 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14511 "isa_tms320.tcc"
>
class OpNEGI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14520 "isa_tms320.tcc"
>
{
public:
	OpNEGI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14532 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14536 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14539 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14546 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14626 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14651 "isa_tms320.tcc"
>
class OpNEGI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14660 "isa_tms320.tcc"
>
{
public:
	OpNEGI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14670 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14674 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14677 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14681 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14684 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14764 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14768 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14771 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14789 "isa_tms320.tcc"
>
class OpNORM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14798 "isa_tms320.tcc"
>
{
public:
	OpNORM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14808 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14812 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14815 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14819 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14822 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14902 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14906 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14909 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14927 "isa_tms320.tcc"
>
class OpNORM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14936 "isa_tms320.tcc"
>
{
public:
	OpNORM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14946 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14950 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14953 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14957 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14960 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15040 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15044 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15047 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15065 "isa_tms320.tcc"
>
class OpNORM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15074 "isa_tms320.tcc"
>
{
public:
	OpNORM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15086 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15090 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15093 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15097 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15100 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15180 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15184 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15187 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15205 "isa_tms320.tcc"
>
class OpNORM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15214 "isa_tms320.tcc"
>
{
public:
	OpNORM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15224 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15228 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15231 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15235 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15238 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15318 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15322 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15325 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15343 "isa_tms320.tcc"
>
class OpNOT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15352 "isa_tms320.tcc"
>
{
public:
	OpNOT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15362 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15369 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15373 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15376 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15456 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15460 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15463 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15481 "isa_tms320.tcc"
>
class OpNOT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15490 "isa_tms320.tcc"
>
{
public:
	OpNOT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15500 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15504 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15507 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15514 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15594 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15598 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15601 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15619 "isa_tms320.tcc"
>
class OpNOT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15628 "isa_tms320.tcc"
>
{
public:
	OpNOT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15640 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15644 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15647 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15654 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15734 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15738 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15741 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15759 "isa_tms320.tcc"
>
class OpNOT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15768 "isa_tms320.tcc"
>
{
public:
	OpNOT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15778 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15782 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15785 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15789 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15792 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15872 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15876 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15879 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15897 "isa_tms320.tcc"
>
class OpOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15906 "isa_tms320.tcc"
>
{
public:
	OpOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15916 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15920 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15923 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15927 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15930 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16010 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16014 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16017 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16035 "isa_tms320.tcc"
>
class OpOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16044 "isa_tms320.tcc"
>
{
public:
	OpOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16054 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16058 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16061 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16065 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16068 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16148 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16152 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16155 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16173 "isa_tms320.tcc"
>
class OpOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16182 "isa_tms320.tcc"
>
{
public:
	OpOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16194 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16198 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16201 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16208 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16288 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16292 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16295 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16313 "isa_tms320.tcc"
>
class OpOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16322 "isa_tms320.tcc"
>
{
public:
	OpOR_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16332 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16336 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16339 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16343 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16346 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16426 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16430 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16433 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16451 "isa_tms320.tcc"
>
class OpRND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16460 "isa_tms320.tcc"
>
{
public:
	OpRND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16470 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16474 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16477 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16481 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16484 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16564 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16568 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16571 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16589 "isa_tms320.tcc"
>
class OpRND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16598 "isa_tms320.tcc"
>
{
public:
	OpRND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16608 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16612 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16615 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16619 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16622 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16702 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16706 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16709 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16727 "isa_tms320.tcc"
>
class OpRND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16736 "isa_tms320.tcc"
>
{
public:
	OpRND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16748 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16752 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16755 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16759 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16762 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16842 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16846 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16849 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16867 "isa_tms320.tcc"
>
class OpRND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16876 "isa_tms320.tcc"
>
{
public:
	OpRND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16886 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16890 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16893 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16897 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16900 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16980 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16984 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16987 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17005 "isa_tms320.tcc"
>
class OpROL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17014 "isa_tms320.tcc"
>
{
public:
	OpROL(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17023 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17027 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17030 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17034 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17037 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17117 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17121 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17124 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17142 "isa_tms320.tcc"
>
class OpROLC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17151 "isa_tms320.tcc"
>
{
public:
	OpROLC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17160 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17164 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17167 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17174 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17254 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17258 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17261 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17279 "isa_tms320.tcc"
>
class OpROR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17288 "isa_tms320.tcc"
>
{
public:
	OpROR(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17297 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17301 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17304 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17308 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17311 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17391 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17395 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17398 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17416 "isa_tms320.tcc"
>
class OpRORC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17425 "isa_tms320.tcc"
>
{
public:
	OpRORC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17434 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17438 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17441 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17445 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17448 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17528 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17532 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17535 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17553 "isa_tms320.tcc"
>
class OpSUBB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17562 "isa_tms320.tcc"
>
{
public:
	OpSUBB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17572 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17579 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17583 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17586 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17666 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17670 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17673 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17691 "isa_tms320.tcc"
>
class OpSUBB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17700 "isa_tms320.tcc"
>
{
public:
	OpSUBB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17710 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17714 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17717 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17721 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17724 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17804 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17808 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17811 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17829 "isa_tms320.tcc"
>
class OpSUBB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17838 "isa_tms320.tcc"
>
{
public:
	OpSUBB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17850 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17854 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17857 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17861 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17864 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17944 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17948 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17951 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17969 "isa_tms320.tcc"
>
class OpSUBB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17978 "isa_tms320.tcc"
>
{
public:
	OpSUBB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17988 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17992 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17995 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17999 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18002 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18082 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18086 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18089 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18107 "isa_tms320.tcc"
>
class OpSUBC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18116 "isa_tms320.tcc"
>
{
public:
	OpSUBC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18126 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18130 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18133 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18137 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18140 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18220 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18224 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18227 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18245 "isa_tms320.tcc"
>
class OpSUBC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18254 "isa_tms320.tcc"
>
{
public:
	OpSUBC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18264 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18268 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18271 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18275 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18278 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18358 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18362 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18365 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18383 "isa_tms320.tcc"
>
class OpSUBC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18392 "isa_tms320.tcc"
>
{
public:
	OpSUBC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18404 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18408 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18411 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18418 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18498 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18502 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18505 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18523 "isa_tms320.tcc"
>
class OpSUBC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18532 "isa_tms320.tcc"
>
{
public:
	OpSUBC_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18542 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18549 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18556 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18636 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18640 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18643 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18661 "isa_tms320.tcc"
>
class OpSUBF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18670 "isa_tms320.tcc"
>
{
public:
	OpSUBF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18680 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18687 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18691 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18694 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18774 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18778 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18781 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18799 "isa_tms320.tcc"
>
class OpSUBF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18808 "isa_tms320.tcc"
>
{
public:
	OpSUBF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18818 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18822 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18825 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18829 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18832 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18912 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18916 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18919 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18937 "isa_tms320.tcc"
>
class OpSUBF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18946 "isa_tms320.tcc"
>
{
public:
	OpSUBF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18958 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18962 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18965 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18969 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18972 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19052 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19056 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19059 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19077 "isa_tms320.tcc"
>
class OpSUBF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19086 "isa_tms320.tcc"
>
{
public:
	OpSUBF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19096 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19103 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19107 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19110 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19190 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19215 "isa_tms320.tcc"
>
class OpSUBI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19224 "isa_tms320.tcc"
>
{
public:
	OpSUBI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19234 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19238 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19241 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19245 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19248 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19328 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19332 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19335 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19353 "isa_tms320.tcc"
>
class OpSUBI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19362 "isa_tms320.tcc"
>
{
public:
	OpSUBI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19491 "isa_tms320.tcc"
>
class OpSUBI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19500 "isa_tms320.tcc"
>
{
public:
	OpSUBI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19512 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19516 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19519 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19526 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19606 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19610 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19613 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19631 "isa_tms320.tcc"
>
class OpSUBI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19640 "isa_tms320.tcc"
>
{
public:
	OpSUBI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19650 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19654 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19657 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19661 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19664 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19744 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19748 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19751 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19769 "isa_tms320.tcc"
>
class OpSUBRB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19778 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19788 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19792 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19795 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19799 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19802 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19882 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19886 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19889 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19907 "isa_tms320.tcc"
>
class OpSUBRB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19916 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19926 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19930 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19933 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19937 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19940 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20020 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20024 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20027 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20045 "isa_tms320.tcc"
>
class OpSUBRB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20054 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20066 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20073 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20080 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20160 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20164 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20185 "isa_tms320.tcc"
>
class OpSUBRB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20194 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20204 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20208 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20211 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20218 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20298 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20302 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20305 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20323 "isa_tms320.tcc"
>
class OpSUBRF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20332 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20342 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20346 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20349 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20353 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20356 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20436 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20440 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20443 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20461 "isa_tms320.tcc"
>
class OpSUBRF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20470 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20480 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20487 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20491 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20494 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20574 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20578 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20581 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20599 "isa_tms320.tcc"
>
class OpSUBRF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20608 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20620 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20624 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20627 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20631 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20634 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20714 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20718 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20721 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20739 "isa_tms320.tcc"
>
class OpSUBRF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20748 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20758 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20762 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20765 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20769 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20772 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20852 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20856 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20859 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20877 "isa_tms320.tcc"
>
class OpSUBRI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20886 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20896 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20900 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20903 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20907 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20910 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20990 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20994 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20997 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21015 "isa_tms320.tcc"
>
class OpSUBRI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21024 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21034 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21038 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21041 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21045 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21048 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21128 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21132 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21135 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21153 "isa_tms320.tcc"
>
class OpSUBRI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21162 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21174 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21181 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21185 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21188 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21268 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21272 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21275 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21293 "isa_tms320.tcc"
>
class OpSUBRI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21302 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21312 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21316 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21319 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21326 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21406 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21410 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21413 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21431 "isa_tms320.tcc"
>
class OpTSTB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21440 "isa_tms320.tcc"
>
{
public:
	OpTSTB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21450 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21454 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21457 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21461 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21464 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21544 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21548 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21551 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21569 "isa_tms320.tcc"
>
class OpTSTB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21578 "isa_tms320.tcc"
>
{
public:
	OpTSTB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21588 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21592 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21595 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21599 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21602 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21682 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21686 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21689 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21707 "isa_tms320.tcc"
>
class OpTSTB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21716 "isa_tms320.tcc"
>
{
public:
	OpTSTB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21728 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21732 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21735 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21739 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21742 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21822 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21826 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21829 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21847 "isa_tms320.tcc"
>
class OpTSTB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21856 "isa_tms320.tcc"
>
{
public:
	OpTSTB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21866 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21870 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21873 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21877 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21880 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21960 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21964 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21967 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21985 "isa_tms320.tcc"
>
class OpXOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21994 "isa_tms320.tcc"
>
{
public:
	OpXOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22004 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22008 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22011 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22015 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22018 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22098 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22102 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22105 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22123 "isa_tms320.tcc"
>
class OpXOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22132 "isa_tms320.tcc"
>
{
public:
	OpXOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22142 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22149 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22153 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22156 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22236 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22240 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22243 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22261 "isa_tms320.tcc"
>
class OpXOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22270 "isa_tms320.tcc"
>
{
public:
	OpXOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22282 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22286 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22289 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22293 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22296 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22376 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22380 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22383 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22401 "isa_tms320.tcc"
>
class OpXOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22410 "isa_tms320.tcc"
>
{
public:
	OpXOR_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22420 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22424 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22427 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22431 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22434 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22514 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22518 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22521 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22539 "isa_tms320.tcc"
>
class OpADDC3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22548 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22559 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22563 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22566 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22570 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22573 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22653 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22657 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22660 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22678 "isa_tms320.tcc"
>
class OpADDC3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22687 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22699 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22703 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22706 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22710 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22713 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22793 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22797 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22800 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22818 "isa_tms320.tcc"
>
class OpADDC3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22827 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22839 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22843 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22846 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22850 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22853 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22933 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22937 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22940 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22958 "isa_tms320.tcc"
>
class OpADDC3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22967 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22980 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22984 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22987 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22991 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22994 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23074 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23078 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23081 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23099 "isa_tms320.tcc"
>
class OpADDF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23108 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23119 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23123 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23126 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23130 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23133 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23213 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23217 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23220 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23238 "isa_tms320.tcc"
>
class OpADDF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23247 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23259 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23266 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23270 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23273 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23353 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23357 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23360 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23378 "isa_tms320.tcc"
>
class OpADDF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23387 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23399 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23403 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23406 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23410 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23413 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23493 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23497 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23500 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23518 "isa_tms320.tcc"
>
class OpADDF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23527 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23540 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23544 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23547 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23551 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23554 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23634 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23638 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23641 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23659 "isa_tms320.tcc"
>
class OpADDI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23668 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23679 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23686 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23773 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23777 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23798 "isa_tms320.tcc"
>
class OpADDI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23807 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23819 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23823 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23826 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23830 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23833 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23913 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23917 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23920 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23938 "isa_tms320.tcc"
>
class OpADDI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23947 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23959 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23966 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24053 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24057 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24078 "isa_tms320.tcc"
>
class OpADDI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24087 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24219 "isa_tms320.tcc"
>
class OpAND3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24228 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24239 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24243 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24246 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24250 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24253 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24333 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24337 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24340 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24358 "isa_tms320.tcc"
>
class OpAND3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24367 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24379 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24386 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24390 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24393 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24473 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24477 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24498 "isa_tms320.tcc"
>
class OpAND3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24507 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24519 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24526 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24530 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24533 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24613 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24617 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24620 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24638 "isa_tms320.tcc"
>
class OpAND3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24647 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24660 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24664 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24667 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24671 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24674 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24754 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24758 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24761 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24779 "isa_tms320.tcc"
>
class OpANDN3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24788 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24799 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24803 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24806 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24810 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24813 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24893 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24897 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24900 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24918 "isa_tms320.tcc"
>
class OpANDN3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24927 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24939 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24943 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24946 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24950 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24953 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25033 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25037 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25040 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25058 "isa_tms320.tcc"
>
class OpANDN3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25067 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25079 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25083 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25086 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25090 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25093 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25173 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25177 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25180 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25198 "isa_tms320.tcc"
>
class OpANDN3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25207 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25220 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25224 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25227 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25231 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25234 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25314 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25318 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25321 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25339 "isa_tms320.tcc"
>
class OpASH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25348 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25359 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25363 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25366 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25370 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25373 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25453 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25457 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25460 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25478 "isa_tms320.tcc"
>
class OpASH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25487 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25499 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25503 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25506 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25510 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25513 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25593 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25597 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25600 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25618 "isa_tms320.tcc"
>
class OpASH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25627 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25639 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25643 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25646 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25650 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25653 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25733 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25737 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25740 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25758 "isa_tms320.tcc"
>
class OpASH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25767 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25780 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25784 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25787 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25794 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25874 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25878 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25881 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25899 "isa_tms320.tcc"
>
class OpCMPF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25908 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25918 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25925 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25932 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26012 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26016 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26019 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26037 "isa_tms320.tcc"
>
class OpCMPF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26046 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26057 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26061 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26064 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26068 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26071 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26151 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26155 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26158 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26176 "isa_tms320.tcc"
>
class OpCMPF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26181 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26185 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26196 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26200 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26203 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26207 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26210 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26290 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26294 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26297 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26315 "isa_tms320.tcc"
>
class OpCMPF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26324 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26336 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26340 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26343 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26347 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26350 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26430 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26434 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26437 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26455 "isa_tms320.tcc"
>
class OpCMPI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26464 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26474 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26478 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26481 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26485 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26488 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26568 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26572 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26575 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26593 "isa_tms320.tcc"
>
class OpCMPI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26602 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26613 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26617 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26620 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26624 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26627 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26707 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26711 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26714 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26732 "isa_tms320.tcc"
>
class OpCMPI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26741 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26752 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26756 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26759 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26763 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26766 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26846 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26850 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26853 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26871 "isa_tms320.tcc"
>
class OpCMPI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26880 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26892 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26896 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26899 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26903 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26906 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26986 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26990 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26993 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27011 "isa_tms320.tcc"
>
class OpLSH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27020 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27031 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27035 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27038 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27042 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27045 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27125 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27129 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27132 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27150 "isa_tms320.tcc"
>
class OpLSH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27159 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27171 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27175 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27178 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27182 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27185 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27265 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27269 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27272 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27290 "isa_tms320.tcc"
>
class OpLSH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27299 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27311 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27315 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27318 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27322 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27325 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27405 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27409 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27412 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27430 "isa_tms320.tcc"
>
class OpLSH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27439 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27452 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27456 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27459 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27463 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27466 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27546 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27550 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27553 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27571 "isa_tms320.tcc"
>
class OpMPYF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27580 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27591 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27595 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27598 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27602 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27605 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27685 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27689 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27692 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27710 "isa_tms320.tcc"
>
class OpMPYF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27719 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27731 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27735 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27738 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27742 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27745 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27825 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27829 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27832 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27850 "isa_tms320.tcc"
>
class OpMPYF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27859 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27871 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27875 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27878 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27882 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27885 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27965 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27969 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27972 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27990 "isa_tms320.tcc"
>
class OpMPYF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27999 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28012 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28016 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28019 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28023 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28026 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28106 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28110 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28113 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28131 "isa_tms320.tcc"
>
class OpMPYI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28140 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28151 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28155 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28158 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28162 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28165 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28245 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28249 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28252 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28270 "isa_tms320.tcc"
>
class OpMPYI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28279 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28291 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28295 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28298 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28302 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28305 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28385 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28389 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28392 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28410 "isa_tms320.tcc"
>
class OpMPYI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28419 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28431 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28435 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28438 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28442 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28445 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28525 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28529 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28532 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28550 "isa_tms320.tcc"
>
class OpMPYI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28559 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28572 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28579 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28583 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28586 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28666 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28670 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28673 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28691 "isa_tms320.tcc"
>
class OpOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28700 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28711 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28715 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28718 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28722 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28725 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28805 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28809 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28812 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28830 "isa_tms320.tcc"
>
class OpOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28839 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28851 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28855 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28858 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28862 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28865 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28945 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28949 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28952 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28970 "isa_tms320.tcc"
>
class OpOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28979 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28991 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28998 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29002 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29005 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29085 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29089 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29092 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29110 "isa_tms320.tcc"
>
class OpOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29119 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29132 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29136 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29139 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29143 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29146 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29226 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29230 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29233 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29251 "isa_tms320.tcc"
>
class OpSUBB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29260 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29271 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29275 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29278 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29282 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29285 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29365 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29369 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29372 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29390 "isa_tms320.tcc"
>
class OpSUBB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29399 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29411 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29418 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29425 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29505 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29509 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29512 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29530 "isa_tms320.tcc"
>
class OpSUBB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29539 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29551 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29555 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29558 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29562 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29565 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29645 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29649 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29652 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29670 "isa_tms320.tcc"
>
class OpSUBB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29679 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29692 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29696 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29699 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29703 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29706 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29786 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29790 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29793 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29811 "isa_tms320.tcc"
>
class OpSUBF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29820 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29831 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29835 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29838 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29845 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29925 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29929 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29932 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29950 "isa_tms320.tcc"
>
class OpSUBF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29959 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29971 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29975 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29978 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29982 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29985 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30065 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30069 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30072 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30090 "isa_tms320.tcc"
>
class OpSUBF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30099 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30111 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30115 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30118 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30122 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30125 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30205 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30209 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30212 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30230 "isa_tms320.tcc"
>
class OpSUBF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30239 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30252 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30259 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30266 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30346 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30350 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30371 "isa_tms320.tcc"
>
class OpSUBI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30380 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30391 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30395 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30398 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30402 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30405 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30485 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30489 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30492 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30510 "isa_tms320.tcc"
>
class OpSUBI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30519 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30531 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30535 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30538 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30542 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30545 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30625 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30629 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30632 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30650 "isa_tms320.tcc"
>
class OpSUBI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30659 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30671 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30675 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30678 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30682 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30685 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30765 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30769 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30772 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30790 "isa_tms320.tcc"
>
class OpSUBI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30799 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30812 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30816 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30819 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30823 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30826 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30906 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30910 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30913 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30931 "isa_tms320.tcc"
>
class OpTSTB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30940 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30950 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30954 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30957 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30961 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30964 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31044 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31048 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31051 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31069 "isa_tms320.tcc"
>
class OpTSTB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31078 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31089 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31093 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31096 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31103 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31183 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31187 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31190 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31208 "isa_tms320.tcc"
>
class OpTSTB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31217 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31228 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31232 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31235 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31242 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31322 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31326 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31329 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31347 "isa_tms320.tcc"
>
class OpTSTB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31356 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31368 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31372 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31375 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31379 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31382 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31462 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31466 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31469 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31487 "isa_tms320.tcc"
>
class OpXOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31496 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31507 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31514 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31521 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31601 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31605 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31608 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31626 "isa_tms320.tcc"
>
class OpXOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31635 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31647 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31654 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31661 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31741 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31745 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31748 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31766 "isa_tms320.tcc"
>
class OpXOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31775 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31787 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31794 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31798 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31801 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31881 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31885 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31888 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31906 "isa_tms320.tcc"
>
class OpXOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31915 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31928 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31932 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31935 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31939 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31942 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32022 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32026 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32029 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32047 "isa_tms320.tcc"
>
class OpBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32056 "isa_tms320.tcc"
>
{
public:
	OpBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32066 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32073 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32080 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32160 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32164 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32185 "isa_tms320.tcc"
>
class OpBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32194 "isa_tms320.tcc"
>
{
public:
	OpBcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32204 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32208 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32211 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32218 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32298 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32302 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32305 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32323 "isa_tms320.tcc"
>
class OpBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32332 "isa_tms320.tcc"
>
{
public:
	OpBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32342 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32346 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32349 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32353 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32356 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32436 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32440 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32443 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32461 "isa_tms320.tcc"
>
class OpBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32470 "isa_tms320.tcc"
>
{
public:
	OpBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32480 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32487 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32491 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32494 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32574 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32578 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32581 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32599 "isa_tms320.tcc"
>
class OpBR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32608 "isa_tms320.tcc"
>
{
public:
	OpBR(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32617 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32621 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32624 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32628 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32631 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32711 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32715 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32718 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32736 "isa_tms320.tcc"
>
class OpBRD : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32745 "isa_tms320.tcc"
>
{
public:
	OpBRD(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32754 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32758 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32761 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32765 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32768 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32848 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32852 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32855 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32873 "isa_tms320.tcc"
>
class OpCALL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32882 "isa_tms320.tcc"
>
{
public:
	OpCALL(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32891 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32895 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32898 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32902 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32905 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32985 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32989 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33010 "isa_tms320.tcc"
>
class OpCALLcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33019 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33029 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33036 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33040 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33043 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33123 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33127 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33130 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33148 "isa_tms320.tcc"
>
class OpCALLcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33157 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33167 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33174 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33181 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33261 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33265 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33268 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33286 "isa_tms320.tcc"
>
class OpDBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33295 "isa_tms320.tcc"
>
{
public:
	OpDBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33306 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33310 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33313 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33317 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33320 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33400 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33404 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33407 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33425 "isa_tms320.tcc"
>
class OpDBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33434 "isa_tms320.tcc"
>
{
public:
	OpDBcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33445 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33449 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33452 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33456 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33459 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33539 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33543 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33546 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33564 "isa_tms320.tcc"
>
class OpDBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33573 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33584 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33588 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33591 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33595 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33598 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33678 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33682 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33685 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33703 "isa_tms320.tcc"
>
class OpDBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33712 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33723 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33727 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33730 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33734 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33737 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33817 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33821 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33824 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33842 "isa_tms320.tcc"
>
class OpIACK_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33851 "isa_tms320.tcc"
>
{
public:
	OpIACK_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33860 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33864 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33867 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33871 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33874 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33954 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33958 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33961 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33979 "isa_tms320.tcc"
>
class OpIACK_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33988 "isa_tms320.tcc"
>
{
public:
	OpIACK_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33999 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34003 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34006 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34010 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34013 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34093 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34097 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34100 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34118 "isa_tms320.tcc"
>
class OpIDLE : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34127 "isa_tms320.tcc"
>
{
public:
	OpIDLE(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34135 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34139 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34142 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34149 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34229 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34233 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34236 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34254 "isa_tms320.tcc"
>
class OpNOP_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34263 "isa_tms320.tcc"
>
{
public:
	OpNOP_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34272 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34276 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34279 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34283 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34286 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34366 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34370 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34373 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34391 "isa_tms320.tcc"
>
class OpNOP_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34400 "isa_tms320.tcc"
>
{
public:
	OpNOP_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34411 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34418 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34425 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34505 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34509 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34512 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34530 "isa_tms320.tcc"
>
class OpRETIcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34539 "isa_tms320.tcc"
>
{
public:
	OpRETIcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34548 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34552 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34555 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34559 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34562 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34642 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34646 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34649 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34667 "isa_tms320.tcc"
>
class OpRETScond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34676 "isa_tms320.tcc"
>
{
public:
	OpRETScond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34685 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34689 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34692 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34696 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34699 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34779 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34783 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34786 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34804 "isa_tms320.tcc"
>
class OpRPTB : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34813 "isa_tms320.tcc"
>
{
public:
	OpRPTB(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34822 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34826 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34829 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34833 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34836 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34916 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34920 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34923 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34941 "isa_tms320.tcc"
>
class OpRPTS_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34950 "isa_tms320.tcc"
>
{
public:
	OpRPTS_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34959 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34966 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35053 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35057 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35078 "isa_tms320.tcc"
>
class OpRPTS_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35087 "isa_tms320.tcc"
>
{
public:
	OpRPTS_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35096 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35103 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35107 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35110 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35190 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35215 "isa_tms320.tcc"
>
class OpRPTS_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35224 "isa_tms320.tcc"
>
{
public:
	OpRPTS_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35235 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35242 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35246 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35249 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35329 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35333 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35336 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35354 "isa_tms320.tcc"
>
class OpRPTS_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35363 "isa_tms320.tcc"
>
{
public:
	OpRPTS_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35491 "isa_tms320.tcc"
>
class OpSWI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35500 "isa_tms320.tcc"
>
{
public:
	OpSWI(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35508 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35512 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35515 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35519 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35522 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35602 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35606 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35609 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35627 "isa_tms320.tcc"
>
class OpTRAPcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35636 "isa_tms320.tcc"
>
{
public:
	OpTRAPcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t n;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35646 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35650 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35653 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35657 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35660 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35740 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35744 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35747 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35765 "isa_tms320.tcc"
>
class OpIDLE2 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35774 "isa_tms320.tcc"
>
{
public:
	OpIDLE2(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35782 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35786 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35789 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35793 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35796 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35876 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35880 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35883 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35901 "isa_tms320.tcc"
>
class OpLOPOWER : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35910 "isa_tms320.tcc"
>
{
public:
	OpLOPOWER(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35918 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35925 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35932 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36012 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36016 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36019 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36037 "isa_tms320.tcc"
>
class OpMAXSPEED : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36046 "isa_tms320.tcc"
>
{
public:
	OpMAXSPEED(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 36054 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36058 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36061 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 36065 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 36068 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36148 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36152 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36155 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36173 "isa_tms320.tcc"
>
class OpLDFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36182 "isa_tms320.tcc"
>
{
public:
	OpLDFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36267 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36271 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36274 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36292 "isa_tms320.tcc"
>
class OpLDFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36301 "isa_tms320.tcc"
>
{
public:
	OpLDFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36388 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36392 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36395 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36413 "isa_tms320.tcc"
>
class OpLDII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36422 "isa_tms320.tcc"
>
{
public:
	OpLDII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36507 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36511 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36514 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36532 "isa_tms320.tcc"
>
class OpLDII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36541 "isa_tms320.tcc"
>
{
public:
	OpLDII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36628 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36632 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36635 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36653 "isa_tms320.tcc"
>
class OpSIGI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36662 "isa_tms320.tcc"
>
{
public:
	OpSIGI(CodeType code, typename CONFIG::address_t addr);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36745 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36749 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36752 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36770 "isa_tms320.tcc"
>
class OpSTFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36779 "isa_tms320.tcc"
>
{
public:
	OpSTFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36864 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36868 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36871 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36889 "isa_tms320.tcc"
>
class OpSTFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36898 "isa_tms320.tcc"
>
{
public:
	OpSTFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36985 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36989 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37010 "isa_tms320.tcc"
>
class OpSTII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37019 "isa_tms320.tcc"
>
{
public:
	OpSTII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37104 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37108 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37111 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37129 "isa_tms320.tcc"
>
class OpSTII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37138 "isa_tms320.tcc"
>
{
public:
	OpSTII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37225 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37229 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37232 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37250 "isa_tms320.tcc"
>
class OpABSF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37259 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37273 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37277 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37280 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37284 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37287 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37367 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37371 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37374 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37392 "isa_tms320.tcc"
>
class OpABSF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37401 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37414 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37418 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37421 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37425 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37428 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37508 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37512 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37515 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37533 "isa_tms320.tcc"
>
class OpABSI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37542 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37556 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37560 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37563 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37567 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37570 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37650 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37654 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37657 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37675 "isa_tms320.tcc"
>
class OpABSI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37684 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37697 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37701 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37704 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37708 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37711 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37791 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37795 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37798 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37816 "isa_tms320.tcc"
>
class OpADDF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37825 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37840 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37844 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37847 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37851 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37854 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37934 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37938 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37941 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37959 "isa_tms320.tcc"
>
class OpADDF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37968 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37982 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37986 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37989 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37993 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37996 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38076 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38080 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38083 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38101 "isa_tms320.tcc"
>
class OpADDI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38110 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38125 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38129 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38132 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38136 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38139 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38219 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38223 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38226 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38244 "isa_tms320.tcc"
>
class OpADDI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38253 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38267 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38271 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38274 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38278 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38281 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38361 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38365 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38368 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38386 "isa_tms320.tcc"
>
class OpAND3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38395 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38410 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38414 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38417 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38421 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38424 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38504 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38508 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38511 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38529 "isa_tms320.tcc"
>
class OpAND3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38538 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38552 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38556 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38559 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38563 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38566 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38646 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38650 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38653 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38671 "isa_tms320.tcc"
>
class OpASH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38680 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38695 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38699 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38702 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38706 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38709 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38789 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38793 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38796 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38814 "isa_tms320.tcc"
>
class OpASH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38823 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38837 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38841 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38844 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38848 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38851 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38931 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38935 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38938 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38956 "isa_tms320.tcc"
>
class OpFIX_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38965 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38979 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38983 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38986 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38990 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38993 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39073 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39077 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39080 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39098 "isa_tms320.tcc"
>
class OpFIX_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39107 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39120 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39124 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39127 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39131 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39134 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39214 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39218 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39221 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39239 "isa_tms320.tcc"
>
class OpFLOAT_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39248 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39262 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39266 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39269 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39273 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39276 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39356 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39360 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39363 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39381 "isa_tms320.tcc"
>
class OpFLOAT_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39390 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39403 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39407 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39410 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39414 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39417 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39497 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39501 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39504 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39522 "isa_tms320.tcc"
>
class OpLDF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39531 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39545 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39549 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39552 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39556 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39559 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39639 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39643 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39646 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39664 "isa_tms320.tcc"
>
class OpLDF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39673 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39686 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39693 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39697 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39700 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39780 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39784 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39787 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39805 "isa_tms320.tcc"
>
class OpLDI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39814 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39828 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39832 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39835 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39839 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39842 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39922 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39926 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39929 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39947 "isa_tms320.tcc"
>
class OpLDI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39956 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39969 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39973 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39976 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39980 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39983 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40063 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40067 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40070 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40088 "isa_tms320.tcc"
>
class OpLSH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40097 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40112 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40116 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40119 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40123 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40126 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40206 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40210 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40213 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40231 "isa_tms320.tcc"
>
class OpLSH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40240 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40254 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40258 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40261 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40265 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40268 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40348 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40352 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40355 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40373 "isa_tms320.tcc"
>
class OpMPYF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40382 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40397 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40404 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40408 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40411 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40491 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40495 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40498 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40516 "isa_tms320.tcc"
>
class OpMPYF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40525 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40539 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40546 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40550 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40553 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40633 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40637 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40640 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40658 "isa_tms320.tcc"
>
class OpMPYI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40667 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40682 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40686 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40689 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40693 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40696 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40776 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40780 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40783 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40801 "isa_tms320.tcc"
>
class OpMPYI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40810 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40824 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40831 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40835 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40838 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40918 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40922 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40925 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40943 "isa_tms320.tcc"
>
class OpNEGF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40952 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40966 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40973 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40977 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40980 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41060 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41064 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41067 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41085 "isa_tms320.tcc"
>
class OpNEGF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41094 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41107 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41114 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41121 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41201 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41205 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41208 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41226 "isa_tms320.tcc"
>
class OpNEGI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41235 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41249 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41253 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41256 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41260 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41263 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41343 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41347 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41350 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41368 "isa_tms320.tcc"
>
class OpNEGI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41377 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41390 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41397 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41404 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41484 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41488 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41509 "isa_tms320.tcc"
>
class OpNOT_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41518 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41532 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41536 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41539 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41546 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41626 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41651 "isa_tms320.tcc"
>
class OpNOT_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41660 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41673 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41680 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41687 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41767 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41771 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41774 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41792 "isa_tms320.tcc"
>
class OpOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41801 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41816 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41823 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41827 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41830 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41910 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41914 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41917 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41935 "isa_tms320.tcc"
>
class OpOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41944 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41958 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41962 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41965 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41969 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41972 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42052 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42056 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42059 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42077 "isa_tms320.tcc"
>
class OpSTF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42086 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t d2_mod;
	uint32_t d2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42219 "isa_tms320.tcc"
>
class OpSTF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42228 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t dst2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42241 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42245 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42248 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42252 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42255 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42335 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42339 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42342 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42360 "isa_tms320.tcc"
>
class OpSTI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42369 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t d2_mod;
	uint32_t d2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42383 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42387 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42390 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42397 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42477 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42481 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42484 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42502 "isa_tms320.tcc"
>
class OpSTI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42511 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t dst2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42524 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42528 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42531 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42535 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42538 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42618 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42622 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42625 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42643 "isa_tms320.tcc"
>
class OpSUBF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42652 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42667 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42671 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42674 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42678 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42681 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42761 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42765 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42768 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42786 "isa_tms320.tcc"
>
class OpSUBF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42795 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42809 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42813 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42816 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42823 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42903 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42907 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42910 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42928 "isa_tms320.tcc"
>
class OpSUBI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42937 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42952 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42956 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42959 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42966 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43046 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43050 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43053 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43071 "isa_tms320.tcc"
>
class OpSUBI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43080 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43094 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43098 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43101 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43105 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43108 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43188 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43192 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43195 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43213 "isa_tms320.tcc"
>
class OpXOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43222 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43237 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43241 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43244 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43248 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43251 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43331 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43335 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43338 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43356 "isa_tms320.tcc"
>
class OpXOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43365 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43379 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43386 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43390 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43393 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43473 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43477 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43498 "isa_tms320.tcc"
>
class OpLDF_LDF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43507 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t dst1;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43521 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43528 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43535 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43615 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43619 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43622 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43640 "isa_tms320.tcc"
>
class OpLDF_LDF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43649 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t dst1;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43662 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43666 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43669 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43673 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43676 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43756 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43760 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43763 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43781 "isa_tms320.tcc"
>
class OpLDI_LDI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43790 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t dst1;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43804 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43808 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43811 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43815 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43818 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43898 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43902 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43905 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43923 "isa_tms320.tcc"
>
class OpLDI_LDI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43932 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t dst1;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43945 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43949 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43952 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43956 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43959 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44039 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44043 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44046 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44064 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44073 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44090 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44094 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44097 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44101 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44104 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44184 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44188 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44191 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44209 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44218 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44233 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44237 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44240 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44244 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44247 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44327 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44331 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44334 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44352 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44361 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44378 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44382 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44385 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44389 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44392 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44472 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44476 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44479 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44497 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44506 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44521 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44528 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44535 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44615 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44619 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44622 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44640 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44649 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44666 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44670 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44673 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44680 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44760 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44764 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44767 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44785 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44794 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44809 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44813 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44816 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44823 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44903 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44907 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44910 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44928 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44937 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44954 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44961 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44965 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44968 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 45048 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45052 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45055 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 45063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45073 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45082 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 45097 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45101 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45104 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 45108 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 45111 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 45191 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45195 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45198 "isa_tms320.tcc"
	);
private:
};

/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of load/store operations:
* - LDE          load floating-point exponent
* - LDF          load floating-point value
* - LDFcond      load floating-point value conditionally
* - LDI          load integer
* - LDIcond      load integer conditionally
* - LDM          load floating-point mantissa
* - LDP          load data page pointer
* - POP          pop integer from stack
* - POPF         pop floating-point value from stack
* - PUSH         push integer on stack
* - PUSHF        push floating-point value on stack
* - STF          store floating-point value
* - STI          store integer
*/
/************************************************
* LDE (load floating-point exponent)
* op LDE(0b000[3]:0b001101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45269 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45273 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45281 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45285 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45288 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45292 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45295 "isa_tms320.tcc"
)
{
#line 59 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDE " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 45307 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45322 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45326 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45334 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45338 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45341 "isa_tms320.tcc"
)
{
#line 68 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45348 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45364 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45373 "isa_tms320.tcc"
> *DecodeOpLDE_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45379 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45383 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45400 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45404 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45412 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45416 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45419 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45423 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45426 "isa_tms320.tcc"
)
{
#line 74 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDE " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 45437 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45452 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45456 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45464 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45468 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45471 "isa_tms320.tcc"
)
{
#line 82 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45478 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45494 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45503 "isa_tms320.tcc"
> *DecodeOpLDE_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45513 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45530 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45534 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45542 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45549 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45556 "isa_tms320.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDE " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 45568 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45583 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45587 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45595 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45599 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45602 "isa_tms320.tcc"
)
{
#line 97 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45609 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45625 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45634 "isa_tms320.tcc"
> *DecodeOpLDE_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45644 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45661 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45665 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 45669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45673 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45680 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45687 "isa_tms320.tcc"
)
{
#line 103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDE " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 45698 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45713 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45717 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 45721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45725 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45729 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45732 "isa_tms320.tcc"
)
{
#line 111 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45739 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45755 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45764 "isa_tms320.tcc"
> *DecodeOpLDE_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45770 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45774 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDE (load floating-point exponent)
*************************************************/
/************************************************
* LDF (load floating-point value)
* op LDF(0b000[3]:0b001110[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45797 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45801 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45809 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45813 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45816 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45823 "isa_tms320.tcc"
)
{
#line 125 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDF " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 45835 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45850 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45854 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45858 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45862 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45866 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45869 "isa_tms320.tcc"
)
{
#line 134 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45876 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45892 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45901 "isa_tms320.tcc"
> *DecodeOpLDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45907 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45911 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45928 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45932 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45940 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45944 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45947 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45951 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45954 "isa_tms320.tcc"
)
{
#line 140 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 45965 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45980 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45984 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45992 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45996 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45999 "isa_tms320.tcc"
)
{
#line 148 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46006 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46022 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46031 "isa_tms320.tcc"
> *DecodeOpLDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46037 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46041 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46058 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46062 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46070 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46077 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46081 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46084 "isa_tms320.tcc"
)
{
#line 154 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDF " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 46096 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46111 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46115 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46123 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46127 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46130 "isa_tms320.tcc"
)
{
#line 163 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46137 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46153 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46162 "isa_tms320.tcc"
> *DecodeOpLDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46172 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46189 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46193 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46201 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46208 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46215 "isa_tms320.tcc"
)
{
#line 169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDF " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 46226 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46241 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46245 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46253 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46257 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46260 "isa_tms320.tcc"
)
{
#line 177 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46267 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46283 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46292 "isa_tms320.tcc"
> *DecodeOpLDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46302 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF (load floating-point value)
*************************************************/
/************************************************
* LDFcond (load floating-point value conditionally)
* op LDFcond(0b0100[4]:cond[4]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46325 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46329 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46337 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46341 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46344 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46348 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46351 "isa_tms320.tcc"
)
{
#line 191 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!cond_name || !dst_reg_name || !src_reg_name) return false;

		os << "LDF" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 46364 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46379 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46383 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46391 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46395 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46398 "isa_tms320.tcc"
)
{
#line 201 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46405 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46421 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46430 "isa_tms320.tcc"
> *DecodeOpLDFcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46436 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46440 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46457 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46461 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46469 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46473 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46476 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46480 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46483 "isa_tms320.tcc"
)
{
#line 207 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDF" << cond_name << " " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 46495 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46510 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46514 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46522 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46526 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46529 "isa_tms320.tcc"
)
{
#line 216 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46536 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46552 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46561 "isa_tms320.tcc"
> *DecodeOpLDFcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46567 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46571 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46588 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46592 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46600 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46604 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46607 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46611 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46614 "isa_tms320.tcc"
)
{
#line 222 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDF" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 46627 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46642 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46646 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46654 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46658 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46661 "isa_tms320.tcc"
)
{
#line 232 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46668 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46684 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46693 "isa_tms320.tcc"
> *DecodeOpLDFcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46703 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46720 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46724 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46732 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46736 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46739 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46743 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46746 "isa_tms320.tcc"
)
{
#line 238 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;
		os << "LDF" << cond_name << " " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 46758 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46773 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46777 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46785 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46789 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46792 "isa_tms320.tcc"
)
{
#line 247 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46799 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46815 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46824 "isa_tms320.tcc"
> *DecodeOpLDFcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46830 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46834 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFcond (load floating-point value conditionally)
*************************************************/
/*************************************************
* LDI (load integer)
* op LDI(0b000[3]:0b010000[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46857 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46861 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46869 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46873 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46876 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46880 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46883 "isa_tms320.tcc"
)
{
#line 261 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDI " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 46895 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46910 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46914 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46922 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46926 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46929 "isa_tms320.tcc"
)
{
#line 270 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination register number are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Write back result in destination operand
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 46957 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46973 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46982 "isa_tms320.tcc"
> *DecodeOpLDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46992 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47009 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47013 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47021 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47025 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47028 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47032 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47035 "isa_tms320.tcc"
)
{
#line 297 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;

		return true;
	}
#line 47047 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47062 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47066 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47074 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47078 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47081 "isa_tms320.tcc"
)
{
#line 306 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47112 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47128 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47137 "isa_tms320.tcc"
> *DecodeOpLDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47143 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47147 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47164 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47168 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47176 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47180 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47183 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47187 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47190 "isa_tms320.tcc"
)
{
#line 336 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDI " << disasm_src_indir << ", " << dst_reg_name;

		return true;
	}
#line 47203 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47218 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47222 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47230 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47234 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47237 "isa_tms320.tcc"
)
{
#line 346 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47281 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47297 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47306 "isa_tms320.tcc"
> *DecodeOpLDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47312 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47316 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47333 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47337 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47345 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47349 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47352 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47356 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47359 "isa_tms320.tcc"
)
{
#line 389 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << imm << ", " << dst_reg_name;
		return true;
	}
#line 47370 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47385 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47389 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47397 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47401 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47404 "isa_tms320.tcc"
)
{
#line 397 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47432 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47448 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47457 "isa_tms320.tcc"
> *DecodeOpLDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47463 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47467 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI (load integer)
*************************************************/
/*************************************************
* LDIcond (load integer conditionally)
* op LDIcond(0b0101[4]:cond[4]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 47480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47490 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47494 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47502 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47506 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47509 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47513 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47516 "isa_tms320.tcc"
)
{
#line 432 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *src_reg_name = REG_NAME[src];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !src_reg_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 47529 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47544 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47548 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47556 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47560 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47563 "isa_tms320.tcc"
)
{
#line 442 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination registers, and the condition are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Write back result in destination operand
		cpu.SetReg(dst, result);
	}
#line 47583 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47599 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47608 "isa_tms320.tcc"
> *DecodeOpLDIcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47614 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47618 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47635 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47639 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47647 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47654 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47661 "isa_tms320.tcc"
)
{
#line 461 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;

		return true;
	}
#line 47674 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47689 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47693 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47701 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47705 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47708 "isa_tms320.tcc"
)
{
#line 471 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 47731 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47747 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47756 "isa_tms320.tcc"
> *DecodeOpLDIcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47762 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47766 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47783 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47787 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47795 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47799 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47802 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47806 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47809 "isa_tms320.tcc"
)
{
#line 493 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDI" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;

		return true;
	}
#line 47824 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47839 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47843 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47851 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47855 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47858 "isa_tms320.tcc"
)
{
#line 505 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Note: Auxiliary Register Arithmetic
		// The test condition does not affect
		// the auxiliary register arithmetic.
		// (AR modification always occurs.) (pg 13-126)

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 47899 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47915 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47924 "isa_tms320.tcc"
> *DecodeOpLDIcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47930 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47934 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47951 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47955 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47963 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47967 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47970 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47974 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47977 "isa_tms320.tcc"
)
{
#line 545 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << imm << ", " << dst_reg_name;
		return true;
	}
#line 47990 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48005 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48009 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48017 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48021 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48024 "isa_tms320.tcc"
)
{
#line 555 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetReg(dst, result);
	}
#line 48044 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48060 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48069 "isa_tms320.tcc"
> *DecodeOpLDIcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48075 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48079 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDIcond (load integer conditionally)
*************************************************/
/*************************************************
* LDM (load floating-point mantissa)
* op LDM(0b000[3]:0b010010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48102 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48106 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48114 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48121 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48125 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48128 "isa_tms320.tcc"
)
{
#line 582 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDM " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 48140 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48155 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48159 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48167 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48171 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48174 "isa_tms320.tcc"
)
{
#line 591 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48181 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48197 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48206 "isa_tms320.tcc"
> *DecodeOpLDM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48212 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48216 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48233 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48237 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48245 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48249 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48252 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48259 "isa_tms320.tcc"
)
{
#line 597 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDM " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 48270 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48285 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48289 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48297 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48301 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48304 "isa_tms320.tcc"
)
{
#line 605 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48311 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48327 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48336 "isa_tms320.tcc"
> *DecodeOpLDM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48342 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48346 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48363 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48367 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48375 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48379 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48382 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48386 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48389 "isa_tms320.tcc"
)
{
#line 611 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDM " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 48401 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48416 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48420 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48428 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48432 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48435 "isa_tms320.tcc"
)
{
#line 620 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48442 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48458 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48467 "isa_tms320.tcc"
> *DecodeOpLDM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48473 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48477 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48494 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48498 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48506 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48510 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48513 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48517 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48520 "isa_tms320.tcc"
)
{
#line 626 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDM " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 48531 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48546 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48550 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48558 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48562 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48565 "isa_tms320.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48572 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48588 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48597 "isa_tms320.tcc"
> *DecodeOpLDM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48603 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48607 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDM (load floating-point mantissa)
*************************************************/
/*************************************************
* LDP (load data page pointer)
* op LDP(0b000[3]:0b010000[6]:0b11[2]:0b10000[5]:0b00000000[8]:src[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48630 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48634 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48642 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48646 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48649 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48653 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48656 "isa_tms320.tcc"
)
{
#line 648 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		os << "LDP @0x" << hex << (src << 16) << dec;
		return true;
	}
#line 48664 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48679 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48683 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48691 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48695 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48698 "isa_tms320.tcc"
)
{
#line 653 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Update DP
		cpu.SetDP(src);
	}
#line 48706 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48722 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48731 "isa_tms320.tcc"
> *DecodeOpLDP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48737 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48741 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDP (load data page pointer)
*************************************************/
/*************************************************
* POP (pop integer from stack)
* op POP(0b000[3]:0b011100[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48764 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48768 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48776 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48780 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48783 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48787 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48790 "isa_tms320.tcc"
)
{
#line 668 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POP " << dst_reg_name;

		if(cpu.GetPC() == (Operation<CONFIG, DEBUG>::GetAddr() / 4))
		{
			os << " <" << cpu.GetObjectFriendlyName(cpu.GetSP()) << ">";
		}
		return true;
	}
#line 48807 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48822 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48826 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48834 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48838 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48841 "isa_tms320.tcc"
)
{
#line 682 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		cpu.SetReg(dst, result);

		// Update SP
		cpu.SetSP(sp);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 48878 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48894 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48903 "isa_tms320.tcc"
> *DecodeOpPOP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48909 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48913 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POP (pop integer from stack)
*************************************************/
/*************************************************
* POPF (pop floating-point value from stack)
* op POPF(0b000[3]:0b011101[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48936 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48940 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 48944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48948 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48952 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48955 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48959 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48962 "isa_tms320.tcc"
)
{
#line 726 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POPF " << dst_reg_name;
		return true;
	}
#line 48974 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48989 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48993 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 48997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49001 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49005 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49008 "isa_tms320.tcc"
)
{
#line 735 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp & ADDRESS_MASK);
		uint8_t hi = result >> 24;
		uint32_t lo = result << 8;

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		Register& reg = cpu.GetExtReg(dst);
		reg.SetLo(lo);
		reg.SetHi(hi);

		// Update SP
		cpu.SetSP(sp);

		// Generate flags (into ST)
		cpu.GenFlags(
		reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 49039 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49055 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49064 "isa_tms320.tcc"
> *DecodeOpPOPF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49074 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSH (push integer on stack)
* op PUSH(0b000[3]:0b011110[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49097 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49101 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 49105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49109 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49113 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49116 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49120 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49123 "isa_tms320.tcc"
)
{
#line 773 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSH " << src_reg_name;

		if(cpu.GetPC() == (Operation<CONFIG, DEBUG>::GetAddr() / 4))
		{
			os << " <" << cpu.GetObjectFriendlyName(cpu.GetSP() + 1) << ">";
		}
		return true;
	}
#line 49140 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49155 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49159 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 49163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49167 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49171 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49174 "isa_tms320.tcc"
)
{
#line 787 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the source operand at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, src_value);

		// Update SP
		cpu.SetSP(sp);
	}
#line 49197 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49213 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49222 "isa_tms320.tcc"
> *DecodeOpPUSH(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49228 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49232 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSHF (push floating-point value on stack)
* op PUSHF(0b000[3]:0b011111[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49255 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49259 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49267 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49271 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49274 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49278 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49281 "isa_tms320.tcc"
)
{
#line 817 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSHF " << src_reg_name;
		return true;
	}
#line 49293 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49308 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49312 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49320 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49324 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49327 "isa_tms320.tcc"
)
{
#line 826 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Read the source operand
		const Register& src_value = cpu.GetExtRegConst(src);

		// compute the result
		uint32_t result = ((uint32_t)src_value.GetHi() << 24) + (src_value.GetLo() >> 8);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the result at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, result);

		// Update SP
		cpu.SetSP(sp);
	}
#line 49347 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49363 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49372 "isa_tms320.tcc"
> *DecodeOpPUSHF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49378 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49382 "isa_tms320.tcc"
	>(code, addr);
}

/* end of PUSHF (push floating-point value on stack)
*************************************************/
/*************************************************
* STF (store floating-point value)
* op STF(0b000[3]:0b101000[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49405 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49409 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49417 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49421 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49424 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49428 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49431 "isa_tms320.tcc"
)
{
#line 853 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STF " << src_reg_name << ", " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec;
		return true;
	}
#line 49442 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49457 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49461 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49469 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49473 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49476 "isa_tms320.tcc"
)
{
#line 861 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 49483 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49499 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49508 "isa_tms320.tcc"
> *DecodeOpSTF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49514 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49518 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49535 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49539 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49547 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49551 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49554 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49558 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49561 "isa_tms320.tcc"
)
{
#line 867 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "STF " << src_reg_name << ", " << disasm_dst_indir;
		return true;
	}
#line 49573 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49588 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49592 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49600 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49604 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49607 "isa_tms320.tcc"
)
{
#line 876 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 49614 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49630 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49639 "isa_tms320.tcc"
> *DecodeOpSTF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49645 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49649 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF (store floating-point value)
*************************************************/
/*************************************************
* STI (store integer)
* op STI(0b000[3]:0b101010[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49672 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49676 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49684 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49688 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49691 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49695 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49698 "isa_tms320.tcc"
)
{
#line 890 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STI " << src_reg_name << ", " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec;

		return true;
	}
#line 49710 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49725 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49729 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49737 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49741 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49744 "isa_tms320.tcc"
)
{
#line 899 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result);
	}
#line 49764 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49780 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49789 "isa_tms320.tcc"
> *DecodeOpSTI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49795 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49799 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49816 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49820 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49828 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49832 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49835 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49839 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49842 "isa_tms320.tcc"
)
{
#line 918 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "STI " << src_reg_name << ", " << disasm_dst_indir;

		return true;
	}
#line 49855 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49870 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49874 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49882 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49886 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49889 "isa_tms320.tcc"
)
{
#line 928 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 49922 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49938 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49947 "isa_tms320.tcc"
> *DecodeOpSTI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49953 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49957 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI (store integer)
*************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 2 operands operations:
* - ABSF         absolute value of a floating-point number
* - ABSI         absolute value of an integer
* - ADDC         add integers with carry
* - ADDF         add floating-point values
* - ADDI         add integers
* - AND          bitwise-logical AND
* - ANDN         bitwise-logical AND with complement
* - ASH          arithmetic shift
* - CMPF         compare floating-point values
* - CMPI         compare integers
* - FIX          convert floating-point value to integer
* - FLOAT        convert integer to floating-point value
* - LSH          logical shift
* - MPYF         multiply floating-point values
* - MPYI         multiply integers
* - NEGB         negate integer with borrow
* - NEGF         negate floating-point value
* - NEGI         negate integer
* - NORM         normalize floating-point value
* - NOT          bitwise-logical complement
* - OR           bitwise-logical OR
* - RND          round floating-point value
* - ROL          rotate left
* - ROLC         rotate left through carry
* - ROR          rotate right
* - RORC         rotate right through carry
* - SUBB         subtract integers with borrow
* - SUBC         subtract integers conditionally
* - SUBF         subtract floating-point values
* - SUBI         subtract integer
* - SUBRB        subtract reverse integer with borrow
* - SUBRF        subtract reverse floating-point value
* - SUBRI        subtract reverse integer
* - TSTB         test bit fields
* - XOR          bitwise-exclusive OR
*/
/**********************************************************
* ABSF (absolute value of a floating-point number)
* op ABSF(0b000[3]:0b000000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50051 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50055 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50063 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50067 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50070 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50077 "isa_tms320.tcc"
)
{
#line 84 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSF " << src_name << ", " << dst_name;
		return true;
	}
#line 50091 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50106 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50110 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50118 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50122 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50125 "isa_tms320.tcc"
)
{
#line 127 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50132 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50148 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50157 "isa_tms320.tcc"
> *DecodeOpABSF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50163 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50167 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50184 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50188 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50196 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50200 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50203 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50207 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50210 "isa_tms320.tcc"
)
{
#line 95 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ABSF @0x" << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 50224 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50239 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50243 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50251 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50255 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50258 "isa_tms320.tcc"
)
{
#line 131 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50265 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50281 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50290 "isa_tms320.tcc"
> *DecodeOpABSF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50296 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50300 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50317 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50321 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50329 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50333 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50336 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50340 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50343 "isa_tms320.tcc"
)
{
#line 106 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ABSF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 50357 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50372 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50376 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50384 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50388 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50391 "isa_tms320.tcc"
)
{
#line 135 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50398 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50414 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50423 "isa_tms320.tcc"
> *DecodeOpABSF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50429 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50433 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50450 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50454 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 50458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50462 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50466 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50469 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50473 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50476 "isa_tms320.tcc"
)
{
#line 117 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 50489 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50504 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50508 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 50512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50516 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50520 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50523 "isa_tms320.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50530 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50546 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50555 "isa_tms320.tcc"
> *DecodeOpABSF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50561 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50565 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSF (absolute value of a floating-point number)
**********************************************************/
/**********************************************************
* ABSI (absolute value of an integer)
* op ABSI(0b000[3]:0b000001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50588 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50592 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50600 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50604 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50607 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50611 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50614 "isa_tms320.tcc"
)
{
#line 156 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSI " << src_name << ", " << dst_name;
		return true;
	}
#line 50628 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50643 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50647 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50655 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50659 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50662 "isa_tms320.tcc"
)
{
#line 199 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 50708 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50724 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50733 "isa_tms320.tcc"
> *DecodeOpABSI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50739 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50743 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50760 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50764 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50772 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50776 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50779 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50783 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50786 "isa_tms320.tcc"
)
{
#line 167 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ABSI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 50800 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50815 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50819 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50827 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50831 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50834 "isa_tms320.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 50883 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50899 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50908 "isa_tms320.tcc"
> *DecodeOpABSI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50918 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50935 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50939 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50947 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50951 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50954 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50961 "isa_tms320.tcc"
)
{
#line 178 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ABSI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 50975 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50990 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50994 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51002 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51006 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51009 "isa_tms320.tcc"
)
{
#line 288 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51071 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51087 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51096 "isa_tms320.tcc"
> *DecodeOpABSI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51102 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51106 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51123 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51127 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51135 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51139 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51142 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51149 "isa_tms320.tcc"
)
{
#line 189 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSI " << imm << ", " << dst_name;
		return true;
	}
#line 51162 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51177 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51181 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51189 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51193 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51196 "isa_tms320.tcc"
)
{
#line 347 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if((uint32_t) imm == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = (imm >= 0) ? imm : -imm;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51242 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51258 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51267 "isa_tms320.tcc"
> *DecodeOpABSI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51273 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51277 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSI (absolute value of an integer)
**********************************************************/
/**********************************************************
* ADDC (add integers with carry)
* op ADDC(0b000[3]:0b000010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51300 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51304 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51312 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51316 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51319 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51326 "isa_tms320.tcc"
)
{
#line 403 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDC " << src_name << ", " << dst_name;
		return true;
	}
#line 51340 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51355 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51359 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51367 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51371 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51374 "isa_tms320.tcc"
)
{
#line 447 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51421 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51437 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51446 "isa_tms320.tcc"
> *DecodeOpADDC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51456 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51473 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51477 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51485 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51489 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51492 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51496 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51499 "isa_tms320.tcc"
)
{
#line 414 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDC " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 51513 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51518 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51528 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51532 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51540 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51544 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51547 "isa_tms320.tcc"
)
{
#line 491 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51597 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51613 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51622 "isa_tms320.tcc"
> *DecodeOpADDC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51632 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51649 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51653 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51661 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51665 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51668 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51672 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51675 "isa_tms320.tcc"
)
{
#line 425 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDC " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 51690 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51705 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51709 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51717 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51721 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51724 "isa_tms320.tcc"
)
{
#line 538 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51787 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51803 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51812 "isa_tms320.tcc"
> *DecodeOpADDC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51822 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51839 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51843 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51851 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51855 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51858 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51862 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51865 "isa_tms320.tcc"
)
{
#line 437 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDC " << imm << ", " << dst_name;
		return true;
	}
#line 51878 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51893 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51897 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51905 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51909 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51912 "isa_tms320.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, imm, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51956 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51972 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51981 "isa_tms320.tcc"
> *DecodeOpADDC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51987 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51991 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC (add integers with carry)
**********************************************************/
/**********************************************************
* ADDF (add floating-point values)
* op ADDF(0b000[3]:0b000011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52014 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52018 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52026 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52030 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52033 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52037 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52040 "isa_tms320.tcc"
)
{
#line 652 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDF " << src_name << ", " << dst_name;
		return true;
	}
#line 52054 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52069 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52073 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52081 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52085 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52088 "isa_tms320.tcc"
)
{
#line 695 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		bool underflow;
		bool overflow;
		dst_reg.Add(src_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 52116 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52132 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52141 "isa_tms320.tcc"
> *DecodeOpADDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52151 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52168 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52172 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52180 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52184 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52187 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52191 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52194 "isa_tms320.tcc"
)
{
#line 663 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 52208 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52223 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52227 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52235 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52239 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52242 "isa_tms320.tcc"
)
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		bool underflow;
		bool overflow;
		dst_reg.Add(src_value, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 52273 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52289 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52298 "isa_tms320.tcc"
> *DecodeOpADDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52304 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52308 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52325 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52329 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52337 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52341 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52344 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52348 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52351 "isa_tms320.tcc"
)
{
#line 674 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 52365 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52380 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52384 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52392 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52396 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52399 "isa_tms320.tcc"
)
{
#line 748 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		bool underflow;
		bool overflow;
		dst_reg.Add(src_value, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 52443 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52459 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52468 "isa_tms320.tcc"
> *DecodeOpADDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52478 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52495 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52499 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52507 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52514 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52521 "isa_tms320.tcc"
)
{
#line 685 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 52534 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52549 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52553 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52561 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52565 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52568 "isa_tms320.tcc"
)
{
#line 789 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		bool underflow;
		bool overflow;
		dst_reg.Add((uint16_t)imm, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 52593 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52609 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52618 "isa_tms320.tcc"
> *DecodeOpADDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52624 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52628 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI (add integers)
* op ADDI(0b000[3]:0b000100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52651 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52655 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52663 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52667 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52670 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52674 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52677 "isa_tms320.tcc"
)
{
#line 824 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDI " << src_name << ", " << dst_name;
		return true;
	}
#line 52691 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52706 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52710 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52718 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52722 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52725 "isa_tms320.tcc"
)
{
#line 868 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 52769 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52785 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52794 "isa_tms320.tcc"
> *DecodeOpADDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52800 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52804 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52821 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52825 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52833 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52837 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52840 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52844 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52847 "isa_tms320.tcc"
)
{
#line 835 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 52861 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52876 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52880 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52888 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52892 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52895 "isa_tms320.tcc"
)
{
#line 909 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 52942 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52958 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52967 "isa_tms320.tcc"
> *DecodeOpADDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52973 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52977 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52994 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52998 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53006 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53010 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53013 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53017 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53020 "isa_tms320.tcc"
)
{
#line 846 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 53035 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53050 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53054 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53062 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53066 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53069 "isa_tms320.tcc"
)
{
#line 953 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53129 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53145 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53154 "isa_tms320.tcc"
> *DecodeOpADDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53160 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53164 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53178 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53181 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53185 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53193 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53197 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53200 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53204 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53207 "isa_tms320.tcc"
)
{
#line 858 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDI " << imm << ", " << dst_name;
		return true;
	}
#line 53220 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53235 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53239 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53247 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53251 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53254 "isa_tms320.tcc"
)
{
#line 1010 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, 0);
		else
		Add32(result, carry_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53295 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53311 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53320 "isa_tms320.tcc"
> *DecodeOpADDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53326 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53330 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI (add integers)
**********************************************************/
/**********************************************************
* AND (bitwise-logical AND)
* op AND(0b000[3]:0b000101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53353 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53357 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53365 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53369 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53372 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53379 "isa_tms320.tcc"
)
{
#line 1061 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "AND " << src_name << ", " << dst_name;
		return true;
	}
#line 53393 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53408 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53412 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53420 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53424 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53427 "isa_tms320.tcc"
)
{
#line 1105 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53461 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53467 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53477 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53486 "isa_tms320.tcc"
> *DecodeOpAND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53492 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53496 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53506 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53513 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53517 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53525 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53529 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53532 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53536 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53539 "isa_tms320.tcc"
)
{
#line 1072 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "AND " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 53553 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53568 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53572 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53580 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53584 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53587 "isa_tms320.tcc"
)
{
#line 1136 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53624 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53640 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53649 "isa_tms320.tcc"
> *DecodeOpAND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53655 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53659 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53676 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53680 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53688 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53692 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53695 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53699 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53702 "isa_tms320.tcc"
)
{
#line 1083 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "AND " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 53717 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53732 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53736 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53744 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53748 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53751 "isa_tms320.tcc"
)
{
#line 1170 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53801 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53817 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53826 "isa_tms320.tcc"
> *DecodeOpAND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53832 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53836 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53853 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53857 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53865 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53869 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53872 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53876 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53879 "isa_tms320.tcc"
)
{
#line 1095 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "AND " << imm << ", " << dst_name;
		return true;
	}
#line 53892 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53907 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53911 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53919 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53923 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53926 "isa_tms320.tcc"
)
{
#line 1217 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53957 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53973 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53982 "isa_tms320.tcc"
> *DecodeOpAND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53992 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN (bitwise-logical AND with complement)
* op ANDN(0b000[3]:0b000110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54015 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54019 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54027 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54031 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54034 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54038 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54041 "isa_tms320.tcc"
)
{
#line 1258 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ANDN " << src_name << ", " << dst_name;
		return true;
	}
#line 54055 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54070 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54074 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54082 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54086 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54089 "isa_tms320.tcc"
)
{
#line 1302 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54123 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54139 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54148 "isa_tms320.tcc"
> *DecodeOpANDN_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54154 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54158 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54175 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54179 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54187 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54191 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54194 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54198 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54201 "isa_tms320.tcc"
)
{
#line 1269 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ANDN " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 54215 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54230 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54234 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54242 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54246 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54249 "isa_tms320.tcc"
)
{
#line 1333 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54286 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54302 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54311 "isa_tms320.tcc"
> *DecodeOpANDN_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54317 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54321 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54338 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54342 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54350 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54354 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54357 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54361 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54364 "isa_tms320.tcc"
)
{
#line 1280 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ANDN " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 54379 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54394 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54398 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54406 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54410 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54413 "isa_tms320.tcc"
)
{
#line 1367 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54463 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54479 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54488 "isa_tms320.tcc"
> *DecodeOpANDN_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54494 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54498 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54515 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54519 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54527 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54531 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54534 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54538 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54541 "isa_tms320.tcc"
)
{
#line 1292 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ANDN " << imm << ", " << dst_name;
		return true;
	}
#line 54554 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54569 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54573 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54581 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54585 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54588 "isa_tms320.tcc"
)
{
#line 1414 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~imm & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54619 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54635 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54644 "isa_tms320.tcc"
> *DecodeOpANDN_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54650 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54654 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH (arithmetic shift)
* op ASH(0b000[3]:0b000111[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54677 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54681 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54689 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54693 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54696 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54700 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54703 "isa_tms320.tcc"
)
{
#line 1455 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ASH " << src_name << ", " << dst_name;
		return true;
	}
#line 54717 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54732 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54736 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54744 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54748 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54751 "isa_tms320.tcc"
)
{
#line 1498 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 54821 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54837 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54846 "isa_tms320.tcc"
> *DecodeOpASH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54852 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54856 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54873 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54877 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54885 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54889 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54892 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54896 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54899 "isa_tms320.tcc"
)
{
#line 1466 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ASH " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 54913 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54928 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54932 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54940 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54944 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54947 "isa_tms320.tcc"
)
{
#line 1565 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55020 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55036 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55045 "isa_tms320.tcc"
> *DecodeOpASH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55051 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55055 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55072 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55076 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55084 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55088 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55091 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55095 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55098 "isa_tms320.tcc"
)
{
#line 1477 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ASH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 55112 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55127 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55131 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55139 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55143 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55146 "isa_tms320.tcc"
)
{
#line 1635 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55226 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55242 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55251 "isa_tms320.tcc"
> *DecodeOpASH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55257 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55261 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55268 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55278 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55282 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55290 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55294 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55297 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55301 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55304 "isa_tms320.tcc"
)
{
#line 1488 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ASH " << imm << ", " << dst_name;
		return true;
	}
#line 55317 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55332 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55336 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55344 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55348 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55351 "isa_tms320.tcc"
)
{
#line 1712 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the immediate value to get the shift count
		int32_t count = imm; // imm has alread been sign extended by the decoder

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55418 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55434 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55443 "isa_tms320.tcc"
> *DecodeOpASH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55449 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55453 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF (compare floating-point values)
* op CMPF(0b000[3]:0b001000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55476 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55480 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55488 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55492 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55495 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55499 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55502 "isa_tms320.tcc"
)
{
#line 1789 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPF " << src_name << ", " << dst_name;
		return true;
	}
#line 55516 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55531 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55535 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55543 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55547 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55550 "isa_tms320.tcc"
)
{
#line 1832 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55557 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55573 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55582 "isa_tms320.tcc"
> *DecodeOpCMPF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55588 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55592 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55609 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55613 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55621 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55625 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55628 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55632 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55635 "isa_tms320.tcc"
)
{
#line 1800 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "CMPF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 55649 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55664 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55668 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55676 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55680 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55683 "isa_tms320.tcc"
)
{
#line 1836 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55690 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55706 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55715 "isa_tms320.tcc"
> *DecodeOpCMPF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55721 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55725 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55742 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55746 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55754 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55758 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55761 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55765 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55768 "isa_tms320.tcc"
)
{
#line 1811 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "CMPF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 55782 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55797 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55801 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55809 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55813 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55816 "isa_tms320.tcc"
)
{
#line 1840 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55823 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55839 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55848 "isa_tms320.tcc"
> *DecodeOpCMPF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55854 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55858 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55875 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55879 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55887 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55891 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55894 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55898 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55901 "isa_tms320.tcc"
)
{
#line 1822 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 55914 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55929 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55933 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55941 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55945 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55948 "isa_tms320.tcc"
)
{
#line 1844 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55955 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55971 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55980 "isa_tms320.tcc"
> *DecodeOpCMPF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55986 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55990 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI (compare integers)
* op CMPI(0b000[3]:0b001001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56013 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56017 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56025 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56029 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56032 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56036 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56039 "isa_tms320.tcc"
)
{
#line 1861 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPI " << src_name << ", " << dst_name;
		return true;
	}
#line 56053 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56058 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56061 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56068 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56072 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56080 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56084 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56087 "isa_tms320.tcc"
)
{
#line 1905 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56120 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56133 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56136 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56145 "isa_tms320.tcc"
> *DecodeOpCMPI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56151 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56155 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56172 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56176 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56184 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56188 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56191 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56195 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56198 "isa_tms320.tcc"
)
{
#line 1872 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "CMPI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 56212 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56227 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56231 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56239 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56243 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56246 "isa_tms320.tcc"
)
{
#line 1935 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56282 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56298 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56307 "isa_tms320.tcc"
> *DecodeOpCMPI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56313 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56317 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56334 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56338 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56346 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56350 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56353 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56357 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56360 "isa_tms320.tcc"
)
{
#line 1883 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "CMPI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 56375 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56390 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56394 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56402 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56406 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56409 "isa_tms320.tcc"
)
{
#line 1968 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56458 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56474 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56483 "isa_tms320.tcc"
> *DecodeOpCMPI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56489 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56493 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56510 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56514 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56522 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56526 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56529 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56533 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56536 "isa_tms320.tcc"
)
{
#line 1895 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPI " << imm << ", " << dst_name;
		return true;
	}
#line 56549 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56564 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56568 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56576 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56580 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56583 "isa_tms320.tcc"
)
{
#line 2014 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56613 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56619 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56629 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56638 "isa_tms320.tcc"
> *DecodeOpCMPI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56644 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56648 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI (compare integers)
**********************************************************/
/**********************************************************
* FIX (convert floating-point value to integer)
* op FIX(0b000[3]:0b001010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56671 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56675 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56683 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56687 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56690 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56694 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56697 "isa_tms320.tcc"
)
{
#line 2054 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FIX " << src_name << ", " << dst_name;
		return true;
	}
#line 56711 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56716 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56723 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56726 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56730 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56738 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56742 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56745 "isa_tms320.tcc"
)
{
#line 2097 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		Register &src_reg = cpu.GetExtReg(src);

		// Perform computation
		bool overflow;
		uint32_t result = src_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 56775 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56781 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56791 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56800 "isa_tms320.tcc"
> *DecodeOpFIX_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56806 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56810 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56827 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56831 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56839 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56843 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56846 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56850 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56853 "isa_tms320.tcc"
)
{
#line 2065 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "FIX " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 56867 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56882 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56886 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56894 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56898 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56901 "isa_tms320.tcc"
)
{
#line 2124 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Convert value into a float
		Register tmp_reg;
		tmp_reg.SetFromSinglePresicionFPFormat(src_value);

		// Perform computation
		bool overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 56938 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56954 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56963 "isa_tms320.tcc"
> *DecodeOpFIX_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56969 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56973 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56990 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56994 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57002 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57006 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57009 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57013 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57016 "isa_tms320.tcc"
)
{
#line 2076 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "FIX " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 57030 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57045 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57049 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57057 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57061 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57064 "isa_tms320.tcc"
)
{
#line 2158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Convert value into a float
		Register tmp_reg;
		tmp_reg.SetFromSinglePresicionFPFormat(src_value);

		// Perform computation
		bool overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Update AR if necessary
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 57115 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57131 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57140 "isa_tms320.tcc"
> *DecodeOpFIX_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57146 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57150 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57167 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57171 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57179 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57183 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57186 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57190 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57193 "isa_tms320.tcc"
)
{
#line 2087 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FIX " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 57206 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57221 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57225 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57233 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57237 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57240 "isa_tms320.tcc"
)
{
#line 2206 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Convert immediate into a float
		Register tmp_reg;
		tmp_reg.SetFromShortFPFormat(imm);

		// Perform computation
		bool overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 57271 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57287 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57296 "isa_tms320.tcc"
> *DecodeOpFIX_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57302 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57306 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FIX (convert floating-point value to integer)
**********************************************************/
/**********************************************************
* FLOAT (convert integer to floating-point value)
* op FLOAT(0b000[3]:0b001011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57329 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57333 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57341 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57345 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57348 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57352 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57355 "isa_tms320.tcc"
)
{
#line 2247 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FLOAT " << src_name << ", " << dst_name;
		return true;
	}
#line 57369 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57384 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57388 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57396 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57400 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57403 "isa_tms320.tcc"
)
{
#line 2290 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.IsExtReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float(src_value);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57429 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57445 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57454 "isa_tms320.tcc"
> *DecodeOpFLOAT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57460 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57464 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57481 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57485 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57493 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57497 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57500 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57504 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57507 "isa_tms320.tcc"
)
{
#line 2258 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "FLOAT " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 57521 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57536 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57540 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57548 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57552 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57555 "isa_tms320.tcc"
)
{
#line 2313 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float(src_value);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57584 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57600 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57609 "isa_tms320.tcc"
> *DecodeOpFLOAT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57615 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57619 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57636 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57640 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57648 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57652 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57655 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57659 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57662 "isa_tms320.tcc"
)
{
#line 2269 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "FLOAT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 57676 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57691 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57695 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57703 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57707 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57710 "isa_tms320.tcc"
)
{
#line 2339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float((uint32_t)src_value);

		// Update AR if necessary
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57753 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57769 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57778 "isa_tms320.tcc"
> *DecodeOpFLOAT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57784 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57788 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57805 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57809 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57817 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57821 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57824 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57831 "isa_tms320.tcc"
)
{
#line 2280 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FLOAT " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 57844 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57859 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57863 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57871 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57875 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57878 "isa_tms320.tcc"
)
{
#line 2379 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.IsExtReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float((uint32_t)imm);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57901 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57917 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57926 "isa_tms320.tcc"
> *DecodeOpFLOAT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57932 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57936 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT (convert integer to floating-point value)
**********************************************************/
/**********************************************************
* LSH (logical shift)
* op LSH(0b000[3]:0b010011[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57959 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57963 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57971 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57975 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57978 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57982 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57985 "isa_tms320.tcc"
)
{
#line 2412 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "LSH " << src_name << ", " << dst_name;
		return true;
	}
#line 57999 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58014 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58018 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58026 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58030 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58033 "isa_tms320.tcc"
)
{
#line 2455 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58103 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58116 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58119 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58128 "isa_tms320.tcc"
> *DecodeOpLSH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58134 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58138 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58155 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58159 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58167 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58174 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58181 "isa_tms320.tcc"
)
{
#line 2423 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "LSH " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 58195 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58210 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58214 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58222 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58226 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58229 "isa_tms320.tcc"
)
{
#line 2522 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58302 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58318 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58327 "isa_tms320.tcc"
> *DecodeOpLSH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58333 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58337 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58354 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58358 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58366 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58370 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58373 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58377 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58380 "isa_tms320.tcc"
)
{
#line 2434 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "LSH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 58394 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58409 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58413 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58421 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58425 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58428 "isa_tms320.tcc"
)
{
#line 2592 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// TODO: check if AR needs to be updated

		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58510 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58526 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58535 "isa_tms320.tcc"
> *DecodeOpLSH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58541 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58545 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58562 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58566 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58574 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58578 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58581 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58585 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58588 "isa_tms320.tcc"
)
{
#line 2445 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "LSH " << imm << ", " << dst_name;
		return true;
	}
#line 58601 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58616 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58620 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58628 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58632 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58635 "isa_tms320.tcc"
)
{
#line 2671 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the immediate value to get the shift count
		int32_t count = imm; // imm has alread been sign extended by the decoder

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58702 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58718 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58727 "isa_tms320.tcc"
> *DecodeOpLSH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58733 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58737 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH (logical shift)
**********************************************************/
/**********************************************************
* MPYF (multiply floating-point values)
* op MPYF(0b000[3]:0b010100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58760 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58764 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58772 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58776 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58779 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58783 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58786 "isa_tms320.tcc"
)
{
#line 2748 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYF " << src_name << ", " << dst_name;
		return true;
	}
#line 58800 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58815 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58819 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58827 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58831 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58834 "isa_tms320.tcc"
)
{
#line 2791 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 58841 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58857 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58866 "isa_tms320.tcc"
> *DecodeOpMPYF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58876 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58893 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58897 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58905 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58909 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58912 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58916 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58919 "isa_tms320.tcc"
)
{
#line 2759 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "MPYF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 58933 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58948 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58952 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58960 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58964 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58967 "isa_tms320.tcc"
)
{
#line 2795 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 58974 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58990 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58999 "isa_tms320.tcc"
> *DecodeOpMPYF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59005 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59009 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59026 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59030 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59034 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59038 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59042 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59045 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59049 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59052 "isa_tms320.tcc"
)
{
#line 2770 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "MPYF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 59066 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59081 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59085 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59093 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59097 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59100 "isa_tms320.tcc"
)
{
#line 2799 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 59107 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59123 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59132 "isa_tms320.tcc"
> *DecodeOpMPYF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59142 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59159 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59163 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59171 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59175 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59178 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59182 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59185 "isa_tms320.tcc"
)
{
#line 2781 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 59198 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59213 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59217 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59225 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59229 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59232 "isa_tms320.tcc"
)
{
#line 2803 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 59239 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59255 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59264 "isa_tms320.tcc"
> *DecodeOpMPYF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59270 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59274 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI (multiply integers)
* op MPYI(0b000[3]:0b010101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 59287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59297 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59301 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59309 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59313 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59316 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59320 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59323 "isa_tms320.tcc"
)
{
#line 2820 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYI " << src_name << ", " << dst_name;
		return true;
	}
#line 59337 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59352 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59356 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59364 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59368 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59371 "isa_tms320.tcc"
)
{
#line 2863 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand and sign extend value from 24 bits to 64 bits
		int64_t src_value = SignExtend((uint64_t)(cpu.GetReg(src) & 0xffffff), 24);

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59418 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59434 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59443 "isa_tms320.tcc"
> *DecodeOpMPYI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59449 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59453 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59467 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59470 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59474 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59482 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59486 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59489 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59493 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59496 "isa_tms320.tcc"
)
{
#line 2831 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "MPYI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 59510 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59525 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59529 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59537 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59541 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59544 "isa_tms320.tcc"
)
{
#line 2907 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59594 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59610 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59619 "isa_tms320.tcc"
> *DecodeOpMPYI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59625 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59629 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59646 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59650 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59658 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59662 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59665 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59669 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59672 "isa_tms320.tcc"
)
{
#line 2842 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "MPYI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 59686 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59701 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59705 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59713 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59717 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59720 "isa_tms320.tcc"
)
{
#line 2954 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		uint32_t src_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59783 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59799 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59808 "isa_tms320.tcc"
> *DecodeOpMPYI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59814 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59818 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59835 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59839 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59847 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59851 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59854 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59858 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59861 "isa_tms320.tcc"
)
{
#line 2853 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYI " << imm << ", " << dst_name;
		return true;
	}
#line 59874 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59889 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59893 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59901 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59905 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59908 "isa_tms320.tcc"
)
{
#line 3014 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		// Note: imm has been sign extended from 16 bits to 32 bits the decoder
		// Below, imm is sign extended from 32 bits to 64 bits
		int64_t result64 = imm * dst_value;         // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59954 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59970 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59979 "isa_tms320.tcc"
> *DecodeOpMPYI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59985 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59989 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI (multiply integers)
**********************************************************/
/**********************************************************
* NEGB (negate integer with borrow)
* op NEGB(0b000[3]:0b010110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 60002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60012 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60016 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60024 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60028 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60031 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60035 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60038 "isa_tms320.tcc"
)
{
#line 3070 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGB " << src_name << ", " << dst_name;
		return true;
	}
#line 60052 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60067 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60071 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60079 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60083 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60086 "isa_tms320.tcc"
)
{
#line 3113 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60130 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60146 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60155 "isa_tms320.tcc"
> *DecodeOpNEGB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60161 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60165 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60182 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60186 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60194 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60198 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60201 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60208 "isa_tms320.tcc"
)
{
#line 3081 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 60222 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60237 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60241 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60249 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60253 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60256 "isa_tms320.tcc"
)
{
#line 3154 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60303 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60319 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60328 "isa_tms320.tcc"
> *DecodeOpNEGB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60334 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60338 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60355 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60359 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60367 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60371 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60374 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60378 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60381 "isa_tms320.tcc"
)
{
#line 3092 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 60395 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60410 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60414 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60422 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60426 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60429 "isa_tms320.tcc"
)
{
#line 3198 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60489 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60505 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60514 "isa_tms320.tcc"
> *DecodeOpNEGB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60520 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60524 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60541 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60545 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60553 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60557 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60560 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60564 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60567 "isa_tms320.tcc"
)
{
#line 3103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGB " << imm << ", " << dst_name;
		return true;
	}
#line 60580 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60595 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60599 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60607 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60611 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60614 "isa_tms320.tcc"
)
{
#line 3255 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, imm, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60655 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60671 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60680 "isa_tms320.tcc"
> *DecodeOpNEGB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60686 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60690 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGB (negate integer with borrow)
**********************************************************/
/**********************************************************
* NEGF (negate floating-point value)
* op NEGF(0b000[3]:0b010111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 60703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60713 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60717 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60725 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60729 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60732 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60736 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60739 "isa_tms320.tcc"
)
{
#line 3306 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGF " << src_name << ", " << dst_name;
		return true;
	}
#line 60753 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60758 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60768 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60772 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60780 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60784 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60787 "isa_tms320.tcc"
)
{
#line 3349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60794 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60810 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60819 "isa_tms320.tcc"
> *DecodeOpNEGF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60825 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60829 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60846 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60850 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60858 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60862 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60865 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60869 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60872 "isa_tms320.tcc"
)
{
#line 3317 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 60886 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60901 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60905 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60913 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60917 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60920 "isa_tms320.tcc"
)
{
#line 3353 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60927 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60943 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60952 "isa_tms320.tcc"
> *DecodeOpNEGF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60958 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60962 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60979 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60983 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60991 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60998 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61002 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61005 "isa_tms320.tcc"
)
{
#line 3328 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 61019 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61034 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61038 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61046 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61050 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61053 "isa_tms320.tcc"
)
{
#line 3357 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 61060 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61073 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61076 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61085 "isa_tms320.tcc"
> *DecodeOpNEGF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61091 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61095 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61112 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61116 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61124 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61128 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61131 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61135 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61138 "isa_tms320.tcc"
)
{
#line 3339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 61151 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61166 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61170 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61178 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61182 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61185 "isa_tms320.tcc"
)
{
#line 3361 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 61192 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61208 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61217 "isa_tms320.tcc"
> *DecodeOpNEGF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61227 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF (negate floating-point value)
**********************************************************/
/**********************************************************
* NEGI (negate integer)
* op NEGI(0b000[3]:0b011000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 61240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61250 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61254 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61262 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61266 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61269 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61273 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61276 "isa_tms320.tcc"
)
{
#line 3378 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGI " << src_name << ", " << dst_name;
		return true;
	}
#line 61290 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61305 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61309 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61317 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61321 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61324 "isa_tms320.tcc"
)
{
#line 3421 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61365 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61381 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61390 "isa_tms320.tcc"
> *DecodeOpNEGI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61396 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61400 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61417 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61421 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61429 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61433 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61436 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61440 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61443 "isa_tms320.tcc"
)
{
#line 3389 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 61457 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61472 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61476 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61484 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61488 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61491 "isa_tms320.tcc"
)
{
#line 3459 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61535 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61551 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61560 "isa_tms320.tcc"
> *DecodeOpNEGI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61566 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61570 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61587 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61591 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61599 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61603 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61606 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61610 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61613 "isa_tms320.tcc"
)
{
#line 3400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 61627 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61642 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61646 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61654 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61658 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61661 "isa_tms320.tcc"
)
{
#line 3500 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61718 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61734 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61743 "isa_tms320.tcc"
> *DecodeOpNEGI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61749 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61753 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61770 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61774 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61782 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61786 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61789 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61793 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61796 "isa_tms320.tcc"
)
{
#line 3411 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGI " << imm << ", " << dst_name;
		return true;
	}
#line 61809 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61824 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61828 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61836 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61840 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61843 "isa_tms320.tcc"
)
{
#line 3554 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, imm, 0);
		else
		Sub32(result, borrow_out, overflow, 0, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61884 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61900 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61909 "isa_tms320.tcc"
> *DecodeOpNEGI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61915 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61919 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI (negate integer)
**********************************************************/
/**********************************************************
* NORM (normalize floating-point value)
* op NORM(0b000[3]:0b011010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 61932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61942 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61946 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61954 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61961 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61965 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61968 "isa_tms320.tcc"
)
{
#line 3605 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NORM " << src_name << ", " << dst_name;
		return true;
	}
#line 61982 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61997 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62001 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62009 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62013 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62016 "isa_tms320.tcc"
)
{
#line 3648 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 62023 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62039 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62048 "isa_tms320.tcc"
> *DecodeOpNORM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62054 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62058 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62075 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62079 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62087 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62091 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62094 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62098 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62101 "isa_tms320.tcc"
)
{
#line 3616 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NORM " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 62115 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62127 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62130 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62134 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62142 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62146 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62149 "isa_tms320.tcc"
)
{
#line 3652 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 62156 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62172 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62181 "isa_tms320.tcc"
> *DecodeOpNORM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62187 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62191 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62208 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62212 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62220 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62224 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62227 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62231 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62234 "isa_tms320.tcc"
)
{
#line 3627 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NORM " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 62248 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62263 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62267 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62275 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62279 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62282 "isa_tms320.tcc"
)
{
#line 3656 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 62289 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62305 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62314 "isa_tms320.tcc"
> *DecodeOpNORM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62320 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62324 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62341 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62345 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62353 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62357 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62360 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62364 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62367 "isa_tms320.tcc"
)
{
#line 3638 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NORM " << imm << ", " << dst_name;
		return true;
	}
#line 62380 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62395 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62399 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62407 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62411 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62414 "isa_tms320.tcc"
)
{
#line 3660 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 62421 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62437 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62446 "isa_tms320.tcc"
> *DecodeOpNORM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62456 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NORM (normalize floating-point value)
**********************************************************/
/**********************************************************
* NOT (bitwise-logical complement)
* op NOT(0b000[3]:0b011011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 62469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62479 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62483 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62491 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62495 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62498 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62502 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62505 "isa_tms320.tcc"
)
{
#line 3677 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NOT " << src_name << ", " << dst_name;
		return true;
	}
#line 62519 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62534 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62538 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62546 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62550 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62553 "isa_tms320.tcc"
)
{
#line 3720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62584 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62600 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62609 "isa_tms320.tcc"
> *DecodeOpNOT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62615 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62619 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62636 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62640 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62648 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62652 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62655 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62659 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62662 "isa_tms320.tcc"
)
{
#line 3688 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NOT " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 62676 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62691 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62695 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62703 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62707 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62710 "isa_tms320.tcc"
)
{
#line 3748 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62744 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62760 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62769 "isa_tms320.tcc"
> *DecodeOpNOT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62775 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62779 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62796 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62800 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62808 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62812 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62815 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62819 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62822 "isa_tms320.tcc"
)
{
#line 3699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NOT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 62836 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62851 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62855 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62863 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62867 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62870 "isa_tms320.tcc"
)
{
#line 3779 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62917 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62933 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62942 "isa_tms320.tcc"
> *DecodeOpNOT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62948 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62952 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62969 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62973 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62981 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62985 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62988 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62992 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62995 "isa_tms320.tcc"
)
{
#line 3710 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NOT " << imm << ", " << dst_name;
		return true;
	}
#line 63008 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63023 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63027 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63031 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63035 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63039 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63042 "isa_tms320.tcc"
)
{
#line 3823 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~imm;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63073 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63089 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63098 "isa_tms320.tcc"
> *DecodeOpNOT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63104 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63108 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT (bitwise-logical complement)
**********************************************************/
/**********************************************************
* OR (bitwise-logical OR)
* op OR(0b000[3]:0b100000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 63121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63131 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63135 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63143 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63147 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63150 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63154 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63157 "isa_tms320.tcc"
)
{
#line 3864 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "OR " << src_name << ", " << dst_name;
		return true;
	}
#line 63171 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63186 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63190 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63198 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63202 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63205 "isa_tms320.tcc"
)
{
#line 3907 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63239 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63255 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63264 "isa_tms320.tcc"
> *DecodeOpOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63270 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63274 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63291 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63295 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63303 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63307 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63310 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63314 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63317 "isa_tms320.tcc"
)
{
#line 3875 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "OR " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 63331 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63346 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63350 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63358 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63362 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63365 "isa_tms320.tcc"
)
{
#line 3938 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63402 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63418 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63427 "isa_tms320.tcc"
> *DecodeOpOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63433 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63437 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63454 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63458 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63466 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63470 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63473 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63477 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63480 "isa_tms320.tcc"
)
{
#line 3886 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "OR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 63494 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63509 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63513 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63521 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63525 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63528 "isa_tms320.tcc"
)
{
#line 3972 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63578 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63594 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63603 "isa_tms320.tcc"
> *DecodeOpOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63609 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63613 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63630 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63634 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63642 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63646 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63649 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63653 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63656 "isa_tms320.tcc"
)
{
#line 3897 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "OR " << imm << ", " << dst_name;
		return true;
	}
#line 63669 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63684 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63688 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63696 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63700 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63703 "isa_tms320.tcc"
)
{
#line 4019 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63734 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63750 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63759 "isa_tms320.tcc"
> *DecodeOpOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63765 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63769 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR (bitwise-logical OR)
**********************************************************/
/**********************************************************
* RND (round floating-point value)
* op RND(0b000[3]:0b100010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 63782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63792 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63796 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63804 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63808 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63811 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63815 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63818 "isa_tms320.tcc"
)
{
#line 4060 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "RND " << src_name << ", " << dst_name;
		return true;
	}
#line 63832 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63847 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63851 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63859 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63863 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63866 "isa_tms320.tcc"
)
{
#line 4103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 63873 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63889 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63898 "isa_tms320.tcc"
> *DecodeOpRND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63904 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63908 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63925 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63929 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63937 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63941 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63944 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63948 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63951 "isa_tms320.tcc"
)
{
#line 4071 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "RND " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 63965 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63980 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63984 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63992 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63996 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63999 "isa_tms320.tcc"
)
{
#line 4107 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 64006 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64022 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64031 "isa_tms320.tcc"
> *DecodeOpRND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64037 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64041 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64058 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64062 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64070 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64077 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64081 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64084 "isa_tms320.tcc"
)
{
#line 4082 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "RND " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 64098 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64113 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64117 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64125 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64129 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64132 "isa_tms320.tcc"
)
{
#line 4111 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 64139 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64155 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64164 "isa_tms320.tcc"
> *DecodeOpRND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64170 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64174 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64191 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64195 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64203 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64207 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64210 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64214 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64217 "isa_tms320.tcc"
)
{
#line 4093 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RND " << imm << ", " << dst_name;
		return true;
	}
#line 64230 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64245 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64249 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64257 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64261 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64264 "isa_tms320.tcc"
)
{
#line 4115 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 64271 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64287 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64296 "isa_tms320.tcc"
> *DecodeOpRND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64302 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64306 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RND (round floating-point value)
**********************************************************/
/**********************************************************
* ROL (rotate left)
* op ROL(0b000[3]:0b100011[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64329 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64333 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 64337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64341 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64345 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64348 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64352 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64355 "isa_tms320.tcc"
)
{
#line 4129 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROL " << dst_name;
		return true;
	}
#line 64368 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64383 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64387 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 64391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64395 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64399 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64402 "isa_tms320.tcc"
)
{
#line 4139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateLeft(dst_value, 1, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64435 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64451 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64460 "isa_tms320.tcc"
> *DecodeOpROL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64466 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64470 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROL (rotate left)
**********************************************************/
/**********************************************************
* ROLC (rotate left through carry)
* op ROLC(0b000[3]:0b100100[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64493 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64497 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64505 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64509 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64512 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64516 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64519 "isa_tms320.tcc"
)
{
#line 4179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROLC " << dst_name;
		return true;
	}
#line 64532 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64547 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64551 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64559 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64563 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64566 "isa_tms320.tcc"
)
{
#line 4189 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateLeft(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64602 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64618 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64627 "isa_tms320.tcc"
> *DecodeOpROLC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64633 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64637 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROLC (rotate left through carry)
**********************************************************/
/**********************************************************
* ROR (rotate right)
* op ROR(0b000[3]:0b100101[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64660 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64664 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 64668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64672 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64676 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64679 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64686 "isa_tms320.tcc"
)
{
#line 4232 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROR " << dst_name;
		return true;
	}
#line 64699 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64714 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64718 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 64722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64726 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64730 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64733 "isa_tms320.tcc"
)
{
#line 4242 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64766 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64782 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64791 "isa_tms320.tcc"
> *DecodeOpROR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64797 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64801 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROR (rotate right)
**********************************************************/
/**********************************************************
* RORC (rotate right through carry)
* op RORC(0b000[3]:0b100110[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64824 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64828 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64836 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64840 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64843 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64847 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64850 "isa_tms320.tcc"
)
{
#line 4282 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RORC " << dst_name;
		return true;
	}
#line 64863 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64878 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64882 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64890 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64894 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64897 "isa_tms320.tcc"
)
{
#line 4292 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64933 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64949 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64958 "isa_tms320.tcc"
> *DecodeOpRORC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64964 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64968 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RORC (rotate right through carry)
**********************************************************/
/**********************************************************
* SUBB (subtract integers with borrow)
* op SUBB(0b000[3]:0b101101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64988 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64991 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64995 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65003 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65007 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65010 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65014 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65017 "isa_tms320.tcc"
)
{
#line 4338 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBB " << src_name << ", " << dst_name;
		return true;
	}
#line 65031 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65046 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65050 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65058 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65062 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65065 "isa_tms320.tcc"
)
{
#line 4382 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65112 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65128 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65137 "isa_tms320.tcc"
> *DecodeOpSUBB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65143 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65147 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65164 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65168 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65176 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65180 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65183 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65187 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65190 "isa_tms320.tcc"
)
{
#line 4349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 65204 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65219 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65223 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65231 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65235 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65238 "isa_tms320.tcc"
)
{
#line 4426 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65288 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65304 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65313 "isa_tms320.tcc"
> *DecodeOpSUBB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65319 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65323 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65340 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65344 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65352 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65356 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65359 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65363 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65366 "isa_tms320.tcc"
)
{
#line 4360 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBB " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 65381 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65396 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65400 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65408 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65412 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65415 "isa_tms320.tcc"
)
{
#line 4473 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65478 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65494 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65503 "isa_tms320.tcc"
> *DecodeOpSUBB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65513 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65530 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65534 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65542 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65549 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65556 "isa_tms320.tcc"
)
{
#line 4372 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBB " << imm << ", " << dst_name;
		return true;
	}
#line 65569 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65584 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65588 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65596 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65600 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65603 "isa_tms320.tcc"
)
{
#line 4533 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65647 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65663 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65672 "isa_tms320.tcc"
> *DecodeOpSUBB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65678 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65682 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBC (subtract integers conditionally)
* op SUBC(0b000[3]:0b101110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 65695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65705 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65709 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65717 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65721 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65724 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65728 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65731 "isa_tms320.tcc"
)
{
#line 4587 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBC " << src_name << ", " << dst_name;
		return true;
	}
#line 65745 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65760 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65764 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65772 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65776 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65779 "isa_tms320.tcc"
)
{
#line 4630 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 65807 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65823 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65832 "isa_tms320.tcc"
> *DecodeOpSUBC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65838 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65842 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65859 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65863 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65871 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65875 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65878 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65882 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65885 "isa_tms320.tcc"
)
{
#line 4598 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBC " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 65899 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65914 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65918 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65926 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65930 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65933 "isa_tms320.tcc"
)
{
#line 4655 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 65964 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65980 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65989 "isa_tms320.tcc"
> *DecodeOpSUBC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65999 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66016 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66020 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66028 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66032 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66035 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66039 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66042 "isa_tms320.tcc"
)
{
#line 4609 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBC " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 66056 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66071 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66075 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66083 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66087 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66090 "isa_tms320.tcc"
)
{
#line 4683 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 66134 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66150 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66159 "isa_tms320.tcc"
> *DecodeOpSUBC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66165 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66169 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66186 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66190 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66198 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66202 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66205 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66209 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66212 "isa_tms320.tcc"
)
{
#line 4620 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBC " << imm << ", " << dst_name;
		return true;
	}
#line 66225 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66240 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66244 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66252 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66256 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66259 "isa_tms320.tcc"
)
{
#line 4724 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		int32_t substract_result = dst_value - imm;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 66284 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66300 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66309 "isa_tms320.tcc"
> *DecodeOpSUBC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66315 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66319 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBC (subtract integers conditionally)
**********************************************************/
/**********************************************************
* SUBF (subtract floating-point values)
* op SUBF(0b000[3]:0b101111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 66332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66342 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66346 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66354 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66358 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66361 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66365 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66368 "isa_tms320.tcc"
)
{
#line 4759 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBF " << src_name << ", " << dst_name;
		return true;
	}
#line 66382 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66397 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66401 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66409 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66413 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66416 "isa_tms320.tcc"
)
{
#line 4802 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		bool underflow;
		bool overflow;
		dst_reg.Sub(src_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 66444 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66460 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66469 "isa_tms320.tcc"
> *DecodeOpSUBF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66479 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66496 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66500 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66508 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66512 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66515 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66519 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66522 "isa_tms320.tcc"
)
{
#line 4770 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 66536 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66551 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66555 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66563 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66567 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66570 "isa_tms320.tcc"
)
{
#line 4827 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		bool underflow;
		bool overflow;
		dst_reg.Sub(src_value, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 66601 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66617 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66626 "isa_tms320.tcc"
> *DecodeOpSUBF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66632 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66636 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66653 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66657 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66665 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66669 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66672 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66676 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66679 "isa_tms320.tcc"
)
{
#line 4781 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 66693 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66705 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66708 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66712 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66720 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66724 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66727 "isa_tms320.tcc"
)
{
#line 4855 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		bool underflow;
		bool overflow;
		dst_reg.Sub(src_value, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 66771 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66787 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66796 "isa_tms320.tcc"
> *DecodeOpSUBF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66802 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66806 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66823 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66827 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66835 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66839 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66842 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66846 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66849 "isa_tms320.tcc"
)
{
#line 4792 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 66862 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66877 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66881 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66889 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66893 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66896 "isa_tms320.tcc"
)
{
#line 4896 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		bool underflow;
		bool overflow;
		dst_reg.Sub((uint16_t)imm, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 66921 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66937 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66946 "isa_tms320.tcc"
> *DecodeOpSUBF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66952 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66956 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI (subtract integer)
* op SUBI(0b000[3]:0b110000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 66969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66979 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66983 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66991 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66998 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67002 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67005 "isa_tms320.tcc"
)
{
#line 4931 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBI " << src_name << ", " << dst_name;
		return true;
	}
#line 67019 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67034 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67038 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67046 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67050 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67053 "isa_tms320.tcc"
)
{
#line 4975 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67097 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67113 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67122 "isa_tms320.tcc"
> *DecodeOpSUBI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67128 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67132 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67149 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67153 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67161 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67165 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67168 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67172 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67175 "isa_tms320.tcc"
)
{
#line 4942 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 67189 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67204 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67208 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67216 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67220 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67223 "isa_tms320.tcc"
)
{
#line 5016 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67270 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67286 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67295 "isa_tms320.tcc"
> *DecodeOpSUBI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67301 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67305 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67322 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67326 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67334 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67338 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67341 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67345 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67348 "isa_tms320.tcc"
)
{
#line 4953 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 67363 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67378 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67382 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67390 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67394 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67397 "isa_tms320.tcc"
)
{
#line 5060 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67457 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67473 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67482 "isa_tms320.tcc"
> *DecodeOpSUBI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67488 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67492 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67509 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67513 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67521 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67528 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67535 "isa_tms320.tcc"
)
{
#line 4965 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBI " << imm << ", " << dst_name;
		return true;
	}
#line 67548 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67563 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67567 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67575 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67579 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67582 "isa_tms320.tcc"
)
{
#line 5117 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67623 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67639 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67648 "isa_tms320.tcc"
> *DecodeOpSUBI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67654 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67658 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI (subtract integer)
**********************************************************/
/**********************************************************
* SUBRB (subtract reverse integer with borrow)
* op SUBRB(0b000[3]:0b110001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 67671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67681 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67685 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67693 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67697 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67700 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67704 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67707 "isa_tms320.tcc"
)
{
#line 5168 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRB " << src_name << ", " << dst_name;
		return true;
	}
#line 67721 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67736 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67740 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67748 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67752 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67755 "isa_tms320.tcc"
)
{
#line 5212 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67802 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67818 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67827 "isa_tms320.tcc"
> *DecodeOpSUBRB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67833 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67837 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67854 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67858 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67866 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67870 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67873 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67877 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67880 "isa_tms320.tcc"
)
{
#line 5179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 67894 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67909 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67913 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67921 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67925 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67928 "isa_tms320.tcc"
)
{
#line 5256 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67978 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67994 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68003 "isa_tms320.tcc"
> *DecodeOpSUBRB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68009 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68013 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68030 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68034 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68042 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68046 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68049 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68053 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68056 "isa_tms320.tcc"
)
{
#line 5190 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRB " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 68071 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68086 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68090 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68098 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68102 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68105 "isa_tms320.tcc"
)
{
#line 5303 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68168 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68184 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68193 "isa_tms320.tcc"
> *DecodeOpSUBRB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68199 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68203 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68220 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68224 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68232 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68236 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68239 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68243 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68246 "isa_tms320.tcc"
)
{
#line 5202 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRB " << imm << ", " << dst_name;
		return true;
	}
#line 68259 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68274 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68278 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68286 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68290 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68293 "isa_tms320.tcc"
)
{
#line 5363 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68337 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68353 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68362 "isa_tms320.tcc"
> *DecodeOpSUBRB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68368 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68372 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRB (subtract reverse integer with borrow)
**********************************************************/
/**********************************************************
* SUBRF (subtract reverse floating-point value)
* op SUBRF(0b000[3]:0b110010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 68385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68395 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68399 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68407 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68411 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68414 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68418 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68421 "isa_tms320.tcc"
)
{
#line 5417 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRF " << src_name << ", " << dst_name;
		return true;
	}
#line 68435 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68450 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68454 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68462 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68466 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68469 "isa_tms320.tcc"
)
{
#line 5460 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68476 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68492 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68501 "isa_tms320.tcc"
> *DecodeOpSUBRF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68507 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68511 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68518 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68528 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68532 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68540 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68544 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68547 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68551 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68554 "isa_tms320.tcc"
)
{
#line 5428 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 68568 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68583 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68587 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68595 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68599 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68602 "isa_tms320.tcc"
)
{
#line 5464 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68609 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68625 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68634 "isa_tms320.tcc"
> *DecodeOpSUBRF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68644 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68661 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68665 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68673 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68680 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68687 "isa_tms320.tcc"
)
{
#line 5439 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 68701 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68716 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68720 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68728 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68732 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68735 "isa_tms320.tcc"
)
{
#line 5468 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68742 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68758 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68767 "isa_tms320.tcc"
> *DecodeOpSUBRF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68773 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68777 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68794 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68798 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68806 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68810 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68813 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68817 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68820 "isa_tms320.tcc"
)
{
#line 5450 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 68833 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68848 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68852 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68860 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68864 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68867 "isa_tms320.tcc"
)
{
#line 5472 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68874 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68890 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68899 "isa_tms320.tcc"
> *DecodeOpSUBRF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68905 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68909 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRF (subtract reverse floating-point value)
**********************************************************/
/**********************************************************
* SUBRI (subtract reverse integer)
* op SUBRI(0b000[3]:0b110011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 68922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68932 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68936 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68944 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68948 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68951 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68955 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68958 "isa_tms320.tcc"
)
{
#line 5489 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRI " << src_name << ", " << dst_name;
		return true;
	}
#line 68972 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68987 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68991 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68999 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69003 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69006 "isa_tms320.tcc"
)
{
#line 5533 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69050 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69066 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69075 "isa_tms320.tcc"
> *DecodeOpSUBRI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69081 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69085 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69102 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69106 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69114 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69121 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69125 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69128 "isa_tms320.tcc"
)
{
#line 5500 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 69142 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69157 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69161 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69169 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69173 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69176 "isa_tms320.tcc"
)
{
#line 5574 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69223 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69239 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69248 "isa_tms320.tcc"
> *DecodeOpSUBRI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69254 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69258 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69275 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69279 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69287 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69291 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69294 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69298 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69301 "isa_tms320.tcc"
)
{
#line 5511 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 69316 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69331 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69335 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69343 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69347 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69350 "isa_tms320.tcc"
)
{
#line 5618 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69404 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69420 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69429 "isa_tms320.tcc"
> *DecodeOpSUBRI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69435 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69439 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69456 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69460 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69468 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69472 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69475 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69479 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69482 "isa_tms320.tcc"
)
{
#line 5523 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRI " << imm << ", " << dst_name;
		return true;
	}
#line 69495 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69510 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69514 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69522 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69526 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69529 "isa_tms320.tcc"
)
{
#line 5669 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69570 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69579 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69586 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69595 "isa_tms320.tcc"
> *DecodeOpSUBRI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69601 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69605 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRI (subtract reverse integer)
**********************************************************/
/**********************************************************
* TSTB (test bit fields)
* op TSTB(0b000[3]:0b110100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 69618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69628 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69632 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69640 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69644 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69647 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69654 "isa_tms320.tcc"
)
{
#line 5720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "TSTB " << src_name << ", " << dst_name;
		return true;
	}
#line 69668 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69683 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69687 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69695 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69699 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69702 "isa_tms320.tcc"
)
{
#line 5763 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69729 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69735 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69745 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69754 "isa_tms320.tcc"
> *DecodeOpTSTB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69760 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69764 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69781 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69785 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69793 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69797 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69800 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69804 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69807 "isa_tms320.tcc"
)
{
#line 5731 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "TSTB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 69821 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69836 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69840 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69848 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69852 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69855 "isa_tms320.tcc"
)
{
#line 5787 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69885 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69901 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69910 "isa_tms320.tcc"
> *DecodeOpTSTB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69916 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69920 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69937 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69941 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69949 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69953 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69956 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69960 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69963 "isa_tms320.tcc"
)
{
#line 5742 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "TSTB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 69977 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69992 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69996 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70004 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70008 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70011 "isa_tms320.tcc"
)
{
#line 5814 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 70054 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70070 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70079 "isa_tms320.tcc"
> *DecodeOpTSTB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70085 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70089 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70106 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70110 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70118 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70122 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70125 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70129 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70132 "isa_tms320.tcc"
)
{
#line 5753 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "TSTB " << imm << ", " << dst_name;
		return true;
	}
#line 70145 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70160 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70164 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70172 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70176 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70179 "isa_tms320.tcc"
)
{
#line 5854 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 70203 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70219 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70228 "isa_tms320.tcc"
> *DecodeOpTSTB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70234 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70238 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB (test bit fields)
**********************************************************/
/**********************************************************
* XOR (bitwise-exclusive OR)
* op XOR(0b000[3]:0b110101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 70251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70261 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70265 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70273 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70277 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70280 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70284 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70287 "isa_tms320.tcc"
)
{
#line 5888 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "XOR " << src_name << ", " << dst_name;
		return true;
	}
#line 70301 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70316 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70320 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70328 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70332 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70335 "isa_tms320.tcc"
)
{
#line 5931 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70369 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70385 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70394 "isa_tms320.tcc"
> *DecodeOpXOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70400 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70404 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70421 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70425 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70433 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70437 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70440 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70444 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70447 "isa_tms320.tcc"
)
{
#line 5899 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "XOR " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 70461 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70476 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70480 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70488 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70492 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70495 "isa_tms320.tcc"
)
{
#line 5962 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70532 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70548 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70557 "isa_tms320.tcc"
> *DecodeOpXOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70567 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70584 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70588 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70596 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70600 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70603 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70607 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70610 "isa_tms320.tcc"
)
{
#line 5910 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "XOR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 70624 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70639 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70643 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70651 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70655 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70658 "isa_tms320.tcc"
)
{
#line 5996 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70708 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70724 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70733 "isa_tms320.tcc"
> *DecodeOpXOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70739 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70743 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70760 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70764 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70772 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70776 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70779 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70783 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70786 "isa_tms320.tcc"
)
{
#line 5921 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "XOR " << imm << ", " << dst_name;
		return true;
	}
#line 70799 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70814 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70818 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70826 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70830 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70833 "isa_tms320.tcc"
)
{
#line 6043 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70864 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70880 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70889 "isa_tms320.tcc"
> *DecodeOpXOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70895 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70899 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 3 operands operations:
* - ADDC3        add with carry
* - ADDF3        add floating-point values
* - ADDI3        add integers
* - AND3         bitwise-logical AND
* - ANDN3        bitwise-logical AND with complement
* - ASH3         arithmetic shift
* - CMPF3        compare floating-point values
* - CMPI3        compare integers
* - LSH3         logical shift
* - MPYF3        multiply floating-point values
* - MPYI3        multiply integers
* - OR3          bitwise-logical OR
* - SUBB3        subtract integers with borrow
* - SUBF3        subtract floating-point values
* - SUBI3        subtract integers
* - TSTB3        test bit fields
* - XOR3         bitwise-exclusive OR
*/
/**********************************************************
* ADDC3 (add with carry)
* op ADDC3(0b001[3]:0b000000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 70965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70975 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70979 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70987 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70991 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70994 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70998 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71001 "isa_tms320.tcc"
)
{
#line 66 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71016 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71021 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71028 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71031 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71035 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71043 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71047 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71050 "isa_tms320.tcc"
)
{
#line 114 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71097 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71113 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71122 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71128 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71132 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71149 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71153 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71161 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71165 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71168 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71172 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71175 "isa_tms320.tcc"
)
{
#line 78 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71190 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71205 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71209 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71217 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71221 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71224 "isa_tms320.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71288 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71304 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71313 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71319 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71323 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71340 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71344 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71352 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71356 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71359 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71363 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71366 "isa_tms320.tcc"
)
{
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71381 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71396 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71400 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71408 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71412 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71415 "isa_tms320.tcc"
)
{
#line 219 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71479 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71495 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71504 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71510 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71514 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71531 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71535 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71543 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71547 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71550 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71554 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71557 "isa_tms320.tcc"
)
{
#line 102 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71572 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71587 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71591 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71599 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71603 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71606 "isa_tms320.tcc"
)
{
#line 280 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71692 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71705 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71708 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71717 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71723 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71727 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC3 (add with carry)
**********************************************************/
/**********************************************************
* ADDF3 (add floating-point values)
* op ADDF3(0b001[3]:0b000001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 71740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71750 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71754 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71762 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71766 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71769 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71773 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71776 "isa_tms320.tcc"
)
{
#line 376 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71791 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71806 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71810 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71818 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71822 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71825 "isa_tms320.tcc"
)
{
#line 424 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 1st source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Compute
		bool overflow;
		bool underflow;
		dst_reg.Add(src1_reg, src2_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 71856 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71872 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71881 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71887 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71891 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71908 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71912 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71920 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71924 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71927 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71931 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71934 "isa_tms320.tcc"
)
{
#line 388 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71949 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71964 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71968 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71976 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71980 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71983 "isa_tms320.tcc"
)
{
#line 452 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Compute
		bool overflow;
		bool underflow;
		dst_reg.Add(src1_value, src2_reg, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 72031 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72047 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72056 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72062 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72066 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72073 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72083 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72087 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72095 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72099 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72102 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72106 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72109 "isa_tms320.tcc"
)
{
#line 400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72124 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72139 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72143 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72151 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72155 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72158 "isa_tms320.tcc"
)
{
#line 497 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute
		bool overflow;
		bool underflow;
		dst_reg.Add(src1_reg, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 72206 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72222 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72231 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72237 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72241 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72258 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72262 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72270 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72274 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72277 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72281 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72284 "isa_tms320.tcc"
)
{
#line 412 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72299 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72314 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72318 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72326 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72330 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72333 "isa_tms320.tcc"
)
{
#line 542 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute
		bool overflow;
		bool underflow;
		dst_reg.Add(src1_value, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 72403 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72409 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72419 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72428 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72434 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72438 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF3 (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI3 (add integers)
* op ADDI3(0b001[3]:0b000010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 72451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72461 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72465 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72473 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72477 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72480 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72487 "isa_tms320.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72502 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72517 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72521 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72529 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72533 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72536 "isa_tms320.tcc"
)
{
#line 670 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72580 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72596 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72605 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72611 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72615 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72632 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72636 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72644 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72648 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72651 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72655 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72658 "isa_tms320.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72673 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72681 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72688 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72692 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72700 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72704 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72707 "isa_tms320.tcc"
)
{
#line 711 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72768 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72781 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72784 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72793 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72799 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72803 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72820 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72824 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72832 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72836 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72839 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72843 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72846 "isa_tms320.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72861 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72876 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72880 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72888 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72892 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72895 "isa_tms320.tcc"
)
{
#line 769 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72956 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72972 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72981 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72987 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72991 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73008 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73012 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73020 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73024 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73027 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73031 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73034 "isa_tms320.tcc"
)
{
#line 658 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73049 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73064 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73068 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73076 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73080 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73083 "isa_tms320.tcc"
)
{
#line 827 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 73166 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73182 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73191 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73197 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73201 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI3 (add integers)
**********************************************************/
/**********************************************************
* AND3 (bitwise-logical AND)
* op AND3(0b001[3]:0b000011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 73214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73224 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73228 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73236 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73240 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73243 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73247 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73250 "isa_tms320.tcc"
)
{
#line 921 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73265 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73280 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73284 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73292 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73296 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73299 "isa_tms320.tcc"
)
{
#line 969 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73333 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73349 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73358 "isa_tms320.tcc"
> *DecodeOpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73364 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73368 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73385 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73389 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73397 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73404 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73408 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73411 "isa_tms320.tcc"
)
{
#line 933 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73426 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73441 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73445 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73453 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73457 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73460 "isa_tms320.tcc"
)
{
#line 1001 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73511 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73527 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73536 "isa_tms320.tcc"
> *DecodeOpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73542 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73546 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73563 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73567 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73575 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73579 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73582 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73586 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73589 "isa_tms320.tcc"
)
{
#line 945 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73604 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73619 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73623 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73631 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73635 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73638 "isa_tms320.tcc"
)
{
#line 1049 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73689 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73705 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73714 "isa_tms320.tcc"
> *DecodeOpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73720 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73724 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73741 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73745 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73753 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73757 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73760 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73764 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73767 "isa_tms320.tcc"
)
{
#line 957 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73782 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73797 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73801 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73809 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73813 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73816 "isa_tms320.tcc"
)
{
#line 1097 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73889 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73895 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73905 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73914 "isa_tms320.tcc"
> *DecodeOpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73920 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73924 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND3 (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN3 (bitwise-logical AND with complement)
* op ANDN3(0b001[3]:0b000100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 73937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73947 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73951 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73959 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73966 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73973 "isa_tms320.tcc"
)
{
#line 1180 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{ const char *dst_name = REG_NAME[dst]; const char *src1_name = REG_NAME[src1]; const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73985 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74000 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74004 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74012 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74016 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74019 "isa_tms320.tcc"
)
{
#line 1225 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74053 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74069 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74078 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74084 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74088 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74105 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74109 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74117 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74121 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74124 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74128 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74131 "isa_tms320.tcc"
)
{
#line 1189 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74146 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74154 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74161 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74165 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74173 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74177 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74180 "isa_tms320.tcc"
)
{
#line 1257 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74231 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74247 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74256 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74262 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74266 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74283 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74287 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74295 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74299 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74302 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74306 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74309 "isa_tms320.tcc"
)
{
#line 1201 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 74324 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74339 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74343 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74351 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74355 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74358 "isa_tms320.tcc"
)
{
#line 1305 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74409 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74425 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74434 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74440 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74444 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74461 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74465 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74473 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74477 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74480 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74487 "isa_tms320.tcc"
)
{
#line 1213 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74502 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74517 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74521 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74529 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74533 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74536 "isa_tms320.tcc"
)
{
#line 1353 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74609 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74625 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74634 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74644 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN3 (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH3 (arithmetic shift)
* op ASH3(0b001[3]:0b000101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 74657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74667 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74671 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74679 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74686 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74693 "isa_tms320.tcc"
)
{
#line 1436 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 74708 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74723 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74727 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74731 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74735 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74739 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74742 "isa_tms320.tcc"
)
{
#line 1484 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 74812 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74828 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74837 "isa_tms320.tcc"
> *DecodeOpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74843 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74847 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74864 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74868 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74876 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74880 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74883 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74887 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74890 "isa_tms320.tcc"
)
{
#line 1448 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74905 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74920 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74924 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74932 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74936 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74939 "isa_tms320.tcc"
)
{
#line 1551 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 75026 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75042 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75051 "isa_tms320.tcc"
> *DecodeOpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75057 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75061 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75078 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75082 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75090 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75094 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75097 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75101 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75104 "isa_tms320.tcc"
)
{
#line 1460 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 75119 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75134 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75138 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75146 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75150 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75153 "isa_tms320.tcc"
)
{
#line 1635 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 75240 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75256 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75265 "isa_tms320.tcc"
> *DecodeOpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75275 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75292 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75296 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75304 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75308 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75311 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75315 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75318 "isa_tms320.tcc"
)
{
#line 1472 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 75333 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75348 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75352 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75360 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75364 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75367 "isa_tms320.tcc"
)
{
#line 1719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 75476 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75492 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75501 "isa_tms320.tcc"
> *DecodeOpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75507 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75511 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH3 (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF3 (compare floating-point values)
* op CMPF3(0b001[3]:0b000110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 75524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75534 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75538 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75546 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75550 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75553 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75557 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75560 "isa_tms320.tcc"
)
{
#line 1838 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 75574 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75589 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75593 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75601 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75605 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75608 "isa_tms320.tcc"
)
{
#line 1882 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75615 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75631 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75640 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75646 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75650 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75667 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75671 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75679 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75686 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75693 "isa_tms320.tcc"
)
{
#line 1849 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 75707 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75722 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75726 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75734 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75738 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75741 "isa_tms320.tcc"
)
{
#line 1886 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75748 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75764 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75773 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75779 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75783 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75800 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75804 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75812 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75816 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75819 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75823 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75826 "isa_tms320.tcc"
)
{
#line 1860 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 75840 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75855 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75859 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75867 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75871 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75874 "isa_tms320.tcc"
)
{
#line 1890 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75881 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75897 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75906 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75912 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75916 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75933 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75937 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75945 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75949 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75952 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75956 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75959 "isa_tms320.tcc"
)
{
#line 1871 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 75973 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75978 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75988 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75992 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76000 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76004 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76007 "isa_tms320.tcc"
)
{
#line 1894 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 76014 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76030 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76039 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76045 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76049 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF3 (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI3 (compare integers)
* op CMPI3(0b001[3]:0b000111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 76062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76072 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76076 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76084 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76088 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76091 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76095 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76098 "isa_tms320.tcc"
)
{
#line 1911 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 76112 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76127 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76131 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76139 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76143 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76146 "isa_tms320.tcc"
)
{
#line 1955 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 76179 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76195 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76204 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76210 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76214 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76231 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76235 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76243 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76247 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76250 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76254 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76257 "isa_tms320.tcc"
)
{
#line 1922 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 76271 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76286 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76290 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76298 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76302 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76305 "isa_tms320.tcc"
)
{
#line 1985 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 76355 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76371 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76380 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76386 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76390 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76407 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76411 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76419 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76423 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76426 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76430 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76433 "isa_tms320.tcc"
)
{
#line 1933 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 76447 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76462 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76466 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76474 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76478 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76481 "isa_tms320.tcc"
)
{
#line 2032 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 76531 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76547 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76556 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76562 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76566 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76583 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76587 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76595 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76599 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76602 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76606 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76609 "isa_tms320.tcc"
)
{
#line 1944 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 76623 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76638 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76642 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76650 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76654 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76657 "isa_tms320.tcc"
)
{
#line 2079 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 76723 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76739 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76748 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76754 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76758 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI3 (compare integers)
**********************************************************/
/**********************************************************
* LSH3 (logical shift)
* op LSH3(0b001[3]:0b001000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 76771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76781 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76785 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76793 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76797 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76800 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76804 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76807 "isa_tms320.tcc"
)
{
#line 2155 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 76822 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76837 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76841 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76849 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76853 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76856 "isa_tms320.tcc"
)
{
#line 2203 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76926 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76942 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76951 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76957 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76961 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76978 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76982 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76990 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76994 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76997 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77001 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77004 "isa_tms320.tcc"
)
{
#line 2167 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77019 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77034 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77038 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77046 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77050 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77053 "isa_tms320.tcc"
)
{
#line 2270 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 77140 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77156 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77165 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77171 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77175 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77192 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77196 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77204 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77208 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77211 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77218 "isa_tms320.tcc"
)
{
#line 2179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77233 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77248 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77252 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77260 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77264 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77267 "isa_tms320.tcc"
)
{
#line 2354 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 77354 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77370 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77379 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77385 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77389 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77406 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77410 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77418 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77425 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77429 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77432 "isa_tms320.tcc"
)
{
#line 2191 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77447 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77462 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77466 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77474 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77478 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77481 "isa_tms320.tcc"
)
{
#line 2438 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 77590 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77606 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77615 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77621 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77625 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 (logical shift)
**********************************************************/
/**********************************************************
* MPYF3 (multiply floating-point values)
* op MPYF3(0b001[3]:0b001001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 77638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77648 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77652 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77660 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77664 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77667 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77671 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77674 "isa_tms320.tcc"
)
{
#line 2557 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77689 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77704 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77708 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77716 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77720 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77723 "isa_tms320.tcc"
)
{
#line 2605 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77730 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77746 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77755 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77761 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77765 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77782 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77786 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77794 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77798 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77801 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77805 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77808 "isa_tms320.tcc"
)
{
#line 2569 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77823 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77838 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77842 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77850 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77854 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77857 "isa_tms320.tcc"
)
{
#line 2609 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77864 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77880 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77889 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77895 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77899 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77916 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77920 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77928 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77932 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77935 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77939 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77942 "isa_tms320.tcc"
)
{
#line 2581 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77957 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77972 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77976 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77984 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77988 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77991 "isa_tms320.tcc"
)
{
#line 2613 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77998 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78014 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78023 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78029 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78033 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78050 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78054 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78062 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78066 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78069 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78073 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78076 "isa_tms320.tcc"
)
{
#line 2593 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78091 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78106 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78110 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78118 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78122 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78125 "isa_tms320.tcc"
)
{
#line 2617 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 78132 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78148 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78157 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78163 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78167 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI3 (multiply integers)
* op MPYI3(0b001[3]:0b001010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 78180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78190 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78194 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78202 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78206 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78209 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78213 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78216 "isa_tms320.tcc"
)
{
#line 2634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78231 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78246 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78250 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78258 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78262 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78265 "isa_tms320.tcc"
)
{
#line 2682 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Read 2nd source operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 78312 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78328 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78337 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78343 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78347 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78364 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78368 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78376 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78380 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78383 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78387 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78390 "isa_tms320.tcc"
)
{
#line 2646 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78405 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78420 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78424 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78432 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78436 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78439 "isa_tms320.tcc"
)
{
#line 2726 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Read 2nd source operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 78503 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78519 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78528 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78534 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78538 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78555 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78559 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78567 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78571 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78574 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78578 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78581 "isa_tms320.tcc"
)
{
#line 2658 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78596 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78611 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78615 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78623 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78627 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78630 "isa_tms320.tcc"
)
{
#line 2787 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 78694 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78710 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78719 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78725 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78729 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78746 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78750 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78758 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78762 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78765 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78769 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78772 "isa_tms320.tcc"
)
{
#line 2670 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78787 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78802 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78806 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78814 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78818 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78821 "isa_tms320.tcc"
)
{
#line 2848 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.IntLoad(ea1) & 0xffffff), 24);

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(ea2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 78907 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78923 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78932 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78938 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78942 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 (multiply integers)
**********************************************************/
/**********************************************************
* OR3 (bitwise-logical OR)
* op OR3(0b001[3]:0b001011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 78955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78965 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78969 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78977 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78981 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78984 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78988 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78991 "isa_tms320.tcc"
)
{
#line 2944 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79006 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79021 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79025 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79033 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79037 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79040 "isa_tms320.tcc"
)
{
#line 2992 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 79074 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79090 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79099 "isa_tms320.tcc"
> *DecodeOpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79105 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79109 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79116 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79126 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79130 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79138 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79142 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79145 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79149 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79152 "isa_tms320.tcc"
)
{
#line 2956 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79167 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79182 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79186 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79194 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79201 "isa_tms320.tcc"
)
{
#line 3024 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 79252 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79268 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79277 "isa_tms320.tcc"
> *DecodeOpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79283 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79287 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79304 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79308 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79316 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79320 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79323 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79327 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79330 "isa_tms320.tcc"
)
{
#line 2968 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79345 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79360 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79364 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79372 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79376 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79379 "isa_tms320.tcc"
)
{
#line 3072 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 79430 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79446 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79455 "isa_tms320.tcc"
> *DecodeOpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79461 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79465 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79482 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79486 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79494 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79498 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79501 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79505 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79508 "isa_tms320.tcc"
)
{
#line 2980 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79523 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79538 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79542 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79550 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79554 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79557 "isa_tms320.tcc"
)
{
#line 3120 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 79630 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79646 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79655 "isa_tms320.tcc"
> *DecodeOpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79661 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79665 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 (bitwise-logical OR)
**********************************************************/
/**********************************************************
* SUBB3 (subtract integers with borrow)
* op SUBB3(0b001[3]:0b001100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 79678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79681 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79688 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79692 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79700 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79704 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79707 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79711 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79714 "isa_tms320.tcc"
)
{
#line 3203 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79729 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79744 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79748 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79756 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79760 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79763 "isa_tms320.tcc"
)
{
#line 3251 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 79810 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79826 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79835 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79841 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79845 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79859 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79862 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79866 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79874 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79878 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79881 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79885 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79888 "isa_tms320.tcc"
)
{
#line 3215 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79903 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79918 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79922 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79930 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79934 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79937 "isa_tms320.tcc"
)
{
#line 3295 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80001 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80017 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80026 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80032 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80036 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80053 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80057 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80061 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80065 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80069 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80072 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80076 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80079 "isa_tms320.tcc"
)
{
#line 3227 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80094 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80109 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80113 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80121 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80125 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80128 "isa_tms320.tcc"
)
{
#line 3356 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80192 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80208 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80217 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80227 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80244 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80248 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80256 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80260 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80263 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80267 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80270 "isa_tms320.tcc"
)
{
#line 3239 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80285 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80300 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80304 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80312 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80316 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80319 "isa_tms320.tcc"
)
{
#line 3417 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80405 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80421 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80430 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80436 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80440 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB3 (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBF3 (subtract floating-point values)
* op SUBF3(0b001[3]:0b001101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 80453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80463 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80467 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80475 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80479 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80482 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80486 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80489 "isa_tms320.tcc"
)
{
#line 3513 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80504 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80519 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80523 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80531 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80535 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80538 "isa_tms320.tcc"
)
{
#line 3561 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 1st source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Compute
		bool overflow;
		bool underflow;
		dst_reg.Sub(src1_reg, src2_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 80569 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80585 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80594 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80600 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80604 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80621 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80625 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80633 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80637 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80640 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80644 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80647 "isa_tms320.tcc"
)
{
#line 3525 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80662 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80677 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80681 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80689 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80693 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80696 "isa_tms320.tcc"
)
{
#line 3589 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Compute
		bool overflow;
		bool underflow;
		dst_reg.Sub(src1_value, src2_reg, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 80744 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80760 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80769 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80775 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80779 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80796 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80800 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80808 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80812 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80815 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80819 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80822 "isa_tms320.tcc"
)
{
#line 3537 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80837 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80852 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80856 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80864 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80868 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80871 "isa_tms320.tcc"
)
{
#line 3634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute
		bool overflow;
		bool underflow;
		dst_reg.Sub(src1_reg, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 80919 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80935 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80944 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80950 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80954 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80971 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80975 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80983 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80987 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80990 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80994 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80997 "isa_tms320.tcc"
)
{
#line 3549 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 81012 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81027 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81031 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81039 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81043 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81046 "isa_tms320.tcc"
)
{
#line 3679 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute
		bool overflow;
		bool underflow;
		dst_reg.Sub(src1_value, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 81116 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81132 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81141 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81151 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI3 (subtract integers)
* op SUBI3(0b001[3]:0b001110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 81164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81174 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81178 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81186 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81190 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81193 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81197 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81200 "isa_tms320.tcc"
)
{
#line 3759 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 81215 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81230 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81234 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81242 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81246 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81249 "isa_tms320.tcc"
)
{
#line 3807 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81293 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81309 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81318 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81324 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81328 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81345 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81349 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81357 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81361 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81364 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81368 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81371 "isa_tms320.tcc"
)
{
#line 3771 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 81386 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81401 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81405 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81413 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81417 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81420 "isa_tms320.tcc"
)
{
#line 3848 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81481 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81497 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81506 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81512 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81516 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81533 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81537 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81545 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81549 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81552 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81556 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81559 "isa_tms320.tcc"
)
{
#line 3783 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 81574 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81589 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81593 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81601 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81605 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81608 "isa_tms320.tcc"
)
{
#line 3906 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81669 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81685 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81694 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81700 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81704 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81721 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81725 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81733 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81737 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81740 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81744 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81747 "isa_tms320.tcc"
)
{
#line 3795 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 81762 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81777 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81781 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81789 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81793 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81796 "isa_tms320.tcc"
)
{
#line 3964 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81879 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81895 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81904 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81910 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81914 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 (subtract integers)
**********************************************************/
/**********************************************************
* TSTB3 (test bit fields)
* op TSTB3(0b001[3]:0b001111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 81927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81937 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81941 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81949 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81953 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81956 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81960 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81963 "isa_tms320.tcc"
)
{
#line 4057 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 81977 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81992 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81996 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82004 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82008 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82011 "isa_tms320.tcc"
)
{
#line 4101 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 82038 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82054 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82063 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82069 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82073 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82090 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82094 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82102 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82106 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82109 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82113 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82116 "isa_tms320.tcc"
)
{
#line 4068 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 82130 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82145 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82149 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82157 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82161 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82164 "isa_tms320.tcc"
)
{
#line 4126 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether 2nd source operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 82208 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82224 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82233 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82239 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82243 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82260 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82264 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82272 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82276 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82279 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82283 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82286 "isa_tms320.tcc"
)
{
#line 4079 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 82300 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82315 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82319 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82327 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82331 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82334 "isa_tms320.tcc"
)
{
#line 4167 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether 1st source operand is valid
		if(unlikely(!cpu.HasReg(src1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 82378 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82394 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82403 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82409 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82413 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82430 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82434 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82442 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82446 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82449 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82453 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82456 "isa_tms320.tcc"
)
{
#line 4090 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 82470 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82485 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82489 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82497 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82501 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82504 "isa_tms320.tcc"
)
{
#line 4208 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 82564 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82580 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82589 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82595 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82599 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB3 (test bit fields)
**********************************************************/
/**********************************************************
* XOR3 (bitwise-exclusive OR)
* op XOR3(0b001[3]:0b010000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 82612 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82619 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82622 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82626 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82634 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82638 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82641 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82645 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82648 "isa_tms320.tcc"
)
{
#line 4278 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 82663 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82678 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82682 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82690 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82694 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82697 "isa_tms320.tcc"
)
{
#line 4326 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 82731 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82747 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82756 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82762 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82766 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82783 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82787 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82795 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82799 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82802 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82806 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82809 "isa_tms320.tcc"
)
{
#line 4290 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 82824 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82839 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82843 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82851 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82855 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82858 "isa_tms320.tcc"
)
{
#line 4358 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 82909 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82925 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82934 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82940 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82944 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82961 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82965 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82973 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82977 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82980 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82984 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82987 "isa_tms320.tcc"
)
{
#line 4302 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 83002 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83017 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83021 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83029 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83033 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83036 "isa_tms320.tcc"
)
{
#line 4406 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 83087 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83093 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83096 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83103 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83112 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83118 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83122 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83139 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83143 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83151 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83155 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83158 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83162 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83165 "isa_tms320.tcc"
)
{
#line 4314 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 83180 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83195 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83199 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83207 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83211 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83214 "isa_tms320.tcc"
)
{
#line 4454 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 83287 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83303 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83312 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83318 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83322 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of program-control operations:
* - Bcond        branch conditionally (standard)
* - BcondD       branch conditionally (delayed)
* - BR           branch unconditionally (standard)
* - BRD          branch unconditionally (delayed)
* - CALL         call subroutine
* - CALLcond     call subroutine conditionally
* - DBcond       decrement and branch conditionally (standard)
* - DBcondD      decrement and branch conditionally (delayed)
* - IACK         interrupt acknowledge
* - IDLE         idle until interrupt
* - NOP          no operation
* - RETIcond     return from interrupt conditionally
* - RETScond     return form subroutine conditionally
* - RPTB         repeat block of instructions
* - RPTS         repeat single instruction
* - SWI          software interrupt
* - TRAPcond     trap conditionally
*/
/**********************************************************
* Bcond (branch conditionally (standard))
* op Bcond(0b011010[6]:b[1]:0b000[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83398 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83402 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83410 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83414 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83417 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83421 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83424 "isa_tms320.tcc"
)
{
#line 63 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << " " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 83437 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83452 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83456 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83464 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83468 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83471 "isa_tms320.tcc"
)
{
#line 73 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83499 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83515 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83524 "isa_tms320.tcc"
> *DecodeOpBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83530 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83534 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83551 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83555 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83563 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83567 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83570 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83574 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83577 "isa_tms320.tcc"
)
{
#line 100 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 83589 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83594 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83604 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83608 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83616 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83620 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83623 "isa_tms320.tcc"
)
{
#line 109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83654 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83670 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83679 "isa_tms320.tcc"
> *DecodeOpBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83685 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83689 "isa_tms320.tcc"
	>(code, addr);
}

/* end of Bcond (branch conditionally (standard))
**********************************************************/
/**********************************************************
* BcondD (branch conditionally (delayed))
* op BcondD(0b011010[6]:b[1]:0b000[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83712 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83716 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83724 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83728 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83731 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83735 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83738 "isa_tms320.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << "D " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 83751 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83766 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83770 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83778 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83782 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83785 "isa_tms320.tcc"
)
{
#line 157 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 83814 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83830 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83839 "isa_tms320.tcc"
> *DecodeOpBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83845 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83849 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83866 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83870 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83878 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83882 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83885 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83889 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83892 "isa_tms320.tcc"
)
{
#line 185 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << "D 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << ">";
		return true;
	}
#line 83904 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83919 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83923 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83931 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83935 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83938 "isa_tms320.tcc"
)
{
#line 194 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = next_pc + imm + 2;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 83970 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83986 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83995 "isa_tms320.tcc"
> *DecodeOpBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84005 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BcondD (branch conditionally (delayed))
**********************************************************/
/**********************************************************
* BR (branch unconditionally (standard))
* op BR(0b0110000[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84028 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84032 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 84036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84040 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84044 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84047 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84051 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84054 "isa_tms320.tcc"
)
{
#line 233 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BR 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 84063 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84078 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84082 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 84086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84090 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84094 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84097 "isa_tms320.tcc"
)
{
#line 239 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84116 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84132 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84141 "isa_tms320.tcc"
> *DecodeOpBR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84151 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BR (branch unconditionally (standard))
**********************************************************/
/**********************************************************
* BRD (branch unconditionally (delayed))
* op BRD(0b0110000[7]:0b1[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84174 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84178 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 84182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84186 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84190 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84193 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84197 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84200 "isa_tms320.tcc"
)
{
#line 265 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BRD 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 84209 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84224 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84228 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 84232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84236 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84240 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84243 "isa_tms320.tcc"
)
{
#line 271 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 84263 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84279 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84288 "isa_tms320.tcc"
> *DecodeOpBRD(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84294 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84298 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BRD (branch unconditionally (delayed))
**********************************************************/
/**********************************************************
* CALL (call subroutine)
* op CALL(0b0110001[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84321 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84325 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 84329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84333 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84337 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84340 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84344 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84347 "isa_tms320.tcc"
)
{
#line 298 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "CALL 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 84356 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84371 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84375 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 84379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84383 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84387 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84390 "isa_tms320.tcc"
)
{
#line 304 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target call address
		typename CONFIG::address_t target_addr = src;

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84421 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84437 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84446 "isa_tms320.tcc"
> *DecodeOpCALL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84456 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALL (call subroutine)
**********************************************************/
/**********************************************************
* CALLcond (call subroutine conditionally)
* op CALLcond(0b011100[6]:b[1]:0b0000[4]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84479 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84483 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84491 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84495 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84498 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84502 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84505 "isa_tms320.tcc"
)
{
#line 342 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "CALL" << cond_name << " " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 84518 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84533 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84537 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84545 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84549 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84552 "isa_tms320.tcc"
)
{
#line 352 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84592 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84605 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84608 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84617 "isa_tms320.tcc"
> *DecodeOpCALLcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84623 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84627 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84644 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84648 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84656 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84660 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84663 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84667 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84670 "isa_tms320.tcc"
)
{
#line 391 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "CALL" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 84682 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84697 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84701 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84709 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84713 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84716 "isa_tms320.tcc"
)
{
#line 400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84756 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84772 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84781 "isa_tms320.tcc"
> *DecodeOpCALLcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84787 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84791 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALLcond (call subroutine conditionally)
**********************************************************/
/**********************************************************
* DBcond (decrement and branch conditionally (standard))
* op DBcond(0b011011[6]:b[1]:ar[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84814 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84818 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84826 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84830 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84833 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84837 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84840 "isa_tms320.tcc"
)
{
#line 447 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 84853 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84868 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84872 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84880 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84884 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84887 "isa_tms320.tcc"
)
{
#line 457 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84927 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84943 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84952 "isa_tms320.tcc"
> *DecodeOpDBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84958 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84962 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84979 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84983 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84991 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84998 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85002 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85005 "isa_tms320.tcc"
)
{
#line 496 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 85017 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85032 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85036 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 85040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85044 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85048 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85051 "isa_tms320.tcc"
)
{
#line 505 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85094 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85110 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85119 "isa_tms320.tcc"
> *DecodeOpDBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85125 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85129 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcond (decrement and branch conditionally (standard))
**********************************************************/
/**********************************************************
* DBcondD (decrement and branch conditionally (delayed))
* op DBcondD(0b011011[6]:b[1]:ar[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85152 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85156 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85164 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85168 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85171 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85175 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85178 "isa_tms320.tcc"
)
{
#line 555 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 85191 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85206 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85210 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85218 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85222 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85225 "isa_tms320.tcc"
)
{
#line 565 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 85266 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85282 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85291 "isa_tms320.tcc"
> *DecodeOpDBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85297 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85301 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 85308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85318 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85322 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 85326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85330 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85334 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85337 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85341 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85344 "isa_tms320.tcc"
)
{
#line 605 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << ">";
		return true;
	}
#line 85356 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85371 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85375 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 85379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85383 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85387 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85390 "isa_tms320.tcc"
)
{
#line 614 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm + 2;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 85434 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85450 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85459 "isa_tms320.tcc"
> *DecodeOpDBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85465 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85469 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcondD (decrement and branch conditionally (delayed))
**********************************************************/
/**********************************************************
* IACK (interrupt acknowledge)
* op IACK(0b000[3]:0b110110[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85492 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85496 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85504 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85508 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85511 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85515 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85518 "isa_tms320.tcc"
)
{
#line 665 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IACK @0x" << direct;
		return true;
	}
#line 85526 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85541 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85545 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85553 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85557 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85560 "isa_tms320.tcc"
)
{
#line 670 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 85567 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85583 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85592 "isa_tms320.tcc"
> *DecodeOpIACK_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85598 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85602 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 85609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85619 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85623 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85631 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85635 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85638 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85642 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85645 "isa_tms320.tcc"
)
{
#line 676 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "IACK " << disasm_indir;
		return true;
	}
#line 85655 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85670 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85674 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85682 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85686 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85689 "isa_tms320.tcc"
)
{
#line 683 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 85696 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85712 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85721 "isa_tms320.tcc"
> *DecodeOpIACK_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85727 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85731 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IACK (interrupt acknowledge)
**********************************************************/
/**********************************************************
* IDLE (idle until interrupt)
* op IDLE(0b000[3]:0b001100[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85754 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85758 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 85762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85766 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85770 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85773 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85777 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85780 "isa_tms320.tcc"
)
{
#line 697 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IDLE";
		return true;
	}
#line 85788 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85803 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85807 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 85811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85815 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85819 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85822 "isa_tms320.tcc"
)
{
#line 702 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Enter idle mode 1
		cpu.Idle(1);
	}
#line 85841 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85857 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85866 "isa_tms320.tcc"
> *DecodeOpIDLE(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85876 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE (idle until interrupt)
**********************************************************/
/**********************************************************
* NOP (no operation)
* op NOP(0b000[3]:0b011001[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85899 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85903 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85911 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85915 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85918 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85925 "isa_tms320.tcc"
)
{
#line 728 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{

		os << "NOP";
		return true;
	}
#line 85934 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85949 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85953 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85961 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85965 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85968 "isa_tms320.tcc"
)
{
#line 734 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// No operation
	}
#line 85975 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85988 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85991 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86000 "isa_tms320.tcc"
> *DecodeOpNOP_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86006 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86010 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86027 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86031 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86039 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86043 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86046 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86050 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86053 "isa_tms320.tcc"
)
{
#line 740 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "NOP " << disasm_indir;
		return true;
	}
#line 86063 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86078 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86082 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86090 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86094 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86097 "isa_tms320.tcc"
)
{
#line 747 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Do a dummy load from memory
		cpu.IntLoad(ea);
	}
#line 86115 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86131 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86140 "isa_tms320.tcc"
> *DecodeOpNOP_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86146 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86150 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOP (no operation)
**********************************************************/
/**********************************************************
* RETIcond (return from interrupt conditionally)
* op RETIcond(0b01111[5]:0b0000[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86173 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86177 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 86181 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86185 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86189 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86192 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86196 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86199 "isa_tms320.tcc"
)
{
#line 772 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETI" << cond_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.IntLoad(cpu.GetSP() & ADDRESS_MASK)) << ">";
		return true;
	}
#line 86211 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86226 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86230 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 86234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86238 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86242 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86245 "isa_tms320.tcc"
)
{
#line 781 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 86285 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86301 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86310 "isa_tms320.tcc"
> *DecodeOpRETIcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86316 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86320 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETIcond (return from interrupt conditionally)
**********************************************************/
/**********************************************************
* RETScond (return form subroutine conditionally)
* op RETScond(0b01111[5]:0b0001[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86343 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86347 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 86351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86355 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86359 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86362 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86369 "isa_tms320.tcc"
)
{
#line 828 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETS" << cond_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.IntLoad(cpu.GetSP() & ADDRESS_MASK)) << ">";
		return true;
	}
#line 86381 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86396 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86400 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 86404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86408 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86412 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86415 "isa_tms320.tcc"
)
{
#line 837 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 86452 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86468 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86473 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86477 "isa_tms320.tcc"
> *DecodeOpRETScond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86483 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86487 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETScond (return form subroutine conditionally)
**********************************************************/
/**********************************************************
* RPTB (repeat block of instructions)
* op RPTB(0b01100100[8]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86510 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86514 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 86518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86522 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86526 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86529 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86533 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86536 "isa_tms320.tcc"
)
{
#line 881 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTB 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 86545 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86560 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86564 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 86568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86572 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86576 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86579 "isa_tms320.tcc"
)
{
#line 887 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.ResetS();

		// Load RE with source operand value
		cpu.SetRE(src);
	}
#line 86607 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86623 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86632 "isa_tms320.tcc"
> *DecodeOpRPTB(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86638 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86642 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTB (repeat block of instructions)
**********************************************************/
/**********************************************************
* RPTS (repeat single instruction)
* op RPTS(0b000[3]:0b100111[6]:g[2]:0b11011[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86665 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86669 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86677 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86681 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86684 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86688 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86691 "isa_tms320.tcc"
)
{
#line 922 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;
		os << "RPTS " << src_reg_name;
		return true;
	}
#line 86702 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86717 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86721 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86729 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86733 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86736 "isa_tms320.tcc"
)
{
#line 930 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that source register is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		typename CONFIG::address_t src_value = cpu.GetReg(src);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 86774 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86790 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86799 "isa_tms320.tcc"
> *DecodeOpRPTS_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86805 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86809 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86826 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86830 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86838 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86845 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86849 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86852 "isa_tms320.tcc"
)
{
#line 967 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << direct << dec;
		return true;
	}
#line 86860 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86875 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86879 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86887 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86891 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86894 "isa_tms320.tcc"
)
{
#line 972 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address of the source operand
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 86929 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86945 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86954 "isa_tms320.tcc"
> *DecodeOpRPTS_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86960 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86964 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86978 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86981 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86985 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86993 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86997 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87000 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87004 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87007 "isa_tms320.tcc"
)
{
#line 1006 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "RPTS " << disasm_indir;
		return true;
	}
#line 87017 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87032 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87036 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87044 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87048 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87051 "isa_tms320.tcc"
)
{
#line 1013 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 87093 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87109 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87118 "isa_tms320.tcc"
> *DecodeOpRPTS_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87128 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87145 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87149 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 87153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87157 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87161 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87164 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87168 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87171 "isa_tms320.tcc"
)
{
#line 1054 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << imm << dec;
		return true;
	}
#line 87179 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87194 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87198 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 87202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87206 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87210 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87213 "isa_tms320.tcc"
)
{
#line 1059 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t src_value = imm; // imm has already been sign extended by the decoder

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 87245 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87261 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87270 "isa_tms320.tcc"
> *DecodeOpRPTS_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87276 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87280 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTS (repeat single instruction)
**********************************************************/
/**********************************************************
* SWI (software interrupt)
* op SWI(0b0110011[7]:0b0000[4]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87303 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87307 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 87311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87315 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87319 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87322 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87326 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87329 "isa_tms320.tcc"
)
{
#line 1098 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "SWI";
		return true;
	}
#line 87337 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87352 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87356 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 87360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87364 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87368 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87371 "isa_tms320.tcc"
)
{
#line 1103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		if(unlikely(!cpu.SWI()))
		{
			throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
		}
	}
#line 87381 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87397 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87406 "isa_tms320.tcc"
> *DecodeOpSWI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87412 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87416 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SWI (software interrupt)
**********************************************************/
/**********************************************************
* TRAPcond (trap conditionally)
* op TRAPcond(0b0111010[7]:0b0000[4]:cond[5]:0b01[11]:n[5])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87439 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87443 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 87447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87451 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87455 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87458 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87462 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87465 "isa_tms320.tcc"
)
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		if(!cond_name) return false;
		os << "TRAP" << cond_name << " " << n;
		return true;
	}
#line 87475 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87490 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87494 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 87498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87502 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87506 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87509 "isa_tms320.tcc"
)
{
#line 1128 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Load trap handler address
		typename CONFIG::address_t trap_handler_addr = cpu.IntLoad(0x20 + n);

		// Reset ST[GIE] to disable further interrupts until reactivated by the software
		cpu.ResetST_GIE();

		// Branch to trap handler
		cpu.Branch(trap_handler_addr);
	}
#line 87552 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87568 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87577 "isa_tms320.tcc"
> *DecodeOpTRAPcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87583 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87587 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TRAPcond (trap conditionally)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of low-power control operations:
* - IDLE2        low-power idle
* - LOPOWER      divide clock by 16
* - MAXSPEED     restore clock to regular speed
*/
/**********************************************************
* IDLE2 (low-power idle)
* op IDLE2(0b000[3]:0b001100[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87649 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87653 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 87657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87661 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87665 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87668 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87672 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87675 "isa_tms320.tcc"
)
{
#line 49 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "IDLE2";
		return true;
	}
#line 87683 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87698 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87702 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 87706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87710 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87714 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87717 "isa_tms320.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch()))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Enter idle mode 2
		cpu.Idle(2);
	}
#line 87735 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87751 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87760 "isa_tms320.tcc"
> *DecodeOpIDLE2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87766 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87770 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE2 (low-power idle)
**********************************************************/
/**********************************************************
* LOPOWER (divide clock by 16)
* op LOPOWER(0b000[3]:0b100001[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87793 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87797 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 87801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87805 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87809 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87812 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87816 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87819 "isa_tms320.tcc"
)
{
#line 79 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "LOPOWER";
		return true;
	}
#line 87827 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87842 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87846 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 87850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87854 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87858 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87861 "isa_tms320.tcc"
)
{
#line 84 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87868 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87884 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87893 "isa_tms320.tcc"
> *DecodeOpLOPOWER(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87899 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87903 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LOPOWER (divide clock by 16)
**********************************************************/
/**********************************************************
* MAXSPEED (restore clock to regular speed)
* op MAXSPEED(0b000[3]:0b100001[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87926 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87930 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 87934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87938 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87942 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87945 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87949 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87952 "isa_tms320.tcc"
)
{
#line 98 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "MAXSPEED";
		return true;
	}
#line 87960 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87975 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87979 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 87983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87987 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87991 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87994 "isa_tms320.tcc"
)
{
#line 103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88001 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88017 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88026 "isa_tms320.tcc"
> *DecodeOpMAXSPEED(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88032 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88036 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MAXSPEED (restore clock to regular speed)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of interlocked-operations:
* - LDFI         load floating-point value, interlocked
* - LDII         load integer, interlocked
* - SIGI         signal, interlocked
* - STFI         store floating-point value, interlocked
* - STII         store integer, interflocked
*/
/**********************************************************
* LDFI (load floating-point value, interlocked)
* op LDFI(0b000[3]:0b001111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88100 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88104 "isa_tms320.tcc"
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88112 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88116 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88119 "isa_tms320.tcc"
)
{
#line 52 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88126 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88142 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88151 "isa_tms320.tcc"
> *DecodeOpLDFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88157 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88161 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88178 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88182 "isa_tms320.tcc"
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88190 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88197 "isa_tms320.tcc"
)
{
#line 56 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88204 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88220 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88229 "isa_tms320.tcc"
> *DecodeOpLDFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88235 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88239 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFI (load floating-point value, interlocked)
**********************************************************/
/**********************************************************
* LDII (load integer, interlocked)
* op LDII(0b000[3]:0b010001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88262 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88266 "isa_tms320.tcc"
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88274 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88278 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88281 "isa_tms320.tcc"
)
{
#line 71 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea, true /* interlocked */);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z  // or mask
			);
		}
	}
#line 88312 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88328 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88337 "isa_tms320.tcc"
> *DecodeOpLDII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88343 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88347 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88364 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88368 "isa_tms320.tcc"
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88376 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88380 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88383 "isa_tms320.tcc"
)
{
#line 99 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea, true /* interlocked */);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z  // or mask
			);
		}
	}
#line 88427 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88443 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88452 "isa_tms320.tcc"
> *DecodeOpLDII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88462 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDII (load integer, interlocked)
**********************************************************/
/**********************************************************
* SIGI (signal, interlocked)
* op SIGI(0b000[3]:0b101100[6]:0b00[2]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88485 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88489 "isa_tms320.tcc"
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 88493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88497 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88501 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88504 "isa_tms320.tcc"
)
{
#line 150 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88511 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88527 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88536 "isa_tms320.tcc"
> *DecodeOpSIGI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88542 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88546 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SIGI (signal, interlocked)
**********************************************************/
/**********************************************************
* STFI (store floating-point value, interlocked)
* op STFI(0b000[3]:0b101001[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88569 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88573 "isa_tms320.tcc"
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88581 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88585 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88588 "isa_tms320.tcc"
)
{
#line 165 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88595 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88611 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88620 "isa_tms320.tcc"
> *DecodeOpSTFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88626 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88630 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88647 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88651 "isa_tms320.tcc"
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88659 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88663 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88666 "isa_tms320.tcc"
)
{
#line 169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88673 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88689 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88698 "isa_tms320.tcc"
> *DecodeOpSTFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88704 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88708 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STFI (store floating-point value, interlocked)
**********************************************************/
/**********************************************************
* STII (store integer, interflocked)
* op STII(0b000[3]:0b101011[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88731 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88735 "isa_tms320.tcc"
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88743 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88747 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88750 "isa_tms320.tcc"
)
{
#line 184 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result, true /* interlocked */);
	}
#line 88770 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88786 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88795 "isa_tms320.tcc"
> *DecodeOpSTII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88801 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88805 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88822 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88826 "isa_tms320.tcc"
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88834 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88838 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88841 "isa_tms320.tcc"
)
{
#line 201 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result, true /* interlocked */);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 88874 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88890 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88899 "isa_tms320.tcc"
> *DecodeOpSTII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88905 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88909 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STII (store integer, interflocked)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of parallel operations:
* - ABSF || STF		absolute value of a floating-point number and store floating-point value
* - ABSI || STI		absolute value of an integer and store integer
* - ADDF3 || STF		add floating-point values and store floating-point value
* - ADDI3 || STI		add integers and store integer
* - AND3 || STI		bitwise-logical AND and store integer
* - ASH3 || STI		arithmetic shift and store integer
* - FIX || STI			convert floating-point value to integer and store integer
* - FLOAT || STF		convert integer to floating-point value and store floating-point value
* - LDF || STF			load floating-point value and store floating-point value
* - LDI || STI			load integer and store integer
* - LSH3 || STI		logical shift and store integer
* - MPYF3 || STF       multiply floating-point values and store floating-point value
* - MPYI3 || STI		multiply integer and store integer
* - NEGF || STF		negate floating-point value and store floating-point value
* - NEGI || STI		negate integer and store integer
* - NOT || STI			complement value and store integer
* - OR3 || STI			bitwise-logical OR value and store integer
* - STF || STF			store floating-point values
* - STI || STI			sotre integers
* - SUBF3 || STF		subtract floating-point value and store floating-point value
* - SUBI3 || STI		subtract integer and store integer
* - XOR3 || STI		bitwise-exclusive OR values and store integer
* - LDF || LDF			load floating-point value
* - LDI || LDI			load integer
* - MPYF3 || ADDF3		multiply and add floating-point value
* - MPYF3 || SUBF3		multiply and subtract floating-point value
* - MPYI3 || ADDI3		multiply and add integer
* - MPYI3 || SUBI3		multiply and subtract integer
*/
/**********************************************************
* ABSF || STF (absolute value of a floating-point number and store floating-point value)
* op ABSF_STF(0b11[2]:0b00100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88996 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89000 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 89004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89008 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89012 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89015 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89019 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89022 "isa_tms320.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ABSF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89040 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89055 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89059 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 89063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89067 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89071 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89074 "isa_tms320.tcc"
)
{
#line 104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89081 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89097 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89106 "isa_tms320.tcc"
> *DecodeOpABSF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89112 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89116 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89133 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89137 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89145 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89149 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89152 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89156 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89159 "isa_tms320.tcc"
)
{
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ABSF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89176 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89191 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89195 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89203 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89207 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89210 "isa_tms320.tcc"
)
{
#line 108 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89217 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89233 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89242 "isa_tms320.tcc"
> *DecodeOpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89248 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89252 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSF || STF (absolute value of a floating-point number and store floating-point value)
**********************************************************/
/**********************************************************
* ABSI || STI (absolute value of an integer and store integer)
* op ABSI_STI(0b11[2]:0b00101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89276 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89280 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89288 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89292 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89295 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89299 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89302 "isa_tms320.tcc"
)
{
#line 124 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ABSI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89320 "isa_tms320.tcc"
}
//    abs(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89338 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89342 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89350 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89354 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89357 "isa_tms320.tcc"
)
{
#line 156 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint8_t overflow;      // the overflow (0 or 1)

		if(src2_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src2_value >= 0) ? src2_value : -src2_value;
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 89435 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89451 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89460 "isa_tms320.tcc"
> *DecodeOpABSI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89466 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89470 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89487 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89491 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89499 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89503 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89506 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89510 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89513 "isa_tms320.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ABSI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89530 "isa_tms320.tcc"
}
//    abs(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89548 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89552 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89560 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89564 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89567 "isa_tms320.tcc"
)
{
#line 234 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint8_t overflow;      // the overflow (0 or 1)

		if(src2_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src2_value >= 0) ? src2_value : -src2_value;
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 89631 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89647 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89656 "isa_tms320.tcc"
> *DecodeOpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89662 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89666 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSI || STI (absolute value of an integer and store integer)
**********************************************************/
/**********************************************************
* ADDF3 || STF (add floating-point values and store floating-point value)
* op ADDF3_STF(0b11[2]:0b00110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89690 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89694 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 89698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89702 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89706 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89709 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89713 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89716 "isa_tms320.tcc"
)
{
#line 307 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89735 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89750 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89754 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 89758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89762 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89766 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89769 "isa_tms320.tcc"
)
{
#line 338 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89776 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89792 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89801 "isa_tms320.tcc"
> *DecodeOpADDF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89807 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89811 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89828 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89832 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89840 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89844 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89847 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89851 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89854 "isa_tms320.tcc"
)
{
#line 323 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89872 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89887 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89891 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89899 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89903 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89906 "isa_tms320.tcc"
)
{
#line 342 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89913 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89929 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89938 "isa_tms320.tcc"
> *DecodeOpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89944 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89948 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDF3 || STF (add floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* ADDI3 || STI (add integers and store integer)
* op ADDI3_STI(0b11[2]:0b00111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89972 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89976 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89984 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89988 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89991 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89998 "isa_tms320.tcc"
)
{
#line 358 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90017 "isa_tms320.tcc"
}
//    reg(src1) + indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90035 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90039 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90047 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90051 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90054 "isa_tms320.tcc"
)
{
#line 392 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ADDI3
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Check whether 'dst1' operand is an extended precision register
		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		carry_out,
		overflow
		);
	}
#line 90131 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90147 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90156 "isa_tms320.tcc"
> *DecodeOpADDI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90162 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90166 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90183 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90187 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90195 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90199 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90202 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90206 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90209 "isa_tms320.tcc"
)
{
#line 374 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90227 "isa_tms320.tcc"
}
//    reg(src1) + reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90245 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90249 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90257 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90261 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90264 "isa_tms320.tcc"
)
{
#line 469 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' registers is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ADDI3
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		carry_out,
		overflow
		);
	}
#line 90330 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90346 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90355 "isa_tms320.tcc"
> *DecodeOpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90361 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90365 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDI3 || STI (add integers and store integer)
**********************************************************/
/**********************************************************
* AND3 || STI (bitwise-logical AND and store integer)
* op AND3_STI(0b11[2]:0b01000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90389 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90393 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90401 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90405 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90408 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90412 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90415 "isa_tms320.tcc"
)
{
#line 544 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90434 "isa_tms320.tcc"
}
//    reg(src1) AND indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90452 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90456 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90464 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90468 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90471 "isa_tms320.tcc"
)
{
#line 578 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ANDI3
		uint32_t result = src1_value & src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 90537 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90553 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90562 "isa_tms320.tcc"
> *DecodeOpAND3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90568 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90572 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90589 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90593 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90601 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90605 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90608 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90612 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90615 "isa_tms320.tcc"
)
{
#line 560 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90633 "isa_tms320.tcc"
}
//    reg(src1) AND reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90651 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90655 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90663 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90667 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90670 "isa_tms320.tcc"
)
{
#line 644 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ANDI3
		uint32_t result = src1_value & src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 90722 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90731 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90735 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90738 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90747 "isa_tms320.tcc"
> *DecodeOpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90753 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90757 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of AND3 || STI (bitwise-logical AND and store integer)
**********************************************************/
/**********************************************************
* ASH3 || STI (arithmetic shift and store integer)
* op ASH3_STI(0b11[2]:0b01001[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90781 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90785 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90793 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90797 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90800 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90804 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90807 "isa_tms320.tcc"
)
{
#line 705 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90826 "isa_tms320.tcc"
}
//    ash(indir(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90844 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90848 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90856 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90860 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90863 "isa_tms320.tcc"
)
{
#line 739 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ASH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 90962 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90978 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90987 "isa_tms320.tcc"
> *DecodeOpASH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90993 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90997 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91014 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91018 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91026 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91030 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91033 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91037 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91040 "isa_tms320.tcc"
)
{
#line 721 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91058 "isa_tms320.tcc"
}
//    ash(reg(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91073 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91076 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91080 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91088 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91092 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91095 "isa_tms320.tcc"
)
{
#line 838 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ASH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 91180 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91196 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91205 "isa_tms320.tcc"
> *DecodeOpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91211 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91215 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ASH3 || STI (arithmetic shift and store integer)
**********************************************************/
/**********************************************************
* FIX || STI (convert floating-point value to integer and store integer)
* op FIX_STI(0b11[2]:0b01010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91239 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91243 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91251 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91255 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91258 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91262 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91265 "isa_tms320.tcc"
)
{
#line 932 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "FIX " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91283 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91298 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91302 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91310 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91314 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91317 "isa_tms320.tcc"
)
{
#line 961 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91324 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91340 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91349 "isa_tms320.tcc"
> *DecodeOpFIX_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91355 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91359 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91376 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91380 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91388 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91392 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91395 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91399 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91402 "isa_tms320.tcc"
)
{
#line 947 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "FIX " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91419 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91434 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91438 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91446 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91450 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91453 "isa_tms320.tcc"
)
{
#line 965 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91460 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91476 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91485 "isa_tms320.tcc"
> *DecodeOpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91491 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91495 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of FIX || STI (convert floating-point value to integer and store integer)
**********************************************************/
/**********************************************************
* FLOAT || STF (convert integer to floating-point value and store floating-point value)
* op FLOAT_STF(0b11[2]:0b01011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91519 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91523 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91531 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91535 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91538 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91542 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91545 "isa_tms320.tcc"
)
{
#line 981 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "FLOAT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91563 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91578 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91582 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91590 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91594 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91597 "isa_tms320.tcc"
)
{
#line 1010 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91604 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91620 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91629 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91635 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91639 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91656 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91660 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91668 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91672 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91675 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91679 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91682 "isa_tms320.tcc"
)
{
#line 996 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "FLOAT " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91699 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91714 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91718 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91726 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91730 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91733 "isa_tms320.tcc"
)
{
#line 1014 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91740 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91756 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91765 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91771 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91775 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT || STF (convert integer to floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDF || STF (load floating-point value and store floating-point value)
* op LDF_STF(0b11[2]:0b01100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91798 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91802 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91810 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91814 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91817 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91821 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91824 "isa_tms320.tcc"
)
{
#line 1029 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91842 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91857 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91861 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91869 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91873 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91876 "isa_tms320.tcc"
)
{
#line 1058 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91883 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91899 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91908 "isa_tms320.tcc"
> *DecodeOpLDF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91918 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91935 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91939 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91947 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91951 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91954 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91961 "isa_tms320.tcc"
)
{
#line 1044 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LDF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91978 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91993 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91997 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92005 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92009 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92012 "isa_tms320.tcc"
)
{
#line 1062 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 92019 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92035 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92044 "isa_tms320.tcc"
> *DecodeOpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92050 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92054 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || STF (load floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDI || STI (load integer and store integer)
* op LDI_STI(0b11[2]:0b01101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92077 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92081 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92089 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92093 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92096 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92103 "isa_tms320.tcc"
)
{
#line 1077 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92121 "isa_tms320.tcc"
}
//    indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92139 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92143 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92151 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92155 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92158 "isa_tms320.tcc"
)
{
#line 1109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address for the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address for the 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Load 'src2' value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Store 'src3' value into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, src2_value);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

	}
#line 92208 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92224 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92233 "isa_tms320.tcc"
> *DecodeOpLDI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92239 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92243 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92260 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92264 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92272 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92276 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92279 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92283 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92286 "isa_tms320.tcc"
)
{
#line 1092 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LDI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92303 "isa_tms320.tcc"
}
//    reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92321 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92325 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92333 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92337 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92340 "isa_tms320.tcc"
)
{
#line 1159 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether the 'src2' register operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address for the 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Store 'src3' value into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, src2_value);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}
	}
#line 92379 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92395 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92404 "isa_tms320.tcc"
> *DecodeOpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92410 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92414 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || STI (load integer and store integer)
**********************************************************/
/**********************************************************
* LSH3 || STI (logical shift and store integer)
* op LSH3_STI(0b11[2]:0b01110[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92437 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92441 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92449 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92453 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92456 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92460 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92463 "isa_tms320.tcc"
)
{
#line 1206 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LSH3 " << count << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92482 "isa_tms320.tcc"
}
//    lsh(indir(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92500 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92504 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92512 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92516 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92519 "isa_tms320.tcc"
)
{
#line 1240 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of LSH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 92618 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92634 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92643 "isa_tms320.tcc"
> *DecodeOpLSH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92649 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92653 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92670 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92674 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92682 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92686 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92689 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92693 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92696 "isa_tms320.tcc"
)
{
#line 1222 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LSH3 " << count << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92714 "isa_tms320.tcc"
}
//    lsh(reg(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92732 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92736 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92744 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92748 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92751 "isa_tms320.tcc"
)
{
#line 1339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of LSH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 92836 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92852 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92861 "isa_tms320.tcc"
> *DecodeOpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92867 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92871 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 || STI (logical shift and store integer)
**********************************************************/
/**********************************************************
* MPYF3 || STF (multiply floating-point values and store floating-point value)
* op MPYF3_STF(0b11[2]:0b01111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92894 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92898 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 92902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92906 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92910 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92913 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92917 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92920 "isa_tms320.tcc"
)
{
#line 1432 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92939 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 92944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92954 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92958 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 92962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92966 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92970 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92973 "isa_tms320.tcc"
)
{
#line 1463 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 92980 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92996 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93005 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93011 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93015 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93032 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93036 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93044 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93048 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93051 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93055 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93058 "isa_tms320.tcc"
)
{
#line 1448 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93076 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93091 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93095 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93103 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93107 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93110 "isa_tms320.tcc"
)
{
#line 1467 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 93117 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93133 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93142 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93148 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93152 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || STF (multiply floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || STI (multiply integer and store integer)
* op MPYI3_STI(0b11[2]:0b10000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93175 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93179 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93187 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93191 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93194 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93198 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93201 "isa_tms320.tcc"
)
{
#line 1482 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93220 "isa_tms320.tcc"
}
//    reg(src1) * indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93238 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93242 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93250 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93254 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93257 "isa_tms320.tcc"
)
{
#line 1516 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(s2_ea) & 0xffffff), 24);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the 32-bit result and overflow of MPYI3
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 93336 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93352 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93361 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93367 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93371 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93388 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93392 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93400 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93404 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93407 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93411 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93414 "isa_tms320.tcc"
)
{
#line 1498 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93432 "isa_tms320.tcc"
}
//    reg(src1) + reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93450 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93454 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93462 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93466 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93469 "isa_tms320.tcc"
)
{
#line 1595 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Read 'src2' operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the 32-bit result and overflow of MPYI3
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 93538 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93554 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93563 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93569 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93573 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || STI (multiply integer and store integer)
**********************************************************/
/**********************************************************
* NEGF || STF (negate floating-point value and store floating-point value)
* op NEGF_STF(0b11[2]:0b10001[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93596 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93600 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 93604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93608 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93612 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93615 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93619 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93622 "isa_tms320.tcc"
)
{
#line 1672 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NEGF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93640 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93652 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93655 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93659 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 93663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93667 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93671 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93674 "isa_tms320.tcc"
)
{
#line 1701 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 93681 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93697 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93706 "isa_tms320.tcc"
> *DecodeOpNEGF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93712 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93716 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93723 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93733 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93737 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93745 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93749 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93752 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93756 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93759 "isa_tms320.tcc"
)
{
#line 1687 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93776 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93781 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93791 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93795 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93803 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93807 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93810 "isa_tms320.tcc"
)
{
#line 1705 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 93817 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93833 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93842 "isa_tms320.tcc"
> *DecodeOpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93848 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93852 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF || STF (negate floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* NEGI || STI (negate integer and store integer)
* op NEGI_STI(0b11[2]:0b10010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93875 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93879 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93887 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93891 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93894 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93898 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93901 "isa_tms320.tcc"
)
{
#line 1720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NEGI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93919 "isa_tms320.tcc"
}
//    neg(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93937 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93941 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93949 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93953 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93956 "isa_tms320.tcc"
)
{
#line 1752 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of NEGI
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NEGI in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 94029 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94045 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94054 "isa_tms320.tcc"
> *DecodeOpNEGI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94060 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94064 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94081 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94085 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94093 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94097 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94100 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94107 "isa_tms320.tcc"
)
{
#line 1735 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94124 "isa_tms320.tcc"
}
//    neg(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94142 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94146 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94154 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94158 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94161 "isa_tms320.tcc"
)
{
#line 1825 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of NEGI
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NEGI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 94220 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94236 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94245 "isa_tms320.tcc"
> *DecodeOpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94251 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94255 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI || STI (negate integer and store integer)
**********************************************************/
/**********************************************************
* NOT || STI (complement value and store integer)
* op NOT_STI(0b11[2]:0b10011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94268 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94278 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94282 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94290 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94294 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94297 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94301 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94304 "isa_tms320.tcc"
)
{
#line 1892 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NOT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94322 "isa_tms320.tcc"
}
//    not(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94340 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94344 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94352 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94356 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94359 "isa_tms320.tcc"
)
{
#line 1924 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of NOT
		uint32_t result = ~src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NOT in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 94422 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94438 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94447 "isa_tms320.tcc"
> *DecodeOpNOT_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94453 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94457 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94474 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94478 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94486 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94490 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94493 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94497 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94500 "isa_tms320.tcc"
)
{
#line 1907 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NOT " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94517 "isa_tms320.tcc"
}
//    not(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94535 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94539 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94547 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94551 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94554 "isa_tms320.tcc"
)
{
#line 1987 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of NOT
		uint32_t result = ~src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NOT in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 94603 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94619 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94628 "isa_tms320.tcc"
> *DecodeOpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94634 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94638 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT || STI (complement value and store integer)
**********************************************************/
/**********************************************************
* OR3 || STI (bitwise-logical OR value and store integer)
* op OR3_STI(0b11[2]:0b10100[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94661 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94665 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94673 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94680 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94687 "isa_tms320.tcc"
)
{
#line 2044 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94706 "isa_tms320.tcc"
}
//    reg(src1) OR indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94724 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94728 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94736 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94740 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94743 "isa_tms320.tcc"
)
{
#line 2078 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of OR3
		uint32_t result = src1_value | src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 94809 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94825 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94834 "isa_tms320.tcc"
> *DecodeOpOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94840 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94844 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94861 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94865 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94873 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94877 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94880 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94884 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94887 "isa_tms320.tcc"
)
{
#line 2060 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94905 "isa_tms320.tcc"
}
//    reg(src1) OR reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94923 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94927 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94935 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94939 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94942 "isa_tms320.tcc"
)
{
#line 2144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of OR3
		uint32_t result = src1_value | src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 94994 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95010 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95019 "isa_tms320.tcc"
> *DecodeOpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95025 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95029 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 || STI (bitwise-logical OR value and store integer)
**********************************************************/
/**********************************************************
* STF || STF (store floating-point values)
* op STF_STF(0b11[2]:0b00000[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95052 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95056 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95064 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95068 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95071 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95075 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95078 "isa_tms320.tcc"
)
{
#line 2204 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "STF " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 95096 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95111 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95115 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95123 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95127 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95130 "isa_tms320.tcc"
)
{
#line 2233 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95137 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95153 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95162 "isa_tms320.tcc"
> *DecodeOpSTF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95172 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95189 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95193 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95201 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95208 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95215 "isa_tms320.tcc"
)
{
#line 2219 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STF " << src2_name << ", " << dst2_name
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 95232 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95247 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95251 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95259 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95263 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95266 "isa_tms320.tcc"
)
{
#line 2237 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95273 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95289 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95298 "isa_tms320.tcc"
> *DecodeOpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95304 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95308 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF || STF (store floating-point values)
**********************************************************/
/**********************************************************
* STI || STI (store integers)
* op STI_STI(0b11[2]:0b00001[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95331 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95335 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95343 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95347 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95350 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95354 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95357 "isa_tms320.tcc"
)
{
#line 2252 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "STI " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 95375 "isa_tms320.tcc"
}
//    reg(src2) -> indir(dst2)
// ||
//    reg(src1) -> indir(dst1)
template <
#line 45 "isa/tms320.isa"
class
#line 95383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95393 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95397 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95405 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95409 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95412 "isa_tms320.tcc"
)
{
#line 2284 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read the 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst1'
		typename CONFIG::address_t d1_ea;        // The effective address
		bool d1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d1_ea, d1_update_ar, d1_output_ar, d1_mod, d1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst2'
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src2_value);

		// Note: If both stores are executed to the
		// same address, the value written is that of STI src2, dst2.

		// Store the word into memory
		if(d1_ea != d2_ea)
		{
			cpu.IntStore(d1_ea, src1_value);
		}

		if(d1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d1_ar, d1_output_ar);
		}

		if(d2_update_ar && d1_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}
	}
#line 95467 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95483 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95492 "isa_tms320.tcc"
> *DecodeOpSTI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95498 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95502 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95519 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95523 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95531 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95535 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95538 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95542 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95545 "isa_tms320.tcc"
)
{
#line 2267 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STI " << src2_name << ", " << dst2_name
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 95562 "isa_tms320.tcc"
}
//    reg(src2) -> reg(dst2)
// ||
//    reg(src1) -> indir(dst1)
template <
#line 45 "isa/tms320.isa"
class
#line 95570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95580 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95584 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95592 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95596 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95599 "isa_tms320.tcc"
)
{
#line 2339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'dst2' register is valid
		if(unlikely(!cpu.HasReg(dst2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst1'
		typename CONFIG::address_t d1_ea;        // The effective address
		bool d1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d1_ea, d1_update_ar, d1_output_ar, d1_mod, d1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(d1_ea, src1_value);

		// Write back 'src2' into 'dst2' register
		cpu.SetReg(dst2, src2_value);

		if(d1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d1_ar, d1_output_ar);
		}
	}
#line 95638 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95654 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95663 "isa_tms320.tcc"
> *DecodeOpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95669 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95673 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI || STI (sotre integers)
**********************************************************/
/**********************************************************
* SUBF3 || STF (subtract floating-point value and store floating-point value)
* op SUBF3_STF(0b11[2]:0b10101[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95696 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95700 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95708 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95712 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95715 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95719 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95722 "isa_tms320.tcc"
)
{
#line 2386 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "SUBF3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95741 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95756 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95760 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95768 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95772 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95775 "isa_tms320.tcc"
)
{
#line 2417 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95782 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95798 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95807 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95813 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95817 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95834 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95838 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95846 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95850 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95853 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95857 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95860 "isa_tms320.tcc"
)
{
#line 2402 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBF3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95878 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95893 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95897 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95905 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95909 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95912 "isa_tms320.tcc"
)
{
#line 2421 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95919 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95935 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95944 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95950 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95954 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 || STF (subtract floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* SUBI3 || STI (subtract integer and store integer)
* op SUBI3_STI(0b11[2]:0b10110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95977 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95981 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95989 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95993 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95996 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96000 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96003 "isa_tms320.tcc"
)
{
#line 2436 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "SUBI3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96022 "isa_tms320.tcc"
}
//    indir(src2) - reg(src1)  -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96040 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96044 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96052 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96056 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96059 "isa_tms320.tcc"
)
{
#line 2470 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of SUBI3
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src2_value, src1_value, 0);
		else
		Sub32(result, borrow_out, overflow, src2_value, src1_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 96135 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96151 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96160 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96166 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96170 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96187 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96191 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96199 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96203 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96206 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96210 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96213 "isa_tms320.tcc"
)
{
#line 2452 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBI3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96231 "isa_tms320.tcc"
}
//    reg(src2) - reg(src1) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96249 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96253 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96261 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96265 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96268 "isa_tms320.tcc"
)
{
#line 2546 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of SUBI3
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src2_value, src1_value, 0);
		else
		Sub32(result, borrow_out, overflow, src2_value, src1_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 96334 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96350 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96359 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96365 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96369 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 || STI (subtract integer and store integer)
**********************************************************/
/**********************************************************
* XOR3 || STI (bitwise-exclusive OR values and store integer)
* op XOR3_STI(0b11[2]:0b10111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96392 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96396 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96404 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96408 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96411 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96418 "isa_tms320.tcc"
)
{
#line 2620 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96437 "isa_tms320.tcc"
}
//    reg(src1) XOR indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96455 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96459 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96467 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96471 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96474 "isa_tms320.tcc"
)
{
#line 2654 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of XORI3
		uint32_t result = src1_value ^ src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 96540 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96556 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96565 "isa_tms320.tcc"
> *DecodeOpXOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96571 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96575 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96592 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96596 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96604 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96608 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96611 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96615 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96618 "isa_tms320.tcc"
)
{
#line 2636 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96636 "isa_tms320.tcc"
}
//    reg(src1) XOR reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96654 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96658 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96666 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96670 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96673 "isa_tms320.tcc"
)
{
#line 2720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of XORI3
		uint32_t result = src1_value ^ src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 96725 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96741 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96750 "isa_tms320.tcc"
> *DecodeOpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96756 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96760 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 || STI (bitwise-exclusive OR values and store integer)
**********************************************************/
/**********************************************************
* LDF || LDF (load floating-point value)
* op LDF_LDF(0b11[2]:0b00010[5]:dst2[3]:dst1[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96783 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96787 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 96791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96795 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96799 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96802 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96806 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96809 "isa_tms320.tcc"
)
{
#line 2780 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 96827 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96842 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96846 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 96850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96854 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96858 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96861 "isa_tms320.tcc"
)
{
#line 2809 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 96868 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96884 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96893 "isa_tms320.tcc"
> *DecodeOpLDF_LDF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96899 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96903 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96920 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96924 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96932 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96936 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96939 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96943 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96946 "isa_tms320.tcc"
)
{
#line 2795 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar))
		return false;

		os << "LDF " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 96963 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96978 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96982 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96990 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96994 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96997 "isa_tms320.tcc"
)
{
#line 2813 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97004 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97020 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97029 "isa_tms320.tcc"
> *DecodeOpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97035 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97039 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || LDF (load floating-point value)
**********************************************************/
/**********************************************************
* LDI || LDI (load integer)
* op LDI_LDI(0b11[2]:0b00011[5]:dst2[3]:dst1[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97062 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97066 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 97070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97074 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97078 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97081 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97085 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97088 "isa_tms320.tcc"
)
{
#line 2828 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 97106 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97121 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97125 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 97129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97133 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97137 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97140 "isa_tms320.tcc"
)
{
#line 2857 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Load the 'src2' operand value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Write back register operand 'dst2'
		cpu.SetReg(dst2, src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			cpu.SetReg(dst1, src1_value);
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}

		if(s2_update_ar && s1_ar != s2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}
	}
#line 97192 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97208 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97217 "isa_tms320.tcc"
> *DecodeOpLDI_LDI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97227 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97244 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97248 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97256 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97260 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97263 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97267 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97270 "isa_tms320.tcc"
)
{
#line 2843 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar))
		return false;

		os << "LDI " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 97287 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97302 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97306 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97314 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97318 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97321 "isa_tms320.tcc"
)
{
#line 2906 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Read the 'src2' register operand value
		uint32_t src2_value = cpu.GetReg(src2);

		// Note: The assembler issues a warning
		// if the LDIs load the same register.
		// The result is that of LDI src2, dst2 (pp 13-129).

		// Write back register operand 'dst2'
		cpu.SetReg(dst2, src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			cpu.SetReg(dst1, src1_value);
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}
	}
#line 97367 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97383 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97392 "isa_tms320.tcc"
> *DecodeOpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97398 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97402 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || LDI (load integer)
**********************************************************/
/**********************************************************
* MPYF3 || ADDF3 (multiply and add floating-point value)
* op MPYF3_ADDF3(0b10[2]:0b0000[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97425 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97429 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97437 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97441 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97444 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97448 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97451 "isa_tms320.tcc"
)
{
#line 2960 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97503 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97518 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97522 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97530 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97534 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97537 "isa_tms320.tcc"
)
{
#line 3058 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97544 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97560 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97569 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97575 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97579 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97596 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97600 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97608 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97612 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97615 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97619 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97622 "isa_tms320.tcc"
)
{
#line 3009 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97674 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97689 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97693 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97701 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97705 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97708 "isa_tms320.tcc"
)
{
#line 3062 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97715 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97731 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97740 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97746 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97750 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || ADDF3 (multiply and add floating-point value)
**********************************************************/
/**********************************************************
* MPYF3 || SUBF3 (multiply and subtract floating-point value)
* op MPYF3_SUBF3(0b10[2]:0b0001[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97773 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97777 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97785 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97789 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97792 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97796 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97799 "isa_tms320.tcc"
)
{
#line 3077 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97851 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97866 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97870 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97878 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97882 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97885 "isa_tms320.tcc"
)
{
#line 3175 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97892 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97908 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97917 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97923 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97927 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97944 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97948 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97956 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97960 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97963 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97967 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97970 "isa_tms320.tcc"
)
{
#line 3126 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 98022 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 98027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98037 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98041 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98049 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98053 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98056 "isa_tms320.tcc"
)
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 98063 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98079 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98088 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98094 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98098 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || SUBF3 (multiply and subtract floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || ADDI3 (multiply and add integer)
* op MPYI3_ADDI3(0b10[2]:0b0010[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 98111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98121 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98125 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 98129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98133 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98137 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98140 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98144 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98147 "isa_tms320.tcc"
)
{
#line 3194 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 98199 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 98207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98217 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98221 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 98225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98229 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98233 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98236 "isa_tms320.tcc"
)
{
#line 3295 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of 'src3' operand
		typename CONFIG::address_t s3_ea;        // The effective address
		bool s3_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s3_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s3_ea, s3_update_ar, s3_output_ar, s3_mod, s3_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src4' operand
		typename CONFIG::address_t s4_ea;        // The effective address
		bool s4_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s4_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s4_ea, s4_update_ar, s4_output_ar, s4_mod, s4_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load 'src3' operand from memory
		uint32_t src3_value = cpu.IntLoad(s3_ea);

		// Load 'src4' operand from memory
		uint32_t src4_value = cpu.IntLoad(s4_ea);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of ADDI3
		uint32_t addi3_result;      // the 32-bit result
		uint8_t addi3_carry_out;    // the carry out (0 or 1)
		uint8_t addi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);
		else
		Add32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and ADDI3
		uint8_t overflow = mpyi3_overflow | addi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, addi3_result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(s3_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s3_ar, s3_output_ar);
		}

		if(s4_update_ar && s4_ar != s4_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s4_ar, s4_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 98370 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98386 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98395 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98405 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98422 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98426 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98434 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98438 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98441 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98445 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98448 "isa_tms320.tcc"
)
{
#line 3243 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 98500 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 98508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98518 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98522 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98530 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98534 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98537 "isa_tms320.tcc"
)
{
#line 3429 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src3' and 'src4' are valid registers
		if(unlikely(!cpu.HasReg(src3) || !cpu.HasReg(src4)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read 'src4' register operand
		uint32_t src4_value = cpu.GetReg(src4);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of ADDI3
		uint32_t addi3_result;      // the 32-bit result
		uint8_t addi3_carry_out;    // the carry out (0 or 1)
		uint8_t addi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);
		else
		Add32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and ADDI3
		uint8_t overflow = mpyi3_overflow | addi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, addi3_result);

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 98641 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98657 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98666 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98672 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98676 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || ADDI3 (multiply and add integer)
**********************************************************/
/**********************************************************
* MPYI3 || SUBI3 (multiply and subtract integer)
* op MPYI3_SUBI3(0b10[2]:0b0011[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 98689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98699 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98703 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 98707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98711 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98715 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98718 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98722 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98725 "isa_tms320.tcc"
)
{
#line 3541 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 98777 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 98785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98795 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98799 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 98803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98807 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98811 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98814 "isa_tms320.tcc"
)
{
#line 3642 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of 'src3' operand
		typename CONFIG::address_t s3_ea;        // The effective address
		bool s3_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s3_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s3_ea, s3_update_ar, s3_output_ar, s3_mod, s3_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src4' operand
		typename CONFIG::address_t s4_ea;        // The effective address
		bool s4_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s4_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s4_ea, s4_update_ar, s4_output_ar, s4_mod, s4_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load 'src3' operand from memory
		uint32_t src3_value = cpu.IntLoad(s3_ea);

		// Load 'src4' operand from memory
		uint32_t src4_value = cpu.IntLoad(s4_ea);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of SUBI3
		uint32_t subi3_result;      // the 32-bit result
		uint8_t subi3_borrow_out;   // the borrow out (0 or 1)
		uint8_t subi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);
		else
		Sub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and SUBI3
		uint8_t overflow = mpyi3_overflow | subi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, subi3_result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(s3_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s3_ar, s3_output_ar);
		}

		if(s4_update_ar && s4_ar != s4_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s4_ar, s4_output_ar);
		}

		// FIXME: Don't known how to generate the underflow flag

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_UF | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 98950 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98966 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98975 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98981 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98985 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99002 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 99006 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 99010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99014 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99018 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99021 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 99025 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 99028 "isa_tms320.tcc"
)
{
#line 3590 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 99080 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 99088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99098 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 99102 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 99106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99110 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99114 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99117 "isa_tms320.tcc"
)
{
#line 3778 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src3' and 'src4' are valid registers
		if(unlikely(!cpu.HasReg(src3) || !cpu.HasReg(src4)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read 'src4' register operand
		uint32_t src4_value = cpu.GetReg(src4);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of SUBI3
		uint32_t subi3_result;      // the 32-bit result
		uint8_t subi3_borrow_out;   // the borrow out (0 or 1)
		uint8_t subi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);
		else
		Sub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and SUBI3
		uint8_t overflow = mpyi3_overflow | subi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, subi3_result);

		// FIXME: Don't known how to generate the underflow flag

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_UF | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 99223 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 99229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99239 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99248 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 99254 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 99258 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99275 "isa_tms320.tcc"
>
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99284 "isa_tms320.tcc"
>::OpLDE_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99292 "isa_tms320.tcc"
>(code, addr, "LDE_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99312 "isa_tms320.tcc"
>
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99321 "isa_tms320.tcc"
>::OpLDE_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99329 "isa_tms320.tcc"
>(code, addr, "LDE_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99349 "isa_tms320.tcc"
>
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99358 "isa_tms320.tcc"
>::OpLDE_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99366 "isa_tms320.tcc"
>(code, addr, "LDE_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99388 "isa_tms320.tcc"
>
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99397 "isa_tms320.tcc"
>::OpLDE_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99405 "isa_tms320.tcc"
>(code, addr, "LDE_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99425 "isa_tms320.tcc"
>
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99434 "isa_tms320.tcc"
>::OpLDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99442 "isa_tms320.tcc"
>(code, addr, "LDF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99462 "isa_tms320.tcc"
>
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99471 "isa_tms320.tcc"
>::OpLDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99479 "isa_tms320.tcc"
>(code, addr, "LDF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99499 "isa_tms320.tcc"
>
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99508 "isa_tms320.tcc"
>::OpLDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99516 "isa_tms320.tcc"
>(code, addr, "LDF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99538 "isa_tms320.tcc"
>
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99547 "isa_tms320.tcc"
>::OpLDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99555 "isa_tms320.tcc"
>(code, addr, "LDF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99572 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99575 "isa_tms320.tcc"
>
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99584 "isa_tms320.tcc"
>::OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99592 "isa_tms320.tcc"
>(code, addr, "LDFcond_reg")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99613 "isa_tms320.tcc"
>
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99622 "isa_tms320.tcc"
>::OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99630 "isa_tms320.tcc"
>(code, addr, "LDFcond_dir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99651 "isa_tms320.tcc"
>
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99660 "isa_tms320.tcc"
>::OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99668 "isa_tms320.tcc"
>(code, addr, "LDFcond_indir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99691 "isa_tms320.tcc"
>
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99700 "isa_tms320.tcc"
>::OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99708 "isa_tms320.tcc"
>(code, addr, "LDFcond_imm")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99729 "isa_tms320.tcc"
>
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99738 "isa_tms320.tcc"
>::OpLDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99746 "isa_tms320.tcc"
>(code, addr, "LDI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99766 "isa_tms320.tcc"
>
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99775 "isa_tms320.tcc"
>::OpLDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99783 "isa_tms320.tcc"
>(code, addr, "LDI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99803 "isa_tms320.tcc"
>
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99812 "isa_tms320.tcc"
>::OpLDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99820 "isa_tms320.tcc"
>(code, addr, "LDI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99842 "isa_tms320.tcc"
>
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99851 "isa_tms320.tcc"
>::OpLDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99859 "isa_tms320.tcc"
>(code, addr, "LDI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99879 "isa_tms320.tcc"
>
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99888 "isa_tms320.tcc"
>::OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99896 "isa_tms320.tcc"
>(code, addr, "LDIcond_reg")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99917 "isa_tms320.tcc"
>
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99926 "isa_tms320.tcc"
>::OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99934 "isa_tms320.tcc"
>(code, addr, "LDIcond_dir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99955 "isa_tms320.tcc"
>
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99964 "isa_tms320.tcc"
>::OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99972 "isa_tms320.tcc"
>(code, addr, "LDIcond_indir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99995 "isa_tms320.tcc"
>
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100004 "isa_tms320.tcc"
>::OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100012 "isa_tms320.tcc"
>(code, addr, "LDIcond_imm")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100033 "isa_tms320.tcc"
>
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100042 "isa_tms320.tcc"
>::OpLDM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100050 "isa_tms320.tcc"
>(code, addr, "LDM_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100070 "isa_tms320.tcc"
>
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100079 "isa_tms320.tcc"
>::OpLDM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100087 "isa_tms320.tcc"
>(code, addr, "LDM_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100107 "isa_tms320.tcc"
>
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100116 "isa_tms320.tcc"
>::OpLDM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100124 "isa_tms320.tcc"
>(code, addr, "LDM_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100146 "isa_tms320.tcc"
>
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100155 "isa_tms320.tcc"
>::OpLDM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100163 "isa_tms320.tcc"
>(code, addr, "LDM_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xfff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100183 "isa_tms320.tcc"
>
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 100188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100192 "isa_tms320.tcc"
>::OpLDP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100200 "isa_tms320.tcc"
>(code, addr, "LDP")
{
	src = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100219 "isa_tms320.tcc"
>
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 100224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100228 "isa_tms320.tcc"
>::OpPOP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100236 "isa_tms320.tcc"
>(code, addr, "POP")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100255 "isa_tms320.tcc"
>
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 100260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100264 "isa_tms320.tcc"
>::OpPOPF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100272 "isa_tms320.tcc"
>(code, addr, "POPF")
{
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100291 "isa_tms320.tcc"
>
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 100296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100300 "isa_tms320.tcc"
>::OpPUSH(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100308 "isa_tms320.tcc"
>(code, addr, "PUSH")
{
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100327 "isa_tms320.tcc"
>
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 100332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100336 "isa_tms320.tcc"
>::OpPUSHF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100344 "isa_tms320.tcc"
>(code, addr, "PUSHF")
{
	src = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100363 "isa_tms320.tcc"
>
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100372 "isa_tms320.tcc"
>::OpSTF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100380 "isa_tms320.tcc"
>(code, addr, "STF_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100400 "isa_tms320.tcc"
>
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100409 "isa_tms320.tcc"
>::OpSTF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100417 "isa_tms320.tcc"
>(code, addr, "STF_indir")
{
	src = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100439 "isa_tms320.tcc"
>
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100448 "isa_tms320.tcc"
>::OpSTI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100456 "isa_tms320.tcc"
>(code, addr, "STI_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100476 "isa_tms320.tcc"
>
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100485 "isa_tms320.tcc"
>::OpSTI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100493 "isa_tms320.tcc"
>(code, addr, "STI_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100515 "isa_tms320.tcc"
>
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100524 "isa_tms320.tcc"
>::OpABSF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100532 "isa_tms320.tcc"
>(code, addr, "ABSF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100552 "isa_tms320.tcc"
>
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100561 "isa_tms320.tcc"
>::OpABSF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100569 "isa_tms320.tcc"
>(code, addr, "ABSF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100589 "isa_tms320.tcc"
>
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100598 "isa_tms320.tcc"
>::OpABSF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100606 "isa_tms320.tcc"
>(code, addr, "ABSF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100628 "isa_tms320.tcc"
>
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100637 "isa_tms320.tcc"
>::OpABSF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100645 "isa_tms320.tcc"
>(code, addr, "ABSF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100665 "isa_tms320.tcc"
>
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100674 "isa_tms320.tcc"
>::OpABSI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100682 "isa_tms320.tcc"
>(code, addr, "ABSI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100702 "isa_tms320.tcc"
>
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100711 "isa_tms320.tcc"
>::OpABSI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100719 "isa_tms320.tcc"
>(code, addr, "ABSI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100739 "isa_tms320.tcc"
>
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100748 "isa_tms320.tcc"
>::OpABSI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100756 "isa_tms320.tcc"
>(code, addr, "ABSI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100778 "isa_tms320.tcc"
>
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100787 "isa_tms320.tcc"
>::OpABSI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100795 "isa_tms320.tcc"
>(code, addr, "ABSI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100815 "isa_tms320.tcc"
>
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100824 "isa_tms320.tcc"
>::OpADDC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100832 "isa_tms320.tcc"
>(code, addr, "ADDC_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100852 "isa_tms320.tcc"
>
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100861 "isa_tms320.tcc"
>::OpADDC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100869 "isa_tms320.tcc"
>(code, addr, "ADDC_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100889 "isa_tms320.tcc"
>
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100898 "isa_tms320.tcc"
>::OpADDC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100906 "isa_tms320.tcc"
>(code, addr, "ADDC_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100928 "isa_tms320.tcc"
>
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100937 "isa_tms320.tcc"
>::OpADDC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100945 "isa_tms320.tcc"
>(code, addr, "ADDC_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100965 "isa_tms320.tcc"
>
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100974 "isa_tms320.tcc"
>::OpADDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100982 "isa_tms320.tcc"
>(code, addr, "ADDF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101002 "isa_tms320.tcc"
>
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101011 "isa_tms320.tcc"
>::OpADDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101019 "isa_tms320.tcc"
>(code, addr, "ADDF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101039 "isa_tms320.tcc"
>
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101048 "isa_tms320.tcc"
>::OpADDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101056 "isa_tms320.tcc"
>(code, addr, "ADDF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101078 "isa_tms320.tcc"
>
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101087 "isa_tms320.tcc"
>::OpADDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101095 "isa_tms320.tcc"
>(code, addr, "ADDF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101112 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101115 "isa_tms320.tcc"
>
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101124 "isa_tms320.tcc"
>::OpADDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101132 "isa_tms320.tcc"
>(code, addr, "ADDI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101152 "isa_tms320.tcc"
>
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101161 "isa_tms320.tcc"
>::OpADDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101169 "isa_tms320.tcc"
>(code, addr, "ADDI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101189 "isa_tms320.tcc"
>
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101198 "isa_tms320.tcc"
>::OpADDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101206 "isa_tms320.tcc"
>(code, addr, "ADDI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101228 "isa_tms320.tcc"
>
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101237 "isa_tms320.tcc"
>::OpADDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101245 "isa_tms320.tcc"
>(code, addr, "ADDI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101265 "isa_tms320.tcc"
>
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101274 "isa_tms320.tcc"
>::OpAND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101282 "isa_tms320.tcc"
>(code, addr, "AND_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101302 "isa_tms320.tcc"
>
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101311 "isa_tms320.tcc"
>::OpAND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101319 "isa_tms320.tcc"
>(code, addr, "AND_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101339 "isa_tms320.tcc"
>
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101348 "isa_tms320.tcc"
>::OpAND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101356 "isa_tms320.tcc"
>(code, addr, "AND_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101378 "isa_tms320.tcc"
>
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101387 "isa_tms320.tcc"
>::OpAND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101395 "isa_tms320.tcc"
>(code, addr, "AND_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101415 "isa_tms320.tcc"
>
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101424 "isa_tms320.tcc"
>::OpANDN_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101432 "isa_tms320.tcc"
>(code, addr, "ANDN_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101452 "isa_tms320.tcc"
>
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101461 "isa_tms320.tcc"
>::OpANDN_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101469 "isa_tms320.tcc"
>(code, addr, "ANDN_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101489 "isa_tms320.tcc"
>
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101494 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101498 "isa_tms320.tcc"
>::OpANDN_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101506 "isa_tms320.tcc"
>(code, addr, "ANDN_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101518 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101528 "isa_tms320.tcc"
>
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101537 "isa_tms320.tcc"
>::OpANDN_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101545 "isa_tms320.tcc"
>(code, addr, "ANDN_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101565 "isa_tms320.tcc"
>
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101574 "isa_tms320.tcc"
>::OpASH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101582 "isa_tms320.tcc"
>(code, addr, "ASH_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101602 "isa_tms320.tcc"
>
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101611 "isa_tms320.tcc"
>::OpASH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101619 "isa_tms320.tcc"
>(code, addr, "ASH_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101639 "isa_tms320.tcc"
>
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101648 "isa_tms320.tcc"
>::OpASH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101656 "isa_tms320.tcc"
>(code, addr, "ASH_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101678 "isa_tms320.tcc"
>
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101687 "isa_tms320.tcc"
>::OpASH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101695 "isa_tms320.tcc"
>(code, addr, "ASH_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101705 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101715 "isa_tms320.tcc"
>
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101724 "isa_tms320.tcc"
>::OpCMPF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101732 "isa_tms320.tcc"
>(code, addr, "CMPF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101752 "isa_tms320.tcc"
>
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101761 "isa_tms320.tcc"
>::OpCMPF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101769 "isa_tms320.tcc"
>(code, addr, "CMPF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101789 "isa_tms320.tcc"
>
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101798 "isa_tms320.tcc"
>::OpCMPF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101806 "isa_tms320.tcc"
>(code, addr, "CMPF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101828 "isa_tms320.tcc"
>
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101837 "isa_tms320.tcc"
>::OpCMPF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101845 "isa_tms320.tcc"
>(code, addr, "CMPF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101855 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101858 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101865 "isa_tms320.tcc"
>
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101874 "isa_tms320.tcc"
>::OpCMPI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101882 "isa_tms320.tcc"
>(code, addr, "CMPI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101902 "isa_tms320.tcc"
>
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101911 "isa_tms320.tcc"
>::OpCMPI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101919 "isa_tms320.tcc"
>(code, addr, "CMPI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101939 "isa_tms320.tcc"
>
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101948 "isa_tms320.tcc"
>::OpCMPI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101956 "isa_tms320.tcc"
>(code, addr, "CMPI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101978 "isa_tms320.tcc"
>
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101987 "isa_tms320.tcc"
>::OpCMPI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101995 "isa_tms320.tcc"
>(code, addr, "CMPI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102015 "isa_tms320.tcc"
>
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102024 "isa_tms320.tcc"
>::OpFIX_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102032 "isa_tms320.tcc"
>(code, addr, "FIX_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102052 "isa_tms320.tcc"
>
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102061 "isa_tms320.tcc"
>::OpFIX_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102069 "isa_tms320.tcc"
>(code, addr, "FIX_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102089 "isa_tms320.tcc"
>
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102098 "isa_tms320.tcc"
>::OpFIX_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102106 "isa_tms320.tcc"
>(code, addr, "FIX_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102128 "isa_tms320.tcc"
>
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102137 "isa_tms320.tcc"
>::OpFIX_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102145 "isa_tms320.tcc"
>(code, addr, "FIX_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102155 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102165 "isa_tms320.tcc"
>
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102174 "isa_tms320.tcc"
>::OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102182 "isa_tms320.tcc"
>(code, addr, "FLOAT_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102202 "isa_tms320.tcc"
>
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102211 "isa_tms320.tcc"
>::OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102219 "isa_tms320.tcc"
>(code, addr, "FLOAT_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102239 "isa_tms320.tcc"
>
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102248 "isa_tms320.tcc"
>::OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102256 "isa_tms320.tcc"
>(code, addr, "FLOAT_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102268 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102278 "isa_tms320.tcc"
>
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102287 "isa_tms320.tcc"
>::OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102295 "isa_tms320.tcc"
>(code, addr, "FLOAT_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102315 "isa_tms320.tcc"
>
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102324 "isa_tms320.tcc"
>::OpLSH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102332 "isa_tms320.tcc"
>(code, addr, "LSH_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102352 "isa_tms320.tcc"
>
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102361 "isa_tms320.tcc"
>::OpLSH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102369 "isa_tms320.tcc"
>(code, addr, "LSH_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102389 "isa_tms320.tcc"
>
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102398 "isa_tms320.tcc"
>::OpLSH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102406 "isa_tms320.tcc"
>(code, addr, "LSH_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102428 "isa_tms320.tcc"
>
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102437 "isa_tms320.tcc"
>::OpLSH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102445 "isa_tms320.tcc"
>(code, addr, "LSH_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0x7f) << 25) >> 25);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102465 "isa_tms320.tcc"
>
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102474 "isa_tms320.tcc"
>::OpMPYF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102482 "isa_tms320.tcc"
>(code, addr, "MPYF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102502 "isa_tms320.tcc"
>
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102511 "isa_tms320.tcc"
>::OpMPYF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102519 "isa_tms320.tcc"
>(code, addr, "MPYF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102539 "isa_tms320.tcc"
>
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102548 "isa_tms320.tcc"
>::OpMPYF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102556 "isa_tms320.tcc"
>(code, addr, "MPYF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102578 "isa_tms320.tcc"
>
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102587 "isa_tms320.tcc"
>::OpMPYF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102595 "isa_tms320.tcc"
>(code, addr, "MPYF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102605 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102612 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102615 "isa_tms320.tcc"
>
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102624 "isa_tms320.tcc"
>::OpMPYI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102632 "isa_tms320.tcc"
>(code, addr, "MPYI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102652 "isa_tms320.tcc"
>
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102661 "isa_tms320.tcc"
>::OpMPYI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102669 "isa_tms320.tcc"
>(code, addr, "MPYI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102689 "isa_tms320.tcc"
>
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102698 "isa_tms320.tcc"
>::OpMPYI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102706 "isa_tms320.tcc"
>(code, addr, "MPYI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102728 "isa_tms320.tcc"
>
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102737 "isa_tms320.tcc"
>::OpMPYI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102745 "isa_tms320.tcc"
>(code, addr, "MPYI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102765 "isa_tms320.tcc"
>
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102774 "isa_tms320.tcc"
>::OpNEGB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102782 "isa_tms320.tcc"
>(code, addr, "NEGB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102802 "isa_tms320.tcc"
>
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102811 "isa_tms320.tcc"
>::OpNEGB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102819 "isa_tms320.tcc"
>(code, addr, "NEGB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102839 "isa_tms320.tcc"
>
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102848 "isa_tms320.tcc"
>::OpNEGB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102856 "isa_tms320.tcc"
>(code, addr, "NEGB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102878 "isa_tms320.tcc"
>
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102887 "isa_tms320.tcc"
>::OpNEGB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102891 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102895 "isa_tms320.tcc"
>(code, addr, "NEGB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102915 "isa_tms320.tcc"
>
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102924 "isa_tms320.tcc"
>::OpNEGF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102932 "isa_tms320.tcc"
>(code, addr, "NEGF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102952 "isa_tms320.tcc"
>
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102961 "isa_tms320.tcc"
>::OpNEGF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102969 "isa_tms320.tcc"
>(code, addr, "NEGF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102989 "isa_tms320.tcc"
>
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102998 "isa_tms320.tcc"
>::OpNEGF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103006 "isa_tms320.tcc"
>(code, addr, "NEGF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103028 "isa_tms320.tcc"
>
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103037 "isa_tms320.tcc"
>::OpNEGF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103045 "isa_tms320.tcc"
>(code, addr, "NEGF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103065 "isa_tms320.tcc"
>
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103074 "isa_tms320.tcc"
>::OpNEGI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103082 "isa_tms320.tcc"
>(code, addr, "NEGI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103102 "isa_tms320.tcc"
>
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103111 "isa_tms320.tcc"
>::OpNEGI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103119 "isa_tms320.tcc"
>(code, addr, "NEGI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103139 "isa_tms320.tcc"
>
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103148 "isa_tms320.tcc"
>::OpNEGI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103156 "isa_tms320.tcc"
>(code, addr, "NEGI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103178 "isa_tms320.tcc"
>
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103187 "isa_tms320.tcc"
>::OpNEGI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103195 "isa_tms320.tcc"
>(code, addr, "NEGI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103215 "isa_tms320.tcc"
>
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103224 "isa_tms320.tcc"
>::OpNORM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103232 "isa_tms320.tcc"
>(code, addr, "NORM_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103252 "isa_tms320.tcc"
>
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103261 "isa_tms320.tcc"
>::OpNORM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103265 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103269 "isa_tms320.tcc"
>(code, addr, "NORM_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103289 "isa_tms320.tcc"
>
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103298 "isa_tms320.tcc"
>::OpNORM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103306 "isa_tms320.tcc"
>(code, addr, "NORM_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103328 "isa_tms320.tcc"
>
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103337 "isa_tms320.tcc"
>::OpNORM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103345 "isa_tms320.tcc"
>(code, addr, "NORM_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103365 "isa_tms320.tcc"
>
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103374 "isa_tms320.tcc"
>::OpNOT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103382 "isa_tms320.tcc"
>(code, addr, "NOT_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103402 "isa_tms320.tcc"
>
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103411 "isa_tms320.tcc"
>::OpNOT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103419 "isa_tms320.tcc"
>(code, addr, "NOT_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103439 "isa_tms320.tcc"
>
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103448 "isa_tms320.tcc"
>::OpNOT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103456 "isa_tms320.tcc"
>(code, addr, "NOT_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103478 "isa_tms320.tcc"
>
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103487 "isa_tms320.tcc"
>::OpNOT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103495 "isa_tms320.tcc"
>(code, addr, "NOT_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103515 "isa_tms320.tcc"
>
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103524 "isa_tms320.tcc"
>::OpOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103532 "isa_tms320.tcc"
>(code, addr, "OR_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103552 "isa_tms320.tcc"
>
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103561 "isa_tms320.tcc"
>::OpOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103569 "isa_tms320.tcc"
>(code, addr, "OR_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103589 "isa_tms320.tcc"
>
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103598 "isa_tms320.tcc"
>::OpOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103606 "isa_tms320.tcc"
>(code, addr, "OR_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103628 "isa_tms320.tcc"
>
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103637 "isa_tms320.tcc"
>::OpOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103645 "isa_tms320.tcc"
>(code, addr, "OR_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103665 "isa_tms320.tcc"
>
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103674 "isa_tms320.tcc"
>::OpRND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103682 "isa_tms320.tcc"
>(code, addr, "RND_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103702 "isa_tms320.tcc"
>
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103711 "isa_tms320.tcc"
>::OpRND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103719 "isa_tms320.tcc"
>(code, addr, "RND_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103739 "isa_tms320.tcc"
>
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103748 "isa_tms320.tcc"
>::OpRND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103756 "isa_tms320.tcc"
>(code, addr, "RND_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103778 "isa_tms320.tcc"
>
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103787 "isa_tms320.tcc"
>::OpRND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103795 "isa_tms320.tcc"
>(code, addr, "RND_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103815 "isa_tms320.tcc"
>
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 103820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103824 "isa_tms320.tcc"
>::OpROL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103832 "isa_tms320.tcc"
>(code, addr, "ROL")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103851 "isa_tms320.tcc"
>
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 103856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103860 "isa_tms320.tcc"
>::OpROLC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103868 "isa_tms320.tcc"
>(code, addr, "ROLC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103887 "isa_tms320.tcc"
>
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 103892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103896 "isa_tms320.tcc"
>::OpROR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103904 "isa_tms320.tcc"
>(code, addr, "ROR")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103923 "isa_tms320.tcc"
>
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 103928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103932 "isa_tms320.tcc"
>::OpRORC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103940 "isa_tms320.tcc"
>(code, addr, "RORC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103959 "isa_tms320.tcc"
>
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103968 "isa_tms320.tcc"
>::OpSUBB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103976 "isa_tms320.tcc"
>(code, addr, "SUBB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103996 "isa_tms320.tcc"
>
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104005 "isa_tms320.tcc"
>::OpSUBB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104013 "isa_tms320.tcc"
>(code, addr, "SUBB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104033 "isa_tms320.tcc"
>
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104042 "isa_tms320.tcc"
>::OpSUBB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104050 "isa_tms320.tcc"
>(code, addr, "SUBB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104072 "isa_tms320.tcc"
>
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104081 "isa_tms320.tcc"
>::OpSUBB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104089 "isa_tms320.tcc"
>(code, addr, "SUBB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104109 "isa_tms320.tcc"
>
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104118 "isa_tms320.tcc"
>::OpSUBC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104126 "isa_tms320.tcc"
>(code, addr, "SUBC_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104146 "isa_tms320.tcc"
>
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104155 "isa_tms320.tcc"
>::OpSUBC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104163 "isa_tms320.tcc"
>(code, addr, "SUBC_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104183 "isa_tms320.tcc"
>
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104192 "isa_tms320.tcc"
>::OpSUBC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104200 "isa_tms320.tcc"
>(code, addr, "SUBC_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104222 "isa_tms320.tcc"
>
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104231 "isa_tms320.tcc"
>::OpSUBC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104239 "isa_tms320.tcc"
>(code, addr, "SUBC_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104259 "isa_tms320.tcc"
>
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104268 "isa_tms320.tcc"
>::OpSUBF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104276 "isa_tms320.tcc"
>(code, addr, "SUBF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104296 "isa_tms320.tcc"
>
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104305 "isa_tms320.tcc"
>::OpSUBF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104313 "isa_tms320.tcc"
>(code, addr, "SUBF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104333 "isa_tms320.tcc"
>
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104342 "isa_tms320.tcc"
>::OpSUBF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104350 "isa_tms320.tcc"
>(code, addr, "SUBF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104372 "isa_tms320.tcc"
>
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104381 "isa_tms320.tcc"
>::OpSUBF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104389 "isa_tms320.tcc"
>(code, addr, "SUBF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104409 "isa_tms320.tcc"
>
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104418 "isa_tms320.tcc"
>::OpSUBI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104426 "isa_tms320.tcc"
>(code, addr, "SUBI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104446 "isa_tms320.tcc"
>
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104455 "isa_tms320.tcc"
>::OpSUBI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104463 "isa_tms320.tcc"
>(code, addr, "SUBI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104483 "isa_tms320.tcc"
>
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104492 "isa_tms320.tcc"
>::OpSUBI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104500 "isa_tms320.tcc"
>(code, addr, "SUBI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104522 "isa_tms320.tcc"
>
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104531 "isa_tms320.tcc"
>::OpSUBI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104539 "isa_tms320.tcc"
>(code, addr, "SUBI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104559 "isa_tms320.tcc"
>
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104568 "isa_tms320.tcc"
>::OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104576 "isa_tms320.tcc"
>(code, addr, "SUBRB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104596 "isa_tms320.tcc"
>
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104605 "isa_tms320.tcc"
>::OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104613 "isa_tms320.tcc"
>(code, addr, "SUBRB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104633 "isa_tms320.tcc"
>
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104642 "isa_tms320.tcc"
>::OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104650 "isa_tms320.tcc"
>(code, addr, "SUBRB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104672 "isa_tms320.tcc"
>
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104681 "isa_tms320.tcc"
>::OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104689 "isa_tms320.tcc"
>(code, addr, "SUBRB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104709 "isa_tms320.tcc"
>
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104718 "isa_tms320.tcc"
>::OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104726 "isa_tms320.tcc"
>(code, addr, "SUBRF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104746 "isa_tms320.tcc"
>
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104755 "isa_tms320.tcc"
>::OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104763 "isa_tms320.tcc"
>(code, addr, "SUBRF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104783 "isa_tms320.tcc"
>
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104792 "isa_tms320.tcc"
>::OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104800 "isa_tms320.tcc"
>(code, addr, "SUBRF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104822 "isa_tms320.tcc"
>
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104831 "isa_tms320.tcc"
>::OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104839 "isa_tms320.tcc"
>(code, addr, "SUBRF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104859 "isa_tms320.tcc"
>
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104868 "isa_tms320.tcc"
>::OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104876 "isa_tms320.tcc"
>(code, addr, "SUBRI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104896 "isa_tms320.tcc"
>
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104905 "isa_tms320.tcc"
>::OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104913 "isa_tms320.tcc"
>(code, addr, "SUBRI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104933 "isa_tms320.tcc"
>
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104942 "isa_tms320.tcc"
>::OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104950 "isa_tms320.tcc"
>(code, addr, "SUBRI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104972 "isa_tms320.tcc"
>
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104981 "isa_tms320.tcc"
>::OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104989 "isa_tms320.tcc"
>(code, addr, "SUBRI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105009 "isa_tms320.tcc"
>
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105018 "isa_tms320.tcc"
>::OpTSTB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105026 "isa_tms320.tcc"
>(code, addr, "TSTB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105046 "isa_tms320.tcc"
>
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105055 "isa_tms320.tcc"
>::OpTSTB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105063 "isa_tms320.tcc"
>(code, addr, "TSTB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105073 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105083 "isa_tms320.tcc"
>
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105092 "isa_tms320.tcc"
>::OpTSTB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105096 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105100 "isa_tms320.tcc"
>(code, addr, "TSTB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105112 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105122 "isa_tms320.tcc"
>
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 105127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105131 "isa_tms320.tcc"
>::OpTSTB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105139 "isa_tms320.tcc"
>(code, addr, "TSTB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105159 "isa_tms320.tcc"
>
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105168 "isa_tms320.tcc"
>::OpXOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105176 "isa_tms320.tcc"
>(code, addr, "XOR_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105196 "isa_tms320.tcc"
>
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105205 "isa_tms320.tcc"
>::OpXOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105213 "isa_tms320.tcc"
>(code, addr, "XOR_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105233 "isa_tms320.tcc"
>
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105242 "isa_tms320.tcc"
>::OpXOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105250 "isa_tms320.tcc"
>(code, addr, "XOR_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105265 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105272 "isa_tms320.tcc"
>
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 105277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105281 "isa_tms320.tcc"
>::OpXOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105289 "isa_tms320.tcc"
>(code, addr, "XOR_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105309 "isa_tms320.tcc"
>
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105318 "isa_tms320.tcc"
>::OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105326 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105347 "isa_tms320.tcc"
>
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105356 "isa_tms320.tcc"
>::OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105364 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105386 "isa_tms320.tcc"
>
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105395 "isa_tms320.tcc"
>::OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105403 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105425 "isa_tms320.tcc"
>
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105434 "isa_tms320.tcc"
>::OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105442 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105465 "isa_tms320.tcc"
>
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105474 "isa_tms320.tcc"
>::OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105482 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105503 "isa_tms320.tcc"
>
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105512 "isa_tms320.tcc"
>::OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105520 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105542 "isa_tms320.tcc"
>
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105551 "isa_tms320.tcc"
>::OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105559 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105571 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105581 "isa_tms320.tcc"
>
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105590 "isa_tms320.tcc"
>::OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105598 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105621 "isa_tms320.tcc"
>
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105630 "isa_tms320.tcc"
>::OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105638 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105659 "isa_tms320.tcc"
>
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105668 "isa_tms320.tcc"
>::OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105676 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105698 "isa_tms320.tcc"
>
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105707 "isa_tms320.tcc"
>::OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105715 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105737 "isa_tms320.tcc"
>
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105746 "isa_tms320.tcc"
>::OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105754 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105777 "isa_tms320.tcc"
>
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105786 "isa_tms320.tcc"
>::OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105794 "isa_tms320.tcc"
>(code, addr, "AND3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105815 "isa_tms320.tcc"
>
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105824 "isa_tms320.tcc"
>::OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105832 "isa_tms320.tcc"
>(code, addr, "AND3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105854 "isa_tms320.tcc"
>
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105863 "isa_tms320.tcc"
>::OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105871 "isa_tms320.tcc"
>(code, addr, "AND3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105893 "isa_tms320.tcc"
>
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105902 "isa_tms320.tcc"
>::OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105910 "isa_tms320.tcc"
>(code, addr, "AND3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105933 "isa_tms320.tcc"
>
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105942 "isa_tms320.tcc"
>::OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105950 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105971 "isa_tms320.tcc"
>
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105980 "isa_tms320.tcc"
>::OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105988 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106010 "isa_tms320.tcc"
>
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106019 "isa_tms320.tcc"
>::OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106027 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106049 "isa_tms320.tcc"
>
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106058 "isa_tms320.tcc"
>::OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106066 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106089 "isa_tms320.tcc"
>
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106098 "isa_tms320.tcc"
>::OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106106 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106127 "isa_tms320.tcc"
>
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106136 "isa_tms320.tcc"
>::OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106144 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106166 "isa_tms320.tcc"
>
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106175 "isa_tms320.tcc"
>::OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106183 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106205 "isa_tms320.tcc"
>
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106214 "isa_tms320.tcc"
>::OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106222 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106245 "isa_tms320.tcc"
>
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106254 "isa_tms320.tcc"
>::OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106262 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_reg")
{
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106282 "isa_tms320.tcc"
>
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106291 "isa_tms320.tcc"
>::OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106299 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106320 "isa_tms320.tcc"
>
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106329 "isa_tms320.tcc"
>::OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106337 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_indir")
{
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106358 "isa_tms320.tcc"
>
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106367 "isa_tms320.tcc"
>::OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106375 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106397 "isa_tms320.tcc"
>
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106406 "isa_tms320.tcc"
>::OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106414 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_reg")
{
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106434 "isa_tms320.tcc"
>
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106443 "isa_tms320.tcc"
>::OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106451 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106472 "isa_tms320.tcc"
>
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106481 "isa_tms320.tcc"
>::OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106489 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_indir")
{
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106510 "isa_tms320.tcc"
>
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106519 "isa_tms320.tcc"
>::OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106527 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106549 "isa_tms320.tcc"
>
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106558 "isa_tms320.tcc"
>::OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106566 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106587 "isa_tms320.tcc"
>
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106596 "isa_tms320.tcc"
>::OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106604 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106626 "isa_tms320.tcc"
>
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106635 "isa_tms320.tcc"
>::OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106643 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106665 "isa_tms320.tcc"
>
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106674 "isa_tms320.tcc"
>::OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106682 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106705 "isa_tms320.tcc"
>
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106714 "isa_tms320.tcc"
>::OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106722 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106743 "isa_tms320.tcc"
>
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106752 "isa_tms320.tcc"
>::OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106760 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106782 "isa_tms320.tcc"
>
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106791 "isa_tms320.tcc"
>::OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106799 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106821 "isa_tms320.tcc"
>
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106830 "isa_tms320.tcc"
>::OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106838 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106861 "isa_tms320.tcc"
>
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106870 "isa_tms320.tcc"
>::OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106878 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106899 "isa_tms320.tcc"
>
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106908 "isa_tms320.tcc"
>::OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106916 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106938 "isa_tms320.tcc"
>
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106947 "isa_tms320.tcc"
>::OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106955 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106977 "isa_tms320.tcc"
>
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106986 "isa_tms320.tcc"
>::OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106994 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107017 "isa_tms320.tcc"
>
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107026 "isa_tms320.tcc"
>::OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107034 "isa_tms320.tcc"
>(code, addr, "OR3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107055 "isa_tms320.tcc"
>
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107064 "isa_tms320.tcc"
>::OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107072 "isa_tms320.tcc"
>(code, addr, "OR3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107094 "isa_tms320.tcc"
>
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107103 "isa_tms320.tcc"
>::OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107111 "isa_tms320.tcc"
>(code, addr, "OR3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107133 "isa_tms320.tcc"
>
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107142 "isa_tms320.tcc"
>::OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107150 "isa_tms320.tcc"
>(code, addr, "OR3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107173 "isa_tms320.tcc"
>
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107182 "isa_tms320.tcc"
>::OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107190 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107211 "isa_tms320.tcc"
>
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107220 "isa_tms320.tcc"
>::OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107228 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107250 "isa_tms320.tcc"
>
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107259 "isa_tms320.tcc"
>::OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107267 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107289 "isa_tms320.tcc"
>
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107298 "isa_tms320.tcc"
>::OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107306 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107329 "isa_tms320.tcc"
>
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107338 "isa_tms320.tcc"
>::OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107346 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107367 "isa_tms320.tcc"
>
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107376 "isa_tms320.tcc"
>::OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107384 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107406 "isa_tms320.tcc"
>
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107415 "isa_tms320.tcc"
>::OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107423 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107445 "isa_tms320.tcc"
>
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107454 "isa_tms320.tcc"
>::OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107462 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107485 "isa_tms320.tcc"
>
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107494 "isa_tms320.tcc"
>::OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107502 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107523 "isa_tms320.tcc"
>
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107532 "isa_tms320.tcc"
>::OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107540 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107562 "isa_tms320.tcc"
>
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107571 "isa_tms320.tcc"
>::OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107579 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107601 "isa_tms320.tcc"
>
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107610 "isa_tms320.tcc"
>::OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107618 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107641 "isa_tms320.tcc"
>
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107650 "isa_tms320.tcc"
>::OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107658 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_reg")
{
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107678 "isa_tms320.tcc"
>
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107687 "isa_tms320.tcc"
>::OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107695 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107716 "isa_tms320.tcc"
>
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107725 "isa_tms320.tcc"
>::OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107733 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_indir")
{
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107754 "isa_tms320.tcc"
>
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107763 "isa_tms320.tcc"
>::OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107771 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107793 "isa_tms320.tcc"
>
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107802 "isa_tms320.tcc"
>::OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107810 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107831 "isa_tms320.tcc"
>
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107840 "isa_tms320.tcc"
>::OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107848 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107870 "isa_tms320.tcc"
>
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107879 "isa_tms320.tcc"
>::OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107887 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107909 "isa_tms320.tcc"
>
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107918 "isa_tms320.tcc"
>::OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107926 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107949 "isa_tms320.tcc"
>
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107958 "isa_tms320.tcc"
>::OpBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107966 "isa_tms320.tcc"
>(code, addr, "Bcond_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107986 "isa_tms320.tcc"
>
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107995 "isa_tms320.tcc"
>::OpBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108003 "isa_tms320.tcc"
>(code, addr, "Bcond_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108023 "isa_tms320.tcc"
>
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108032 "isa_tms320.tcc"
>::OpBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108040 "isa_tms320.tcc"
>(code, addr, "BcondD_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108060 "isa_tms320.tcc"
>
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 108065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108069 "isa_tms320.tcc"
>::OpBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108077 "isa_tms320.tcc"
>(code, addr, "BcondD_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108097 "isa_tms320.tcc"
>
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 108102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108106 "isa_tms320.tcc"
>::OpBR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108114 "isa_tms320.tcc"
>(code, addr, "BR")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108133 "isa_tms320.tcc"
>
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 108138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108142 "isa_tms320.tcc"
>::OpBRD(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108150 "isa_tms320.tcc"
>(code, addr, "BRD")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108169 "isa_tms320.tcc"
>
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 108174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108178 "isa_tms320.tcc"
>::OpCALL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108186 "isa_tms320.tcc"
>(code, addr, "CALL")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108205 "isa_tms320.tcc"
>
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108214 "isa_tms320.tcc"
>::OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108222 "isa_tms320.tcc"
>(code, addr, "CALLcond_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108242 "isa_tms320.tcc"
>
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 108247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108251 "isa_tms320.tcc"
>::OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108259 "isa_tms320.tcc"
>(code, addr, "CALLcond_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108279 "isa_tms320.tcc"
>
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108288 "isa_tms320.tcc"
>::OpDBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108296 "isa_tms320.tcc"
>(code, addr, "DBcond_reg")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108317 "isa_tms320.tcc"
>
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 108322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108326 "isa_tms320.tcc"
>::OpDBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108334 "isa_tms320.tcc"
>(code, addr, "DBcond_disp")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108355 "isa_tms320.tcc"
>
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108364 "isa_tms320.tcc"
>::OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108372 "isa_tms320.tcc"
>(code, addr, "DBcondD_reg")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108393 "isa_tms320.tcc"
>
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 108398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108402 "isa_tms320.tcc"
>::OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108410 "isa_tms320.tcc"
>(code, addr, "DBcondD_disp")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108431 "isa_tms320.tcc"
>
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108440 "isa_tms320.tcc"
>::OpIACK_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108448 "isa_tms320.tcc"
>(code, addr, "IACK_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108467 "isa_tms320.tcc"
>
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108476 "isa_tms320.tcc"
>::OpIACK_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108484 "isa_tms320.tcc"
>(code, addr, "IACK_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108505 "isa_tms320.tcc"
>
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 108510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108514 "isa_tms320.tcc"
>::OpIDLE(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108522 "isa_tms320.tcc"
>(code, addr, "IDLE")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108540 "isa_tms320.tcc"
>
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108549 "isa_tms320.tcc"
>::OpNOP_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108557 "isa_tms320.tcc"
>(code, addr, "NOP_reg")
{
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108576 "isa_tms320.tcc"
>
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108585 "isa_tms320.tcc"
>::OpNOP_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108593 "isa_tms320.tcc"
>(code, addr, "NOP_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108614 "isa_tms320.tcc"
>
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 108619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108623 "isa_tms320.tcc"
>::OpRETIcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108631 "isa_tms320.tcc"
>(code, addr, "RETIcond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108650 "isa_tms320.tcc"
>
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 108655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108659 "isa_tms320.tcc"
>::OpRETScond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108667 "isa_tms320.tcc"
>(code, addr, "RETScond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108686 "isa_tms320.tcc"
>
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 108691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108695 "isa_tms320.tcc"
>::OpRPTB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108703 "isa_tms320.tcc"
>(code, addr, "RPTB")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108722 "isa_tms320.tcc"
>
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108731 "isa_tms320.tcc"
>::OpRPTS_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108739 "isa_tms320.tcc"
>(code, addr, "RPTS_reg")
{
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108758 "isa_tms320.tcc"
>
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108767 "isa_tms320.tcc"
>::OpRPTS_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108775 "isa_tms320.tcc"
>(code, addr, "RPTS_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108794 "isa_tms320.tcc"
>
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108803 "isa_tms320.tcc"
>::OpRPTS_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108811 "isa_tms320.tcc"
>(code, addr, "RPTS_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108832 "isa_tms320.tcc"
>
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 108837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108841 "isa_tms320.tcc"
>::OpRPTS_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108849 "isa_tms320.tcc"
>(code, addr, "RPTS_imm")
{
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108868 "isa_tms320.tcc"
>
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108877 "isa_tms320.tcc"
>::OpSWI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108885 "isa_tms320.tcc"
>(code, addr, "SWI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108896 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108903 "isa_tms320.tcc"
>
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 108908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108912 "isa_tms320.tcc"
>::OpTRAPcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108920 "isa_tms320.tcc"
>(code, addr, "TRAPcond")
{
	cond = ((code >> 16) & 0x1f);
	n = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108940 "isa_tms320.tcc"
>
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 108945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108949 "isa_tms320.tcc"
>::OpIDLE2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108953 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108957 "isa_tms320.tcc"
>(code, addr, "IDLE2")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108975 "isa_tms320.tcc"
>
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 108980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108984 "isa_tms320.tcc"
>::OpLOPOWER(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108992 "isa_tms320.tcc"
>(code, addr, "LOPOWER")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 109000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109010 "isa_tms320.tcc"
>
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 109015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109019 "isa_tms320.tcc"
>::OpMAXSPEED(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109027 "isa_tms320.tcc"
>(code, addr, "MAXSPEED")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 109035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109045 "isa_tms320.tcc"
>
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109054 "isa_tms320.tcc"
>::OpLDFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109062 "isa_tms320.tcc"
>(code, addr, "LDFI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109082 "isa_tms320.tcc"
>
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109091 "isa_tms320.tcc"
>::OpLDFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109099 "isa_tms320.tcc"
>(code, addr, "LDFI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109121 "isa_tms320.tcc"
>
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109130 "isa_tms320.tcc"
>::OpLDII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109138 "isa_tms320.tcc"
>(code, addr, "LDII_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109155 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109158 "isa_tms320.tcc"
>
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109167 "isa_tms320.tcc"
>::OpLDII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109175 "isa_tms320.tcc"
>(code, addr, "LDII_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109197 "isa_tms320.tcc"
>
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109206 "isa_tms320.tcc"
>::OpSIGI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109214 "isa_tms320.tcc"
>(code, addr, "SIGI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 109222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109232 "isa_tms320.tcc"
>
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109241 "isa_tms320.tcc"
>::OpSTFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109249 "isa_tms320.tcc"
>(code, addr, "STFI_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109269 "isa_tms320.tcc"
>
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109278 "isa_tms320.tcc"
>::OpSTFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109286 "isa_tms320.tcc"
>(code, addr, "STFI_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109308 "isa_tms320.tcc"
>
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109317 "isa_tms320.tcc"
>::OpSTII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109325 "isa_tms320.tcc"
>(code, addr, "STII_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109345 "isa_tms320.tcc"
>
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109354 "isa_tms320.tcc"
>::OpSTII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109362 "isa_tms320.tcc"
>(code, addr, "STII_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109384 "isa_tms320.tcc"
>
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109393 "isa_tms320.tcc"
>::OpABSF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109401 "isa_tms320.tcc"
>(code, addr, "ABSF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109425 "isa_tms320.tcc"
>
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109434 "isa_tms320.tcc"
>::OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109442 "isa_tms320.tcc"
>(code, addr, "ABSF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109465 "isa_tms320.tcc"
>
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109474 "isa_tms320.tcc"
>::OpABSI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109482 "isa_tms320.tcc"
>(code, addr, "ABSI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109506 "isa_tms320.tcc"
>
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109515 "isa_tms320.tcc"
>::OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109523 "isa_tms320.tcc"
>(code, addr, "ABSI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109546 "isa_tms320.tcc"
>
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109555 "isa_tms320.tcc"
>::OpADDF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109563 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109588 "isa_tms320.tcc"
>
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109597 "isa_tms320.tcc"
>::OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109605 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109619 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109629 "isa_tms320.tcc"
>
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109638 "isa_tms320.tcc"
>::OpADDI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109646 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109671 "isa_tms320.tcc"
>
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109680 "isa_tms320.tcc"
>::OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109688 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109712 "isa_tms320.tcc"
>
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109721 "isa_tms320.tcc"
>::OpAND3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109729 "isa_tms320.tcc"
>(code, addr, "AND3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109754 "isa_tms320.tcc"
>
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109763 "isa_tms320.tcc"
>::OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109771 "isa_tms320.tcc"
>(code, addr, "AND3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109795 "isa_tms320.tcc"
>
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109804 "isa_tms320.tcc"
>::OpASH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109812 "isa_tms320.tcc"
>(code, addr, "ASH3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109837 "isa_tms320.tcc"
>
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109846 "isa_tms320.tcc"
>::OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109854 "isa_tms320.tcc"
>(code, addr, "ASH3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109878 "isa_tms320.tcc"
>
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109887 "isa_tms320.tcc"
>::OpFIX_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109891 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109895 "isa_tms320.tcc"
>(code, addr, "FIX_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109919 "isa_tms320.tcc"
>
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109928 "isa_tms320.tcc"
>::OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109936 "isa_tms320.tcc"
>(code, addr, "FIX_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109959 "isa_tms320.tcc"
>
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109968 "isa_tms320.tcc"
>::OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109976 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110000 "isa_tms320.tcc"
>
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110009 "isa_tms320.tcc"
>::OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110017 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110040 "isa_tms320.tcc"
>
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110049 "isa_tms320.tcc"
>::OpLDF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110057 "isa_tms320.tcc"
>(code, addr, "LDF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110081 "isa_tms320.tcc"
>
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110090 "isa_tms320.tcc"
>::OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110098 "isa_tms320.tcc"
>(code, addr, "LDF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110121 "isa_tms320.tcc"
>
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110130 "isa_tms320.tcc"
>::OpLDI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110138 "isa_tms320.tcc"
>(code, addr, "LDI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110162 "isa_tms320.tcc"
>
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110171 "isa_tms320.tcc"
>::OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110179 "isa_tms320.tcc"
>(code, addr, "LDI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110202 "isa_tms320.tcc"
>
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110211 "isa_tms320.tcc"
>::OpLSH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110219 "isa_tms320.tcc"
>(code, addr, "LSH3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110244 "isa_tms320.tcc"
>
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110253 "isa_tms320.tcc"
>::OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110261 "isa_tms320.tcc"
>(code, addr, "LSH3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110285 "isa_tms320.tcc"
>
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110294 "isa_tms320.tcc"
>::OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110302 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110327 "isa_tms320.tcc"
>
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110336 "isa_tms320.tcc"
>::OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110344 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110368 "isa_tms320.tcc"
>
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110377 "isa_tms320.tcc"
>::OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110385 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110410 "isa_tms320.tcc"
>
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110419 "isa_tms320.tcc"
>::OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110427 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110451 "isa_tms320.tcc"
>
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110460 "isa_tms320.tcc"
>::OpNEGF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110468 "isa_tms320.tcc"
>(code, addr, "NEGF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110492 "isa_tms320.tcc"
>
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110501 "isa_tms320.tcc"
>::OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110509 "isa_tms320.tcc"
>(code, addr, "NEGF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110532 "isa_tms320.tcc"
>
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110541 "isa_tms320.tcc"
>::OpNEGI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110549 "isa_tms320.tcc"
>(code, addr, "NEGI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110573 "isa_tms320.tcc"
>
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110582 "isa_tms320.tcc"
>::OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110590 "isa_tms320.tcc"
>(code, addr, "NEGI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110613 "isa_tms320.tcc"
>
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110622 "isa_tms320.tcc"
>::OpNOT_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110630 "isa_tms320.tcc"
>(code, addr, "NOT_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110654 "isa_tms320.tcc"
>
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110663 "isa_tms320.tcc"
>::OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110671 "isa_tms320.tcc"
>(code, addr, "NOT_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110684 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110694 "isa_tms320.tcc"
>
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110703 "isa_tms320.tcc"
>::OpOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110711 "isa_tms320.tcc"
>(code, addr, "OR3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110736 "isa_tms320.tcc"
>
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110745 "isa_tms320.tcc"
>::OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110753 "isa_tms320.tcc"
>(code, addr, "OR3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110777 "isa_tms320.tcc"
>
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110786 "isa_tms320.tcc"
>::OpSTF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110794 "isa_tms320.tcc"
>(code, addr, "STF_STF")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110818 "isa_tms320.tcc"
>
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110827 "isa_tms320.tcc"
>::OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110835 "isa_tms320.tcc"
>(code, addr, "STF_STF_ext")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	dst2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110851 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110855 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110858 "isa_tms320.tcc"
>
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110867 "isa_tms320.tcc"
>::OpSTI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110875 "isa_tms320.tcc"
>(code, addr, "STI_STI")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110899 "isa_tms320.tcc"
>
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110908 "isa_tms320.tcc"
>::OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110916 "isa_tms320.tcc"
>(code, addr, "STI_STI_ext")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	dst2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110939 "isa_tms320.tcc"
>
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110948 "isa_tms320.tcc"
>::OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110956 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110978 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110981 "isa_tms320.tcc"
>
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110990 "isa_tms320.tcc"
>::OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110998 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111022 "isa_tms320.tcc"
>
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111031 "isa_tms320.tcc"
>::OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111039 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111064 "isa_tms320.tcc"
>
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111073 "isa_tms320.tcc"
>::OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111081 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111105 "isa_tms320.tcc"
>
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111114 "isa_tms320.tcc"
>::OpXOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111122 "isa_tms320.tcc"
>(code, addr, "XOR3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111147 "isa_tms320.tcc"
>
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111156 "isa_tms320.tcc"
>::OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111164 "isa_tms320.tcc"
>(code, addr, "XOR3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111178 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111181 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111188 "isa_tms320.tcc"
>
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 111193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111197 "isa_tms320.tcc"
>::OpLDF_LDF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111205 "isa_tms320.tcc"
>(code, addr, "LDF_LDF")
{
	dst2 = ((code >> 22) & 0x7);
	dst1 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111229 "isa_tms320.tcc"
>
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111238 "isa_tms320.tcc"
>::OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111246 "isa_tms320.tcc"
>(code, addr, "LDF_LDF_ext")
{
	dst2 = ((code >> 22) & 0x7);
	dst1 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111269 "isa_tms320.tcc"
>
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111278 "isa_tms320.tcc"
>::OpLDI_LDI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111286 "isa_tms320.tcc"
>(code, addr, "LDI_LDI")
{
	dst2 = ((code >> 22) & 0x7);
	dst1 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111310 "isa_tms320.tcc"
>
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111319 "isa_tms320.tcc"
>::OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111327 "isa_tms320.tcc"
>(code, addr, "LDI_LDI_ext")
{
	dst2 = ((code >> 22) & 0x7);
	dst1 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111350 "isa_tms320.tcc"
>
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 111355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111359 "isa_tms320.tcc"
>::OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111367 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111394 "isa_tms320.tcc"
>
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111403 "isa_tms320.tcc"
>::OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111411 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111426 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111436 "isa_tms320.tcc"
>
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 111441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111445 "isa_tms320.tcc"
>::OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111453 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111473 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111480 "isa_tms320.tcc"
>
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111489 "isa_tms320.tcc"
>::OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111497 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111522 "isa_tms320.tcc"
>
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 111527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111531 "isa_tms320.tcc"
>::OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111539 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111566 "isa_tms320.tcc"
>
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111575 "isa_tms320.tcc"
>::OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111579 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111583 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111605 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111608 "isa_tms320.tcc"
>
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 111613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111617 "isa_tms320.tcc"
>::OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111625 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111652 "isa_tms320.tcc"
>
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111661 "isa_tms320.tcc"
>::OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111669 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111684 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111694 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 111699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111703 "isa_tms320.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 111714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111724 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 111729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111733 "isa_tms320.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 45 "isa/tms320.isa"
class
#line 111744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111754 "isa_tms320.tcc"
>
DecodeTableEntry<
#line 45 "isa/tms320.isa"
CONFIG
#line 111759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111763 "isa_tms320.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111771 "isa_tms320.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 45 "isa/tms320.isa"
class
#line 111782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111792 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 111797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111801 "isa_tms320.tcc"
>::Decoder()
: is_little_endian( true ), mru_page( 0 )
{
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111809 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111813 "isa_tms320.tcc"
	>(0x8c00e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111817 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111821 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111826 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111830 "isa_tms320.tcc"
	>(0x8c000000UL, 0xfc000000UL, DecodeOpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111834 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111838 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111843 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111847 "isa_tms320.tcc"
	>(0x8800e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111851 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111855 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111860 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111864 "isa_tms320.tcc"
	>(0x88000000UL, 0xfc000000UL, DecodeOpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111868 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111872 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111877 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111881 "isa_tms320.tcc"
	>(0x8400e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111885 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111889 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111894 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111898 "isa_tms320.tcc"
	>(0x84000000UL, 0xfc000000UL, DecodeOpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111902 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111906 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111911 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111915 "isa_tms320.tcc"
	>(0x8000e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111919 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111923 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111928 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111932 "isa_tms320.tcc"
	>(0x80000000UL, 0xfc000000UL, DecodeOpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111936 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111940 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111945 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111949 "isa_tms320.tcc"
	>(0xc60000e0UL, 0xfe0700e0UL, DecodeOpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111953 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111957 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111962 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111966 "isa_tms320.tcc"
	>(0xc6000000UL, 0xfe070000UL, DecodeOpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111970 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111974 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111979 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111983 "isa_tms320.tcc"
	>(0xc40000e0UL, 0xfe0700e0UL, DecodeOpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111987 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111991 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111996 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112000 "isa_tms320.tcc"
	>(0xc4000000UL, 0xfe070000UL, DecodeOpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112004 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112008 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112013 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112017 "isa_tms320.tcc"
	>(0xee0000e0UL, 0xfe0000e0UL, DecodeOpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112021 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112025 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112030 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112034 "isa_tms320.tcc"
	>(0xee000000UL, 0xfe000000UL, DecodeOpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112038 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112042 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112047 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112051 "isa_tms320.tcc"
	>(0xec0000e0UL, 0xfe0000e0UL, DecodeOpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112055 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112059 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112064 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112068 "isa_tms320.tcc"
	>(0xec000000UL, 0xfe000000UL, DecodeOpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112072 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112076 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112081 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112085 "isa_tms320.tcc"
	>(0xea0000e0UL, 0xfe0000e0UL, DecodeOpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112089 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112093 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112098 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112102 "isa_tms320.tcc"
	>(0xea000000UL, 0xfe000000UL, DecodeOpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112106 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112110 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112115 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112119 "isa_tms320.tcc"
	>(0xc20000e0UL, 0xfe3800e0UL, DecodeOpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112123 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112127 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112132 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112136 "isa_tms320.tcc"
	>(0xc2000000UL, 0xfe380000UL, DecodeOpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112140 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112144 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112149 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112153 "isa_tms320.tcc"
	>(0xc00000e0UL, 0xfe3800e0UL, DecodeOpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112157 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112161 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112166 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112170 "isa_tms320.tcc"
	>(0xc0000000UL, 0xfe380000UL, DecodeOpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112174 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112178 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112183 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112187 "isa_tms320.tcc"
	>(0xe80000e0UL, 0xfe0000e0UL, DecodeOpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112191 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112195 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112200 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112204 "isa_tms320.tcc"
	>(0xe8000000UL, 0xfe000000UL, DecodeOpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112208 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112212 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112217 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112221 "isa_tms320.tcc"
	>(0xe60000e0UL, 0xfe3800e0UL, DecodeOpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112225 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112229 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112234 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112238 "isa_tms320.tcc"
	>(0xe6000000UL, 0xfe380000UL, DecodeOpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112242 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112246 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112251 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112255 "isa_tms320.tcc"
	>(0xe40000e0UL, 0xfe3800e0UL, DecodeOpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112259 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112263 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112268 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112272 "isa_tms320.tcc"
	>(0xe4000000UL, 0xfe380000UL, DecodeOpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112276 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112280 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112285 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112289 "isa_tms320.tcc"
	>(0xe20000e0UL, 0xfe3800e0UL, DecodeOpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112293 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112297 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112302 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112306 "isa_tms320.tcc"
	>(0xe2000000UL, 0xfe380000UL, DecodeOpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112310 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112314 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112319 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112323 "isa_tms320.tcc"
	>(0xe00000e0UL, 0xfe0000e0UL, DecodeOpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112327 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112331 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112336 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112340 "isa_tms320.tcc"
	>(0xe0000000UL, 0xfe000000UL, DecodeOpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112344 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112348 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112353 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112357 "isa_tms320.tcc"
	>(0xde0000e0UL, 0xfe0000e0UL, DecodeOpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112361 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112365 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112370 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112374 "isa_tms320.tcc"
	>(0xde000000UL, 0xfe000000UL, DecodeOpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112378 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112382 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112387 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112391 "isa_tms320.tcc"
	>(0xdc0000e0UL, 0xfe0000e0UL, DecodeOpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112395 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112399 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112404 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112408 "isa_tms320.tcc"
	>(0xdc000000UL, 0xfe000000UL, DecodeOpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112412 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112416 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112421 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112425 "isa_tms320.tcc"
	>(0xda0000e0UL, 0xfe3800e0UL, DecodeOpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112429 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112433 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112438 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112442 "isa_tms320.tcc"
	>(0xda000000UL, 0xfe380000UL, DecodeOpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112446 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112450 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112455 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112459 "isa_tms320.tcc"
	>(0xd80000e0UL, 0xfe3800e0UL, DecodeOpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112463 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112467 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112472 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112476 "isa_tms320.tcc"
	>(0xd8000000UL, 0xfe380000UL, DecodeOpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112480 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112484 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112489 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112493 "isa_tms320.tcc"
	>(0xd60000e0UL, 0xfe3800e0UL, DecodeOpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112497 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112501 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112506 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112510 "isa_tms320.tcc"
	>(0xd6000000UL, 0xfe380000UL, DecodeOpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112514 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112518 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112523 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112527 "isa_tms320.tcc"
	>(0xd40000e0UL, 0xfe3800e0UL, DecodeOpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112531 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112535 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112540 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112544 "isa_tms320.tcc"
	>(0xd4000000UL, 0xfe380000UL, DecodeOpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112548 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112552 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112557 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112561 "isa_tms320.tcc"
	>(0xd20000e0UL, 0xfe0000e0UL, DecodeOpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112565 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112569 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112574 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112578 "isa_tms320.tcc"
	>(0xd2000000UL, 0xfe000000UL, DecodeOpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112582 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112586 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112591 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112595 "isa_tms320.tcc"
	>(0xd00000e0UL, 0xfe0000e0UL, DecodeOpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112599 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112603 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112608 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112612 "isa_tms320.tcc"
	>(0xd0000000UL, 0xfe000000UL, DecodeOpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112616 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112620 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112625 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112629 "isa_tms320.tcc"
	>(0xce0000e0UL, 0xfe0000e0UL, DecodeOpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112633 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112637 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112642 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112646 "isa_tms320.tcc"
	>(0xce000000UL, 0xfe000000UL, DecodeOpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112650 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112654 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112659 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112663 "isa_tms320.tcc"
	>(0xcc0000e0UL, 0xfe0000e0UL, DecodeOpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112667 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112671 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112676 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112680 "isa_tms320.tcc"
	>(0xcc000000UL, 0xfe000000UL, DecodeOpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112684 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112688 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112693 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112697 "isa_tms320.tcc"
	>(0xca0000e0UL, 0xfe3800e0UL, DecodeOpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112701 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112705 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112710 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112714 "isa_tms320.tcc"
	>(0xca000000UL, 0xfe380000UL, DecodeOpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112718 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112722 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112727 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112731 "isa_tms320.tcc"
	>(0xc80000e0UL, 0xfe3800e0UL, DecodeOpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112735 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112739 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112744 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112748 "isa_tms320.tcc"
	>(0xc8000000UL, 0xfe380000UL, DecodeOpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112752 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112756 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112761 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112765 "isa_tms320.tcc"
	>(0x15c00000UL, 0xffe00000UL, DecodeOpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112769 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112773 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112778 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112782 "isa_tms320.tcc"
	>(0x15a00000UL, 0xffe00000UL, DecodeOpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112786 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112790 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112795 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112799 "isa_tms320.tcc"
	>(0x14c00000UL, 0xffe00000UL, DecodeOpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112803 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112807 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112812 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112816 "isa_tms320.tcc"
	>(0x14a00000UL, 0xffe00000UL, DecodeOpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112820 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112824 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112829 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112833 "isa_tms320.tcc"
	>(0x16000000UL, 0xffffffffUL, DecodeOpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112837 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112841 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112846 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112850 "isa_tms320.tcc"
	>(0x8c00000UL, 0xffe00000UL, DecodeOpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112854 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112858 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112863 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112867 "isa_tms320.tcc"
	>(0x8a00000UL, 0xffe00000UL, DecodeOpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112871 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112875 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112880 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112884 "isa_tms320.tcc"
	>(0x7c00000UL, 0xffe00000UL, DecodeOpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112888 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112892 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112897 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112901 "isa_tms320.tcc"
	>(0x7a00000UL, 0xffe00000UL, DecodeOpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112905 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112909 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112918 "isa_tms320.tcc"
	>(0x10800000UL, 0xffffffffUL, DecodeOpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112922 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112926 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112931 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112935 "isa_tms320.tcc"
	>(0x10800001UL, 0xffffffffUL, DecodeOpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112939 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112943 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112948 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112952 "isa_tms320.tcc"
	>(0x6000001UL, 0xffffffffUL, DecodeOpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112956 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112960 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112965 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112969 "isa_tms320.tcc"
	>(0x74000020UL, 0xffe0ffe0UL, DecodeOpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112973 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112977 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112982 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112986 "isa_tms320.tcc"
	>(0x66000000UL, 0xffffffffUL, DecodeOpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112990 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112994 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112999 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113003 "isa_tms320.tcc"
	>(0x13fb0000UL, 0xffff0000UL, DecodeOpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113007 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113011 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113016 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113020 "isa_tms320.tcc"
	>(0x13db0000UL, 0xffff0000UL, DecodeOpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113024 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113028 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113033 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113037 "isa_tms320.tcc"
	>(0x13bb0000UL, 0xffff0000UL, DecodeOpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113041 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113045 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113050 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113054 "isa_tms320.tcc"
	>(0x139b0000UL, 0xffffffe0UL, DecodeOpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113058 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113062 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113067 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113071 "isa_tms320.tcc"
	>(0x64000000UL, 0xff000000UL, DecodeOpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113075 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113079 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113084 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113088 "isa_tms320.tcc"
	>(0x78800000UL, 0xffe0ffffUL, DecodeOpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113092 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113096 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113101 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113105 "isa_tms320.tcc"
	>(0x78000000UL, 0xffe0ffffUL, DecodeOpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113109 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113113 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113118 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113122 "isa_tms320.tcc"
	>(0xcc00000UL, 0xffff0000UL, DecodeOpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113126 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113130 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113135 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113139 "isa_tms320.tcc"
	>(0xc800000UL, 0xffffffe0UL, DecodeOpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113143 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113147 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113152 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113156 "isa_tms320.tcc"
	>(0x6000000UL, 0xffffffffUL, DecodeOpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113160 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113164 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113169 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113173 "isa_tms320.tcc"
	>(0x1b400000UL, 0xffff0000UL, DecodeOpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113177 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113181 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113186 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113190 "isa_tms320.tcc"
	>(0x1b200000UL, 0xffff0000UL, DecodeOpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113194 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113198 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113203 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113207 "isa_tms320.tcc"
	>(0x6e200000UL, 0xfe200000UL, DecodeOpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113211 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113215 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113220 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113224 "isa_tms320.tcc"
	>(0x6c200000UL, 0xfe20ffe0UL, DecodeOpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113228 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113232 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113237 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113241 "isa_tms320.tcc"
	>(0x6e000000UL, 0xfe200000UL, DecodeOpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113245 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113249 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113254 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113258 "isa_tms320.tcc"
	>(0x6c000000UL, 0xfe20ffe0UL, DecodeOpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113262 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113266 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113275 "isa_tms320.tcc"
	>(0x72000000UL, 0xffe00000UL, DecodeOpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113279 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113283 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113288 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113292 "isa_tms320.tcc"
	>(0x70000000UL, 0xffe0ffe0UL, DecodeOpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113296 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113300 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113305 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113309 "isa_tms320.tcc"
	>(0x62000000UL, 0xff000000UL, DecodeOpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113313 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113317 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113322 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113326 "isa_tms320.tcc"
	>(0x61000000UL, 0xff000000UL, DecodeOpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113330 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113334 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113339 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113343 "isa_tms320.tcc"
	>(0x60000000UL, 0xff000000UL, DecodeOpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113347 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113351 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113356 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113360 "isa_tms320.tcc"
	>(0x6a200000UL, 0xffe00000UL, DecodeOpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113364 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113368 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113373 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113377 "isa_tms320.tcc"
	>(0x68200000UL, 0xffe0ffe0UL, DecodeOpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113381 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113385 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113390 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113394 "isa_tms320.tcc"
	>(0x6a000000UL, 0xffe00000UL, DecodeOpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113398 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113402 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113407 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113411 "isa_tms320.tcc"
	>(0x68000000UL, 0xffe0ffe0UL, DecodeOpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113415 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113419 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113424 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113428 "isa_tms320.tcc"
	>(0x28600000UL, 0xffe00000UL, DecodeOpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113432 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113436 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113441 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113445 "isa_tms320.tcc"
	>(0x28400000UL, 0xffe0e000UL, DecodeOpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113449 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113453 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113462 "isa_tms320.tcc"
	>(0x28200000UL, 0xffe000e0UL, DecodeOpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113466 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113470 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113479 "isa_tms320.tcc"
	>(0x28000000UL, 0xffe0e0e0UL, DecodeOpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113483 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113487 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113492 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113496 "isa_tms320.tcc"
	>(0x27e00000UL, 0xffff0000UL, DecodeOpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113500 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113504 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113513 "isa_tms320.tcc"
	>(0x27c00000UL, 0xffffe000UL, DecodeOpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113517 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113521 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113526 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113530 "isa_tms320.tcc"
	>(0x27a00000UL, 0xffff00e0UL, DecodeOpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113534 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113538 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113543 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113547 "isa_tms320.tcc"
	>(0x27800000UL, 0xffffe0e0UL, DecodeOpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113551 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113555 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113560 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113564 "isa_tms320.tcc"
	>(0x27600000UL, 0xffe00000UL, DecodeOpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113568 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113572 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113577 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113581 "isa_tms320.tcc"
	>(0x27400000UL, 0xffe0e000UL, DecodeOpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113585 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113589 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113594 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113598 "isa_tms320.tcc"
	>(0x27200000UL, 0xffe000e0UL, DecodeOpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113602 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113606 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113611 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113615 "isa_tms320.tcc"
	>(0x27000000UL, 0xffe0e0e0UL, DecodeOpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113619 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113623 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113632 "isa_tms320.tcc"
	>(0x26e00000UL, 0xfff80000UL, DecodeOpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113636 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113640 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113645 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113649 "isa_tms320.tcc"
	>(0x26c00000UL, 0xfff8f800UL, DecodeOpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113653 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113657 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113662 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113666 "isa_tms320.tcc"
	>(0x26a00000UL, 0xfff800f8UL, DecodeOpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113670 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113674 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113679 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113683 "isa_tms320.tcc"
	>(0x26800000UL, 0xfff8f8f8UL, DecodeOpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113687 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113691 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113696 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113700 "isa_tms320.tcc"
	>(0x26600000UL, 0xffe00000UL, DecodeOpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113704 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113708 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113713 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113717 "isa_tms320.tcc"
	>(0x26400000UL, 0xffe0e000UL, DecodeOpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113721 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113725 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113730 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113734 "isa_tms320.tcc"
	>(0x26200000UL, 0xffe000e0UL, DecodeOpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113738 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113742 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113747 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113751 "isa_tms320.tcc"
	>(0x26000000UL, 0xffe0e0e0UL, DecodeOpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113755 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113759 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113764 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113768 "isa_tms320.tcc"
	>(0x25e00000UL, 0xffe00000UL, DecodeOpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113772 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113776 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113781 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113785 "isa_tms320.tcc"
	>(0x25c00000UL, 0xffe0e000UL, DecodeOpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113789 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113793 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113798 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113802 "isa_tms320.tcc"
	>(0x25a00000UL, 0xffe000e0UL, DecodeOpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113806 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113810 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113815 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113819 "isa_tms320.tcc"
	>(0x25800000UL, 0xffe0e0e0UL, DecodeOpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113823 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113827 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113832 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113836 "isa_tms320.tcc"
	>(0x25600000UL, 0xffe00000UL, DecodeOpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113840 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113844 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113849 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113853 "isa_tms320.tcc"
	>(0x25400000UL, 0xffe0e000UL, DecodeOpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113857 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113861 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113866 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113870 "isa_tms320.tcc"
	>(0x25200000UL, 0xffe000e0UL, DecodeOpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113874 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113878 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113883 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113887 "isa_tms320.tcc"
	>(0x25000000UL, 0xffe0e0e0UL, DecodeOpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113891 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113895 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113900 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113904 "isa_tms320.tcc"
	>(0x24e00000UL, 0xfff80000UL, DecodeOpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113908 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113912 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113917 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113921 "isa_tms320.tcc"
	>(0x24c00000UL, 0xfff8f800UL, DecodeOpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113925 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113929 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113934 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113938 "isa_tms320.tcc"
	>(0x24a00000UL, 0xfff800f8UL, DecodeOpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113942 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113946 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113951 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113955 "isa_tms320.tcc"
	>(0x24800000UL, 0xfff8f8f8UL, DecodeOpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113959 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113963 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113968 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113972 "isa_tms320.tcc"
	>(0x24600000UL, 0xffe00000UL, DecodeOpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113976 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113980 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113985 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113989 "isa_tms320.tcc"
	>(0x24400000UL, 0xffe0e000UL, DecodeOpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113993 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113997 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114002 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114006 "isa_tms320.tcc"
	>(0x24200000UL, 0xffe000e0UL, DecodeOpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114010 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114014 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114019 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114023 "isa_tms320.tcc"
	>(0x24000000UL, 0xffe0e0e0UL, DecodeOpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114027 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114031 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114036 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114040 "isa_tms320.tcc"
	>(0x23e00000UL, 0xffff0000UL, DecodeOpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114044 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114048 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114053 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114057 "isa_tms320.tcc"
	>(0x23c00000UL, 0xffffe000UL, DecodeOpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114061 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114065 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114074 "isa_tms320.tcc"
	>(0x23a00000UL, 0xffff00e0UL, DecodeOpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114078 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114082 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114091 "isa_tms320.tcc"
	>(0x23800000UL, 0xffffe0e0UL, DecodeOpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114095 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114099 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114104 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114108 "isa_tms320.tcc"
	>(0x23600000UL, 0xffff0000UL, DecodeOpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114112 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114116 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114121 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114125 "isa_tms320.tcc"
	>(0x23400000UL, 0xfffff800UL, DecodeOpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114129 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114133 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114142 "isa_tms320.tcc"
	>(0x23200000UL, 0xffff00f8UL, DecodeOpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114146 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114150 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114155 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114159 "isa_tms320.tcc"
	>(0x23000000UL, 0xfffff8f8UL, DecodeOpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114163 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114167 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114172 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114176 "isa_tms320.tcc"
	>(0x22e00000UL, 0xffe00000UL, DecodeOpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114180 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114184 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114189 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114193 "isa_tms320.tcc"
	>(0x22c00000UL, 0xffe0e000UL, DecodeOpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114197 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114201 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114206 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114210 "isa_tms320.tcc"
	>(0x22a00000UL, 0xffe000e0UL, DecodeOpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114214 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114218 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114227 "isa_tms320.tcc"
	>(0x22800000UL, 0xffe0e0e0UL, DecodeOpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114231 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114235 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114240 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114244 "isa_tms320.tcc"
	>(0x22600000UL, 0xffe00000UL, DecodeOpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114248 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114252 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114257 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114261 "isa_tms320.tcc"
	>(0x22400000UL, 0xffe0e000UL, DecodeOpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114265 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114269 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114274 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114278 "isa_tms320.tcc"
	>(0x22200000UL, 0xffe000e0UL, DecodeOpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114282 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114286 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114291 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114295 "isa_tms320.tcc"
	>(0x22000000UL, 0xffe0e0e0UL, DecodeOpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114299 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114303 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114312 "isa_tms320.tcc"
	>(0x21e00000UL, 0xffe00000UL, DecodeOpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114316 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114320 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114325 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114329 "isa_tms320.tcc"
	>(0x21c00000UL, 0xffe0e000UL, DecodeOpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114333 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114337 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114342 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114346 "isa_tms320.tcc"
	>(0x21a00000UL, 0xffe000e0UL, DecodeOpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114350 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114354 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114359 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114363 "isa_tms320.tcc"
	>(0x21800000UL, 0xffe0e0e0UL, DecodeOpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114367 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114371 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114380 "isa_tms320.tcc"
	>(0x21600000UL, 0xffe00000UL, DecodeOpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114384 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114388 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114393 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114397 "isa_tms320.tcc"
	>(0x21400000UL, 0xffe0e000UL, DecodeOpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114405 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114410 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114414 "isa_tms320.tcc"
	>(0x21200000UL, 0xffe000e0UL, DecodeOpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114418 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114422 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114427 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114431 "isa_tms320.tcc"
	>(0x21000000UL, 0xffe0e0e0UL, DecodeOpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114435 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114439 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114444 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114448 "isa_tms320.tcc"
	>(0x20e00000UL, 0xfff80000UL, DecodeOpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114456 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114461 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114465 "isa_tms320.tcc"
	>(0x20c00000UL, 0xfff8f800UL, DecodeOpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114469 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114473 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114478 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114482 "isa_tms320.tcc"
	>(0x20a00000UL, 0xfff800f8UL, DecodeOpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114486 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114490 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114495 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114499 "isa_tms320.tcc"
	>(0x20800000UL, 0xfff8f8f8UL, DecodeOpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114503 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114507 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114512 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114516 "isa_tms320.tcc"
	>(0x20600000UL, 0xffe00000UL, DecodeOpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114520 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114524 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114529 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114533 "isa_tms320.tcc"
	>(0x20400000UL, 0xffe0e000UL, DecodeOpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114537 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114541 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114546 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114550 "isa_tms320.tcc"
	>(0x20200000UL, 0xffe000e0UL, DecodeOpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114554 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114558 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114567 "isa_tms320.tcc"
	>(0x20000000UL, 0xffe0e0e0UL, DecodeOpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114571 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114575 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114580 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114584 "isa_tms320.tcc"
	>(0x1ae00000UL, 0xffe00000UL, DecodeOpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114588 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114592 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114597 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114601 "isa_tms320.tcc"
	>(0x1ac00000UL, 0xffe00000UL, DecodeOpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114605 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114609 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114614 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114618 "isa_tms320.tcc"
	>(0x1aa00000UL, 0xffe00000UL, DecodeOpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114622 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114626 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114631 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114635 "isa_tms320.tcc"
	>(0x1a800000UL, 0xffe0ffe0UL, DecodeOpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114639 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114643 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114648 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114652 "isa_tms320.tcc"
	>(0x1a600000UL, 0xffe00000UL, DecodeOpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114656 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114660 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114665 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114669 "isa_tms320.tcc"
	>(0x1a400000UL, 0xffe00000UL, DecodeOpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114673 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114677 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114682 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114686 "isa_tms320.tcc"
	>(0x1a200000UL, 0xffe00000UL, DecodeOpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114690 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114694 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114703 "isa_tms320.tcc"
	>(0x1a000000UL, 0xffe0ffe0UL, DecodeOpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114707 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114711 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114716 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114720 "isa_tms320.tcc"
	>(0x19e00000UL, 0xffe00000UL, DecodeOpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114724 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114728 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114733 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114737 "isa_tms320.tcc"
	>(0x19c00000UL, 0xffe00000UL, DecodeOpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114741 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114745 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114750 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114754 "isa_tms320.tcc"
	>(0x19a00000UL, 0xffe00000UL, DecodeOpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114758 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114762 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114767 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114771 "isa_tms320.tcc"
	>(0x19800000UL, 0xffe0ffe0UL, DecodeOpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114775 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114779 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114784 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114788 "isa_tms320.tcc"
	>(0x19600000UL, 0xfff80000UL, DecodeOpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114792 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114796 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114801 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114805 "isa_tms320.tcc"
	>(0x19400000UL, 0xfff80000UL, DecodeOpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114809 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114813 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114822 "isa_tms320.tcc"
	>(0x19200000UL, 0xfff80000UL, DecodeOpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114826 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114830 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114835 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114839 "isa_tms320.tcc"
	>(0x19000000UL, 0xfff8fff8UL, DecodeOpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114843 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114847 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114852 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114856 "isa_tms320.tcc"
	>(0x18e00000UL, 0xffe00000UL, DecodeOpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114860 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114864 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114869 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114873 "isa_tms320.tcc"
	>(0x18c00000UL, 0xffe00000UL, DecodeOpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114877 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114881 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114886 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114890 "isa_tms320.tcc"
	>(0x18a00000UL, 0xffe00000UL, DecodeOpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114894 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114898 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114903 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114907 "isa_tms320.tcc"
	>(0x18800000UL, 0xffe0ffe0UL, DecodeOpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114911 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114915 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114920 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114924 "isa_tms320.tcc"
	>(0x18600000UL, 0xffe00000UL, DecodeOpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114928 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114932 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114937 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114941 "isa_tms320.tcc"
	>(0x18400000UL, 0xffe00000UL, DecodeOpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114945 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114949 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114954 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114958 "isa_tms320.tcc"
	>(0x18200000UL, 0xffe00000UL, DecodeOpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114962 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114966 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114971 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114975 "isa_tms320.tcc"
	>(0x18000000UL, 0xffe0ffe0UL, DecodeOpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114979 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114983 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114992 "isa_tms320.tcc"
	>(0x17e00000UL, 0xfff80000UL, DecodeOpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114996 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115000 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115005 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115009 "isa_tms320.tcc"
	>(0x17c00000UL, 0xfff80000UL, DecodeOpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115013 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115017 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115022 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115026 "isa_tms320.tcc"
	>(0x17a00000UL, 0xfff80000UL, DecodeOpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115030 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115034 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115039 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115043 "isa_tms320.tcc"
	>(0x17800000UL, 0xfff8fff8UL, DecodeOpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115047 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115051 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115056 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115060 "isa_tms320.tcc"
	>(0x17600000UL, 0xffe00000UL, DecodeOpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115064 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115068 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115073 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115077 "isa_tms320.tcc"
	>(0x17400000UL, 0xffe00000UL, DecodeOpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115081 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115085 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115090 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115094 "isa_tms320.tcc"
	>(0x17200000UL, 0xffe00000UL, DecodeOpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115098 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115102 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115111 "isa_tms320.tcc"
	>(0x17000000UL, 0xffe0ffe0UL, DecodeOpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115115 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115119 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115128 "isa_tms320.tcc"
	>(0x16e00000UL, 0xffe00000UL, DecodeOpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115132 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115136 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115141 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115145 "isa_tms320.tcc"
	>(0x16c00000UL, 0xffe00000UL, DecodeOpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115149 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115153 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115158 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115162 "isa_tms320.tcc"
	>(0x16a00000UL, 0xffe00000UL, DecodeOpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115166 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115170 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115175 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115179 "isa_tms320.tcc"
	>(0x16800000UL, 0xffe0ffe0UL, DecodeOpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115183 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115187 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115192 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115196 "isa_tms320.tcc"
	>(0x1360ffffUL, 0xffe0ffffUL, DecodeOpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115200 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115204 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115209 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115213 "isa_tms320.tcc"
	>(0x12e0ffffUL, 0xffe0ffffUL, DecodeOpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115217 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115221 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115226 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115230 "isa_tms320.tcc"
	>(0x12600001UL, 0xffe0ffffUL, DecodeOpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115234 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115238 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115243 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115247 "isa_tms320.tcc"
	>(0x11e00001UL, 0xffe0ffffUL, DecodeOpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115251 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115255 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115260 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115264 "isa_tms320.tcc"
	>(0x11600000UL, 0xfff80000UL, DecodeOpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115268 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115272 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115277 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115281 "isa_tms320.tcc"
	>(0x11400000UL, 0xfff80000UL, DecodeOpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115285 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115289 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115294 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115298 "isa_tms320.tcc"
	>(0x11200000UL, 0xfff80000UL, DecodeOpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115302 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115306 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115315 "isa_tms320.tcc"
	>(0x11000000UL, 0xfff8fff8UL, DecodeOpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115319 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115323 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115328 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115332 "isa_tms320.tcc"
	>(0x10600000UL, 0xffe00000UL, DecodeOpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115336 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115340 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115345 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115349 "isa_tms320.tcc"
	>(0x10400000UL, 0xffe00000UL, DecodeOpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115353 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115357 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115362 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115366 "isa_tms320.tcc"
	>(0x10200000UL, 0xffe00000UL, DecodeOpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115370 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115374 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115379 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115383 "isa_tms320.tcc"
	>(0x10000000UL, 0xffe0ffe0UL, DecodeOpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115387 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115391 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115396 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115400 "isa_tms320.tcc"
	>(0xde00000UL, 0xffe00000UL, DecodeOpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115404 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115408 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115413 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115417 "isa_tms320.tcc"
	>(0xdc00000UL, 0xffe00000UL, DecodeOpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115421 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115425 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115430 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115434 "isa_tms320.tcc"
	>(0xda00000UL, 0xffe00000UL, DecodeOpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115438 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115442 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115447 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115451 "isa_tms320.tcc"
	>(0xd800000UL, 0xffe0ffe0UL, DecodeOpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115455 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115459 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115464 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115468 "isa_tms320.tcc"
	>(0xd600000UL, 0xfff80000UL, DecodeOpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115472 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115476 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115481 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115485 "isa_tms320.tcc"
	>(0xd400000UL, 0xfff80000UL, DecodeOpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115489 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115493 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115498 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115502 "isa_tms320.tcc"
	>(0xd200000UL, 0xfff80000UL, DecodeOpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115506 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115510 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115515 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115519 "isa_tms320.tcc"
	>(0xd000000UL, 0xfff8fff8UL, DecodeOpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115523 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115527 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115532 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115536 "isa_tms320.tcc"
	>(0xc600000UL, 0xffe00000UL, DecodeOpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115540 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115544 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115549 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115553 "isa_tms320.tcc"
	>(0xc400000UL, 0xffe00000UL, DecodeOpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115557 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115561 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115566 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115570 "isa_tms320.tcc"
	>(0xc200000UL, 0xffe00000UL, DecodeOpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115574 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115578 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115583 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115587 "isa_tms320.tcc"
	>(0xc000000UL, 0xffe0ffe0UL, DecodeOpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115591 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115595 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115600 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115604 "isa_tms320.tcc"
	>(0xbe00000UL, 0xfff80000UL, DecodeOpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115608 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115612 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115617 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115621 "isa_tms320.tcc"
	>(0xbc00000UL, 0xfff80000UL, DecodeOpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115625 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115629 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115634 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115638 "isa_tms320.tcc"
	>(0xba00000UL, 0xfff80000UL, DecodeOpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115642 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115646 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115651 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115655 "isa_tms320.tcc"
	>(0xb800000UL, 0xfff8fff8UL, DecodeOpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115659 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115663 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115668 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115672 "isa_tms320.tcc"
	>(0xb600000UL, 0xffe00000UL, DecodeOpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115676 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115680 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115685 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115689 "isa_tms320.tcc"
	>(0xb400000UL, 0xffe00000UL, DecodeOpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115693 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115697 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115702 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115706 "isa_tms320.tcc"
	>(0xb200000UL, 0xffe00000UL, DecodeOpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115710 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115714 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115719 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115723 "isa_tms320.tcc"
	>(0xb000000UL, 0xffe0ffe0UL, DecodeOpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115727 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115731 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115736 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115740 "isa_tms320.tcc"
	>(0xae00000UL, 0xffe00000UL, DecodeOpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115744 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115748 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115753 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115757 "isa_tms320.tcc"
	>(0xac00000UL, 0xffe00000UL, DecodeOpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115761 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115765 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115770 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115774 "isa_tms320.tcc"
	>(0xaa00000UL, 0xffe00000UL, DecodeOpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115778 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115782 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115787 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115791 "isa_tms320.tcc"
	>(0xa800000UL, 0xffe0ffe0UL, DecodeOpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115795 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115799 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115804 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115808 "isa_tms320.tcc"
	>(0xa600000UL, 0xfff80000UL, DecodeOpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115812 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115816 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115821 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115825 "isa_tms320.tcc"
	>(0xa400000UL, 0xfff80000UL, DecodeOpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115829 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115833 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115838 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115842 "isa_tms320.tcc"
	>(0xa200000UL, 0xfff80000UL, DecodeOpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115846 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115850 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115855 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115859 "isa_tms320.tcc"
	>(0xa000000UL, 0xfff8fff8UL, DecodeOpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115863 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115867 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115876 "isa_tms320.tcc"
	>(0x9e00000UL, 0xffe00000UL, DecodeOpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115880 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115884 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115889 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115893 "isa_tms320.tcc"
	>(0x9c00000UL, 0xffe00000UL, DecodeOpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115897 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115901 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115906 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115910 "isa_tms320.tcc"
	>(0x9a00000UL, 0xffe00000UL, DecodeOpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115918 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115923 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115927 "isa_tms320.tcc"
	>(0x9800000UL, 0xffe0ffe0UL, DecodeOpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115931 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115935 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115940 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115944 "isa_tms320.tcc"
	>(0x5e00000UL, 0xfff80000UL, DecodeOpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115948 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115952 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115957 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115961 "isa_tms320.tcc"
	>(0x5c00000UL, 0xfff80000UL, DecodeOpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115965 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115969 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115974 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115978 "isa_tms320.tcc"
	>(0x5a00000UL, 0xfff80000UL, DecodeOpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115982 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115986 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115991 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115995 "isa_tms320.tcc"
	>(0x5800000UL, 0xfff8ffe0UL, DecodeOpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115999 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116003 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116008 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116012 "isa_tms320.tcc"
	>(0x5600000UL, 0xffe00000UL, DecodeOpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116016 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116020 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116025 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116029 "isa_tms320.tcc"
	>(0x5400000UL, 0xffe00000UL, DecodeOpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116033 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116037 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116042 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116046 "isa_tms320.tcc"
	>(0x5200000UL, 0xffe00000UL, DecodeOpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116050 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116054 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116059 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116063 "isa_tms320.tcc"
	>(0x5000000UL, 0xffe0fff8UL, DecodeOpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116067 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116071 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116076 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116080 "isa_tms320.tcc"
	>(0x4e00000UL, 0xffe00000UL, DecodeOpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116084 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116088 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116093 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116097 "isa_tms320.tcc"
	>(0x4c00000UL, 0xffe00000UL, DecodeOpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116101 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116105 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116110 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116114 "isa_tms320.tcc"
	>(0x4a00000UL, 0xffe00000UL, DecodeOpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116118 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116122 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116127 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116131 "isa_tms320.tcc"
	>(0x4800000UL, 0xffe0ffe0UL, DecodeOpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116135 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116139 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116144 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116148 "isa_tms320.tcc"
	>(0x4600000UL, 0xfff80000UL, DecodeOpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116152 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116156 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116161 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116165 "isa_tms320.tcc"
	>(0x4400000UL, 0xfff80000UL, DecodeOpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116169 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116173 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116178 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116182 "isa_tms320.tcc"
	>(0x4200000UL, 0xfff80000UL, DecodeOpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116186 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116190 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116195 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116199 "isa_tms320.tcc"
	>(0x4000000UL, 0xfff8fff8UL, DecodeOpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116203 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116207 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116212 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116216 "isa_tms320.tcc"
	>(0x3e00000UL, 0xffe00000UL, DecodeOpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116220 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116224 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116229 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116233 "isa_tms320.tcc"
	>(0x3c00000UL, 0xffe00000UL, DecodeOpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116237 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116241 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116246 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116250 "isa_tms320.tcc"
	>(0x3a00000UL, 0xffe00000UL, DecodeOpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116254 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116258 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116263 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116267 "isa_tms320.tcc"
	>(0x3800000UL, 0xffe0ffe0UL, DecodeOpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116275 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116280 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116284 "isa_tms320.tcc"
	>(0x3600000UL, 0xffe00000UL, DecodeOpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116288 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116292 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116297 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116301 "isa_tms320.tcc"
	>(0x3400000UL, 0xffe00000UL, DecodeOpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116305 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116309 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116314 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116318 "isa_tms320.tcc"
	>(0x3200000UL, 0xffe00000UL, DecodeOpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116322 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116326 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116331 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116335 "isa_tms320.tcc"
	>(0x3000000UL, 0xffe0ffe0UL, DecodeOpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116339 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116343 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116348 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116352 "isa_tms320.tcc"
	>(0x2e00000UL, 0xffe00000UL, DecodeOpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116356 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116360 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116365 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116369 "isa_tms320.tcc"
	>(0x2c00000UL, 0xffe00000UL, DecodeOpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116373 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116377 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116382 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116386 "isa_tms320.tcc"
	>(0x2a00000UL, 0xffe00000UL, DecodeOpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116390 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116394 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116399 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116403 "isa_tms320.tcc"
	>(0x2800000UL, 0xffe0ffe0UL, DecodeOpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116407 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116411 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116416 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116420 "isa_tms320.tcc"
	>(0x2600000UL, 0xffe00000UL, DecodeOpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116424 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116428 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116433 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116437 "isa_tms320.tcc"
	>(0x2400000UL, 0xffe00000UL, DecodeOpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116441 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116445 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116450 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116454 "isa_tms320.tcc"
	>(0x2200000UL, 0xffe00000UL, DecodeOpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116462 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116467 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116471 "isa_tms320.tcc"
	>(0x2000000UL, 0xffe0ffe0UL, DecodeOpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116479 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116484 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116488 "isa_tms320.tcc"
	>(0x1e00000UL, 0xfff80000UL, DecodeOpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116492 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116496 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116501 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116505 "isa_tms320.tcc"
	>(0x1c00000UL, 0xfff80000UL, DecodeOpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116513 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116518 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116522 "isa_tms320.tcc"
	>(0x1a00000UL, 0xfff80000UL, DecodeOpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116526 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116530 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116535 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116539 "isa_tms320.tcc"
	>(0x1800000UL, 0xfff8fff8UL, DecodeOpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116543 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116547 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116552 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116556 "isa_tms320.tcc"
	>(0x1600000UL, 0xffe00000UL, DecodeOpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116560 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116564 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116569 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116573 "isa_tms320.tcc"
	>(0x1400000UL, 0xffe00000UL, DecodeOpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116577 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116581 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116586 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116590 "isa_tms320.tcc"
	>(0x1200000UL, 0xffe00000UL, DecodeOpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116594 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116598 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116603 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116607 "isa_tms320.tcc"
	>(0x1000000UL, 0xffe0ffe0UL, DecodeOpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116611 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116615 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116620 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116624 "isa_tms320.tcc"
	>(0xe00000UL, 0xffe00000UL, DecodeOpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116632 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116637 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116641 "isa_tms320.tcc"
	>(0xc00000UL, 0xffe00000UL, DecodeOpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116645 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116649 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116654 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116658 "isa_tms320.tcc"
	>(0xa00000UL, 0xffe00000UL, DecodeOpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116662 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116666 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116671 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116675 "isa_tms320.tcc"
	>(0x800000UL, 0xffe0ffe0UL, DecodeOpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116679 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116683 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116688 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116692 "isa_tms320.tcc"
	>(0x600000UL, 0xfff80000UL, DecodeOpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116696 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116700 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116705 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116709 "isa_tms320.tcc"
	>(0x400000UL, 0xfff80000UL, DecodeOpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116713 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116717 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116722 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116726 "isa_tms320.tcc"
	>(0x200000UL, 0xfff80000UL, DecodeOpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116730 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116734 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116739 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116743 "isa_tms320.tcc"
	>(0x0UL, 0xfff8fff8UL, DecodeOpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116747 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116751 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116756 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116760 "isa_tms320.tcc"
	>(0x15400000UL, 0xffe00000UL, DecodeOpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116764 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116768 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116773 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116777 "isa_tms320.tcc"
	>(0x15200000UL, 0xffe00000UL, DecodeOpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116781 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116785 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116790 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116794 "isa_tms320.tcc"
	>(0x14400000UL, 0xfff80000UL, DecodeOpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116798 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116802 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116807 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116811 "isa_tms320.tcc"
	>(0x14200000UL, 0xffe00000UL, DecodeOpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116815 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116819 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116824 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116828 "isa_tms320.tcc"
	>(0xfa00000UL, 0xfff8ffffUL, DecodeOpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116832 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116836 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116841 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116845 "isa_tms320.tcc"
	>(0xf200000UL, 0xffe0ffffUL, DecodeOpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116849 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116853 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116858 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116862 "isa_tms320.tcc"
	>(0xea00000UL, 0xfff8ffffUL, DecodeOpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116866 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116870 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116875 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116879 "isa_tms320.tcc"
	>(0xe200000UL, 0xffe0ffffUL, DecodeOpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116883 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116887 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116892 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116896 "isa_tms320.tcc"
	>(0x8700000UL, 0xffffff00UL, DecodeOpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116900 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116904 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116909 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116913 "isa_tms320.tcc"
	>(0x9600000UL, 0xfff8f000UL, DecodeOpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116917 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116921 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116926 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116930 "isa_tms320.tcc"
	>(0x9400000UL, 0xfff80000UL, DecodeOpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116934 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116938 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116943 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116947 "isa_tms320.tcc"
	>(0x9200000UL, 0xfff80000UL, DecodeOpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116951 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116955 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116960 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116964 "isa_tms320.tcc"
	>(0x9000000UL, 0xfff8ffe0UL, DecodeOpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116968 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116972 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116977 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116981 "isa_tms320.tcc"
	>(0x50600000UL, 0xf0600000UL, DecodeOpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116985 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116989 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116994 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116998 "isa_tms320.tcc"
	>(0x50400000UL, 0xf0600000UL, DecodeOpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117002 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117006 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117011 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117015 "isa_tms320.tcc"
	>(0x50200000UL, 0xf0600000UL, DecodeOpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117019 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117023 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117028 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117032 "isa_tms320.tcc"
	>(0x50000000UL, 0xf060ffe0UL, DecodeOpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117036 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117040 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117045 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117049 "isa_tms320.tcc"
	>(0x8600000UL, 0xffe00000UL, DecodeOpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117053 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117057 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117062 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117066 "isa_tms320.tcc"
	>(0x8400000UL, 0xffe00000UL, DecodeOpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117074 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117079 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117083 "isa_tms320.tcc"
	>(0x8200000UL, 0xffe00000UL, DecodeOpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117091 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117096 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117100 "isa_tms320.tcc"
	>(0x8000000UL, 0xffe0ffe0UL, DecodeOpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117104 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117108 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117113 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117117 "isa_tms320.tcc"
	>(0x40600000UL, 0xf0780000UL, DecodeOpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117121 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117125 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117130 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117134 "isa_tms320.tcc"
	>(0x40400000UL, 0xf0780000UL, DecodeOpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117142 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117151 "isa_tms320.tcc"
	>(0x40200000UL, 0xf0780000UL, DecodeOpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117155 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117159 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117164 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117168 "isa_tms320.tcc"
	>(0x40000000UL, 0xf078ffe0UL, DecodeOpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117172 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117176 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117181 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117185 "isa_tms320.tcc"
	>(0x7600000UL, 0xfff80000UL, DecodeOpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117189 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117193 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117198 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117202 "isa_tms320.tcc"
	>(0x7400000UL, 0xfff80000UL, DecodeOpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117206 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117210 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117215 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117219 "isa_tms320.tcc"
	>(0x7200000UL, 0xfff80000UL, DecodeOpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117227 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117232 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117236 "isa_tms320.tcc"
	>(0x7000000UL, 0xfff8ffe0UL, DecodeOpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117240 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117244 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117249 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117253 "isa_tms320.tcc"
	>(0x6e00000UL, 0xfff80000UL, DecodeOpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117257 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117261 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117266 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117270 "isa_tms320.tcc"
	>(0x6c00000UL, 0xfff80000UL, DecodeOpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117274 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117278 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117283 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117287 "isa_tms320.tcc"
	>(0x6a00000UL, 0xfff80000UL, DecodeOpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117291 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117295 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117300 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117304 "isa_tms320.tcc"
	>(0x6800000UL, 0xfff8ffe0UL, DecodeOpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117312 "isa_tms320.tcc"
	>));
}

template <
#line 45 "isa/tms320.isa"
class
#line 117319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117329 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117338 "isa_tms320.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 45 "isa/tms320.isa"
class
#line 117347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117357 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 117362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117366 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117374 "isa_tms320.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117380 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117384 "isa_tms320.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117399 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117403 "isa_tms320.tcc"
	>(code, addr, "???");
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 117411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117421 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117430 "isa_tms320.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 117440 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 117444 "isa_tms320.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 117463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117473 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117482 "isa_tms320.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117491 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117495 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 117528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117538 "isa_tms320.tcc"
>
inline DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 117543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117547 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117555 "isa_tms320.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117567 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 117601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117611 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 117616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117620 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117628 "isa_tms320.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117634 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117638 "isa_tms320.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117644 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117648 "isa_tms320.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 117656 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 117660 "isa_tms320.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 117682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117692 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117701 "isa_tms320.tcc"
>::SetLittleEndian()
{
	is_little_endian = true;
}

template <
#line 45 "isa/tms320.isa"
class
#line 117710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117720 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117729 "isa_tms320.tcc"
>::SetBigEndian()
{
	is_little_endian = false;
}

} } } } } } }
